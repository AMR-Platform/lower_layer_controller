
avr_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  0000340c  000034a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000340c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a0  0080016a  0080016a  0000350a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000350a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c63  00000000  00000000  00003908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015d9  00000000  00000000  0000756b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002353  00000000  00000000  00008b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b6c  00000000  00000000  0000ae98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010b2  00000000  00000000  0000ba04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cc9  00000000  00000000  0000cab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  0001077f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__ctors_end>
       4:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_1>
       8:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_2>
       c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      10:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      14:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      18:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      1c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      20:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      24:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_9>
      28:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__vector_10>
      2c:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_11>
      30:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      34:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      38:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      3c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      40:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      44:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_17>
      48:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      4c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      50:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      54:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      58:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      5c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      60:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      64:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      68:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      6c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      70:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      74:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      78:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      7c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      80:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__vector_32>
      84:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      88:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      8c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      90:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      94:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      98:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      9c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      a0:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_40>
      a4:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      a8:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      ac:	2c 05       	cpc	r18, r12
      ae:	18 05       	cpc	r17, r8
      b0:	3f 05       	cpc	r19, r15
      b2:	18 05       	cpc	r17, r8
      b4:	3f 05       	cpc	r19, r15
      b6:	3f 05       	cpc	r19, r15
      b8:	2c 05       	cpc	r18, r12
      ba:	2c 05       	cpc	r18, r12
      bc:	3f 05       	cpc	r19, r15
      be:	3f 05       	cpc	r19, r15
      c0:	18 05       	cpc	r17, r8
      c2:	3f 05       	cpc	r19, r15
      c4:	18 05       	cpc	r17, r8
      c6:	2c 05       	cpc	r18, r12
      c8:	92 05       	cpc	r25, r2
      ca:	7e 05       	cpc	r23, r14
      cc:	a5 05       	cpc	r26, r5
      ce:	7e 05       	cpc	r23, r14
      d0:	a5 05       	cpc	r26, r5
      d2:	a5 05       	cpc	r26, r5
      d4:	92 05       	cpc	r25, r2
      d6:	92 05       	cpc	r25, r2
      d8:	a5 05       	cpc	r26, r5
      da:	a5 05       	cpc	r26, r5
      dc:	7e 05       	cpc	r23, r14
      de:	a5 05       	cpc	r26, r5
      e0:	7e 05       	cpc	r23, r14
      e2:	92 05       	cpc	r25, r2
      e4:	f9 05       	cpc	r31, r9
      e6:	e5 05       	cpc	r30, r5
      e8:	0c 06       	cpc	r0, r28
      ea:	e5 05       	cpc	r30, r5
      ec:	0c 06       	cpc	r0, r28
      ee:	0c 06       	cpc	r0, r28
      f0:	f9 05       	cpc	r31, r9
      f2:	f9 05       	cpc	r31, r9
      f4:	0c 06       	cpc	r0, r28
      f6:	0c 06       	cpc	r0, r28
      f8:	e5 05       	cpc	r30, r5
      fa:	0c 06       	cpc	r0, r28
      fc:	e5 05       	cpc	r30, r5
      fe:	f9 05       	cpc	r31, r9

00000100 <__trampolines_end>:
     100:	6e 61       	ori	r22, 0x1E	; 30
     102:	6e 00       	.word	0x006e	; ????

00000104 <__c.2332>:
     104:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     114:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     124:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     134:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     144:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     154:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     164:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     174:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     184:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     194:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1a4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1b4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1c4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1d4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1e4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1f4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000202 <__c.2474>:
     202:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000020e <__c.2443>:
     20e:	49 4d 55 20 46 61 69 6c 65 64 0d 0a 00              IMU Failed...

0000021b <__c.2441>:
     21b:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

00000226 <__c.2439>:
     226:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

00000231 <descriptor_list>:
     231:	00 01 00 00 c8 02 12 00 02 00 00 85 02 43 00 03     .............C..
     241:	00 00 81 02 04 01 03 09 04 6d 02 12 02 03 09 04     .........m......
     251:	65 02 06 03 03 09 04 5b 02 08                       e......[..

0000025b <string3>:
     25b:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000265 <string2>:
     265:	06 03 4d 00 32 00 00 00                             ..M.2...

0000026d <string1>:
     26d:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     27d:	65 00 00 00                                         e...

00000281 <string0>:
     281:	04 03 09 04                                         ....

00000285 <config1_descriptor>:
     285:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     295:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     2a5:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     2b5:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     2c5:	40 00 00                                            @..

000002c8 <device_descriptor>:
     2c8:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     2d8:	03 01                                               ..

000002da <endpoint_config_table>:
     2da:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000002e4 <__ctors_end>:
     2e4:	11 24       	eor	r1, r1
     2e6:	1f be       	out	0x3f, r1	; 63
     2e8:	cf ef       	ldi	r28, 0xFF	; 255
     2ea:	da e0       	ldi	r29, 0x0A	; 10
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	cd bf       	out	0x3d, r28	; 61

000002f0 <__do_copy_data>:
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	a0 e0       	ldi	r26, 0x00	; 0
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	ec e0       	ldi	r30, 0x0C	; 12
     2f8:	f4 e3       	ldi	r31, 0x34	; 52
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <__do_copy_data+0x10>
     2fc:	05 90       	lpm	r0, Z+
     2fe:	0d 92       	st	X+, r0
     300:	aa 36       	cpi	r26, 0x6A	; 106
     302:	b1 07       	cpc	r27, r17
     304:	d9 f7       	brne	.-10     	; 0x2fc <__do_copy_data+0xc>

00000306 <__do_clear_bss>:
     306:	22 e0       	ldi	r18, 0x02	; 2
     308:	aa e6       	ldi	r26, 0x6A	; 106
     30a:	b1 e0       	ldi	r27, 0x01	; 1
     30c:	01 c0       	rjmp	.+2      	; 0x310 <.do_clear_bss_start>

0000030e <.do_clear_bss_loop>:
     30e:	1d 92       	st	X+, r1

00000310 <.do_clear_bss_start>:
     310:	aa 30       	cpi	r26, 0x0A	; 10
     312:	b2 07       	cpc	r27, r18
     314:	e1 f7       	brne	.-8      	; 0x30e <.do_clear_bss_loop>
     316:	0e 94 39 03 	call	0x672	; 0x672 <main>
     31a:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <_exit>

0000031e <__bad_interrupt>:
     31e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000322 <timer3_init_50Hz>:
/* --------------------- TIMER-3 INITIALISATION (CTC, 50 Hz) ------------------
   16 MHz / 256 prescale = 62 500 Hz
   62 500 Hz 0.02 s = 1 250 counts ? OCR3A = 1249               */
static void timer3_init_50Hz(void)
{
    TCCR3A = 0;                          /* normal port operation       */
     322:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    TCCR3B = (1 << WGM32) | (1 << CS32); /* CTC, prescaler = 256        */
     326:	8c e0       	ldi	r24, 0x0C	; 12
     328:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    OCR3A = 1249;
     32c:	81 ee       	ldi	r24, 0xE1	; 225
     32e:	94 e0       	ldi	r25, 0x04	; 4
     330:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
     334:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
    TIMSK3 = (1 << OCIE3A); /* enable compare-match A IRQ  */
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f8071>
     33e:	08 95       	ret

00000340 <parse_jetson_line>:

    extern float rx_distance, rx_angle, rx_lin_acc, rx_max_ang_acc;
    extern uint16_t rx_max_vel, rx_max_omega, rx_last_vel, rx_last_omega;

    // Note: "%f" for floats, "%u" for uint16_t on AVR
    int cnt = sscanf(line,
     340:	2a e6       	ldi	r18, 0x6A	; 106
     342:	31 e0       	ldi	r19, 0x01	; 1
     344:	3f 93       	push	r19
     346:	2f 93       	push	r18
     348:	2e e6       	ldi	r18, 0x6E	; 110
     34a:	31 e0       	ldi	r19, 0x01	; 1
     34c:	3f 93       	push	r19
     34e:	2f 93       	push	r18
     350:	22 e7       	ldi	r18, 0x72	; 114
     352:	31 e0       	ldi	r19, 0x01	; 1
     354:	3f 93       	push	r19
     356:	2f 93       	push	r18
     358:	24 e7       	ldi	r18, 0x74	; 116
     35a:	31 e0       	ldi	r19, 0x01	; 1
     35c:	3f 93       	push	r19
     35e:	2f 93       	push	r18
     360:	26 e7       	ldi	r18, 0x76	; 118
     362:	31 e0       	ldi	r19, 0x01	; 1
     364:	3f 93       	push	r19
     366:	2f 93       	push	r18
     368:	28 e7       	ldi	r18, 0x78	; 120
     36a:	31 e0       	ldi	r19, 0x01	; 1
     36c:	3f 93       	push	r19
     36e:	2f 93       	push	r18
     370:	2a e7       	ldi	r18, 0x7A	; 122
     372:	31 e0       	ldi	r19, 0x01	; 1
     374:	3f 93       	push	r19
     376:	2f 93       	push	r18
     378:	2e e7       	ldi	r18, 0x7E	; 126
     37a:	31 e0       	ldi	r19, 0x01	; 1
     37c:	3f 93       	push	r19
     37e:	2f 93       	push	r18
     380:	27 e0       	ldi	r18, 0x07	; 7
     382:	31 e0       	ldi	r19, 0x01	; 1
     384:	3f 93       	push	r19
     386:	2f 93       	push	r18
     388:	9f 93       	push	r25
     38a:	8f 93       	push	r24
     38c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <sscanf>
                     &rx_max_omega,
                     &rx_last_vel,
                     &rx_last_omega,
                     &rx_lin_acc,
                     &rx_max_ang_acc);
    return (cnt == 8) ? 1 : 0;
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	4d b7       	in	r20, 0x3d	; 61
     394:	5e b7       	in	r21, 0x3e	; 62
     396:	4c 5e       	subi	r20, 0xEC	; 236
     398:	5f 4f       	sbci	r21, 0xFF	; 255
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	5e bf       	out	0x3e, r21	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	4d bf       	out	0x3d, r20	; 61
     3a4:	08 97       	sbiw	r24, 0x08	; 8
     3a6:	09 f0       	breq	.+2      	; 0x3aa <parse_jetson_line+0x6a>
     3a8:	20 e0       	ldi	r18, 0x00	; 0
}
     3aa:	82 2f       	mov	r24, r18
     3ac:	08 95       	ret

000003ae <receive_from_jetson>:

static void receive_from_jetson(void)
{
    while (m_usb_rx_available())
     3ae:	21 c0       	rjmp	.+66     	; 0x3f2 <receive_from_jetson+0x44>
    {
        char c = m_usb_rx_char();
     3b0:	0e 94 67 09 	call	0x12ce	; 0x12ce <m_usb_rx_char>
        // start parsing if new line detected
        if (c == '\n' || c == '\r')
     3b4:	8a 30       	cpi	r24, 0x0A	; 10
     3b6:	11 f0       	breq	.+4      	; 0x3bc <receive_from_jetson+0xe>
     3b8:	8d 30       	cpi	r24, 0x0D	; 13
     3ba:	79 f4       	brne	.+30     	; 0x3da <receive_from_jetson+0x2c>
        {
            if (rx_index > 0)
     3bc:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <rx_index>
     3c0:	ee 23       	and	r30, r30
     3c2:	b9 f0       	breq	.+46     	; 0x3f2 <receive_from_jetson+0x44>
            {
                rx_buf[rx_index] = '\0';
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	ec 57       	subi	r30, 0x7C	; 124
     3c8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ca:	10 82       	st	Z, r1
                if (parse_jetson_line(rx_buf))
     3cc:	84 e8       	ldi	r24, 0x84	; 132
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 a0 01 	call	0x340	; 0x340 <parse_jetson_line>
                {
                }
                rx_index = 0;
     3d4:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <rx_index>
     3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <receive_from_jetson+0x44>
            }
        }
        else if (rx_index < (RX_BUF_SIZE - 1))
     3da:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <rx_index>
     3de:	ef 33       	cpi	r30, 0x3F	; 63
     3e0:	40 f4       	brcc	.+16     	; 0x3f2 <receive_from_jetson+0x44>
        {
            rx_buf[rx_index++] = c;
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	9e 0f       	add	r25, r30
     3e6:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <rx_index>
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	ec 57       	subi	r30, 0x7C	; 124
     3ee:	fe 4f       	sbci	r31, 0xFE	; 254
     3f0:	80 83       	st	Z, r24
    return (cnt == 8) ? 1 : 0;
}

static void receive_from_jetson(void)
{
    while (m_usb_rx_available())
     3f2:	0e 94 85 09 	call	0x130a	; 0x130a <m_usb_rx_available>
     3f6:	81 11       	cpse	r24, r1
     3f8:	db cf       	rjmp	.-74     	; 0x3b0 <receive_from_jetson+0x2>
        else if (rx_index < (RX_BUF_SIZE - 1))
        {
            rx_buf[rx_index++] = c;
        }
    }
}
     3fa:	08 95       	ret

000003fc <usb_send_ram>:
    m_usb_tx_push();
}

/* ------------------- Tiny helper ------------------------- */
static void usb_send_ram(const char *s)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	ec 01       	movw	r28, r24
    while (*s)
     402:	03 c0       	rjmp	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
        m_usb_tx_char(*s++);
     404:	21 96       	adiw	r28, 0x01	; 1
     406:	0e 94 94 09 	call	0x1328	; 0x1328 <m_usb_tx_char>
}

/* ------------------- Tiny helper ------------------------- */
static void usb_send_ram(const char *s)
{
    while (*s)
     40a:	88 81       	ld	r24, Y
     40c:	81 11       	cpse	r24, r1
     40e:	fa cf       	rjmp	.-12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
        m_usb_tx_char(*s++);
}
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <send_telemetry>:
    send_telemetry(); /* quick! no heavy work here   */
}

/* ------------------- TELEMETRY SENDER (called from main) ----------------- */
static void send_telemetry(void)
{
     416:	2f 92       	push	r2
     418:	3f 92       	push	r3
     41a:	4f 92       	push	r4
     41c:	5f 92       	push	r5
     41e:	6f 92       	push	r6
     420:	7f 92       	push	r7
     422:	8f 92       	push	r8
     424:	9f 92       	push	r9
     426:	af 92       	push	r10
     428:	bf 92       	push	r11
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	c0 5b       	subi	r28, 0xB0	; 176
     440:	d1 09       	sbc	r29, r1
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
    char line[160];

    /* ---------- IMU ---------- */
    int16_t h16, r16, p16;
    bno055_get_euler(&h16, &r16, &p16);
     44c:	ae 01       	movw	r20, r28
     44e:	4b 55       	subi	r20, 0x5B	; 91
     450:	5f 4f       	sbci	r21, 0xFF	; 255
     452:	be 01       	movw	r22, r28
     454:	6d 55       	subi	r22, 0x5D	; 93
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	ce 01       	movw	r24, r28
     45a:	8f 55       	subi	r24, 0x5F	; 95
     45c:	9f 4f       	sbci	r25, 0xFF	; 255
     45e:	0e 94 79 07 	call	0xef2	; 0xef2 <bno055_get_euler>

    float h = h16 / 16.0f;
     462:	cf 55       	subi	r28, 0x5F	; 95
     464:	df 4f       	sbci	r29, 0xFF	; 255
     466:	68 81       	ld	r22, Y
     468:	79 81       	ldd	r23, Y+1	; 0x01
     46a:	c1 5a       	subi	r28, 0xA1	; 161
     46c:	d0 40       	sbci	r29, 0x00	; 0
     46e:	07 2e       	mov	r0, r23
     470:	00 0c       	add	r0, r0
     472:	88 0b       	sbc	r24, r24
     474:	99 0b       	sbc	r25, r25
     476:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__floatsisf>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e8       	ldi	r20, 0x80	; 128
     480:	5d e3       	ldi	r21, 0x3D	; 61
     482:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
     486:	c9 55       	subi	r28, 0x59	; 89
     488:	df 4f       	sbci	r29, 0xFF	; 255
     48a:	68 83       	st	Y, r22
     48c:	c7 5a       	subi	r28, 0xA7	; 167
     48e:	d0 40       	sbci	r29, 0x00	; 0
     490:	c8 55       	subi	r28, 0x58	; 88
     492:	df 4f       	sbci	r29, 0xFF	; 255
     494:	78 83       	st	Y, r23
     496:	c8 5a       	subi	r28, 0xA8	; 168
     498:	d0 40       	sbci	r29, 0x00	; 0
     49a:	c7 55       	subi	r28, 0x57	; 87
     49c:	df 4f       	sbci	r29, 0xFF	; 255
     49e:	88 83       	st	Y, r24
     4a0:	c9 5a       	subi	r28, 0xA9	; 169
     4a2:	d0 40       	sbci	r29, 0x00	; 0
     4a4:	c6 55       	subi	r28, 0x56	; 86
     4a6:	df 4f       	sbci	r29, 0xFF	; 255
     4a8:	98 83       	st	Y, r25
     4aa:	ca 5a       	subi	r28, 0xAA	; 170
     4ac:	d0 40       	sbci	r29, 0x00	; 0
    float r = r16 / 16.0f;
     4ae:	cd 55       	subi	r28, 0x5D	; 93
     4b0:	df 4f       	sbci	r29, 0xFF	; 255
     4b2:	68 81       	ld	r22, Y
     4b4:	79 81       	ldd	r23, Y+1	; 0x01
     4b6:	c3 5a       	subi	r28, 0xA3	; 163
     4b8:	d0 40       	sbci	r29, 0x00	; 0
     4ba:	07 2e       	mov	r0, r23
     4bc:	00 0c       	add	r0, r0
     4be:	88 0b       	sbc	r24, r24
     4c0:	99 0b       	sbc	r25, r25
     4c2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__floatsisf>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e8       	ldi	r20, 0x80	; 128
     4cc:	5d e3       	ldi	r21, 0x3D	; 61
     4ce:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
     4d2:	c5 55       	subi	r28, 0x55	; 85
     4d4:	df 4f       	sbci	r29, 0xFF	; 255
     4d6:	68 83       	st	Y, r22
     4d8:	cb 5a       	subi	r28, 0xAB	; 171
     4da:	d0 40       	sbci	r29, 0x00	; 0
     4dc:	c4 55       	subi	r28, 0x54	; 84
     4de:	df 4f       	sbci	r29, 0xFF	; 255
     4e0:	78 83       	st	Y, r23
     4e2:	cc 5a       	subi	r28, 0xAC	; 172
     4e4:	d0 40       	sbci	r29, 0x00	; 0
     4e6:	c3 55       	subi	r28, 0x53	; 83
     4e8:	df 4f       	sbci	r29, 0xFF	; 255
     4ea:	88 83       	st	Y, r24
     4ec:	cd 5a       	subi	r28, 0xAD	; 173
     4ee:	d0 40       	sbci	r29, 0x00	; 0
     4f0:	c2 55       	subi	r28, 0x52	; 82
     4f2:	df 4f       	sbci	r29, 0xFF	; 255
     4f4:	98 83       	st	Y, r25
     4f6:	ce 5a       	subi	r28, 0xAE	; 174
     4f8:	d0 40       	sbci	r29, 0x00	; 0
    float p = p16 / 16.0f;
     4fa:	cb 55       	subi	r28, 0x5B	; 91
     4fc:	df 4f       	sbci	r29, 0xFF	; 255
     4fe:	68 81       	ld	r22, Y
     500:	79 81       	ldd	r23, Y+1	; 0x01
     502:	c5 5a       	subi	r28, 0xA5	; 165
     504:	d0 40       	sbci	r29, 0x00	; 0
     506:	07 2e       	mov	r0, r23
     508:	00 0c       	add	r0, r0
     50a:	88 0b       	sbc	r24, r24
     50c:	99 0b       	sbc	r25, r25
     50e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__floatsisf>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e8       	ldi	r20, 0x80	; 128
     518:	5d e3       	ldi	r21, 0x3D	; 61
     51a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
     51e:	c1 55       	subi	r28, 0x51	; 81
     520:	df 4f       	sbci	r29, 0xFF	; 255
     522:	68 83       	st	Y, r22
     524:	cf 5a       	subi	r28, 0xAF	; 175
     526:	d0 40       	sbci	r29, 0x00	; 0
     528:	c0 55       	subi	r28, 0x50	; 80
     52a:	df 4f       	sbci	r29, 0xFF	; 255
     52c:	78 83       	st	Y, r23
     52e:	c0 5b       	subi	r28, 0xB0	; 176
     530:	d0 40       	sbci	r29, 0x00	; 0
     532:	18 2f       	mov	r17, r24
     534:	09 2f       	mov	r16, r25

    // uint8_t cal = bno055_is_fully_calibrated() ? 1u : 0u;

    /* ---------- ADC ---------- */
    uint16_t vbat_main = analog_get_battery_1_mV();
     536:	0e 94 57 04 	call	0x8ae	; 0x8ae <analog_get_battery_1_mV>
     53a:	f8 2e       	mov	r15, r24
     53c:	e9 2e       	mov	r14, r25
    uint16_t vbat_aux = analog_get_battery_2_mV();
     53e:	0e 94 67 04 	call	0x8ce	; 0x8ce <analog_get_battery_2_mV>
     542:	d8 2e       	mov	r13, r24
     544:	c9 2e       	mov	r12, r25
    uint16_t cliffL = analog_get_cliff_left();
     546:	0e 94 77 04 	call	0x8ee	; 0x8ee <analog_get_cliff_left>
     54a:	b8 2e       	mov	r11, r24
     54c:	a9 2e       	mov	r10, r25
    uint16_t cliffF = analog_get_cliff_front();
     54e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <analog_get_cliff_front>
     552:	98 2e       	mov	r9, r24
     554:	89 2e       	mov	r8, r25
    uint16_t cliffR = analog_get_cliff_right();
     556:	0e 94 7f 04 	call	0x8fe	; 0x8fe <analog_get_cliff_right>
     55a:	78 2e       	mov	r7, r24
     55c:	69 2e       	mov	r6, r25

    /* ---------- Encoders ---------- */
    int32_t encL = encoder_get_left();
     55e:	0e 94 1b 06 	call	0xc36	; 0xc36 <encoder_get_left>
     562:	56 2e       	mov	r5, r22
     564:	47 2e       	mov	r4, r23
     566:	38 2e       	mov	r3, r24
     568:	29 2e       	mov	r2, r25
    int32_t encR = encoder_get_right();
     56a:	0e 94 26 06 	call	0xc4c	; 0xc4c <encoder_get_right>

    /* ---------- Format & ship ---------- */
    snprintf(line, sizeof(line),
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	7f 93       	push	r23
     574:	6f 93       	push	r22
     576:	2f 92       	push	r2
     578:	3f 92       	push	r3
     57a:	4f 92       	push	r4
     57c:	5f 92       	push	r5
     57e:	6f 92       	push	r6
     580:	7f 92       	push	r7
     582:	8f 92       	push	r8
     584:	9f 92       	push	r9
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	c0 55       	subi	r28, 0x50	; 80
     598:	df 4f       	sbci	r29, 0xFF	; 255
     59a:	88 81       	ld	r24, Y
     59c:	c0 5b       	subi	r28, 0xB0	; 176
     59e:	d0 40       	sbci	r29, 0x00	; 0
     5a0:	8f 93       	push	r24
     5a2:	c1 55       	subi	r28, 0x51	; 81
     5a4:	df 4f       	sbci	r29, 0xFF	; 255
     5a6:	98 81       	ld	r25, Y
     5a8:	cf 5a       	subi	r28, 0xAF	; 175
     5aa:	d0 40       	sbci	r29, 0x00	; 0
     5ac:	9f 93       	push	r25
     5ae:	c2 55       	subi	r28, 0x52	; 82
     5b0:	df 4f       	sbci	r29, 0xFF	; 255
     5b2:	88 81       	ld	r24, Y
     5b4:	ce 5a       	subi	r28, 0xAE	; 174
     5b6:	d0 40       	sbci	r29, 0x00	; 0
     5b8:	8f 93       	push	r24
     5ba:	c3 55       	subi	r28, 0x53	; 83
     5bc:	df 4f       	sbci	r29, 0xFF	; 255
     5be:	98 81       	ld	r25, Y
     5c0:	cd 5a       	subi	r28, 0xAD	; 173
     5c2:	d0 40       	sbci	r29, 0x00	; 0
     5c4:	9f 93       	push	r25
     5c6:	c4 55       	subi	r28, 0x54	; 84
     5c8:	df 4f       	sbci	r29, 0xFF	; 255
     5ca:	88 81       	ld	r24, Y
     5cc:	cc 5a       	subi	r28, 0xAC	; 172
     5ce:	d0 40       	sbci	r29, 0x00	; 0
     5d0:	8f 93       	push	r24
     5d2:	c5 55       	subi	r28, 0x55	; 85
     5d4:	df 4f       	sbci	r29, 0xFF	; 255
     5d6:	98 81       	ld	r25, Y
     5d8:	cb 5a       	subi	r28, 0xAB	; 171
     5da:	d0 40       	sbci	r29, 0x00	; 0
     5dc:	9f 93       	push	r25
     5de:	c6 55       	subi	r28, 0x56	; 86
     5e0:	df 4f       	sbci	r29, 0xFF	; 255
     5e2:	88 81       	ld	r24, Y
     5e4:	ca 5a       	subi	r28, 0xAA	; 170
     5e6:	d0 40       	sbci	r29, 0x00	; 0
     5e8:	8f 93       	push	r24
     5ea:	c7 55       	subi	r28, 0x57	; 87
     5ec:	df 4f       	sbci	r29, 0xFF	; 255
     5ee:	98 81       	ld	r25, Y
     5f0:	c9 5a       	subi	r28, 0xA9	; 169
     5f2:	d0 40       	sbci	r29, 0x00	; 0
     5f4:	9f 93       	push	r25
     5f6:	c8 55       	subi	r28, 0x58	; 88
     5f8:	df 4f       	sbci	r29, 0xFF	; 255
     5fa:	88 81       	ld	r24, Y
     5fc:	c8 5a       	subi	r28, 0xA8	; 168
     5fe:	d0 40       	sbci	r29, 0x00	; 0
     600:	8f 93       	push	r24
     602:	c9 55       	subi	r28, 0x59	; 89
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	98 81       	ld	r25, Y
     608:	c7 5a       	subi	r28, 0xA7	; 167
     60a:	d0 40       	sbci	r29, 0x00	; 0
     60c:	9f 93       	push	r25
     60e:	8f e1       	ldi	r24, 0x1F	; 31
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	1f 92       	push	r1
     618:	80 ea       	ldi	r24, 0xA0	; 160
     61a:	8f 93       	push	r24
     61c:	8e 01       	movw	r16, r28
     61e:	0f 5f       	subi	r16, 0xFF	; 255
     620:	1f 4f       	sbci	r17, 0xFF	; 255
     622:	1f 93       	push	r17
     624:	0f 93       	push	r16
     626:	0e 94 42 16 	call	0x2c84	; 0x2c84 <snprintf>
             h, r, p,               /* argument now matches %u   */
             vbat_main, vbat_aux,
             cliffL, cliffF, cliffR,
             (long)encL, (long)encR); /* cast silences -format    */

    usb_send_ram(line);
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	c8 01       	movw	r24, r16
     636:	0e 94 fe 01 	call	0x3fc	; 0x3fc <usb_send_ram>
    m_usb_tx_push();
     63a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <m_usb_tx_push>
}
     63e:	c0 55       	subi	r28, 0x50	; 80
     640:	df 4f       	sbci	r29, 0xFF	; 255
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	ff 90       	pop	r15
     656:	ef 90       	pop	r14
     658:	df 90       	pop	r13
     65a:	cf 90       	pop	r12
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	7f 90       	pop	r7
     666:	6f 90       	pop	r6
     668:	5f 90       	pop	r5
     66a:	4f 90       	pop	r4
     66c:	3f 90       	pop	r3
     66e:	2f 90       	pop	r2
     670:	08 95       	ret

00000672 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     672:	2f ef       	ldi	r18, 0xFF	; 255
     674:	81 ee       	ldi	r24, 0xE1	; 225
     676:	94 e0       	ldi	r25, 0x04	; 4
     678:	21 50       	subi	r18, 0x01	; 1
     67a:	80 40       	sbci	r24, 0x00	; 0
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <main+0x6>
     680:	00 c0       	rjmp	.+0      	; 0x682 <main+0x10>
     682:	00 00       	nop
/* ====================================================*/
int main(void)
{
    /* ---- initialize everything ---- */
    _delay_ms(100);
    m_usb_init();
     684:	0e 94 4b 09 	call	0x1296	; 0x1296 <m_usb_init>

    // If usb handshake fails, this will block the entire execution of the code, remove at production ready code
    while (!m_usb_isconnected())
     688:	0e 94 64 09 	call	0x12c8	; 0x12c8 <m_usb_isconnected>
     68c:	88 23       	and	r24, r24
     68e:	e1 f3       	breq	.-8      	; 0x688 <main+0x16>
    {
    } /* wait for host terminal      */

    m_usb_tx_string("M2 ready\r\n");
     690:	86 e2       	ldi	r24, 0x26	; 38
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 97 0b 	call	0x172e	; 0x172e <print_P>

    motors_init();
     698:	0e 94 bc 07 	call	0xf78	; 0xf78 <motors_init>
    encoder_init();
     69c:	0e 94 83 04 	call	0x906	; 0x906 <encoder_init>
    analog_init();
     6a0:	0e 94 02 04 	call	0x804	; 0x804 <analog_init>

    motors_enable_left(true);
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 45 08 	call	0x108a	; 0x108a <motors_enable_left>
    motors_enable_right(true);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 4f 08 	call	0x109e	; 0x109e <motors_enable_right>
    // motors_set_speed_left(1000);
    // motors_set_speed_right(1000);
    //_delay_ms(20000);
    // motors_stop_all();

    m_usb_tx_string("M2 ready\r\n");
     6b0:	8b e1       	ldi	r24, 0x1B	; 27
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 97 0b 	call	0x172e	; 0x172e <print_P>

    twi_init();
     6b8:	0e 94 5d 06 	call	0xcba	; 0xcba <twi_init>
    if (!bno055_init())
     6bc:	0e 94 37 07 	call	0xe6e	; 0xe6e <bno055_init>
     6c0:	81 11       	cpse	r24, r1
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <main+0x5a>
    {
        m_usb_tx_string("IMU Failed\r\n");
     6c4:	8e e0       	ldi	r24, 0x0E	; 14
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	0e 94 97 0b 	call	0x172e	; 0x172e <print_P>
    }

    /* ---- start 50 Hz timer & enable global IRQs ---- */
    timer3_init_50Hz(); /* Timer-3 compare-match every 20 ms        */
     6cc:	0e 94 91 01 	call	0x322	; 0x322 <timer3_init_50Hz>
    sei();              /* global interrupt enable                 */
     6d0:	78 94       	sei

    /* ---------------- MAIN LOOP ---------------------- */
    while (1)
    {
        // check for any incoming Jetson data
        receive_from_jetson();
     6d2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <receive_from_jetson>

        if (profile_requested)
     6d6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <profile_requested>
     6da:	88 23       	and	r24, r24
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <main+0x6e>
     6de:	5f c0       	rjmp	.+190    	; 0x79e <main+0x12c>
        {
            // decide pure turn vs straight?line
            if (fabsf(rx_angle) > 0.01f && fabsf(rx_distance) < 1e-3f)
     6e0:	80 90 7a 01 	lds	r8, 0x017A	; 0x80017a <rx_angle>
     6e4:	90 90 7b 01 	lds	r9, 0x017B	; 0x80017b <rx_angle+0x1>
     6e8:	a0 90 7c 01 	lds	r10, 0x017C	; 0x80017c <rx_angle+0x2>
     6ec:	b0 90 7d 01 	lds	r11, 0x017D	; 0x80017d <rx_angle+0x3>
     6f0:	c5 01       	movw	r24, r10
     6f2:	b4 01       	movw	r22, r8
     6f4:	9f 77       	andi	r25, 0x7F	; 127
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	37 ed       	ldi	r19, 0xD7	; 215
     6fa:	43 e2       	ldi	r20, 0x23	; 35
     6fc:	5c e3       	ldi	r21, 0x3C	; 60
     6fe:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__gesf2>
     702:	18 16       	cp	r1, r24
     704:	64 f5       	brge	.+88     	; 0x75e <main+0xec>
     706:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <rx_distance>
     70a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <rx_distance+0x1>
     70e:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <rx_distance+0x2>
     712:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <rx_distance+0x3>
     716:	bc 01       	movw	r22, r24
     718:	cd 01       	movw	r24, r26
     71a:	9f 77       	andi	r25, 0x7F	; 127
     71c:	2f e6       	ldi	r18, 0x6F	; 111
     71e:	32 e1       	ldi	r19, 0x12	; 18
     720:	43 e8       	ldi	r20, 0x83	; 131
     722:	5a e3       	ldi	r21, 0x3A	; 58
     724:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__cmpsf2>
     728:	88 23       	and	r24, r24
     72a:	cc f4       	brge	.+50     	; 0x75e <main+0xec>
            {
                profiler_turn_init(rx_angle,
     72c:	c0 90 6a 01 	lds	r12, 0x016A	; 0x80016a <__data_end>
     730:	d0 90 6b 01 	lds	r13, 0x016B	; 0x80016b <__data_end+0x1>
     734:	e0 90 6c 01 	lds	r14, 0x016C	; 0x80016c <__data_end+0x2>
     738:	f0 90 6d 01 	lds	r15, 0x016D	; 0x80016d <__data_end+0x3>
     73c:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <rx_max_omega>
     740:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <rx_max_omega+0x1>
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__floatunsisf>
     74c:	9b 01       	movw	r18, r22
     74e:	ac 01       	movw	r20, r24
     750:	87 01       	movw	r16, r14
     752:	76 01       	movw	r14, r12
     754:	c5 01       	movw	r24, r10
     756:	b4 01       	movw	r22, r8
     758:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <profiler_turn_init>
     75c:	1e c0       	rjmp	.+60     	; 0x79a <main+0x128>
                                   rx_max_omega,
                                   rx_max_ang_acc);
            }
            else
            {
                profiler_init(rx_distance,
     75e:	80 90 6e 01 	lds	r8, 0x016E	; 0x80016e <rx_lin_acc>
     762:	90 90 6f 01 	lds	r9, 0x016F	; 0x80016f <rx_lin_acc+0x1>
     766:	a0 90 70 01 	lds	r10, 0x0170	; 0x800170 <rx_lin_acc+0x2>
     76a:	b0 90 71 01 	lds	r11, 0x0171	; 0x800171 <rx_lin_acc+0x3>
     76e:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <rx_max_vel>
     772:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <rx_max_vel+0x1>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__floatunsisf>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <rx_distance>
     786:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <rx_distance+0x1>
     78a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_distance+0x2>
     78e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <rx_distance+0x3>
     792:	85 01       	movw	r16, r10
     794:	74 01       	movw	r14, r8
     796:	0e 94 af 0b 	call	0x175e	; 0x175e <profiler_init>
                              rx_max_vel,
                              rx_lin_acc);
            }
            profile_requested = false;
     79a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <profile_requested>
        }

        if (profiler_turn_is_running())
     79e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <profiler_turn_is_running>
     7a2:	88 23       	and	r24, r24
     7a4:	19 f0       	breq	.+6      	; 0x7ac <main+0x13a>
        {
            profiler_turn_update();
     7a6:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <profiler_turn_update>
     7aa:	93 cf       	rjmp	.-218    	; 0x6d2 <main+0x60>
        }
        else if (profiler_is_running())
     7ac:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <profiler_is_running>
     7b0:	88 23       	and	r24, r24
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <main+0x144>
     7b4:	8e cf       	rjmp	.-228    	; 0x6d2 <main+0x60>
        {
            profiler_update();
     7b6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <profiler_update>
     7ba:	8b cf       	rjmp	.-234    	; 0x6d2 <main+0x60>

000007bc <__vector_32>:
    TIMSK3 = (1 << OCIE3A); /* enable compare-match A IRQ  */
}

/* ------------------------- TIMER-3 COMPARE ISR --------------------------- */
ISR(TIMER3_COMPA_vect)
{
     7bc:	1f 92       	push	r1
     7be:	0f 92       	push	r0
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	0f 92       	push	r0
     7c4:	11 24       	eor	r1, r1
     7c6:	2f 93       	push	r18
     7c8:	3f 93       	push	r19
     7ca:	4f 93       	push	r20
     7cc:	5f 93       	push	r21
     7ce:	6f 93       	push	r22
     7d0:	7f 93       	push	r23
     7d2:	8f 93       	push	r24
     7d4:	9f 93       	push	r25
     7d6:	af 93       	push	r26
     7d8:	bf 93       	push	r27
     7da:	ef 93       	push	r30
     7dc:	ff 93       	push	r31
    send_telemetry(); /* quick! no heavy work here   */
     7de:	0e 94 0b 02 	call	0x416	; 0x416 <send_telemetry>
}
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	0f 90       	pop	r0
     800:	1f 90       	pop	r1
     802:	18 95       	reti

00000804 <analog_init>:

/* ------------------------------------------------------- */
void analog_init(void)
{
	/* AVcc reference, right-adjust, start on channel 0 */
	ADMUX  = (1<<REFS0);            /* AVcc with ext. cap on AREF */
     804:	ec e7       	ldi	r30, 0x7C	; 124
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 e4       	ldi	r24, 0x40	; 64
     80a:	80 83       	st	Z, r24

static inline void adc_select_channel(uint8_t ch)
{
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
     80c:	80 81       	ld	r24, Z
     80e:	80 7f       	andi	r24, 0xF0	; 240
     810:	80 83       	st	Z, r24
		ADCSRB &= ~(1<<MUX5);
     812:	eb e7       	ldi	r30, 0x7B	; 123
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	8f 7d       	andi	r24, 0xDF	; 223
     81a:	80 83       	st	Z, r24
	/* AVcc reference, right-adjust, start on channel 0 */
	ADMUX  = (1<<REFS0);            /* AVcc with ext. cap on AREF */
	adc_select_channel(0);

	/* prescaler, enable, no free-running */
	ADCSRA = (1<<ADEN) | ADC_PRESCALER_BITS;
     81c:	87 e8       	ldi	r24, 0x87	; 135
     81e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	/* Disable digital input buffers on the used analog pins to save power/noise */
	DIDR0 =  (1<<ADC0D) | (1<<ADC1D) | (1<<ADC4D) | (1<<ADC5D) | (1<<ADC6D);
     822:	83 e7       	ldi	r24, 0x73	; 115
     824:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     828:	08 95       	ret

0000082a <analog_read_raw>:
#include <avr/io.h>

static inline void adc_select_channel(uint8_t ch)
{
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
     82a:	88 30       	cpi	r24, 0x08	; 8
     82c:	80 f4       	brcc	.+32     	; 0x84e <analog_read_raw+0x24>
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
     82e:	ec e7       	ldi	r30, 0x7C	; 124
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	90 81       	ld	r25, Z
     834:	90 7f       	andi	r25, 0xF0	; 240
     836:	89 2b       	or	r24, r25
     838:	80 83       	st	Z, r24
		ADCSRB &= ~(1<<MUX5);
     83a:	eb e7       	ldi	r30, 0x7B	; 123
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	8f 7d       	andi	r24, 0xDF	; 223
     842:	80 83       	st	Z, r24
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     844:	20 e0       	ldi	r18, 0x00	; 0
}

/* blocking, software-averaged read ---------------------- */
uint16_t analog_read_raw(uint8_t channel)
{
	uint32_t acc = 0;
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	ba 01       	movw	r22, r20
     84c:	23 c0       	rjmp	.+70     	; 0x894 <analog_read_raw+0x6a>
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
		ADCSRB &= ~(1<<MUX5);
		} else {
		ADMUX  = (ADMUX & 0xF0) | (ch - 8);
     84e:	ec e7       	ldi	r30, 0x7C	; 124
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	90 81       	ld	r25, Z
     854:	90 7f       	andi	r25, 0xF0	; 240
     856:	88 50       	subi	r24, 0x08	; 8
     858:	89 2b       	or	r24, r25
     85a:	80 83       	st	Z, r24
		ADCSRB |=  (1<<MUX5);
     85c:	eb e7       	ldi	r30, 0x7B	; 123
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	80 62       	ori	r24, 0x20	; 32
     864:	80 83       	st	Z, r24
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     866:	20 e0       	ldi	r18, 0x00	; 0
}

/* blocking, software-averaged read ---------------------- */
uint16_t analog_read_raw(uint8_t channel)
{
	uint32_t acc = 0;
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	ba 01       	movw	r22, r20
     86e:	12 c0       	rjmp	.+36     	; 0x894 <analog_read_raw+0x6a>

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
		ADCSRA |= (1<<ADSC);               /* start conversion          */
     870:	ea e7       	ldi	r30, 0x7A	; 122
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	90 81       	ld	r25, Z
     876:	90 64       	ori	r25, 0x40	; 64
     878:	90 83       	st	Z, r25
		while (ADCSRA & (1<<ADSC)) {;}     /* wait until ADSC clears    */
     87a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     87e:	96 fd       	sbrc	r25, 6
     880:	fc cf       	rjmp	.-8      	; 0x87a <analog_read_raw+0x50>
		acc += ADC;                        /* read ADCL then ADCH       */
     882:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     886:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     88a:	48 0f       	add	r20, r24
     88c:	59 1f       	adc	r21, r25
     88e:	61 1d       	adc	r22, r1
     890:	71 1d       	adc	r23, r1
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     892:	2f 5f       	subi	r18, 0xFF	; 255
     894:	24 30       	cpi	r18, 0x04	; 4
     896:	60 f3       	brcs	.-40     	; 0x870 <analog_read_raw+0x46>
		ADCSRA |= (1<<ADSC);               /* start conversion          */
		while (ADCSRA & (1<<ADSC)) {;}     /* wait until ADSC clears    */
		acc += ADC;                        /* read ADCL then ADCH       */
	}
	return (uint16_t)(acc / ADC_NUM_SAMPLES);
     898:	db 01       	movw	r26, r22
     89a:	ca 01       	movw	r24, r20
     89c:	b6 95       	lsr	r27
     89e:	a7 95       	ror	r26
     8a0:	97 95       	ror	r25
     8a2:	87 95       	ror	r24
     8a4:	b6 95       	lsr	r27
     8a6:	a7 95       	ror	r26
     8a8:	97 95       	ror	r25
     8aa:	87 95       	ror	r24
}
     8ac:	08 95       	ret

000008ae <analog_get_battery_1_mV>:
	return (uint16_t)mv;
}

uint16_t analog_get_battery_1_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_MAIN));
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	0e 94 15 04 	call	0x82a	; 0x82a <analog_read_raw>

/* ---------------- convenience wrappers -----------------*/
static inline uint16_t to_millivolt(uint16_t adc)
{
	/*  (adc * 1100 mV /1023) * scale-factor  */
	uint32_t mv = (uint32_t)adc * 1100UL / 1023UL;   /* ? AVcc=3.3 V ? update */
     8b4:	9c 01       	movw	r18, r24
     8b6:	ac e4       	ldi	r26, 0x4C	; 76
     8b8:	b4 e0       	ldi	r27, 0x04	; 4
     8ba:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__umulhisi3>
     8be:	2f ef       	ldi	r18, 0xFF	; 255
     8c0:	33 e0       	ldi	r19, 0x03	; 3
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	0e 94 aa 14 	call	0x2954	; 0x2954 <__udivmodsi4>
}

uint16_t analog_get_battery_1_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_MAIN));
}
     8ca:	c9 01       	movw	r24, r18
     8cc:	08 95       	ret

000008ce <analog_get_battery_2_mV>:

uint16_t analog_get_battery_2_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_AUX));
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0e 94 15 04 	call	0x82a	; 0x82a <analog_read_raw>

/* ---------------- convenience wrappers -----------------*/
static inline uint16_t to_millivolt(uint16_t adc)
{
	/*  (adc * 1100 mV /1023) * scale-factor  */
	uint32_t mv = (uint32_t)adc * 1100UL / 1023UL;   /* ? AVcc=3.3 V ? update */
     8d4:	9c 01       	movw	r18, r24
     8d6:	ac e4       	ldi	r26, 0x4C	; 76
     8d8:	b4 e0       	ldi	r27, 0x04	; 4
     8da:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__umulhisi3>
     8de:	2f ef       	ldi	r18, 0xFF	; 255
     8e0:	33 e0       	ldi	r19, 0x03	; 3
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	0e 94 aa 14 	call	0x2954	; 0x2954 <__udivmodsi4>
}

uint16_t analog_get_battery_2_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_AUX));
}
     8ea:	c9 01       	movw	r24, r18
     8ec:	08 95       	ret

000008ee <analog_get_cliff_left>:

uint16_t analog_get_cliff_left (void){ return analog_read_raw(ADC_CH_CLIFF_LEFT);  }
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	0e 94 15 04 	call	0x82a	; 0x82a <analog_read_raw>
     8f4:	08 95       	ret

000008f6 <analog_get_cliff_front>:
uint16_t analog_get_cliff_front(void){ return analog_read_raw(ADC_CH_CLIFF_FRONT); }
     8f6:	85 e0       	ldi	r24, 0x05	; 5
     8f8:	0e 94 15 04 	call	0x82a	; 0x82a <analog_read_raw>
     8fc:	08 95       	ret

000008fe <analog_get_cliff_right>:
uint16_t analog_get_cliff_right(void){ return analog_read_raw(ADC_CH_CLIFF_RIGHT); }
     8fe:	86 e0       	ldi	r24, 0x06	; 6
     900:	0e 94 15 04 	call	0x82a	; 0x82a <analog_read_raw>
     904:	08 95       	ret

00000906 <encoder_init>:

/* Initialise both encoders + emergency pin */
void encoder_init(void)
{
	/*------------- LEFT: PD2/PD3 as INT0/INT1 -------------*/
	ENC_L_A_DDR  &= ~_BV(ENC_L_A_BIT);
     906:	8a b1       	in	r24, 0x0a	; 10
     908:	8b 7f       	andi	r24, 0xFB	; 251
     90a:	8a b9       	out	0x0a, r24	; 10
	ENC_L_B_DDR  &= ~_BV(ENC_L_B_BIT);
     90c:	8a b1       	in	r24, 0x0a	; 10
     90e:	87 7f       	andi	r24, 0xF7	; 247
     910:	8a b9       	out	0x0a, r24	; 10
	ENC_L_A_PORT |=  _BV(ENC_L_A_BIT);
     912:	8b b1       	in	r24, 0x0b	; 11
     914:	84 60       	ori	r24, 0x04	; 4
     916:	8b b9       	out	0x0b, r24	; 11
	ENC_L_B_PORT |=  _BV(ENC_L_B_BIT);
     918:	8b b1       	in	r24, 0x0b	; 11
     91a:	88 60       	ori	r24, 0x08	; 8
     91c:	8b b9       	out	0x0b, r24	; 11

	/* INT0 on PD2, any edge */
	EICRA  |=  _BV(ISC00);
     91e:	e9 e6       	ldi	r30, 0x69	; 105
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	81 60       	ori	r24, 0x01	; 1
     926:	80 83       	st	Z, r24
	EICRA  &= ~_BV(ISC01);
     928:	80 81       	ld	r24, Z
     92a:	8d 7f       	andi	r24, 0xFD	; 253
     92c:	80 83       	st	Z, r24
	EIMSK  |=  _BV(INT0);
     92e:	8d b3       	in	r24, 0x1d	; 29
     930:	81 60       	ori	r24, 0x01	; 1
     932:	8d bb       	out	0x1d, r24	; 29
	/* INT1 on PD3, any edge */
	EICRA  |=  _BV(ISC10);
     934:	80 81       	ld	r24, Z
     936:	84 60       	ori	r24, 0x04	; 4
     938:	80 83       	st	Z, r24
	EICRA  &= ~_BV(ISC11);
     93a:	80 81       	ld	r24, Z
     93c:	87 7f       	andi	r24, 0xF7	; 247
     93e:	80 83       	st	Z, r24
	EIMSK  |=  _BV(INT1);
     940:	8d b3       	in	r24, 0x1d	; 29
     942:	82 60       	ori	r24, 0x02	; 2
     944:	8d bb       	out	0x1d, r24	; 29

	/* Seed last_state */
	left_last_state = ((ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?2:0)
     946:	4a 9b       	sbis	0x09, 2	; 9
     948:	02 c0       	rjmp	.+4      	; 0x94e <encoder_init+0x48>
     94a:	22 e0       	ldi	r18, 0x02	; 2
     94c:	01 c0       	rjmp	.+2      	; 0x950 <encoder_init+0x4a>
     94e:	20 e0       	ldi	r18, 0x00	; 0
	| ((ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0);
     950:	99 b1       	in	r25, 0x09	; 9
     952:	93 fb       	bst	r25, 3
     954:	88 27       	eor	r24, r24
     956:	80 f9       	bld	r24, 0
	EICRA  |=  _BV(ISC10);
	EICRA  &= ~_BV(ISC11);
	EIMSK  |=  _BV(INT1);

	/* Seed last_state */
	left_last_state = ((ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?2:0)
     958:	82 2b       	or	r24, r18
     95a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <left_last_state>
	| ((ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0);

	/*------------- RIGHT: PB6/PB7 + EMG PB3 as PCINT0 -------------*/
	/* pins input + pull-up */
	ENC_R_A_DDR    &= ~_BV(ENC_R_A_BIT);
     95e:	84 b1       	in	r24, 0x04	; 4
     960:	8f 7b       	andi	r24, 0xBF	; 191
     962:	84 b9       	out	0x04, r24	; 4
	ENC_R_B_DDR    &= ~_BV(ENC_R_B_BIT);
     964:	84 b1       	in	r24, 0x04	; 4
     966:	8f 77       	andi	r24, 0x7F	; 127
     968:	84 b9       	out	0x04, r24	; 4
	EMG_BTN_DDR    &= ~_BV(EMG_BTN_BIT);
     96a:	84 b1       	in	r24, 0x04	; 4
     96c:	87 7f       	andi	r24, 0xF7	; 247
     96e:	84 b9       	out	0x04, r24	; 4
	ENC_R_A_PORT   |=  _BV(ENC_R_A_BIT);
     970:	85 b1       	in	r24, 0x05	; 5
     972:	80 64       	ori	r24, 0x40	; 64
     974:	85 b9       	out	0x05, r24	; 5
	ENC_R_B_PORT   |=  _BV(ENC_R_B_BIT);
     976:	85 b1       	in	r24, 0x05	; 5
     978:	80 68       	ori	r24, 0x80	; 128
     97a:	85 b9       	out	0x05, r24	; 5
	EMG_BTN_PORT   |=  _BV(EMG_BTN_BIT);
     97c:	85 b1       	in	r24, 0x05	; 5
     97e:	88 60       	ori	r24, 0x08	; 8
     980:	85 b9       	out	0x05, r24	; 5

	/* enable PCINT[7:0] */
	PCICR         |=  _BV(PCIE0);
     982:	e8 e6       	ldi	r30, 0x68	; 104
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	81 60       	ori	r24, 0x01	; 1
     98a:	80 83       	st	Z, r24
	/* mask PB3, PB6, PB7 */
	PCMSK0        |=  _BV(EMG_BTN_BIT)
     98c:	eb e6       	ldi	r30, 0x6B	; 107
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	88 6c       	ori	r24, 0xC8	; 200
     994:	80 83       	st	Z, r24
	| _BV(ENC_R_A_BIT)
	| _BV(ENC_R_B_BIT);

	right_last_state = ((ENC_R_A_PINREG & _BV(ENC_R_A_BIT))?2:0)
     996:	1e 9b       	sbis	0x03, 6	; 3
     998:	02 c0       	rjmp	.+4      	; 0x99e <encoder_init+0x98>
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <encoder_init+0x9a>
     99e:	90 e0       	ldi	r25, 0x00	; 0
	| ((ENC_R_B_PINREG & _BV(ENC_R_B_BIT))?1:0);
     9a0:	83 b1       	in	r24, 0x03	; 3
     9a2:	88 1f       	adc	r24, r24
     9a4:	88 27       	eor	r24, r24
     9a6:	88 1f       	adc	r24, r24
	/* mask PB3, PB6, PB7 */
	PCMSK0        |=  _BV(EMG_BTN_BIT)
	| _BV(ENC_R_A_BIT)
	| _BV(ENC_R_B_BIT);

	right_last_state = ((ENC_R_A_PINREG & _BV(ENC_R_A_BIT))?2:0)
     9a8:	89 2b       	or	r24, r25
     9aa:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <right_last_state>
	| ((ENC_R_B_PINREG & _BV(ENC_R_B_BIT))?1:0);

	/* Zero counters */
	left_cnt  = right_cnt = 0;
     9ae:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <right_cnt>
     9b2:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <right_cnt+0x1>
     9b6:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <right_cnt+0x2>
     9ba:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <right_cnt+0x3>
     9be:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <left_cnt>
     9c2:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <left_cnt+0x1>
     9c6:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <left_cnt+0x2>
     9ca:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <left_cnt+0x3>
     9ce:	08 95       	ret

000009d0 <__vector_1>:
}

/* ------------ LEFT ISRs (INT0 & INT1) ------------- */
ISR(INT0_vect)
{
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
     9e2:	af 93       	push	r26
     9e4:	bf 93       	push	r27
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
	uint8_t a = (ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?1:0;
     9ea:	39 b1       	in	r19, 0x09	; 9
	uint8_t b = (ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0;
     9ec:	29 b1       	in	r18, 0x09	; 9
     9ee:	23 fb       	bst	r18, 3
     9f0:	22 27       	eor	r18, r18
     9f2:	20 f9       	bld	r18, 0
/* forward */
static inline void enc_handle(volatile int32_t *cnt,
volatile uint8_t *last,
uint8_t a, uint8_t b)
{
	uint8_t encoded    = (a<<1) | b;
     9f4:	32 fb       	bst	r19, 2
     9f6:	88 27       	eor	r24, r24
     9f8:	80 f9       	bld	r24, 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	28 2b       	or	r18, r24
	uint8_t trans      = (*last<<2) | encoded;
     a02:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <left_last_state>
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	e2 2f       	mov	r30, r18
     a12:	e8 2b       	or	r30, r24
	switch (trans) {
     a14:	8e 2f       	mov	r24, r30
     a16:	ee 0f       	add	r30, r30
     a18:	99 0b       	sbc	r25, r25
     a1a:	aa 0b       	sbc	r26, r26
     a1c:	bb 0b       	sbc	r27, r27
     a1e:	fc 01       	movw	r30, r24
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	ee 30       	cpi	r30, 0x0E	; 14
     a24:	f1 05       	cpc	r31, r1
     a26:	58 f5       	brcc	.+86     	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
     a28:	ea 5a       	subi	r30, 0xAA	; 170
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__tablejump2__>
		case 0b1101: case 0b0100:
		case 0b0010: case 0b1011:  (*cnt)--; break;
     a30:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <left_cnt>
     a34:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <left_cnt+0x1>
     a38:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <left_cnt+0x2>
     a3c:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <left_cnt+0x3>
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	a1 09       	sbc	r26, r1
     a44:	b1 09       	sbc	r27, r1
     a46:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <left_cnt>
     a4a:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <left_cnt+0x1>
     a4e:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <left_cnt+0x2>
     a52:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <left_cnt+0x3>
     a56:	13 c0       	rjmp	.+38     	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
		case 0b1110: case 0b0111:
		case 0b0001: case 0b1000:  (*cnt)++; break;
     a58:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <left_cnt>
     a5c:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <left_cnt+0x1>
     a60:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <left_cnt+0x2>
     a64:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <left_cnt+0x3>
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	a1 1d       	adc	r26, r1
     a6c:	b1 1d       	adc	r27, r1
     a6e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <left_cnt>
     a72:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <left_cnt+0x1>
     a76:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <left_cnt+0x2>
     a7a:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <left_cnt+0x3>
		default: /* bounce/invalid */ break;
	}
	*last = encoded;
     a7e:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <left_last_state>
ISR(INT0_vect)
{
	uint8_t a = (ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?1:0;
	uint8_t b = (ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0;
	enc_handle(&left_cnt, &left_last_state, a, b);
}
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	3f 91       	pop	r19
     a90:	2f 91       	pop	r18
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <__vector_2>:

ISR(INT1_vect)
{
     a9c:	1f 92       	push	r1
     a9e:	0f 92       	push	r0
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	0f 92       	push	r0
     aa4:	11 24       	eor	r1, r1
     aa6:	2f 93       	push	r18
     aa8:	3f 93       	push	r19
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	af 93       	push	r26
     ab0:	bf 93       	push	r27
     ab2:	ef 93       	push	r30
     ab4:	ff 93       	push	r31
	uint8_t a = (ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?1:0;
     ab6:	39 b1       	in	r19, 0x09	; 9
	uint8_t b = (ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0;
     ab8:	29 b1       	in	r18, 0x09	; 9
     aba:	23 fb       	bst	r18, 3
     abc:	22 27       	eor	r18, r18
     abe:	20 f9       	bld	r18, 0
/* forward */
static inline void enc_handle(volatile int32_t *cnt,
volatile uint8_t *last,
uint8_t a, uint8_t b)
{
	uint8_t encoded    = (a<<1) | b;
     ac0:	32 fb       	bst	r19, 2
     ac2:	88 27       	eor	r24, r24
     ac4:	80 f9       	bld	r24, 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	28 2b       	or	r18, r24
	uint8_t trans      = (*last<<2) | encoded;
     ace:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <left_last_state>
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	e2 2f       	mov	r30, r18
     ade:	e8 2b       	or	r30, r24
	switch (trans) {
     ae0:	8e 2f       	mov	r24, r30
     ae2:	ee 0f       	add	r30, r30
     ae4:	99 0b       	sbc	r25, r25
     ae6:	aa 0b       	sbc	r26, r26
     ae8:	bb 0b       	sbc	r27, r27
     aea:	fc 01       	movw	r30, r24
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	ee 30       	cpi	r30, 0x0E	; 14
     af0:	f1 05       	cpc	r31, r1
     af2:	58 f5       	brcc	.+86     	; 0xb4a <__stack+0x4b>
     af4:	ec 59       	subi	r30, 0x9C	; 156
     af6:	ff 4f       	sbci	r31, 0xFF	; 255
     af8:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__tablejump2__>
		case 0b1101: case 0b0100:
		case 0b0010: case 0b1011:  (*cnt)--; break;
     afc:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <left_cnt>
     b00:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <left_cnt+0x1>
     b04:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <left_cnt+0x2>
     b08:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <left_cnt+0x3>
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	a1 09       	sbc	r26, r1
     b10:	b1 09       	sbc	r27, r1
     b12:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <left_cnt>
     b16:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <left_cnt+0x1>
     b1a:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <left_cnt+0x2>
     b1e:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <left_cnt+0x3>
     b22:	13 c0       	rjmp	.+38     	; 0xb4a <__stack+0x4b>
		case 0b1110: case 0b0111:
		case 0b0001: case 0b1000:  (*cnt)++; break;
     b24:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <left_cnt>
     b28:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <left_cnt+0x1>
     b2c:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <left_cnt+0x2>
     b30:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <left_cnt+0x3>
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	a1 1d       	adc	r26, r1
     b38:	b1 1d       	adc	r27, r1
     b3a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <left_cnt>
     b3e:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <left_cnt+0x1>
     b42:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <left_cnt+0x2>
     b46:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <left_cnt+0x3>
		default: /* bounce/invalid */ break;
	}
	*last = encoded;
     b4a:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <left_last_state>
ISR(INT1_vect)
{
	uint8_t a = (ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?1:0;
	uint8_t b = (ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0;
	enc_handle(&left_cnt, &left_last_state, a, b);
}
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	bf 91       	pop	r27
     b54:	af 91       	pop	r26
     b56:	9f 91       	pop	r25
     b58:	8f 91       	pop	r24
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__vector_9>:

/* ------------ RIGHT + EMERGENCY (PCINT0) ------------- */
ISR(PCINT0_vect)
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
	/* 1) emergency check */
	if (!(EMG_BTN_PINREG & _BV(EMG_BTN_BIT))) {
     b82:	23 b1       	in	r18, 0x03	; 3
		// TODO: call your emergency handler here
		// emergency_button_pressed();
	}

	/* 2) right encoder decode */
	uint8_t a = (ENC_R_A_PINREG & _BV(ENC_R_A_BIT))?1:0;
     b84:	33 b1       	in	r19, 0x03	; 3
	uint8_t b = (ENC_R_B_PINREG & _BV(ENC_R_B_BIT))?1:0;
     b86:	23 b1       	in	r18, 0x03	; 3
     b88:	22 1f       	adc	r18, r18
     b8a:	22 27       	eor	r18, r18
     b8c:	22 1f       	adc	r18, r18
/* forward */
static inline void enc_handle(volatile int32_t *cnt,
volatile uint8_t *last,
uint8_t a, uint8_t b)
{
	uint8_t encoded    = (a<<1) | b;
     b8e:	36 fb       	bst	r19, 6
     b90:	88 27       	eor	r24, r24
     b92:	80 f9       	bld	r24, 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	28 2b       	or	r18, r24
	uint8_t trans      = (*last<<2) | encoded;
     b9c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <right_last_state>
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	e2 2f       	mov	r30, r18
     bac:	e8 2b       	or	r30, r24
	switch (trans) {
     bae:	8e 2f       	mov	r24, r30
     bb0:	ee 0f       	add	r30, r30
     bb2:	99 0b       	sbc	r25, r25
     bb4:	aa 0b       	sbc	r26, r26
     bb6:	bb 0b       	sbc	r27, r27
     bb8:	fc 01       	movw	r30, r24
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	ee 30       	cpi	r30, 0x0E	; 14
     bbe:	f1 05       	cpc	r31, r1
     bc0:	58 f5       	brcc	.+86     	; 0xc18 <__vector_9+0xb0>
     bc2:	ee 58       	subi	r30, 0x8E	; 142
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__tablejump2__>
		case 0b1101: case 0b0100:
		case 0b0010: case 0b1011:  (*cnt)--; break;
     bca:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <right_cnt>
     bce:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <right_cnt+0x1>
     bd2:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <right_cnt+0x2>
     bd6:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <right_cnt+0x3>
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	a1 09       	sbc	r26, r1
     bde:	b1 09       	sbc	r27, r1
     be0:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <right_cnt>
     be4:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <right_cnt+0x1>
     be8:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <right_cnt+0x2>
     bec:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <right_cnt+0x3>
     bf0:	13 c0       	rjmp	.+38     	; 0xc18 <__vector_9+0xb0>
		case 0b1110: case 0b0111:
		case 0b0001: case 0b1000:  (*cnt)++; break;
     bf2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <right_cnt>
     bf6:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <right_cnt+0x1>
     bfa:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <right_cnt+0x2>
     bfe:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <right_cnt+0x3>
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	a1 1d       	adc	r26, r1
     c06:	b1 1d       	adc	r27, r1
     c08:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <right_cnt>
     c0c:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <right_cnt+0x1>
     c10:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <right_cnt+0x2>
     c14:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <right_cnt+0x3>
		default: /* bounce/invalid */ break;
	}
	*last = encoded;
     c18:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <right_last_state>

	/* 2) right encoder decode */
	uint8_t a = (ENC_R_A_PINREG & _BV(ENC_R_A_BIT))?1:0;
	uint8_t b = (ENC_R_B_PINREG & _BV(ENC_R_B_BIT))?1:0;
	enc_handle(&right_cnt, &right_last_state, a, b);
}
     c1c:	ff 91       	pop	r31
     c1e:	ef 91       	pop	r30
     c20:	bf 91       	pop	r27
     c22:	af 91       	pop	r26
     c24:	9f 91       	pop	r25
     c26:	8f 91       	pop	r24
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <encoder_get_left>:

/* =========== public API (unchanged) =========== */
int32_t encoder_get_left(void)
{ cli(); int32_t c = left_cnt; sei(); return c; }
     c36:	f8 94       	cli
     c38:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <left_cnt>
     c3c:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <left_cnt+0x1>
     c40:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <left_cnt+0x2>
     c44:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <left_cnt+0x3>
     c48:	78 94       	sei
     c4a:	08 95       	ret

00000c4c <encoder_get_right>:

int32_t encoder_get_right(void)
{ cli(); int32_t c = right_cnt; sei(); return c; }
     c4c:	f8 94       	cli
     c4e:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <right_cnt>
     c52:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <right_cnt+0x1>
     c56:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <right_cnt+0x2>
     c5a:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <right_cnt+0x3>
     c5e:	78 94       	sei
     c60:	08 95       	ret

00000c62 <twi_start>:
    }
}

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
     c62:	94 ea       	ldi	r25, 0xA4	; 164
     c64:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     c68:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c6c:	99 23       	and	r25, r25
     c6e:	e4 f7       	brge	.-8      	; 0xc68 <twi_start+0x6>

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
     c70:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     c74:	98 7f       	andi	r25, 0xF8	; 248
    if (st != 0x08 && st != 0x10)
     c76:	98 30       	cpi	r25, 0x08	; 8
     c78:	11 f0       	breq	.+4      	; 0xc7e <twi_start+0x1c>
     c7a:	90 31       	cpi	r25, 0x10	; 16
     c7c:	c1 f4       	brne	.+48     	; 0xcae <twi_start+0x4c>
        return false; /* START / REP START */

    /* load SLA+R/W */
    TWDR = addr_rw;
     c7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = TW_INT_FLAG | TW_ENABLE;
     c82:	84 e8       	ldi	r24, 0x84	; 132
     c84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     c88:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c8c:	88 23       	and	r24, r24
     c8e:	e4 f7       	brge	.-8      	; 0xc88 <twi_start+0x26>

    /* load SLA+R/W */
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
     c90:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     c94:	88 7f       	andi	r24, 0xF8	; 248
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
     c96:	88 31       	cpi	r24, 0x18	; 24
     c98:	21 f0       	breq	.+8      	; 0xca2 <twi_start+0x40>
     c9a:	80 34       	cpi	r24, 0x40	; 64
     c9c:	21 f4       	brne	.+8      	; 0xca6 <twi_start+0x44>
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	03 c0       	rjmp	.+6      	; 0xca8 <twi_start+0x46>
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <twi_start+0x46>
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	89 2f       	mov	r24, r25
     caa:	81 70       	andi	r24, 0x01	; 1
     cac:	08 95       	ret
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
    if (st != 0x08 && st != 0x10)
        return false; /* START / REP START */
     cae:	80 e0       	ldi	r24, 0x00	; 0
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
}
     cb0:	08 95       	ret

00000cb2 <twi_stop>:

static void twi_stop(void)
{
    TWCR = TW_INT_FLAG | TW_STOP | TW_ENABLE;
     cb2:	84 e9       	ldi	r24, 0x94	; 148
     cb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cb8:	08 95       	ret

00000cba <twi_init>:

/*   PUBLIC TWI ROUTINES  */
void twi_init(void)
{
    /* prescaler bits (TWPS1:0) = 0 ? prescaler = 1 */
    TWSR &= ~((1u << TWPS0) | (1u << TWPS1));
     cba:	e9 eb       	ldi	r30, 0xB9	; 185
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8c 7f       	andi	r24, 0xFC	; 252
     cc2:	80 83       	st	Z, r24

    /* choose TWBR such that SCL ? TWI_SCL_HZ                   *
     * TWBR = (F_CPU / SCL - 16) / (2�4^TWPS)                  *
     * At 8MHz with 400kHz I2C: TWBR = (8,000,000/400,000 - 16) / 2 = 4 */
    TWBR = (uint8_t)((F_CPU / TWI_SCL_HZ - 16UL) / 2UL);
     cc4:	88 e4       	ldi	r24, 0x48	; 72
     cc6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    {
        /* For 8MHz clock, with 400kHz I2C, TWBR should be 4 */
        TWBR = 4;
    }

    TWCR = TW_ENABLE; /* enable module, no interrupt yet */
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cd0:	08 95       	ret

00000cd2 <twi_write>:
}

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	eb 01       	movw	r28, r22
     cdc:	14 2f       	mov	r17, r20
    if (!twi_start((sla << 1) | 0))
     cde:	88 0f       	add	r24, r24
     ce0:	0e 94 31 06 	call	0xc62	; 0xc62 <twi_start>
     ce4:	08 2f       	mov	r16, r24
     ce6:	81 11       	cpse	r24, r1
     ce8:	19 c0       	rjmp	.+50     	; 0xd1c <twi_write+0x4a>
     cea:	1d c0       	rjmp	.+58     	; 0xd26 <twi_write+0x54>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
     cec:	fe 01       	movw	r30, r28
     cee:	e9 0f       	add	r30, r25
     cf0:	f1 1d       	adc	r31, r1
     cf2:	80 81       	ld	r24, Z
     cf4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        TWCR = TW_INT_FLAG | TW_ENABLE;
     cf8:	84 e8       	ldi	r24, 0x84	; 132
     cfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     cfe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     d02:	88 23       	and	r24, r24
     d04:	e4 f7       	brge	.-8      	; 0xcfe <twi_write+0x2c>
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
        TWCR = TW_INT_FLAG | TW_ENABLE;
        twi_wait();
        if (TW_STATUS != 0x28)
     d06:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     d0a:	88 7f       	andi	r24, 0xF8	; 248
     d0c:	88 32       	cpi	r24, 0x28	; 40
     d0e:	21 f0       	breq	.+8      	; 0xd18 <twi_write+0x46>
        {
            twi_stop();
     d10:	0e 94 59 06 	call	0xcb2	; 0xcb2 <twi_stop>
            return false;
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <twi_write+0x54>

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 0))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     d18:	9f 5f       	subi	r25, 0xFF	; 255
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <twi_write+0x4c>
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	91 17       	cp	r25, r17
     d20:	28 f3       	brcs	.-54     	; 0xcec <twi_write+0x1a>
        {
            twi_stop();
            return false;
        } /* data ACK */
    }
    twi_stop();
     d22:	0e 94 59 06 	call	0xcb2	; 0xcb2 <twi_stop>
    return true;
}
     d26:	80 2f       	mov	r24, r16
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	08 95       	ret

00000d32 <twi_read>:

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	8b 01       	movw	r16, r22
     d3c:	c4 2f       	mov	r28, r20
    if (!twi_start((sla << 1) | 1))
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	81 60       	ori	r24, 0x01	; 1
     d46:	0e 94 31 06 	call	0xc62	; 0xc62 <twi_start>
     d4a:	d8 2f       	mov	r29, r24
     d4c:	81 11       	cpse	r24, r1
     d4e:	2f c0       	rjmp	.+94     	; 0xdae <twi_read+0x7c>
     d50:	33 c0       	rjmp	.+102    	; 0xdb8 <twi_read+0x86>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
     d52:	49 2f       	mov	r20, r25
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	2c 2f       	mov	r18, r28
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	31 09       	sbc	r19, r1
     d5e:	42 17       	cp	r20, r18
     d60:	53 07       	cpc	r21, r19
     d62:	11 f4       	brne	.+4      	; 0xd68 <twi_read+0x36>
     d64:	84 e8       	ldi	r24, 0x84	; 132
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <twi_read+0x38>
     d68:	84 ec       	ldi	r24, 0xC4	; 196
     d6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     d6e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     d72:	88 23       	and	r24, r24
     d74:	e4 f7       	brge	.-8      	; 0xd6e <twi_read+0x3c>
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
        twi_wait();
        if ((i < len - 1 && TW_STATUS != 0x50) || /* data with ACK */
     d76:	42 17       	cp	r20, r18
     d78:	53 07       	cpc	r21, r19
     d7a:	2c f4       	brge	.+10     	; 0xd86 <twi_read+0x54>
     d7c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     d80:	88 7f       	andi	r24, 0xF8	; 248
     d82:	80 35       	cpi	r24, 0x50	; 80
     d84:	41 f4       	brne	.+16     	; 0xd96 <twi_read+0x64>
     d86:	42 17       	cp	r20, r18
     d88:	53 07       	cpc	r21, r19
     d8a:	49 f4       	brne	.+18     	; 0xd9e <twi_read+0x6c>
            (i == len - 1 && TW_STATUS != 0x58))  /* data with NACK */
     d8c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     d90:	88 7f       	andi	r24, 0xF8	; 248
     d92:	88 35       	cpi	r24, 0x58	; 88
     d94:	21 f0       	breq	.+8      	; 0xd9e <twi_read+0x6c>
        {
            twi_stop();
     d96:	0e 94 59 06 	call	0xcb2	; 0xcb2 <twi_stop>
            return false;
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <twi_read+0x86>
        }
        buf[i] = TWDR;
     d9e:	f8 01       	movw	r30, r16
     da0:	e9 0f       	add	r30, r25
     da2:	f1 1d       	adc	r31, r1
     da4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     da8:	80 83       	st	Z, r24

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 1))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     daa:	9f 5f       	subi	r25, 0xFF	; 255
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <twi_read+0x7e>
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9c 17       	cp	r25, r28
     db2:	78 f2       	brcs	.-98     	; 0xd52 <twi_read+0x20>
            twi_stop();
            return false;
        }
        buf[i] = TWDR;
    }
    twi_stop();
     db4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <twi_stop>
    return true;
}
     db8:	8d 2f       	mov	r24, r29
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	08 95       	ret

00000dc4 <bno055_write8>:

/*   BNO055 BASIC ACCESS  */
bool bno055_write8(uint8_t reg, uint8_t val)
{
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	00 d0       	rcall	.+0      	; 0xdca <bno055_write8+0x6>
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
    uint8_t pkt[2] = {reg, val};
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	6a 83       	std	Y+2, r22	; 0x02
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
     dd2:	42 e0       	ldi	r20, 0x02	; 2
     dd4:	be 01       	movw	r22, r28
     dd6:	6f 5f       	subi	r22, 0xFF	; 255
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	88 e2       	ldi	r24, 0x28	; 40
     ddc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_write>
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <bno055_set_mode>:
}

/*  HIGH-LEVEL HELPERS  */
static bool bno055_set_mode(uint8_t mode)
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
     dea:	68 2f       	mov	r22, r24
     dec:	8d e3       	ldi	r24, 0x3D	; 61
     dee:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <bno055_write8>
}
     df2:	08 95       	ret

00000df4 <bno055_read8>:
    uint8_t pkt[2] = {reg, val};
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
}

bool bno055_read8(uint8_t reg, uint8_t *val)
{
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	1f 92       	push	r1
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	8b 01       	movw	r16, r22
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     e06:	41 e0       	ldi	r20, 0x01	; 1
     e08:	be 01       	movw	r22, r28
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	88 e2       	ldi	r24, 0x28	; 40
     e10:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_write>
     e14:	88 23       	and	r24, r24
     e16:	29 f0       	breq	.+10     	; 0xe22 <bno055_read8+0x2e>
        return false;
    return twi_read(BNO055_I2C_ADDR, val, 1);
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	b8 01       	movw	r22, r16
     e1c:	88 e2       	ldi	r24, 0x28	; 40
     e1e:	0e 94 99 06 	call	0xd32	; 0xd32 <twi_read>
}
     e22:	0f 90       	pop	r0
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	08 95       	ret

00000e2e <bno055_read>:

bool bno055_read(uint8_t reg, uint8_t *buf, uint8_t len)
{
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	1f 92       	push	r1
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	8b 01       	movw	r16, r22
     e42:	f4 2e       	mov	r15, r20
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	be 01       	movw	r22, r28
     e48:	6f 5f       	subi	r22, 0xFF	; 255
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	88 e2       	ldi	r24, 0x28	; 40
     e4e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <twi_write>
     e52:	88 23       	and	r24, r24
     e54:	29 f0       	breq	.+10     	; 0xe60 <bno055_read+0x32>
        return false;
    return twi_read(BNO055_I2C_ADDR, buf, len);
     e56:	4f 2d       	mov	r20, r15
     e58:	b8 01       	movw	r22, r16
     e5a:	88 e2       	ldi	r24, 0x28	; 40
     e5c:	0e 94 99 06 	call	0xd32	; 0xd32 <twi_read>
}
     e60:	0f 90       	pop	r0
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	08 95       	ret

00000e6e <bno055_init>:
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
}

bool bno055_init(void)
{
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	1f 92       	push	r1
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
    twi_init();
     e7a:	0e 94 5d 06 	call	0xcba	; 0xcba <twi_init>

    /* Ensure sensor is present */
    uint8_t id = 0;
     e7e:	19 82       	std	Y+1, r1	; 0x01
    if (!bno055_read8(0x00, &id) || id != 0xA0)
     e80:	be 01       	movw	r22, r28
     e82:	6f 5f       	subi	r22, 0xFF	; 255
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <bno055_read8>
     e8c:	18 2f       	mov	r17, r24
     e8e:	88 23       	and	r24, r24
     e90:	51 f1       	breq	.+84     	; 0xee6 <bno055_init+0x78>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	80 3a       	cpi	r24, 0xA0	; 160
     e96:	31 f5       	brne	.+76     	; 0xee4 <bno055_init+0x76>
        return false; /* CHIP_ID */

    /* Switch to CONFIG, reset, then NDOF */
    bno055_set_mode(0x00); /* CONFIG      */
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 f5 06 	call	0xdea	; 0xdea <bno055_set_mode>
     e9e:	2f e7       	ldi	r18, 0x7F	; 127
     ea0:	88 e3       	ldi	r24, 0x38	; 56
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	21 50       	subi	r18, 0x01	; 1
     ea6:	80 40       	sbci	r24, 0x00	; 0
     ea8:	90 40       	sbci	r25, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <bno055_init+0x36>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <bno055_init+0x40>
     eae:	00 00       	nop
    _delay_ms(25);

    bno055_write8(0x3F, 0x20); /* SYS_TRIGGER, reset */
     eb0:	60 e2       	ldi	r22, 0x20	; 32
     eb2:	8f e3       	ldi	r24, 0x3F	; 63
     eb4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <bno055_write8>
     eb8:	2f ef       	ldi	r18, 0xFF	; 255
     eba:	8c eb       	ldi	r24, 0xBC	; 188
     ebc:	9f e1       	ldi	r25, 0x1F	; 31
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	80 40       	sbci	r24, 0x00	; 0
     ec2:	90 40       	sbci	r25, 0x00	; 0
     ec4:	e1 f7       	brne	.-8      	; 0xebe <bno055_init+0x50>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <bno055_init+0x5a>
     ec8:	00 00       	nop
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
     eca:	8c e0       	ldi	r24, 0x0C	; 12
     ecc:	0e 94 f5 06 	call	0xdea	; 0xdea <bno055_set_mode>
     ed0:	2f ef       	ldi	r18, 0xFF	; 255
     ed2:	89 ef       	ldi	r24, 0xF9	; 249
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	21 50       	subi	r18, 0x01	; 1
     ed8:	80 40       	sbci	r24, 0x00	; 0
     eda:	90 40       	sbci	r25, 0x00	; 0
     edc:	e1 f7       	brne	.-8      	; 0xed6 <bno055_init+0x68>
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <bno055_init+0x72>
     ee0:	00 00       	nop
    _delay_ms(20);
    return true;
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <bno055_init+0x78>
    twi_init();

    /* Ensure sensor is present */
    uint8_t id = 0;
    if (!bno055_read8(0x00, &id) || id != 0xA0)
        return false; /* CHIP_ID */
     ee4:	10 e0       	ldi	r17, 0x00	; 0
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
    _delay_ms(20);
    return true;
}
     ee6:	81 2f       	mov	r24, r17
     ee8:	0f 90       	pop	r0
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <bno055_get_euler>:

void bno055_get_euler(int16_t *h, int16_t *r, int16_t *p)
{
     ef2:	cf 92       	push	r12
     ef4:	df 92       	push	r13
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	00 d0       	rcall	.+0      	; 0xf04 <bno055_get_euler+0x12>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <bno055_get_euler+0x14>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <bno055_get_euler+0x16>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6c 01       	movw	r12, r24
     f0e:	7b 01       	movw	r14, r22
     f10:	8a 01       	movw	r16, r20
    uint8_t buf[6];
    if (bno055_read(0x1A, buf, 6))
     f12:	46 e0       	ldi	r20, 0x06	; 6
     f14:	be 01       	movw	r22, r28
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8a e1       	ldi	r24, 0x1A	; 26
     f1c:	0e 94 17 07 	call	0xe2e	; 0xe2e <bno055_read>
     f20:	88 23       	and	r24, r24
     f22:	d9 f0       	breq	.+54     	; 0xf5a <bno055_get_euler+0x68>
    { /* EULER_H_LSB */
        *h = (int16_t)(buf[0] | ((uint16_t)buf[1] << 8));
     f24:	29 81       	ldd	r18, Y+1	; 0x01
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	98 2f       	mov	r25, r24
     f2c:	88 27       	eor	r24, r24
     f2e:	82 2b       	or	r24, r18
     f30:	f6 01       	movw	r30, r12
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
        *r = (int16_t)(buf[2] | ((uint16_t)buf[3] << 8));
     f36:	2b 81       	ldd	r18, Y+3	; 0x03
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	98 2f       	mov	r25, r24
     f3e:	88 27       	eor	r24, r24
     f40:	82 2b       	or	r24, r18
     f42:	f7 01       	movw	r30, r14
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	80 83       	st	Z, r24
        *p = (int16_t)(buf[4] | ((uint16_t)buf[5] << 8));
     f48:	2d 81       	ldd	r18, Y+5	; 0x05
     f4a:	8e 81       	ldd	r24, Y+6	; 0x06
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	98 2f       	mov	r25, r24
     f50:	88 27       	eor	r24, r24
     f52:	82 2b       	or	r24, r18
     f54:	f8 01       	movw	r30, r16
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	80 83       	st	Z, r24
    }
}
     f5a:	26 96       	adiw	r28, 0x06	; 6
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	08 95       	ret

00000f78 <motors_init>:
		RIGHT_PUL_PORT |= _BV(RIGHT_PUL_BIT);
		_delay_us(5);
		RIGHT_PUL_PORT &= ~_BV(RIGHT_PUL_BIT);
		_delay_us(5);
	}
}
     f78:	8a b1       	in	r24, 0x0a	; 10
     f7a:	80 68       	ori	r24, 0x80	; 128
     f7c:	8a b9       	out	0x0a, r24	; 10
     f7e:	8a b1       	in	r24, 0x0a	; 10
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	8a b9       	out	0x0a, r24	; 10
     f84:	87 b1       	in	r24, 0x07	; 7
     f86:	80 64       	ori	r24, 0x40	; 64
     f88:	87 b9       	out	0x07, r24	; 7
     f8a:	84 b1       	in	r24, 0x04	; 4
     f8c:	80 62       	ori	r24, 0x20	; 32
     f8e:	84 b9       	out	0x04, r24	; 4
     f90:	84 b1       	in	r24, 0x04	; 4
     f92:	80 61       	ori	r24, 0x10	; 16
     f94:	84 b9       	out	0x04, r24	; 4
     f96:	80 b3       	in	r24, 0x10	; 16
     f98:	80 68       	ori	r24, 0x80	; 128
     f9a:	80 bb       	out	0x10, r24	; 16
     f9c:	8b b1       	in	r24, 0x0b	; 11
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	8b b9       	out	0x0b, r24	; 11
     fa2:	8b b1       	in	r24, 0x0b	; 11
     fa4:	80 64       	ori	r24, 0x40	; 64
     fa6:	8b b9       	out	0x0b, r24	; 11
     fa8:	88 b1       	in	r24, 0x08	; 8
     faa:	8f 7b       	andi	r24, 0xBF	; 191
     fac:	88 b9       	out	0x08, r24	; 8
     fae:	85 b1       	in	r24, 0x05	; 5
     fb0:	80 62       	ori	r24, 0x20	; 32
     fb2:	85 b9       	out	0x05, r24	; 5
     fb4:	85 b1       	in	r24, 0x05	; 5
     fb6:	80 61       	ori	r24, 0x10	; 16
     fb8:	85 b9       	out	0x05, r24	; 5
     fba:	81 b3       	in	r24, 0x11	; 17
     fbc:	8f 77       	andi	r24, 0x7F	; 127
     fbe:	81 bb       	out	0x11, r24	; 17
     fc0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7f80c3>
     fd0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     fd4:	80 e4       	ldi	r24, 0x40	; 64
     fd6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     fda:	88 e0       	ldi	r24, 0x08	; 8
     fdc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     fe0:	e2 e7       	ldi	r30, 0x72	; 114
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	80 83       	st	Z, r24
     fea:	ef e6       	ldi	r30, 0x6F	; 111
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	80 83       	st	Z, r24
     ff4:	08 95       	ret

00000ff6 <__vector_40>:
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	af 93       	push	r26
    1006:	bf 93       	push	r27
    1008:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <left_edge_cnt>
    100c:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <left_edge_cnt+0x1>
    1010:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <left_edge_cnt+0x2>
    1014:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <left_edge_cnt+0x3>
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	a1 1d       	adc	r26, r1
    101c:	b1 1d       	adc	r27, r1
    101e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <left_edge_cnt>
    1022:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <left_edge_cnt+0x1>
    1026:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <left_edge_cnt+0x2>
    102a:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <left_edge_cnt+0x3>
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <__vector_17>:
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <right_edge_cnt>
    1056:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <right_edge_cnt+0x1>
    105a:	a0 91 d0 01 	lds	r26, 0x01D0	; 0x8001d0 <right_edge_cnt+0x2>
    105e:	b0 91 d1 01 	lds	r27, 0x01D1	; 0x8001d1 <right_edge_cnt+0x3>
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	a1 1d       	adc	r26, r1
    1066:	b1 1d       	adc	r27, r1
    1068:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <right_edge_cnt>
    106c:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <right_edge_cnt+0x1>
    1070:	a0 93 d0 01 	sts	0x01D0, r26	; 0x8001d0 <right_edge_cnt+0x2>
    1074:	b0 93 d1 01 	sts	0x01D1, r27	; 0x8001d1 <right_edge_cnt+0x3>
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <motors_enable_left>:
    108a:	88 23       	and	r24, r24
    108c:	21 f0       	breq	.+8      	; 0x1096 <motors_enable_left+0xc>
    108e:	88 b1       	in	r24, 0x08	; 8
    1090:	80 64       	ori	r24, 0x40	; 64
    1092:	88 b9       	out	0x08, r24	; 8
    1094:	08 95       	ret
    1096:	88 b1       	in	r24, 0x08	; 8
    1098:	8f 7b       	andi	r24, 0xBF	; 191
    109a:	88 b9       	out	0x08, r24	; 8
    109c:	08 95       	ret

0000109e <motors_enable_right>:
    109e:	88 23       	and	r24, r24
    10a0:	21 f0       	breq	.+8      	; 0x10aa <motors_enable_right+0xc>
    10a2:	81 b3       	in	r24, 0x11	; 17
    10a4:	80 68       	ori	r24, 0x80	; 128
    10a6:	81 bb       	out	0x11, r24	; 17
    10a8:	08 95       	ret
    10aa:	81 b3       	in	r24, 0x11	; 17
    10ac:	8f 77       	andi	r24, 0x7F	; 127
    10ae:	81 bb       	out	0x11, r24	; 17
    10b0:	08 95       	ret

000010b2 <motors_enable_all>:
    10b2:	cf 93       	push	r28
    10b4:	c8 2f       	mov	r28, r24
    10b6:	0e 94 45 08 	call	0x108a	; 0x108a <motors_enable_left>
    10ba:	8c 2f       	mov	r24, r28
    10bc:	0e 94 4f 08 	call	0x109e	; 0x109e <motors_enable_right>
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <motors_set_dir_left>:
    10c4:	88 23       	and	r24, r24
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <motors_set_dir_left+0xc>
    10c8:	8b b1       	in	r24, 0x0b	; 11
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	8b b9       	out	0x0b, r24	; 11
    10ce:	08 95       	ret
    10d0:	8b b1       	in	r24, 0x0b	; 11
    10d2:	8f 7b       	andi	r24, 0xBF	; 191
    10d4:	8b b9       	out	0x0b, r24	; 11
    10d6:	08 95       	ret

000010d8 <motors_set_dir_right>:
    10d8:	88 23       	and	r24, r24
    10da:	21 f0       	breq	.+8      	; 0x10e4 <motors_set_dir_right+0xc>
    10dc:	85 b1       	in	r24, 0x05	; 5
    10de:	80 61       	ori	r24, 0x10	; 16
    10e0:	85 b9       	out	0x05, r24	; 5
    10e2:	08 95       	ret
    10e4:	85 b1       	in	r24, 0x05	; 5
    10e6:	8f 7e       	andi	r24, 0xEF	; 239
    10e8:	85 b9       	out	0x05, r24	; 5
    10ea:	08 95       	ret

000010ec <motors_set_speed_left>:
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
    10f2:	9c 01       	movw	r18, r24
    10f4:	a8 ec       	ldi	r26, 0xC8	; 200
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__umulhisi3>
    10fc:	2c e3       	ldi	r18, 0x3C	; 60
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	0e 94 aa 14 	call	0x2954	; 0x2954 <__udivmodsi4>
    1108:	e1 ec       	ldi	r30, 0xC1	; 193
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 7f       	andi	r24, 0xF0	; 240
    1110:	80 83       	st	Z, r24
    1112:	c5 3f       	cpi	r28, 0xF5	; 245
    1114:	d1 40       	sbci	r29, 0x01	; 1
    1116:	f8 f0       	brcs	.+62     	; 0x1156 <motors_set_speed_left+0x6a>
    1118:	01 2e       	mov	r0, r17
    111a:	19 e0       	ldi	r17, 0x09	; 9
    111c:	22 0f       	add	r18, r18
    111e:	33 1f       	adc	r19, r19
    1120:	44 1f       	adc	r20, r20
    1122:	55 1f       	adc	r21, r21
    1124:	1a 95       	dec	r17
    1126:	d1 f7       	brne	.-12     	; 0x111c <motors_set_speed_left+0x30>
    1128:	10 2d       	mov	r17, r0
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	74 e2       	ldi	r23, 0x24	; 36
    112e:	84 ef       	ldi	r24, 0xF4	; 244
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 aa 14 	call	0x2954	; 0x2954 <__udivmodsi4>
    1136:	21 50       	subi	r18, 0x01	; 1
    1138:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <left_top>
    113c:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
    1140:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <left_top>
    1144:	86 95       	lsr	r24
    1146:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f80d2>
    114a:	e1 ec       	ldi	r30, 0xC1	; 193
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	89 60       	ori	r24, 0x09	; 9
    1152:	80 83       	st	Z, r24
    1154:	1e c0       	rjmp	.+60     	; 0x1192 <motors_set_speed_left+0xa6>
    1156:	01 2e       	mov	r0, r17
    1158:	1c e0       	ldi	r17, 0x0C	; 12
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	44 1f       	adc	r20, r20
    1160:	55 1f       	adc	r21, r21
    1162:	1a 95       	dec	r17
    1164:	d1 f7       	brne	.-12     	; 0x115a <motors_set_speed_left+0x6e>
    1166:	10 2d       	mov	r17, r0
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	74 e2       	ldi	r23, 0x24	; 36
    116c:	84 ef       	ldi	r24, 0xF4	; 244
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 aa 14 	call	0x2954	; 0x2954 <__udivmodsi4>
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <left_top>
    117a:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
    117e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <left_top>
    1182:	86 95       	lsr	r24
    1184:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f80d2>
    1188:	e1 ec       	ldi	r30, 0xC1	; 193
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8c 60       	ori	r24, 0x0C	; 12
    1190:	80 83       	st	Z, r24
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <motors_set_speed_right>:
    1198:	9c 01       	movw	r18, r24
    119a:	a8 ec       	ldi	r26, 0xC8	; 200
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__umulhisi3>
    11a2:	2c e3       	ldi	r18, 0x3C	; 60
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	0e 94 aa 14 	call	0x2954	; 0x2954 <__udivmodsi4>
    11ae:	01 2e       	mov	r0, r17
    11b0:	1b e0       	ldi	r17, 0x0B	; 11
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	44 1f       	adc	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	1a 95       	dec	r17
    11bc:	d1 f7       	brne	.-12     	; 0x11b2 <motors_set_speed_right+0x1a>
    11be:	10 2d       	mov	r17, r0
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	74 e2       	ldi	r23, 0x24	; 36
    11c4:	84 ef       	ldi	r24, 0xF4	; 244
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 aa 14 	call	0x2954	; 0x2954 <__udivmodsi4>
    11cc:	da 01       	movw	r26, r20
    11ce:	c9 01       	movw	r24, r18
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	a1 09       	sbc	r26, r1
    11d4:	b1 09       	sbc	r27, r1
    11d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    11da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    11de:	e1 e8       	ldi	r30, 0x81	; 129
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	88 7f       	andi	r24, 0xF8	; 248
    11e6:	80 83       	st	Z, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	85 60       	ori	r24, 0x05	; 5
    11ec:	80 83       	st	Z, r24
    11ee:	08 95       	ret

000011f0 <motors_set_speed_both>:
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	eb 01       	movw	r28, r22
    11f6:	0e 94 76 08 	call	0x10ec	; 0x10ec <motors_set_speed_left>
    11fa:	ce 01       	movw	r24, r28
    11fc:	0e 94 cc 08 	call	0x1198	; 0x1198 <motors_set_speed_right>
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <motors_stop_all>:

void motors_stop_all(void)
{
	/* disable drivers */
	motors_enable_all(false);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 59 08 	call	0x10b2	; 0x10b2 <motors_enable_all>

	/* stop timers � clear prescaler bits */
	TCCR1B &= ~(_BV(CS12) | _BV(CS11) | _BV(CS10));
    120c:	e1 e8       	ldi	r30, 0x81	; 129
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	88 7f       	andi	r24, 0xF8	; 248
    1214:	80 83       	st	Z, r24
	TCCR4B &= ~(_BV(CS43) | _BV(CS42) | _BV(CS41) | _BV(CS40));
    1216:	e1 ec       	ldi	r30, 0xC1	; 193
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	80 7f       	andi	r24, 0xF0	; 240
    121e:	80 83       	st	Z, r24
    1220:	08 95       	ret

00001222 <motors_reset_edge_counts>:


/* — API to reset & read counts atomically — */
void motors_reset_edge_counts(void)
{
	uint8_t oldSREG = SREG; cli();
    1222:	8f b7       	in	r24, 0x3f	; 63
    1224:	f8 94       	cli
	left_edge_cnt = right_edge_cnt = 0;
    1226:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <right_edge_cnt>
    122a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <right_edge_cnt+0x1>
    122e:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <right_edge_cnt+0x2>
    1232:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <right_edge_cnt+0x3>
    1236:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <left_edge_cnt>
    123a:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <left_edge_cnt+0x1>
    123e:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <left_edge_cnt+0x2>
    1242:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <left_edge_cnt+0x3>
	SREG = oldSREG;
    1246:	8f bf       	out	0x3f, r24	; 63
    1248:	08 95       	ret

0000124a <motors_get_edge_count_left>:
}

uint32_t motors_get_edge_count_left(void)
{
	uint32_t c; uint8_t oldSREG = SREG; cli();
    124a:	2f b7       	in	r18, 0x3f	; 63
    124c:	f8 94       	cli
	c = left_edge_cnt;
    124e:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <left_edge_cnt>
    1252:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <left_edge_cnt+0x1>
    1256:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <left_edge_cnt+0x2>
    125a:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <left_edge_cnt+0x3>
	SREG = oldSREG;
    125e:	2f bf       	out	0x3f, r18	; 63
	return c;
}
    1260:	08 95       	ret

00001262 <motors_get_edge_count_right>:

uint32_t motors_get_edge_count_right(void)
{
	uint32_t c; uint8_t oldSREG = SREG; cli();
    1262:	2f b7       	in	r18, 0x3f	; 63
    1264:	f8 94       	cli
	c = right_edge_cnt;
    1266:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <right_edge_cnt>
    126a:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <right_edge_cnt+0x1>
    126e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <right_edge_cnt+0x2>
    1272:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <right_edge_cnt+0x3>
	SREG = oldSREG;
    1276:	2f bf       	out	0x3f, r18	; 63
	return c;
}
    1278:	08 95       	ret

0000127a <motors_get_step_count_left>:

uint32_t motors_get_step_count_left(void)
{
	return motors_get_edge_count_left() >> 1;
    127a:	0e 94 25 09 	call	0x124a	; 0x124a <motors_get_edge_count_left>
    127e:	96 95       	lsr	r25
    1280:	87 95       	ror	r24
    1282:	77 95       	ror	r23
    1284:	67 95       	ror	r22
}
    1286:	08 95       	ret

00001288 <motors_get_step_count_right>:

uint32_t motors_get_step_count_right(void)
{
	return motors_get_edge_count_right() >> 1;
    1288:	0e 94 31 09 	call	0x1262	; 0x1262 <motors_get_edge_count_right>
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	77 95       	ror	r23
    1292:	67 95       	ror	r22
    1294:	08 95       	ret

00001296 <m_usb_init>:
	UEDATX = signals;
	UEDATX = 0;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
    129c:	80 ea       	ldi	r24, 0xA0	; 160
    129e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    12a2:	82 e1       	ldi	r24, 0x12	; 18
    12a4:	89 bd       	out	0x29, r24	; 41
    12a6:	09 b4       	in	r0, 0x29	; 41
    12a8:	00 fe       	sbrs	r0, 0
    12aa:	fd cf       	rjmp	.-6      	; 0x12a6 <m_usb_init+0x10>
    12ac:	80 e9       	ldi	r24, 0x90	; 144
    12ae:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    12b2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    12b6:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <usb_configuration>
    12ba:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <cdc_line_rtsdtr>
    12be:	8c e0       	ldi	r24, 0x0C	; 12
    12c0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    12c4:	78 94       	sei
    12c6:	08 95       	ret

000012c8 <m_usb_isconnected>:
    12c8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <usb_configuration>
    12cc:	08 95       	ret

000012ce <m_usb_rx_char>:
    12ce:	9f b7       	in	r25, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <usb_configuration>
    12d6:	81 11       	cpse	r24, r1
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <m_usb_rx_char+0x12>
    12da:	9f bf       	out	0x3f, r25	; 63
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	08 95       	ret
    12e0:	83 e0       	ldi	r24, 0x03	; 3
    12e2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    12e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    12ea:	85 fd       	sbrc	r24, 5
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <m_usb_rx_char+0x26>
    12ee:	9f bf       	out	0x3f, r25	; 63
    12f0:	8f ef       	ldi	r24, 0xFF	; 255
    12f2:	08 95       	ret
    12f4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    12f8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    12fc:	25 fd       	sbrc	r18, 5
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <m_usb_rx_char+0x38>
    1300:	2b e6       	ldi	r18, 0x6B	; 107
    1302:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1306:	9f bf       	out	0x3f, r25	; 63
    1308:	08 95       	ret

0000130a <m_usb_rx_available>:
    130a:	9f b7       	in	r25, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <usb_configuration>
    1312:	88 23       	and	r24, r24
    1314:	31 f0       	breq	.+12     	; 0x1322 <m_usb_rx_available+0x18>
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    131c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <m_usb_rx_available+0x1a>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	9f bf       	out	0x3f, r25	; 63
    1326:	08 95       	ret

00001328 <m_usb_tx_char>:
    1328:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <usb_configuration>
    132c:	99 23       	and	r25, r25
    132e:	e1 f1       	breq	.+120    	; 0x13a8 <m_usb_tx_char+0x80>
    1330:	9f b7       	in	r25, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	24 e0       	ldi	r18, 0x04	; 4
    1336:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    133a:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <transmit_previous_timeout>
    133e:	22 23       	and	r18, r18
    1340:	49 f0       	breq	.+18     	; 0x1354 <m_usb_tx_char+0x2c>
    1342:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1346:	25 fd       	sbrc	r18, 5
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <m_usb_tx_char+0x28>
    134a:	9f bf       	out	0x3f, r25	; 63
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	08 95       	ret
    1350:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <transmit_previous_timeout>
    1354:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1358:	37 5e       	subi	r19, 0xE7	; 231
    135a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    135e:	25 fd       	sbrc	r18, 5
    1360:	14 c0       	rjmp	.+40     	; 0x138a <m_usb_tx_char+0x62>
    1362:	9f bf       	out	0x3f, r25	; 63
    1364:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1368:	39 13       	cpse	r19, r25
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <m_usb_tx_char+0x4e>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <transmit_previous_timeout>
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	08 95       	ret
    1376:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <usb_configuration>
    137a:	99 23       	and	r25, r25
    137c:	b9 f0       	breq	.+46     	; 0x13ac <m_usb_tx_char+0x84>
    137e:	9f b7       	in	r25, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	24 e0       	ldi	r18, 0x04	; 4
    1384:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1388:	e8 cf       	rjmp	.-48     	; 0x135a <m_usb_tx_char+0x32>
    138a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    138e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1392:	85 fd       	sbrc	r24, 5
    1394:	03 c0       	rjmp	.+6      	; 0x139c <m_usb_tx_char+0x74>
    1396:	8a e3       	ldi	r24, 0x3A	; 58
    1398:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    139c:	85 e0       	ldi	r24, 0x05	; 5
    139e:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <transmit_flush_timer>
    13a2:	9f bf       	out	0x3f, r25	; 63
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	08 95       	ret
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	08 95       	ret
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	08 95       	ret

000013b0 <m_usb_tx_push>:
    13b0:	8f b7       	in	r24, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <transmit_flush_timer>
    13b8:	99 23       	and	r25, r25
    13ba:	41 f0       	breq	.+16     	; 0x13cc <m_usb_tx_push+0x1c>
    13bc:	94 e0       	ldi	r25, 0x04	; 4
    13be:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    13c2:	9a e3       	ldi	r25, 0x3A	; 58
    13c4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    13c8:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <transmit_flush_timer>
    13cc:	8f bf       	out	0x3f, r24	; 63
    13ce:	08 95       	ret

000013d0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    13d0:	1f 92       	push	r1
    13d2:	0f 92       	push	r0
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	0f 92       	push	r0
    13d8:	11 24       	eor	r1, r1
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
	uint8_t intbits, t;

	intbits = UDINT;
    13e2:	e1 ee       	ldi	r30, 0xE1	; 225
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
	UDINT = 0;
    13e8:	10 82       	st	Z, r1
	if (intbits & (1 << EORSTI))
    13ea:	83 ff       	sbrs	r24, 3
    13ec:	11 c0       	rjmp	.+34     	; 0x1410 <__vector_10+0x40>
	{
		UENUM = 0;
    13ee:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
		UECONX = 1;
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		UECFG0X = EP_TYPE_CONTROL;
    13f8:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    13fc:	92 e1       	ldi	r25, 0x12	; 18
    13fe:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
		UEIENX = (1 << RXSTPE);
    1402:	98 e0       	ldi	r25, 0x08	; 8
    1404:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
		usb_configuration = 0;
    1408:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <usb_configuration>
		cdc_line_rtsdtr = 0;
    140c:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <cdc_line_rtsdtr>
	}
	if (intbits & (1 << SOFI))
    1410:	82 ff       	sbrs	r24, 2
    1412:	13 c0       	rjmp	.+38     	; 0x143a <__vector_10+0x6a>
	{
		if (usb_configuration)
    1414:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <usb_configuration>
    1418:	88 23       	and	r24, r24
    141a:	79 f0       	breq	.+30     	; 0x143a <__vector_10+0x6a>
		{
			t = transmit_flush_timer;
    141c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <transmit_flush_timer>
			if (t)
    1420:	88 23       	and	r24, r24
    1422:	59 f0       	breq	.+22     	; 0x143a <__vector_10+0x6a>
			{
				transmit_flush_timer = --t;
    1424:	81 50       	subi	r24, 0x01	; 1
    1426:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <transmit_flush_timer>
				if (!t)
    142a:	81 11       	cpse	r24, r1
    142c:	06 c0       	rjmp	.+12     	; 0x143a <__vector_10+0x6a>
				{
					UENUM = CDC_TX_ENDPOINT;
    142e:	84 e0       	ldi	r24, 0x04	; 4
    1430:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
					UEINTX = 0x3A;
    1434:	8a e3       	ldi	r24, 0x3A	; 58
    1436:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				}
			}
		}
	}
}
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	9f 91       	pop	r25
    1440:	8f 91       	pop	r24
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	2f 93       	push	r18
    1458:	3f 93       	push	r19
    145a:	4f 93       	push	r20
    145c:	5f 93       	push	r21
    145e:	6f 93       	push	r22
    1460:	7f 93       	push	r23
    1462:	8f 93       	push	r24
    1464:	9f 93       	push	r25
    1466:	af 93       	push	r26
    1468:	bf 93       	push	r27
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ef 93       	push	r30
    1470:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t desc_length;

	UENUM = 0;
    1472:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	intbits = UEINTX;
    1476:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	if (intbits & (1 << RXSTPI))
    147a:	83 ff       	sbrs	r24, 3
    147c:	42 c1       	rjmp	.+644    	; 0x1702 <__vector_11+0x2b6>
	{
		bmRequestType = UEDATX;
    147e:	e1 ef       	ldi	r30, 0xF1	; 241
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	b0 81       	ld	r27, Z
		bRequest = UEDATX;
    1484:	a0 81       	ld	r26, Z
		wValue = UEDATX;
    1486:	20 81       	ld	r18, Z
		wValue |= (UEDATX << 8);
    1488:	80 81       	ld	r24, Z
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	98 2f       	mov	r25, r24
    148e:	88 27       	eor	r24, r24
    1490:	82 2b       	or	r24, r18
		wIndex = UEDATX;
    1492:	40 81       	ld	r20, Z
		wIndex |= (UEDATX << 8);
    1494:	20 81       	ld	r18, Z
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	32 2f       	mov	r19, r18
    149a:	22 27       	eor	r18, r18
    149c:	b9 01       	movw	r22, r18
    149e:	64 2b       	or	r22, r20
		wLength = UEDATX;
    14a0:	40 81       	ld	r20, Z
		wLength |= (UEDATX << 8);
    14a2:	20 81       	ld	r18, Z
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	32 2f       	mov	r19, r18
    14a8:	22 27       	eor	r18, r18
    14aa:	f9 01       	movw	r30, r18
    14ac:	e4 2b       	or	r30, r20
    14ae:	af 01       	movw	r20, r30
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
    14b0:	22 ef       	ldi	r18, 0xF2	; 242
    14b2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		if (bRequest == GET_DESCRIPTOR)
    14b6:	a6 30       	cpi	r26, 0x06	; 6
    14b8:	09 f0       	breq	.+2      	; 0x14bc <__vector_11+0x70>
    14ba:	51 c0       	rjmp	.+162    	; 0x155e <__vector_11+0x112>
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	21 e3       	ldi	r18, 0x31	; 49
    14c0:	32 e0       	ldi	r19, 0x02	; 2
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
			{
				if (i >= NUM_DESC_LIST)
    14c2:	a6 30       	cpi	r26, 0x06	; 6
    14c4:	20 f0       	brcs	.+8      	; 0x14ce <__vector_11+0x82>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
    14c6:	81 e2       	ldi	r24, 0x21	; 33
    14c8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					return;
    14cc:	1d c1       	rjmp	.+570    	; 0x1708 <__vector_11+0x2bc>
				}
				desc_val = pgm_read_word(list);
    14ce:	f9 01       	movw	r30, r18
    14d0:	c5 91       	lpm	r28, Z+
    14d2:	d4 91       	lpm	r29, Z
				if (desc_val != wValue)
    14d4:	8c 17       	cp	r24, r28
    14d6:	9d 07       	cpc	r25, r29
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <__vector_11+0x94>
				{
					list += sizeof(struct descriptor_list_struct);
    14da:	29 5f       	subi	r18, 0xF9	; 249
    14dc:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
    14de:	1c c0       	rjmp	.+56     	; 0x1518 <__vector_11+0xcc>
				}
				list += 2;
    14e0:	f9 01       	movw	r30, r18
    14e2:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    14e4:	c5 91       	lpm	r28, Z+
    14e6:	d4 91       	lpm	r29, Z
				if (desc_val != wIndex)
    14e8:	6c 17       	cp	r22, r28
    14ea:	7d 07       	cpc	r23, r29
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <__vector_11+0xa8>
				{
					list += sizeof(struct descriptor_list_struct) - 2;
    14ee:	29 5f       	subi	r18, 0xF9	; 249
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
    14f2:	12 c0       	rjmp	.+36     	; 0x1518 <__vector_11+0xcc>
				}
				list += 2;
    14f4:	f9 01       	movw	r30, r18
    14f6:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    14f8:	85 91       	lpm	r24, Z+
    14fa:	94 91       	lpm	r25, Z
				list += 2;
    14fc:	f9 01       	movw	r30, r18
    14fe:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1500:	64 91       	lpm	r22, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1502:	9a 01       	movw	r18, r20
    1504:	4f 3f       	cpi	r20, 0xFF	; 255
    1506:	51 05       	cpc	r21, r1
    1508:	19 f0       	breq	.+6      	; 0x1510 <__vector_11+0xc4>
    150a:	10 f0       	brcs	.+4      	; 0x1510 <__vector_11+0xc4>
    150c:	2f ef       	ldi	r18, 0xFF	; 255
    150e:	30 e0       	ldi	r19, 0x00	; 0
			if (len > desc_length)
    1510:	62 17       	cp	r22, r18
    1512:	20 f0       	brcs	.+8      	; 0x151c <__vector_11+0xd0>
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1514:	62 2f       	mov	r22, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <__vector_11+0xd0>
		wLength |= (UEDATX << 8);
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
		if (bRequest == GET_DESCRIPTOR)
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
    1518:	af 5f       	subi	r26, 0xFF	; 255
				list += 2;
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
    151a:	d3 cf       	rjmp	.-90     	; 0x14c2 <__vector_11+0x76>
			do
			{
				// wait for host ready for IN packet
				do
				{
					i = UEINTX;
    151c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
    1520:	32 2f       	mov	r19, r18
    1522:	35 70       	andi	r19, 0x05	; 5
    1524:	d9 f3       	breq	.-10     	; 0x151c <__vector_11+0xd0>
				if (i & (1 << RXOUTI))
    1526:	22 fd       	sbrc	r18, 2
    1528:	ef c0       	rjmp	.+478    	; 0x1708 <__vector_11+0x2bc>
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    152a:	36 2f       	mov	r19, r22
    152c:	61 31       	cpi	r22, 0x11	; 17
    152e:	08 f0       	brcs	.+2      	; 0x1532 <__vector_11+0xe6>
    1530:	30 e1       	ldi	r19, 0x10	; 16
				for (i = n; i; i--)
    1532:	23 2f       	mov	r18, r19
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <__vector_11+0xfc>
				{
					UEDATX = pgm_read_byte(desc_addr++);
    1536:	ac 01       	movw	r20, r24
    1538:	4f 5f       	subi	r20, 0xFF	; 255
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	fc 01       	movw	r30, r24
    153e:	84 91       	lpm	r24, Z
    1540:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
    1544:	21 50       	subi	r18, 0x01	; 1
				{
					UEDATX = pgm_read_byte(desc_addr++);
    1546:	ca 01       	movw	r24, r20
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
    1548:	21 11       	cpse	r18, r1
    154a:	f5 cf       	rjmp	.-22     	; 0x1536 <__vector_11+0xea>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    154c:	63 1b       	sub	r22, r19
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    154e:	2e ef       	ldi	r18, 0xFE	; 254
    1550:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1554:	61 11       	cpse	r22, r1
    1556:	e2 cf       	rjmp	.-60     	; 0x151c <__vector_11+0xd0>
    1558:	30 31       	cpi	r19, 0x10	; 16
    155a:	01 f3       	breq	.-64     	; 0x151c <__vector_11+0xd0>
    155c:	d5 c0       	rjmp	.+426    	; 0x1708 <__vector_11+0x2bc>
			return;
		}
		if (bRequest == SET_ADDRESS)
    155e:	a5 30       	cpi	r26, 0x05	; 5
    1560:	59 f4       	brne	.+22     	; 0x1578 <__vector_11+0x12c>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1562:	2e ef       	ldi	r18, 0xFE	; 254
    1564:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    1568:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    156c:	20 ff       	sbrs	r18, 0
    156e:	fc cf       	rjmp	.-8      	; 0x1568 <__vector_11+0x11c>
		}
		if (bRequest == SET_ADDRESS)
		{
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1 << ADDEN);
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
			return;
    1576:	c8 c0       	rjmp	.+400    	; 0x1708 <__vector_11+0x2bc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0)
    1578:	a9 30       	cpi	r26, 0x09	; 9
    157a:	79 f5       	brne	.+94     	; 0x15da <__vector_11+0x18e>
    157c:	b1 11       	cpse	r27, r1
    157e:	2d c0       	rjmp	.+90     	; 0x15da <__vector_11+0x18e>
		{
			usb_configuration = wValue;
    1580:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <usb_configuration>
			cdc_line_rtsdtr = 0;
    1584:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <cdc_line_rtsdtr>
			transmit_flush_timer = 0;
    1588:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <transmit_flush_timer>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    158c:	8e ef       	ldi	r24, 0xFE	; 254
    158e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
    1592:	81 e0       	ldi	r24, 0x01	; 1
		{
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1594:	2a ed       	ldi	r18, 0xDA	; 218
    1596:	32 e0       	ldi	r19, 0x02	; 2
			for (i = 1; i < 5; i++)
    1598:	18 c0       	rjmp	.+48     	; 0x15ca <__vector_11+0x17e>
			{
				UENUM = i;
    159a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				en = pgm_read_byte(cfg++);
    159e:	a9 01       	movw	r20, r18
    15a0:	4f 5f       	subi	r20, 0xFF	; 255
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	f9 01       	movw	r30, r18
    15a6:	94 91       	lpm	r25, Z
				UECONX = en;
    15a8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				if (en)
    15ac:	99 23       	and	r25, r25
    15ae:	59 f0       	breq	.+22     	; 0x15c6 <__vector_11+0x17a>
				{
					UECFG0X = pgm_read_byte(cfg++);
    15b0:	fa 01       	movw	r30, r20
    15b2:	44 91       	lpm	r20, Z
    15b4:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
					UECFG1X = pgm_read_byte(cfg++);
    15b8:	31 96       	adiw	r30, 0x01	; 1
    15ba:	e4 91       	lpm	r30, Z
    15bc:	2d 5f       	subi	r18, 0xFD	; 253
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    15c4:	01 c0       	rjmp	.+2      	; 0x15c8 <__vector_11+0x17c>
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
			{
				UENUM = i;
				en = pgm_read_byte(cfg++);
    15c6:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	85 30       	cpi	r24, 0x05	; 5
    15cc:	30 f3       	brcs	.-52     	; 0x159a <__vector_11+0x14e>
				{
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
			UERST = 0x1E;
    15ce:	ea ee       	ldi	r30, 0xEA	; 234
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8e e1       	ldi	r24, 0x1E	; 30
    15d4:	80 83       	st	Z, r24
			UERST = 0;
    15d6:	10 82       	st	Z, r1
			return;
    15d8:	97 c0       	rjmp	.+302    	; 0x1708 <__vector_11+0x2bc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
    15da:	a8 30       	cpi	r26, 0x08	; 8
    15dc:	71 f4       	brne	.+28     	; 0x15fa <__vector_11+0x1ae>
    15de:	b0 38       	cpi	r27, 0x80	; 128
    15e0:	61 f4       	brne	.+24     	; 0x15fa <__vector_11+0x1ae>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    15e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    15e6:	80 ff       	sbrs	r24, 0
    15e8:	fc cf       	rjmp	.-8      	; 0x15e2 <__vector_11+0x196>
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
		{
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    15ea:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <usb_configuration>
    15ee:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    15f2:	8e ef       	ldi	r24, 0xFE	; 254
    15f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    15f8:	87 c0       	rjmp	.+270    	; 0x1708 <__vector_11+0x2bc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
    15fa:	a1 32       	cpi	r26, 0x21	; 33
    15fc:	a9 f4       	brne	.+42     	; 0x1628 <__vector_11+0x1dc>
    15fe:	b1 3a       	cpi	r27, 0xA1	; 161
    1600:	99 f4       	brne	.+38     	; 0x1628 <__vector_11+0x1dc>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    1602:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1606:	80 ff       	sbrs	r24, 0
    1608:	fc cf       	rjmp	.-8      	; 0x1602 <__vector_11+0x1b6>
    160a:	e0 e0       	ldi	r30, 0x00	; 0
    160c:	f1 e0       	ldi	r31, 0x01	; 1
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	05 c0       	rjmp	.+10     	; 0x161c <__vector_11+0x1d0>
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				UEDATX = *p++;
    1612:	90 81       	ld	r25, Z
    1614:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1618:	8f 5f       	subi	r24, 0xFF	; 255
			{
				UEDATX = *p++;
    161a:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    161c:	87 30       	cpi	r24, 0x07	; 7
    161e:	c8 f3       	brcs	.-14     	; 0x1612 <__vector_11+0x1c6>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1620:	8e ef       	ldi	r24, 0xFE	; 254
    1622:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1626:	70 c0       	rjmp	.+224    	; 0x1708 <__vector_11+0x2bc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
    1628:	a0 32       	cpi	r26, 0x20	; 32
    162a:	c1 f4       	brne	.+48     	; 0x165c <__vector_11+0x210>
    162c:	b1 32       	cpi	r27, 0x21	; 33
    162e:	b1 f4       	brne	.+44     	; 0x165c <__vector_11+0x210>
{
	UEINTX = ~(1 << TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1 << RXOUTI)))
    1630:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1634:	82 ff       	sbrs	r24, 2
    1636:	fc cf       	rjmp	.-8      	; 0x1630 <__vector_11+0x1e4>
    1638:	e0 e0       	ldi	r30, 0x00	; 0
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	05 c0       	rjmp	.+10     	; 0x164a <__vector_11+0x1fe>
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				*p++ = UEDATX;
    1640:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1644:	90 83       	st	Z, r25
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1646:	8f 5f       	subi	r24, 0xFF	; 255
			{
				*p++ = UEDATX;
    1648:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    164a:	87 30       	cpi	r24, 0x07	; 7
    164c:	c8 f3       	brcs	.-14     	; 0x1640 <__vector_11+0x1f4>
	while (!(UEINTX & (1 << RXOUTI)))
		;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1 << RXOUTI);
    164e:	e8 ee       	ldi	r30, 0xE8	; 232
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8b ef       	ldi	r24, 0xFB	; 251
    1654:	80 83       	st	Z, r24
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1656:	8e ef       	ldi	r24, 0xFE	; 254
    1658:	80 83       	st	Z, r24
    165a:	56 c0       	rjmp	.+172    	; 0x1708 <__vector_11+0x2bc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21)
    165c:	a2 32       	cpi	r26, 0x22	; 34
    165e:	61 f4       	brne	.+24     	; 0x1678 <__vector_11+0x22c>
    1660:	b1 32       	cpi	r27, 0x21	; 33
    1662:	51 f4       	brne	.+20     	; 0x1678 <__vector_11+0x22c>
		{
			cdc_line_rtsdtr = wValue;
    1664:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <cdc_line_rtsdtr>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    1668:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    166c:	80 ff       	sbrs	r24, 0
    166e:	fc cf       	rjmp	.-8      	; 0x1668 <__vector_11+0x21c>
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1670:	8e ef       	ldi	r24, 0xFE	; 254
    1672:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1676:	48 c0       	rjmp	.+144    	; 0x1708 <__vector_11+0x2bc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS)
    1678:	a1 11       	cpse	r26, r1
    167a:	1b c0       	rjmp	.+54     	; 0x16b2 <__vector_11+0x266>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    167c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1680:	80 ff       	sbrs	r24, 0
    1682:	fc cf       	rjmp	.-8      	; 0x167c <__vector_11+0x230>
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
    1684:	b2 38       	cpi	r27, 0x82	; 130
    1686:	61 f4       	brne	.+24     	; 0x16a0 <__vector_11+0x254>
			{
				UENUM = wIndex;
    1688:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (UECONX & (1 << STALLRQ))
    168c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1690:	85 fd       	sbrc	r24, 5
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <__vector_11+0x24c>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	01 c0       	rjmp	.+2      	; 0x169a <__vector_11+0x24e>
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
			{
				UENUM = wIndex;
				if (UECONX & (1 << STALLRQ))
					i = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
				UENUM = 0;
    169a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <__vector_11+0x256>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
    16a0:	80 e0       	ldi	r24, 0x00	; 0
				if (UECONX & (1 << STALLRQ))
					i = 1;
				UENUM = 0;
			}
#endif
			UEDATX = i;
    16a2:	e1 ef       	ldi	r30, 0xF1	; 241
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 83       	st	Z, r24
			UEDATX = 0;
    16a8:	10 82       	st	Z, r1
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    16aa:	8e ef       	ldi	r24, 0xFE	; 254
    16ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    16b0:	2b c0       	rjmp	.+86     	; 0x1708 <__vector_11+0x2bc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE) && bmRequestType == 0x02 && wValue == 0)
    16b2:	a1 30       	cpi	r26, 0x01	; 1
    16b4:	11 f0       	breq	.+4      	; 0x16ba <__vector_11+0x26e>
    16b6:	a3 30       	cpi	r26, 0x03	; 3
    16b8:	21 f5       	brne	.+72     	; 0x1702 <__vector_11+0x2b6>
    16ba:	b2 30       	cpi	r27, 0x02	; 2
    16bc:	11 f5       	brne	.+68     	; 0x1702 <__vector_11+0x2b6>
    16be:	89 2b       	or	r24, r25
    16c0:	01 f5       	brne	.+64     	; 0x1702 <__vector_11+0x2b6>
		{
			i = wIndex & 0x7F;
    16c2:	26 2f       	mov	r18, r22
    16c4:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT)
    16c6:	8f ef       	ldi	r24, 0xFF	; 255
    16c8:	82 0f       	add	r24, r18
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	d0 f4       	brcc	.+52     	; 0x1702 <__vector_11+0x2b6>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    16ce:	8e ef       	ldi	r24, 0xFE	; 254
    16d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		{
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT)
			{
				usb_send_in();
				UENUM = i;
    16d4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (bRequest == SET_FEATURE)
    16d8:	a3 30       	cpi	r26, 0x03	; 3
    16da:	21 f4       	brne	.+8      	; 0x16e4 <__vector_11+0x298>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN);
    16dc:	81 e2       	ldi	r24, 0x21	; 33
    16de:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    16e2:	12 c0       	rjmp	.+36     	; 0x1708 <__vector_11+0x2bc>
				}
				else
				{
					UECONX = (1 << STALLRQC) | (1 << RSTDT) | (1 << EPEN);
    16e4:	89 e1       	ldi	r24, 0x19	; 25
    16e6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					UERST = (1 << i);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <__vector_11+0x2a8>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	2a 95       	dec	r18
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <__vector_11+0x2a4>
    16f8:	ea ee       	ldi	r30, 0xEA	; 234
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 83       	st	Z, r24
					UERST = 0;
    16fe:	10 82       	st	Z, r1
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <__vector_11+0x2bc>
				return;
			}
		}
#endif
	}
	UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
    1702:	81 e2       	ldi	r24, 0x21	; 33
    1704:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
}
    1708:	ff 91       	pop	r31
    170a:	ef 91       	pop	r30
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	0f 90       	pop	r0
    172a:	1f 90       	pop	r1
    172c:	18 95       	reti

0000172e <print_P>:

// BELOW FROM PRINT.C

void print_P(const char *s)
{
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	fc 01       	movw	r30, r24
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
    1736:	8f 01       	movw	r16, r30
    1738:	0f 5f       	subi	r16, 0xFF	; 255
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
    173c:	c4 91       	lpm	r28, Z
		if (!c)
    173e:	cc 23       	and	r28, r28
    1740:	51 f0       	breq	.+20     	; 0x1756 <print_P+0x28>
			break;
		if (c == '\n')
    1742:	ca 30       	cpi	r28, 0x0A	; 10
    1744:	19 f4       	brne	.+6      	; 0x174c <print_P+0x1e>
			usb_tx_char('\r');
    1746:	8d e0       	ldi	r24, 0x0D	; 13
    1748:	0e 94 94 09 	call	0x1328	; 0x1328 <m_usb_tx_char>
		usb_tx_char(c);
    174c:	8c 2f       	mov	r24, r28
    174e:	0e 94 94 09 	call	0x1328	; 0x1328 <m_usb_tx_char>
{
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
    1752:	f8 01       	movw	r30, r16
		if (!c)
			break;
		if (c == '\n')
			usb_tx_char('\r');
		usb_tx_char(c);
	}
    1754:	f0 cf       	rjmp	.-32     	; 0x1736 <print_P+0x8>
}
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	08 95       	ret

0000175e <profiler_init>:

/*---------------------------- LINEAR PROFILE API ----------------------------*/
void profiler_init(float distance_mm,
				   float max_vel_mm_s,
				   float acc_mm_s2)
{
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
	target_dist_mm = distance_mm;
    1766:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <target_dist_mm>
    176a:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <target_dist_mm+0x1>
    176e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <target_dist_mm+0x2>
    1772:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <target_dist_mm+0x3>
	lin_max_vel = max_vel_mm_s;
    1776:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <lin_max_vel>
    177a:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <lin_max_vel+0x1>
    177e:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <lin_max_vel+0x2>
    1782:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <lin_max_vel+0x3>
	lin_acc = acc_mm_s2;
    1786:	e0 92 fe 01 	sts	0x01FE, r14	; 0x8001fe <lin_acc>
    178a:	f0 92 ff 01 	sts	0x01FF, r15	; 0x8001ff <lin_acc+0x1>
    178e:	00 93 00 02 	sts	0x0200, r16	; 0x800200 <lin_acc+0x2>
    1792:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <lin_acc+0x3>

	/* compute encoder counts per mm */
	float circ = WHEEL_DIAMETER_MM * M_PI;
	lin_counts_per_mm = (4.0f * (float)ENCODER_PPR) / circ;
    1796:	84 ee       	ldi	r24, 0xE4	; 228
    1798:	97 eb       	ldi	r25, 0xB7	; 183
    179a:	ab ec       	ldi	r26, 0xCB	; 203
    179c:	b0 e4       	ldi	r27, 0x40	; 64
    179e:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <lin_counts_per_mm>
    17a2:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <lin_counts_per_mm+0x1>
    17a6:	a0 93 fc 01 	sts	0x01FC, r26	; 0x8001fc <lin_counts_per_mm+0x2>
    17aa:	b0 93 fd 01 	sts	0x01FD, r27	; 0x8001fd <lin_counts_per_mm+0x3>

	/* reset & snapshot encoder */
	motors_reset_edge_counts();
    17ae:	0e 94 11 09 	call	0x1222	; 0x1222 <motors_reset_edge_counts>
	lin_start_steps = motors_get_step_count_left();
    17b2:	0e 94 3d 09 	call	0x127a	; 0x127a <motors_get_step_count_left>
    17b6:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <lin_start_steps>
    17ba:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <lin_start_steps+0x1>
    17be:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <lin_start_steps+0x2>
    17c2:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <lin_start_steps+0x3>

	lin_running = true;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <lin_running>
}
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	08 95       	ret

000017d6 <profiler_update>:

void profiler_update(void)
{
    17d6:	4f 92       	push	r4
    17d8:	5f 92       	push	r5
    17da:	6f 92       	push	r6
    17dc:	7f 92       	push	r7
    17de:	8f 92       	push	r8
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	2c 97       	sbiw	r28, 0x0c	; 12
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
	if (!lin_running)
    1802:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <lin_running>
    1806:	88 23       	and	r24, r24
    1808:	09 f4       	brne	.+2      	; 0x180c <profiler_update+0x36>
    180a:	bf c0       	rjmp	.+382    	; 0x198a <profiler_update+0x1b4>
		return;

	/* distance so far [mm] */
	uint32_t steps = motors_get_step_count_left() - lin_start_steps;
    180c:	0e 94 3d 09 	call	0x127a	; 0x127a <motors_get_step_count_left>
    1810:	c0 90 f6 01 	lds	r12, 0x01F6	; 0x8001f6 <lin_start_steps>
    1814:	d0 90 f7 01 	lds	r13, 0x01F7	; 0x8001f7 <lin_start_steps+0x1>
    1818:	e0 90 f8 01 	lds	r14, 0x01F8	; 0x8001f8 <lin_start_steps+0x2>
    181c:	f0 90 f9 01 	lds	r15, 0x01F9	; 0x8001f9 <lin_start_steps+0x3>
    1820:	6c 19       	sub	r22, r12
    1822:	7d 09       	sbc	r23, r13
    1824:	8e 09       	sbc	r24, r14
    1826:	9f 09       	sbc	r25, r15
	float dist_mm = steps / lin_counts_per_mm;
    1828:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__floatunsisf>
    182c:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <lin_counts_per_mm>
    1830:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <lin_counts_per_mm+0x1>
    1834:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <lin_counts_per_mm+0x2>
    1838:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <lin_counts_per_mm+0x3>
    183c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__divsf3>
    1840:	4b 01       	movw	r8, r22
    1842:	5c 01       	movw	r10, r24

	/* trapezoid breakpoints */
	float d_acc = (lin_max_vel * lin_max_vel) / (2.0f * lin_acc);
    1844:	c0 90 02 02 	lds	r12, 0x0202	; 0x800202 <lin_max_vel>
    1848:	d0 90 03 02 	lds	r13, 0x0203	; 0x800203 <lin_max_vel+0x1>
    184c:	e0 90 04 02 	lds	r14, 0x0204	; 0x800204 <lin_max_vel+0x2>
    1850:	f0 90 05 02 	lds	r15, 0x0205	; 0x800205 <lin_max_vel+0x3>
    1854:	a7 01       	movw	r20, r14
    1856:	96 01       	movw	r18, r12
    1858:	c7 01       	movw	r24, r14
    185a:	b6 01       	movw	r22, r12
    185c:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1860:	2b 01       	movw	r4, r22
    1862:	3c 01       	movw	r6, r24
    1864:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <lin_acc>
    1868:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <lin_acc+0x1>
    186c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <lin_acc+0x2>
    1870:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <lin_acc+0x3>
    1874:	9b 01       	movw	r18, r22
    1876:	ac 01       	movw	r20, r24
    1878:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__addsf3>
    187c:	6d 83       	std	Y+5, r22	; 0x05
    187e:	7e 83       	std	Y+6, r23	; 0x06
    1880:	8f 83       	std	Y+7, r24	; 0x07
    1882:	98 87       	std	Y+8, r25	; 0x08
    1884:	9b 01       	movw	r18, r22
    1886:	ac 01       	movw	r20, r24
    1888:	c3 01       	movw	r24, r6
    188a:	b2 01       	movw	r22, r4
    188c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__divsf3>
    1890:	69 83       	std	Y+1, r22	; 0x01
    1892:	7a 83       	std	Y+2, r23	; 0x02
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	9c 83       	std	Y+4, r25	; 0x04
	float d_decel = d_acc;
	float cruise_end = target_dist_mm - d_decel;
    1898:	40 90 06 02 	lds	r4, 0x0206	; 0x800206 <target_dist_mm>
    189c:	50 90 07 02 	lds	r5, 0x0207	; 0x800207 <target_dist_mm+0x1>
    18a0:	60 90 08 02 	lds	r6, 0x0208	; 0x800208 <target_dist_mm+0x2>
    18a4:	70 90 09 02 	lds	r7, 0x0209	; 0x800209 <target_dist_mm+0x3>
    18a8:	9b 01       	movw	r18, r22
    18aa:	ac 01       	movw	r20, r24
    18ac:	c3 01       	movw	r24, r6
    18ae:	b2 01       	movw	r22, r4
    18b0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__subsf3>
    18b4:	69 87       	std	Y+9, r22	; 0x09
    18b6:	7a 87       	std	Y+10, r23	; 0x0a
    18b8:	8b 87       	std	Y+11, r24	; 0x0b
    18ba:	9c 87       	std	Y+12, r25	; 0x0c

	/* compute desired v [mm/s] */
	float v;
	if (dist_mm < d_acc)
    18bc:	29 81       	ldd	r18, Y+1	; 0x01
    18be:	3a 81       	ldd	r19, Y+2	; 0x02
    18c0:	4b 81       	ldd	r20, Y+3	; 0x03
    18c2:	5c 81       	ldd	r21, Y+4	; 0x04
    18c4:	c5 01       	movw	r24, r10
    18c6:	b4 01       	movw	r22, r8
    18c8:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__cmpsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	6c f4       	brge	.+26     	; 0x18ea <profiler_update+0x114>
	{
		v = sqrtf(2.0f * lin_acc * dist_mm);
    18d0:	2d 81       	ldd	r18, Y+5	; 0x05
    18d2:	3e 81       	ldd	r19, Y+6	; 0x06
    18d4:	4f 81       	ldd	r20, Y+7	; 0x07
    18d6:	58 85       	ldd	r21, Y+8	; 0x08
    18d8:	c5 01       	movw	r24, r10
    18da:	b4 01       	movw	r22, r8
    18dc:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    18e0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <sqrt>
    18e4:	6b 01       	movw	r12, r22
    18e6:	7c 01       	movw	r14, r24
    18e8:	1c c0       	rjmp	.+56     	; 0x1922 <profiler_update+0x14c>
	}
	else if (dist_mm < cruise_end)
    18ea:	29 85       	ldd	r18, Y+9	; 0x09
    18ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    18f0:	5c 85       	ldd	r21, Y+12	; 0x0c
    18f2:	c5 01       	movw	r24, r10
    18f4:	b4 01       	movw	r22, r8
    18f6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__cmpsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	94 f0       	brlt	.+36     	; 0x1922 <profiler_update+0x14c>
	{
		v = lin_max_vel;
	}
	else
	{
		float rem = target_dist_mm - dist_mm;
    18fe:	a5 01       	movw	r20, r10
    1900:	94 01       	movw	r18, r8
    1902:	c3 01       	movw	r24, r6
    1904:	b2 01       	movw	r22, r4
    1906:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__subsf3>
    190a:	9b 01       	movw	r18, r22
    190c:	ac 01       	movw	r20, r24
		v = sqrtf(2.0f * lin_acc * rem);
    190e:	6d 81       	ldd	r22, Y+5	; 0x05
    1910:	7e 81       	ldd	r23, Y+6	; 0x06
    1912:	8f 81       	ldd	r24, Y+7	; 0x07
    1914:	98 85       	ldd	r25, Y+8	; 0x08
    1916:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    191a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <sqrt>
    191e:	6b 01       	movw	r12, r22
    1920:	7c 01       	movw	r14, r24
	}

	/* convert to RPM */
	float revs_s = v / (WHEEL_DIAMETER_MM * M_PI);
    1922:	23 e6       	ldi	r18, 0x63	; 99
    1924:	34 e1       	ldi	r19, 0x14	; 20
    1926:	4d e1       	ldi	r20, 0x1D	; 29
    1928:	54 e4       	ldi	r21, 0x44	; 68
    192a:	c7 01       	movw	r24, r14
    192c:	b6 01       	movw	r22, r12
    192e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__divsf3>
	uint16_t rpm = (uint16_t)(revs_s * 60.0f + 0.5f);
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e7       	ldi	r20, 0x70	; 112
    1938:	52 e4       	ldi	r21, 0x42	; 66
    193a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__addsf3>
    194a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__fixunssfsi>
    194e:	6b 01       	movw	r12, r22
    1950:	7c 01       	movw	r14, r24

	/* command both wheels forward */
	motors_set_dir_left(true);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 62 08 	call	0x10c4	; 0x10c4 <motors_set_dir_left>
	motors_set_dir_right(true);
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <motors_set_dir_right>
	motors_set_speed_both(rpm, rpm);
    195e:	b6 01       	movw	r22, r12
    1960:	c6 01       	movw	r24, r12
    1962:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <motors_set_speed_both>

	/* done? */
	if (dist_mm >= target_dist_mm)
    1966:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <target_dist_mm>
    196a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <target_dist_mm+0x1>
    196e:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <target_dist_mm+0x2>
    1972:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <target_dist_mm+0x3>
    1976:	c5 01       	movw	r24, r10
    1978:	b4 01       	movw	r22, r8
    197a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__gesf2>
    197e:	88 23       	and	r24, r24
    1980:	24 f0       	brlt	.+8      	; 0x198a <profiler_update+0x1b4>
	{
		motors_stop_all();
    1982:	0e 94 03 09 	call	0x1206	; 0x1206 <motors_stop_all>
		lin_running = false;
    1986:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <lin_running>
	}
}
    198a:	2c 96       	adiw	r28, 0x0c	; 12
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	df 90       	pop	r13
    19a0:	cf 90       	pop	r12
    19a2:	bf 90       	pop	r11
    19a4:	af 90       	pop	r10
    19a6:	9f 90       	pop	r9
    19a8:	8f 90       	pop	r8
    19aa:	7f 90       	pop	r7
    19ac:	6f 90       	pop	r6
    19ae:	5f 90       	pop	r5
    19b0:	4f 90       	pop	r4
    19b2:	08 95       	ret

000019b4 <profiler_is_running>:

bool profiler_is_running(void)
{
	return lin_running;
}
    19b4:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <lin_running>
    19b8:	08 95       	ret

000019ba <profiler_turn_init>:

/*---------------------------- ROTATION PROFILE API -------------------------------*/
void profiler_turn_init(float angle_deg,
						float max_omega_deg_s,
						float ang_acc_deg_s2)
{
    19ba:	4f 92       	push	r4
    19bc:	5f 92       	push	r5
    19be:	6f 92       	push	r6
    19c0:	7f 92       	push	r7
    19c2:	8f 92       	push	r8
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	4b 01       	movw	r8, r22
    19da:	5c 01       	movw	r10, r24
    19dc:	29 01       	movw	r4, r18
    19de:	3a 01       	movw	r6, r20
    19e0:	67 01       	movw	r12, r14
    19e2:	78 01       	movw	r14, r16
	/* 1) Compute how far each wheel must travel: d = (L/2)*?_rad */
	float theta = angle_deg * (M_PI / 180.0f);
    19e4:	25 e3       	ldi	r18, 0x35	; 53
    19e6:	3a ef       	ldi	r19, 0xFA	; 250
    19e8:	4e e8       	ldi	r20, 0x8E	; 142
    19ea:	5c e3       	ldi	r21, 0x3C	; 60
    19ec:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
	float half_track = WHEEL_BASE_MM * 0.5f;
	target_wheel_mm = fabsf(half_track * theta);
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e8       	ldi	r19, 0x80	; 128
    19f4:	44 e8       	ldi	r20, 0x84	; 132
    19f6:	53 e4       	ldi	r21, 0x43	; 67
    19f8:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bf 77       	andi	r27, 0x7F	; 127
    1a02:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <target_wheel_mm>
    1a06:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <target_wheel_mm+0x1>
    1a0a:	a0 93 f3 01 	sts	0x01F3, r26	; 0x8001f3 <target_wheel_mm+0x2>
    1a0e:	b0 93 f4 01 	sts	0x01F4, r27	; 0x8001f4 <target_wheel_mm+0x3>
	turn_ccw = (angle_deg > 0.0f);
    1a12:	c1 e0       	ldi	r28, 0x01	; 1
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	a9 01       	movw	r20, r18
    1a1a:	c5 01       	movw	r24, r10
    1a1c:	b4 01       	movw	r22, r8
    1a1e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__gesf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	0c f0       	brlt	.+2      	; 0x1a28 <profiler_turn_init+0x6e>
    1a26:	c0 e0       	ldi	r28, 0x00	; 0
    1a28:	c0 93 db 01 	sts	0x01DB, r28	; 0x8001db <turn_ccw>

	/* 2) Convert angular ? linear at wheel rim */
	turn_max_vel = fabsf(max_omega_deg_s * (M_PI / 180.0f) * half_track);
    1a2c:	25 e3       	ldi	r18, 0x35	; 53
    1a2e:	3a ef       	ldi	r19, 0xFA	; 250
    1a30:	4e e8       	ldi	r20, 0x8E	; 142
    1a32:	5c e3       	ldi	r21, 0x3C	; 60
    1a34:	c3 01       	movw	r24, r6
    1a36:	b2 01       	movw	r22, r4
    1a38:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e8       	ldi	r19, 0x80	; 128
    1a40:	44 e8       	ldi	r20, 0x84	; 132
    1a42:	53 e4       	ldi	r21, 0x43	; 67
    1a44:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	bf 77       	andi	r27, 0x7F	; 127
    1a4e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <turn_max_vel>
    1a52:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <turn_max_vel+0x1>
    1a56:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <turn_max_vel+0x2>
    1a5a:	b0 93 f0 01 	sts	0x01F0, r27	; 0x8001f0 <turn_max_vel+0x3>
	turn_acc = fabsf(ang_acc_deg_s2 * (M_PI / 180.0f) * half_track);
    1a5e:	25 e3       	ldi	r18, 0x35	; 53
    1a60:	3a ef       	ldi	r19, 0xFA	; 250
    1a62:	4e e8       	ldi	r20, 0x8E	; 142
    1a64:	5c e3       	ldi	r21, 0x3C	; 60
    1a66:	c7 01       	movw	r24, r14
    1a68:	b6 01       	movw	r22, r12
    1a6a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e8       	ldi	r19, 0x80	; 128
    1a72:	44 e8       	ldi	r20, 0x84	; 132
    1a74:	53 e4       	ldi	r21, 0x43	; 67
    1a76:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bf 77       	andi	r27, 0x7F	; 127
    1a80:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <turn_acc>
    1a84:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <turn_acc+0x1>
    1a88:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <turn_acc+0x2>
    1a8c:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <turn_acc+0x3>

	/* 3) Encoder counts per mm (same formula) */
	float circ = WHEEL_DIAMETER_MM * M_PI;
	turn_counts_per_mm = (4.0f * (float)ENCODER_PPR) / circ;
    1a90:	84 ee       	ldi	r24, 0xE4	; 228
    1a92:	97 eb       	ldi	r25, 0xB7	; 183
    1a94:	ab ec       	ldi	r26, 0xCB	; 203
    1a96:	b0 e4       	ldi	r27, 0x40	; 64
    1a98:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <turn_counts_per_mm>
    1a9c:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <turn_counts_per_mm+0x1>
    1aa0:	a0 93 e7 01 	sts	0x01E7, r26	; 0x8001e7 <turn_counts_per_mm+0x2>
    1aa4:	b0 93 e8 01 	sts	0x01E8, r27	; 0x8001e8 <turn_counts_per_mm+0x3>

	/* 4) Reset & snapshot both encoders */
	motors_reset_edge_counts();
    1aa8:	0e 94 11 09 	call	0x1222	; 0x1222 <motors_reset_edge_counts>
	turn_start_left = motors_get_step_count_left();
    1aac:	0e 94 3d 09 	call	0x127a	; 0x127a <motors_get_step_count_left>
    1ab0:	60 93 e1 01 	sts	0x01E1, r22	; 0x8001e1 <turn_start_left>
    1ab4:	70 93 e2 01 	sts	0x01E2, r23	; 0x8001e2 <turn_start_left+0x1>
    1ab8:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <turn_start_left+0x2>
    1abc:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <turn_start_left+0x3>
	turn_start_right = motors_get_step_count_right();
    1ac0:	0e 94 44 09 	call	0x1288	; 0x1288 <motors_get_step_count_right>
    1ac4:	60 93 dd 01 	sts	0x01DD, r22	; 0x8001dd <turn_start_right>
    1ac8:	70 93 de 01 	sts	0x01DE, r23	; 0x8001de <turn_start_right+0x1>
    1acc:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <turn_start_right+0x2>
    1ad0:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <turn_start_right+0x3>

	turn_running = true;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <turn_running>
}
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	bf 90       	pop	r11
    1aea:	af 90       	pop	r10
    1aec:	9f 90       	pop	r9
    1aee:	8f 90       	pop	r8
    1af0:	7f 90       	pop	r7
    1af2:	6f 90       	pop	r6
    1af4:	5f 90       	pop	r5
    1af6:	4f 90       	pop	r4
    1af8:	08 95       	ret

00001afa <profiler_turn_update>:

void profiler_turn_update(void)
{
    1afa:	4f 92       	push	r4
    1afc:	5f 92       	push	r5
    1afe:	6f 92       	push	r6
    1b00:	7f 92       	push	r7
    1b02:	8f 92       	push	r8
    1b04:	9f 92       	push	r9
    1b06:	af 92       	push	r10
    1b08:	bf 92       	push	r11
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	28 97       	sbiw	r28, 0x08	; 8
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
	if (!turn_running)
    1b26:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <turn_running>
    1b2a:	88 23       	and	r24, r24
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <profiler_turn_update+0x36>
    1b2e:	eb c0       	rjmp	.+470    	; 0x1d06 <profiler_turn_update+0x20c>
		return;

	/* average wheel travel [mm] */
	uint32_t sl = motors_get_step_count_left() - turn_start_left;
    1b30:	0e 94 3d 09 	call	0x127a	; 0x127a <motors_get_step_count_left>
    1b34:	c0 90 e1 01 	lds	r12, 0x01E1	; 0x8001e1 <turn_start_left>
    1b38:	d0 90 e2 01 	lds	r13, 0x01E2	; 0x8001e2 <turn_start_left+0x1>
    1b3c:	e0 90 e3 01 	lds	r14, 0x01E3	; 0x8001e3 <turn_start_left+0x2>
    1b40:	f0 90 e4 01 	lds	r15, 0x01E4	; 0x8001e4 <turn_start_left+0x3>
    1b44:	4b 01       	movw	r8, r22
    1b46:	5c 01       	movw	r10, r24
    1b48:	8c 18       	sub	r8, r12
    1b4a:	9d 08       	sbc	r9, r13
    1b4c:	ae 08       	sbc	r10, r14
    1b4e:	bf 08       	sbc	r11, r15
	uint32_t sr = motors_get_step_count_right() - turn_start_right;
    1b50:	0e 94 44 09 	call	0x1288	; 0x1288 <motors_get_step_count_right>
    1b54:	c0 90 dd 01 	lds	r12, 0x01DD	; 0x8001dd <turn_start_right>
    1b58:	d0 90 de 01 	lds	r13, 0x01DE	; 0x8001de <turn_start_right+0x1>
    1b5c:	e0 90 df 01 	lds	r14, 0x01DF	; 0x8001df <turn_start_right+0x2>
    1b60:	f0 90 e0 01 	lds	r15, 0x01E0	; 0x8001e0 <turn_start_right+0x3>
    1b64:	9b 01       	movw	r18, r22
    1b66:	ac 01       	movw	r20, r24
    1b68:	2c 19       	sub	r18, r12
    1b6a:	3d 09       	sbc	r19, r13
    1b6c:	4e 09       	sbc	r20, r14
    1b6e:	5f 09       	sbc	r21, r15
    1b70:	69 01       	movw	r12, r18
    1b72:	7a 01       	movw	r14, r20
	float dl = sl / turn_counts_per_mm;
    1b74:	c5 01       	movw	r24, r10
    1b76:	b4 01       	movw	r22, r8
    1b78:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__floatunsisf>
    1b7c:	80 90 e5 01 	lds	r8, 0x01E5	; 0x8001e5 <turn_counts_per_mm>
    1b80:	90 90 e6 01 	lds	r9, 0x01E6	; 0x8001e6 <turn_counts_per_mm+0x1>
    1b84:	a0 90 e7 01 	lds	r10, 0x01E7	; 0x8001e7 <turn_counts_per_mm+0x2>
    1b88:	b0 90 e8 01 	lds	r11, 0x01E8	; 0x8001e8 <turn_counts_per_mm+0x3>
    1b8c:	a5 01       	movw	r20, r10
    1b8e:	94 01       	movw	r18, r8
    1b90:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__divsf3>
    1b94:	2b 01       	movw	r4, r22
    1b96:	3c 01       	movw	r6, r24
	float dr = sr / turn_counts_per_mm;
    1b98:	c7 01       	movw	r24, r14
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__floatunsisf>
    1ba0:	a5 01       	movw	r20, r10
    1ba2:	94 01       	movw	r18, r8
    1ba4:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__divsf3>
    1ba8:	9b 01       	movw	r18, r22
    1baa:	ac 01       	movw	r20, r24
	float d = (dl + dr) * 0.5f;
    1bac:	c3 01       	movw	r24, r6
    1bae:	b2 01       	movw	r22, r4
    1bb0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__addsf3>
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1bc0:	4b 01       	movw	r8, r22
    1bc2:	5c 01       	movw	r10, r24

	/* trapezoid breakpoints */
	float d_acc = (turn_max_vel * turn_max_vel) / (2.0f * turn_acc);
    1bc4:	c0 90 ed 01 	lds	r12, 0x01ED	; 0x8001ed <turn_max_vel>
    1bc8:	d0 90 ee 01 	lds	r13, 0x01EE	; 0x8001ee <turn_max_vel+0x1>
    1bcc:	e0 90 ef 01 	lds	r14, 0x01EF	; 0x8001ef <turn_max_vel+0x2>
    1bd0:	f0 90 f0 01 	lds	r15, 0x01F0	; 0x8001f0 <turn_max_vel+0x3>
    1bd4:	a7 01       	movw	r20, r14
    1bd6:	96 01       	movw	r18, r12
    1bd8:	c7 01       	movw	r24, r14
    1bda:	b6 01       	movw	r22, r12
    1bdc:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1be0:	2b 01       	movw	r4, r22
    1be2:	3c 01       	movw	r6, r24
    1be4:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <turn_acc>
    1be8:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <turn_acc+0x1>
    1bec:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <turn_acc+0x2>
    1bf0:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <turn_acc+0x3>
    1bf4:	9b 01       	movw	r18, r22
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__addsf3>
    1bfc:	69 83       	std	Y+1, r22	; 0x01
    1bfe:	7a 83       	std	Y+2, r23	; 0x02
    1c00:	8b 83       	std	Y+3, r24	; 0x03
    1c02:	9c 83       	std	Y+4, r25	; 0x04
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
    1c08:	c3 01       	movw	r24, r6
    1c0a:	b2 01       	movw	r22, r4
    1c0c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__divsf3>
    1c10:	6d 83       	std	Y+5, r22	; 0x05
    1c12:	7e 83       	std	Y+6, r23	; 0x06
    1c14:	8f 83       	std	Y+7, r24	; 0x07
    1c16:	98 87       	std	Y+8, r25	; 0x08
	float d_decel = d_acc;

	/* desired v [mm/s] */
	float v;
	if (d < d_acc)
    1c18:	9b 01       	movw	r18, r22
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	c5 01       	movw	r24, r10
    1c1e:	b4 01       	movw	r22, r8
    1c20:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__cmpsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	6c f4       	brge	.+26     	; 0x1c42 <profiler_turn_update+0x148>
	{
		v = sqrtf(2.0f * turn_acc * d);
    1c28:	29 81       	ldd	r18, Y+1	; 0x01
    1c2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c2c:	4b 81       	ldd	r20, Y+3	; 0x03
    1c2e:	5c 81       	ldd	r21, Y+4	; 0x04
    1c30:	c5 01       	movw	r24, r10
    1c32:	b4 01       	movw	r22, r8
    1c34:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1c38:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <sqrt>
    1c3c:	6b 01       	movw	r12, r22
    1c3e:	7c 01       	movw	r14, r24
    1c40:	2a c0       	rjmp	.+84     	; 0x1c96 <profiler_turn_update+0x19c>
	}
	else if (d < (target_wheel_mm - d_decel))
    1c42:	40 90 f1 01 	lds	r4, 0x01F1	; 0x8001f1 <target_wheel_mm>
    1c46:	50 90 f2 01 	lds	r5, 0x01F2	; 0x8001f2 <target_wheel_mm+0x1>
    1c4a:	60 90 f3 01 	lds	r6, 0x01F3	; 0x8001f3 <target_wheel_mm+0x2>
    1c4e:	70 90 f4 01 	lds	r7, 0x01F4	; 0x8001f4 <target_wheel_mm+0x3>
    1c52:	2d 81       	ldd	r18, Y+5	; 0x05
    1c54:	3e 81       	ldd	r19, Y+6	; 0x06
    1c56:	4f 81       	ldd	r20, Y+7	; 0x07
    1c58:	58 85       	ldd	r21, Y+8	; 0x08
    1c5a:	c3 01       	movw	r24, r6
    1c5c:	b2 01       	movw	r22, r4
    1c5e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__subsf3>
    1c62:	9b 01       	movw	r18, r22
    1c64:	ac 01       	movw	r20, r24
    1c66:	c5 01       	movw	r24, r10
    1c68:	b4 01       	movw	r22, r8
    1c6a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__cmpsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	94 f0       	brlt	.+36     	; 0x1c96 <profiler_turn_update+0x19c>
	{
		v = turn_max_vel;
	}
	else
	{
		float rem = target_wheel_mm - d;
    1c72:	a5 01       	movw	r20, r10
    1c74:	94 01       	movw	r18, r8
    1c76:	c3 01       	movw	r24, r6
    1c78:	b2 01       	movw	r22, r4
    1c7a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__subsf3>
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
		v = sqrtf(2.0f * turn_acc * rem);
    1c82:	69 81       	ldd	r22, Y+1	; 0x01
    1c84:	7a 81       	ldd	r23, Y+2	; 0x02
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1c8e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <sqrt>
    1c92:	6b 01       	movw	r12, r22
    1c94:	7c 01       	movw	r14, r24
	}

	/* convert to RPM */
	float revs_s = v / (WHEEL_DIAMETER_MM * M_PI);
    1c96:	23 e6       	ldi	r18, 0x63	; 99
    1c98:	34 e1       	ldi	r19, 0x14	; 20
    1c9a:	4d e1       	ldi	r20, 0x1D	; 29
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	c7 01       	movw	r24, r14
    1ca0:	b6 01       	movw	r22, r12
    1ca2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__divsf3>
	uint16_t rpm = (uint16_t)(revs_s * 60.0f + 0.5f);
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e7       	ldi	r20, 0x70	; 112
    1cac:	52 e4       	ldi	r21, 0x42	; 66
    1cae:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulsf3>
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__addsf3>
    1cbe:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__fixunssfsi>
    1cc2:	6b 01       	movw	r12, r22
    1cc4:	7c 01       	movw	r14, r24

	/* opposite wheel dirs for in-place turn */
	motors_set_dir_left(!turn_ccw);
    1cc6:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <turn_ccw>
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	89 27       	eor	r24, r25
    1cce:	0e 94 62 08 	call	0x10c4	; 0x10c4 <motors_set_dir_left>
	motors_set_dir_right(turn_ccw);
    1cd2:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <turn_ccw>
    1cd6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <motors_set_dir_right>
	motors_set_speed_both(rpm, rpm);
    1cda:	b6 01       	movw	r22, r12
    1cdc:	c6 01       	movw	r24, r12
    1cde:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <motors_set_speed_both>

	/* done? */
	if (d >= target_wheel_mm)
    1ce2:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <target_wheel_mm>
    1ce6:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <target_wheel_mm+0x1>
    1cea:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <target_wheel_mm+0x2>
    1cee:	50 91 f4 01 	lds	r21, 0x01F4	; 0x8001f4 <target_wheel_mm+0x3>
    1cf2:	c5 01       	movw	r24, r10
    1cf4:	b4 01       	movw	r22, r8
    1cf6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__gesf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	24 f0       	brlt	.+8      	; 0x1d06 <profiler_turn_update+0x20c>
	{
		motors_stop_all();
    1cfe:	0e 94 03 09 	call	0x1206	; 0x1206 <motors_stop_all>
		turn_running = false;
    1d02:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <turn_running>
	}
}
    1d06:	28 96       	adiw	r28, 0x08	; 8
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	bf 90       	pop	r11
    1d20:	af 90       	pop	r10
    1d22:	9f 90       	pop	r9
    1d24:	8f 90       	pop	r8
    1d26:	7f 90       	pop	r7
    1d28:	6f 90       	pop	r6
    1d2a:	5f 90       	pop	r5
    1d2c:	4f 90       	pop	r4
    1d2e:	08 95       	ret

00001d30 <profiler_turn_is_running>:

bool profiler_turn_is_running(void)
{
	return turn_running;
}
    1d30:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <turn_running>
    1d34:	08 95       	ret

00001d36 <__subsf3>:
    1d36:	50 58       	subi	r21, 0x80	; 128

00001d38 <__addsf3>:
    1d38:	bb 27       	eor	r27, r27
    1d3a:	aa 27       	eor	r26, r26
    1d3c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__addsf3x>
    1d40:	0c 94 26 10 	jmp	0x204c	; 0x204c <__fp_round>
    1d44:	0e 94 18 10 	call	0x2030	; 0x2030 <__fp_pscA>
    1d48:	38 f0       	brcs	.+14     	; 0x1d58 <__addsf3+0x20>
    1d4a:	0e 94 1f 10 	call	0x203e	; 0x203e <__fp_pscB>
    1d4e:	20 f0       	brcs	.+8      	; 0x1d58 <__addsf3+0x20>
    1d50:	39 f4       	brne	.+14     	; 0x1d60 <__addsf3+0x28>
    1d52:	9f 3f       	cpi	r25, 0xFF	; 255
    1d54:	19 f4       	brne	.+6      	; 0x1d5c <__addsf3+0x24>
    1d56:	26 f4       	brtc	.+8      	; 0x1d60 <__addsf3+0x28>
    1d58:	0c 94 15 10 	jmp	0x202a	; 0x202a <__fp_nan>
    1d5c:	0e f4       	brtc	.+2      	; 0x1d60 <__addsf3+0x28>
    1d5e:	e0 95       	com	r30
    1d60:	e7 fb       	bst	r30, 7
    1d62:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__fp_inf>

00001d66 <__addsf3x>:
    1d66:	e9 2f       	mov	r30, r25
    1d68:	0e 94 37 10 	call	0x206e	; 0x206e <__fp_split3>
    1d6c:	58 f3       	brcs	.-42     	; 0x1d44 <__addsf3+0xc>
    1d6e:	ba 17       	cp	r27, r26
    1d70:	62 07       	cpc	r22, r18
    1d72:	73 07       	cpc	r23, r19
    1d74:	84 07       	cpc	r24, r20
    1d76:	95 07       	cpc	r25, r21
    1d78:	20 f0       	brcs	.+8      	; 0x1d82 <__addsf3x+0x1c>
    1d7a:	79 f4       	brne	.+30     	; 0x1d9a <__addsf3x+0x34>
    1d7c:	a6 f5       	brtc	.+104    	; 0x1de6 <__addsf3x+0x80>
    1d7e:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__fp_zero>
    1d82:	0e f4       	brtc	.+2      	; 0x1d86 <__addsf3x+0x20>
    1d84:	e0 95       	com	r30
    1d86:	0b 2e       	mov	r0, r27
    1d88:	ba 2f       	mov	r27, r26
    1d8a:	a0 2d       	mov	r26, r0
    1d8c:	0b 01       	movw	r0, r22
    1d8e:	b9 01       	movw	r22, r18
    1d90:	90 01       	movw	r18, r0
    1d92:	0c 01       	movw	r0, r24
    1d94:	ca 01       	movw	r24, r20
    1d96:	a0 01       	movw	r20, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	ff 27       	eor	r31, r31
    1d9c:	59 1b       	sub	r21, r25
    1d9e:	99 f0       	breq	.+38     	; 0x1dc6 <__addsf3x+0x60>
    1da0:	59 3f       	cpi	r21, 0xF9	; 249
    1da2:	50 f4       	brcc	.+20     	; 0x1db8 <__addsf3x+0x52>
    1da4:	50 3e       	cpi	r21, 0xE0	; 224
    1da6:	68 f1       	brcs	.+90     	; 0x1e02 <__addsf3x+0x9c>
    1da8:	1a 16       	cp	r1, r26
    1daa:	f0 40       	sbci	r31, 0x00	; 0
    1dac:	a2 2f       	mov	r26, r18
    1dae:	23 2f       	mov	r18, r19
    1db0:	34 2f       	mov	r19, r20
    1db2:	44 27       	eor	r20, r20
    1db4:	58 5f       	subi	r21, 0xF8	; 248
    1db6:	f3 cf       	rjmp	.-26     	; 0x1d9e <__addsf3x+0x38>
    1db8:	46 95       	lsr	r20
    1dba:	37 95       	ror	r19
    1dbc:	27 95       	ror	r18
    1dbe:	a7 95       	ror	r26
    1dc0:	f0 40       	sbci	r31, 0x00	; 0
    1dc2:	53 95       	inc	r21
    1dc4:	c9 f7       	brne	.-14     	; 0x1db8 <__addsf3x+0x52>
    1dc6:	7e f4       	brtc	.+30     	; 0x1de6 <__addsf3x+0x80>
    1dc8:	1f 16       	cp	r1, r31
    1dca:	ba 0b       	sbc	r27, r26
    1dcc:	62 0b       	sbc	r22, r18
    1dce:	73 0b       	sbc	r23, r19
    1dd0:	84 0b       	sbc	r24, r20
    1dd2:	ba f0       	brmi	.+46     	; 0x1e02 <__addsf3x+0x9c>
    1dd4:	91 50       	subi	r25, 0x01	; 1
    1dd6:	a1 f0       	breq	.+40     	; 0x1e00 <__addsf3x+0x9a>
    1dd8:	ff 0f       	add	r31, r31
    1dda:	bb 1f       	adc	r27, r27
    1ddc:	66 1f       	adc	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	88 1f       	adc	r24, r24
    1de2:	c2 f7       	brpl	.-16     	; 0x1dd4 <__addsf3x+0x6e>
    1de4:	0e c0       	rjmp	.+28     	; 0x1e02 <__addsf3x+0x9c>
    1de6:	ba 0f       	add	r27, r26
    1de8:	62 1f       	adc	r22, r18
    1dea:	73 1f       	adc	r23, r19
    1dec:	84 1f       	adc	r24, r20
    1dee:	48 f4       	brcc	.+18     	; 0x1e02 <__addsf3x+0x9c>
    1df0:	87 95       	ror	r24
    1df2:	77 95       	ror	r23
    1df4:	67 95       	ror	r22
    1df6:	b7 95       	ror	r27
    1df8:	f7 95       	ror	r31
    1dfa:	9e 3f       	cpi	r25, 0xFE	; 254
    1dfc:	08 f0       	brcs	.+2      	; 0x1e00 <__addsf3x+0x9a>
    1dfe:	b0 cf       	rjmp	.-160    	; 0x1d60 <__addsf3+0x28>
    1e00:	93 95       	inc	r25
    1e02:	88 0f       	add	r24, r24
    1e04:	08 f0       	brcs	.+2      	; 0x1e08 <__addsf3x+0xa2>
    1e06:	99 27       	eor	r25, r25
    1e08:	ee 0f       	add	r30, r30
    1e0a:	97 95       	ror	r25
    1e0c:	87 95       	ror	r24
    1e0e:	08 95       	ret

00001e10 <__cmpsf2>:
    1e10:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fp_cmp>
    1e14:	08 f4       	brcc	.+2      	; 0x1e18 <__cmpsf2+0x8>
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	08 95       	ret

00001e1a <__divsf3>:
    1e1a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__divsf3x>
    1e1e:	0c 94 26 10 	jmp	0x204c	; 0x204c <__fp_round>
    1e22:	0e 94 1f 10 	call	0x203e	; 0x203e <__fp_pscB>
    1e26:	58 f0       	brcs	.+22     	; 0x1e3e <__divsf3+0x24>
    1e28:	0e 94 18 10 	call	0x2030	; 0x2030 <__fp_pscA>
    1e2c:	40 f0       	brcs	.+16     	; 0x1e3e <__divsf3+0x24>
    1e2e:	29 f4       	brne	.+10     	; 0x1e3a <__divsf3+0x20>
    1e30:	5f 3f       	cpi	r21, 0xFF	; 255
    1e32:	29 f0       	breq	.+10     	; 0x1e3e <__divsf3+0x24>
    1e34:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__fp_inf>
    1e38:	51 11       	cpse	r21, r1
    1e3a:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__fp_szero>
    1e3e:	0c 94 15 10 	jmp	0x202a	; 0x202a <__fp_nan>

00001e42 <__divsf3x>:
    1e42:	0e 94 37 10 	call	0x206e	; 0x206e <__fp_split3>
    1e46:	68 f3       	brcs	.-38     	; 0x1e22 <__divsf3+0x8>

00001e48 <__divsf3_pse>:
    1e48:	99 23       	and	r25, r25
    1e4a:	b1 f3       	breq	.-20     	; 0x1e38 <__divsf3+0x1e>
    1e4c:	55 23       	and	r21, r21
    1e4e:	91 f3       	breq	.-28     	; 0x1e34 <__divsf3+0x1a>
    1e50:	95 1b       	sub	r25, r21
    1e52:	55 0b       	sbc	r21, r21
    1e54:	bb 27       	eor	r27, r27
    1e56:	aa 27       	eor	r26, r26
    1e58:	62 17       	cp	r22, r18
    1e5a:	73 07       	cpc	r23, r19
    1e5c:	84 07       	cpc	r24, r20
    1e5e:	38 f0       	brcs	.+14     	; 0x1e6e <__divsf3_pse+0x26>
    1e60:	9f 5f       	subi	r25, 0xFF	; 255
    1e62:	5f 4f       	sbci	r21, 0xFF	; 255
    1e64:	22 0f       	add	r18, r18
    1e66:	33 1f       	adc	r19, r19
    1e68:	44 1f       	adc	r20, r20
    1e6a:	aa 1f       	adc	r26, r26
    1e6c:	a9 f3       	breq	.-22     	; 0x1e58 <__divsf3_pse+0x10>
    1e6e:	35 d0       	rcall	.+106    	; 0x1eda <__divsf3_pse+0x92>
    1e70:	0e 2e       	mov	r0, r30
    1e72:	3a f0       	brmi	.+14     	; 0x1e82 <__divsf3_pse+0x3a>
    1e74:	e0 e8       	ldi	r30, 0x80	; 128
    1e76:	32 d0       	rcall	.+100    	; 0x1edc <__divsf3_pse+0x94>
    1e78:	91 50       	subi	r25, 0x01	; 1
    1e7a:	50 40       	sbci	r21, 0x00	; 0
    1e7c:	e6 95       	lsr	r30
    1e7e:	00 1c       	adc	r0, r0
    1e80:	ca f7       	brpl	.-14     	; 0x1e74 <__divsf3_pse+0x2c>
    1e82:	2b d0       	rcall	.+86     	; 0x1eda <__divsf3_pse+0x92>
    1e84:	fe 2f       	mov	r31, r30
    1e86:	29 d0       	rcall	.+82     	; 0x1eda <__divsf3_pse+0x92>
    1e88:	66 0f       	add	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	bb 1f       	adc	r27, r27
    1e90:	26 17       	cp	r18, r22
    1e92:	37 07       	cpc	r19, r23
    1e94:	48 07       	cpc	r20, r24
    1e96:	ab 07       	cpc	r26, r27
    1e98:	b0 e8       	ldi	r27, 0x80	; 128
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <__divsf3_pse+0x56>
    1e9c:	bb 0b       	sbc	r27, r27
    1e9e:	80 2d       	mov	r24, r0
    1ea0:	bf 01       	movw	r22, r30
    1ea2:	ff 27       	eor	r31, r31
    1ea4:	93 58       	subi	r25, 0x83	; 131
    1ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea8:	3a f0       	brmi	.+14     	; 0x1eb8 <__divsf3_pse+0x70>
    1eaa:	9e 3f       	cpi	r25, 0xFE	; 254
    1eac:	51 05       	cpc	r21, r1
    1eae:	78 f0       	brcs	.+30     	; 0x1ece <__divsf3_pse+0x86>
    1eb0:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__fp_inf>
    1eb4:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__fp_szero>
    1eb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eba:	e4 f3       	brlt	.-8      	; 0x1eb4 <__divsf3_pse+0x6c>
    1ebc:	98 3e       	cpi	r25, 0xE8	; 232
    1ebe:	d4 f3       	brlt	.-12     	; 0x1eb4 <__divsf3_pse+0x6c>
    1ec0:	86 95       	lsr	r24
    1ec2:	77 95       	ror	r23
    1ec4:	67 95       	ror	r22
    1ec6:	b7 95       	ror	r27
    1ec8:	f7 95       	ror	r31
    1eca:	9f 5f       	subi	r25, 0xFF	; 255
    1ecc:	c9 f7       	brne	.-14     	; 0x1ec0 <__divsf3_pse+0x78>
    1ece:	88 0f       	add	r24, r24
    1ed0:	91 1d       	adc	r25, r1
    1ed2:	96 95       	lsr	r25
    1ed4:	87 95       	ror	r24
    1ed6:	97 f9       	bld	r25, 7
    1ed8:	08 95       	ret
    1eda:	e1 e0       	ldi	r30, 0x01	; 1
    1edc:	66 0f       	add	r22, r22
    1ede:	77 1f       	adc	r23, r23
    1ee0:	88 1f       	adc	r24, r24
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	62 17       	cp	r22, r18
    1ee6:	73 07       	cpc	r23, r19
    1ee8:	84 07       	cpc	r24, r20
    1eea:	ba 07       	cpc	r27, r26
    1eec:	20 f0       	brcs	.+8      	; 0x1ef6 <__divsf3_pse+0xae>
    1eee:	62 1b       	sub	r22, r18
    1ef0:	73 0b       	sbc	r23, r19
    1ef2:	84 0b       	sbc	r24, r20
    1ef4:	ba 0b       	sbc	r27, r26
    1ef6:	ee 1f       	adc	r30, r30
    1ef8:	88 f7       	brcc	.-30     	; 0x1edc <__divsf3_pse+0x94>
    1efa:	e0 95       	com	r30
    1efc:	08 95       	ret

00001efe <__fixunssfsi>:
    1efe:	0e 94 3f 10 	call	0x207e	; 0x207e <__fp_splitA>
    1f02:	88 f0       	brcs	.+34     	; 0x1f26 <__fixunssfsi+0x28>
    1f04:	9f 57       	subi	r25, 0x7F	; 127
    1f06:	98 f0       	brcs	.+38     	; 0x1f2e <__fixunssfsi+0x30>
    1f08:	b9 2f       	mov	r27, r25
    1f0a:	99 27       	eor	r25, r25
    1f0c:	b7 51       	subi	r27, 0x17	; 23
    1f0e:	b0 f0       	brcs	.+44     	; 0x1f3c <__fixunssfsi+0x3e>
    1f10:	e1 f0       	breq	.+56     	; 0x1f4a <__fixunssfsi+0x4c>
    1f12:	66 0f       	add	r22, r22
    1f14:	77 1f       	adc	r23, r23
    1f16:	88 1f       	adc	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	1a f0       	brmi	.+6      	; 0x1f22 <__fixunssfsi+0x24>
    1f1c:	ba 95       	dec	r27
    1f1e:	c9 f7       	brne	.-14     	; 0x1f12 <__fixunssfsi+0x14>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <__fixunssfsi+0x4c>
    1f22:	b1 30       	cpi	r27, 0x01	; 1
    1f24:	91 f0       	breq	.+36     	; 0x1f4a <__fixunssfsi+0x4c>
    1f26:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__fp_zero>
    1f2a:	b1 e0       	ldi	r27, 0x01	; 1
    1f2c:	08 95       	ret
    1f2e:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__fp_zero>
    1f32:	67 2f       	mov	r22, r23
    1f34:	78 2f       	mov	r23, r24
    1f36:	88 27       	eor	r24, r24
    1f38:	b8 5f       	subi	r27, 0xF8	; 248
    1f3a:	39 f0       	breq	.+14     	; 0x1f4a <__fixunssfsi+0x4c>
    1f3c:	b9 3f       	cpi	r27, 0xF9	; 249
    1f3e:	cc f3       	brlt	.-14     	; 0x1f32 <__fixunssfsi+0x34>
    1f40:	86 95       	lsr	r24
    1f42:	77 95       	ror	r23
    1f44:	67 95       	ror	r22
    1f46:	b3 95       	inc	r27
    1f48:	d9 f7       	brne	.-10     	; 0x1f40 <__fixunssfsi+0x42>
    1f4a:	3e f4       	brtc	.+14     	; 0x1f5a <__fixunssfsi+0x5c>
    1f4c:	90 95       	com	r25
    1f4e:	80 95       	com	r24
    1f50:	70 95       	com	r23
    1f52:	61 95       	neg	r22
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	8f 4f       	sbci	r24, 0xFF	; 255
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	08 95       	ret

00001f5c <__floatunsisf>:
    1f5c:	e8 94       	clt
    1f5e:	09 c0       	rjmp	.+18     	; 0x1f72 <__floatsisf+0x12>

00001f60 <__floatsisf>:
    1f60:	97 fb       	bst	r25, 7
    1f62:	3e f4       	brtc	.+14     	; 0x1f72 <__floatsisf+0x12>
    1f64:	90 95       	com	r25
    1f66:	80 95       	com	r24
    1f68:	70 95       	com	r23
    1f6a:	61 95       	neg	r22
    1f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f70:	9f 4f       	sbci	r25, 0xFF	; 255
    1f72:	99 23       	and	r25, r25
    1f74:	a9 f0       	breq	.+42     	; 0x1fa0 <__floatsisf+0x40>
    1f76:	f9 2f       	mov	r31, r25
    1f78:	96 e9       	ldi	r25, 0x96	; 150
    1f7a:	bb 27       	eor	r27, r27
    1f7c:	93 95       	inc	r25
    1f7e:	f6 95       	lsr	r31
    1f80:	87 95       	ror	r24
    1f82:	77 95       	ror	r23
    1f84:	67 95       	ror	r22
    1f86:	b7 95       	ror	r27
    1f88:	f1 11       	cpse	r31, r1
    1f8a:	f8 cf       	rjmp	.-16     	; 0x1f7c <__floatsisf+0x1c>
    1f8c:	fa f4       	brpl	.+62     	; 0x1fcc <__floatsisf+0x6c>
    1f8e:	bb 0f       	add	r27, r27
    1f90:	11 f4       	brne	.+4      	; 0x1f96 <__floatsisf+0x36>
    1f92:	60 ff       	sbrs	r22, 0
    1f94:	1b c0       	rjmp	.+54     	; 0x1fcc <__floatsisf+0x6c>
    1f96:	6f 5f       	subi	r22, 0xFF	; 255
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9e:	16 c0       	rjmp	.+44     	; 0x1fcc <__floatsisf+0x6c>
    1fa0:	88 23       	and	r24, r24
    1fa2:	11 f0       	breq	.+4      	; 0x1fa8 <__floatsisf+0x48>
    1fa4:	96 e9       	ldi	r25, 0x96	; 150
    1fa6:	11 c0       	rjmp	.+34     	; 0x1fca <__floatsisf+0x6a>
    1fa8:	77 23       	and	r23, r23
    1faa:	21 f0       	breq	.+8      	; 0x1fb4 <__floatsisf+0x54>
    1fac:	9e e8       	ldi	r25, 0x8E	; 142
    1fae:	87 2f       	mov	r24, r23
    1fb0:	76 2f       	mov	r23, r22
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <__floatsisf+0x5e>
    1fb4:	66 23       	and	r22, r22
    1fb6:	71 f0       	breq	.+28     	; 0x1fd4 <__floatsisf+0x74>
    1fb8:	96 e8       	ldi	r25, 0x86	; 134
    1fba:	86 2f       	mov	r24, r22
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	2a f0       	brmi	.+10     	; 0x1fcc <__floatsisf+0x6c>
    1fc2:	9a 95       	dec	r25
    1fc4:	66 0f       	add	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	88 1f       	adc	r24, r24
    1fca:	da f7       	brpl	.-10     	; 0x1fc2 <__floatsisf+0x62>
    1fcc:	88 0f       	add	r24, r24
    1fce:	96 95       	lsr	r25
    1fd0:	87 95       	ror	r24
    1fd2:	97 f9       	bld	r25, 7
    1fd4:	08 95       	ret

00001fd6 <__fp_cmp>:
    1fd6:	99 0f       	add	r25, r25
    1fd8:	00 08       	sbc	r0, r0
    1fda:	55 0f       	add	r21, r21
    1fdc:	aa 0b       	sbc	r26, r26
    1fde:	e0 e8       	ldi	r30, 0x80	; 128
    1fe0:	fe ef       	ldi	r31, 0xFE	; 254
    1fe2:	16 16       	cp	r1, r22
    1fe4:	17 06       	cpc	r1, r23
    1fe6:	e8 07       	cpc	r30, r24
    1fe8:	f9 07       	cpc	r31, r25
    1fea:	c0 f0       	brcs	.+48     	; 0x201c <__fp_cmp+0x46>
    1fec:	12 16       	cp	r1, r18
    1fee:	13 06       	cpc	r1, r19
    1ff0:	e4 07       	cpc	r30, r20
    1ff2:	f5 07       	cpc	r31, r21
    1ff4:	98 f0       	brcs	.+38     	; 0x201c <__fp_cmp+0x46>
    1ff6:	62 1b       	sub	r22, r18
    1ff8:	73 0b       	sbc	r23, r19
    1ffa:	84 0b       	sbc	r24, r20
    1ffc:	95 0b       	sbc	r25, r21
    1ffe:	39 f4       	brne	.+14     	; 0x200e <__fp_cmp+0x38>
    2000:	0a 26       	eor	r0, r26
    2002:	61 f0       	breq	.+24     	; 0x201c <__fp_cmp+0x46>
    2004:	23 2b       	or	r18, r19
    2006:	24 2b       	or	r18, r20
    2008:	25 2b       	or	r18, r21
    200a:	21 f4       	brne	.+8      	; 0x2014 <__fp_cmp+0x3e>
    200c:	08 95       	ret
    200e:	0a 26       	eor	r0, r26
    2010:	09 f4       	brne	.+2      	; 0x2014 <__fp_cmp+0x3e>
    2012:	a1 40       	sbci	r26, 0x01	; 1
    2014:	a6 95       	lsr	r26
    2016:	8f ef       	ldi	r24, 0xFF	; 255
    2018:	81 1d       	adc	r24, r1
    201a:	81 1d       	adc	r24, r1
    201c:	08 95       	ret

0000201e <__fp_inf>:
    201e:	97 f9       	bld	r25, 7
    2020:	9f 67       	ori	r25, 0x7F	; 127
    2022:	80 e8       	ldi	r24, 0x80	; 128
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	08 95       	ret

0000202a <__fp_nan>:
    202a:	9f ef       	ldi	r25, 0xFF	; 255
    202c:	80 ec       	ldi	r24, 0xC0	; 192
    202e:	08 95       	ret

00002030 <__fp_pscA>:
    2030:	00 24       	eor	r0, r0
    2032:	0a 94       	dec	r0
    2034:	16 16       	cp	r1, r22
    2036:	17 06       	cpc	r1, r23
    2038:	18 06       	cpc	r1, r24
    203a:	09 06       	cpc	r0, r25
    203c:	08 95       	ret

0000203e <__fp_pscB>:
    203e:	00 24       	eor	r0, r0
    2040:	0a 94       	dec	r0
    2042:	12 16       	cp	r1, r18
    2044:	13 06       	cpc	r1, r19
    2046:	14 06       	cpc	r1, r20
    2048:	05 06       	cpc	r0, r21
    204a:	08 95       	ret

0000204c <__fp_round>:
    204c:	09 2e       	mov	r0, r25
    204e:	03 94       	inc	r0
    2050:	00 0c       	add	r0, r0
    2052:	11 f4       	brne	.+4      	; 0x2058 <__fp_round+0xc>
    2054:	88 23       	and	r24, r24
    2056:	52 f0       	brmi	.+20     	; 0x206c <__fp_round+0x20>
    2058:	bb 0f       	add	r27, r27
    205a:	40 f4       	brcc	.+16     	; 0x206c <__fp_round+0x20>
    205c:	bf 2b       	or	r27, r31
    205e:	11 f4       	brne	.+4      	; 0x2064 <__fp_round+0x18>
    2060:	60 ff       	sbrs	r22, 0
    2062:	04 c0       	rjmp	.+8      	; 0x206c <__fp_round+0x20>
    2064:	6f 5f       	subi	r22, 0xFF	; 255
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	8f 4f       	sbci	r24, 0xFF	; 255
    206a:	9f 4f       	sbci	r25, 0xFF	; 255
    206c:	08 95       	ret

0000206e <__fp_split3>:
    206e:	57 fd       	sbrc	r21, 7
    2070:	90 58       	subi	r25, 0x80	; 128
    2072:	44 0f       	add	r20, r20
    2074:	55 1f       	adc	r21, r21
    2076:	59 f0       	breq	.+22     	; 0x208e <__fp_splitA+0x10>
    2078:	5f 3f       	cpi	r21, 0xFF	; 255
    207a:	71 f0       	breq	.+28     	; 0x2098 <__fp_splitA+0x1a>
    207c:	47 95       	ror	r20

0000207e <__fp_splitA>:
    207e:	88 0f       	add	r24, r24
    2080:	97 fb       	bst	r25, 7
    2082:	99 1f       	adc	r25, r25
    2084:	61 f0       	breq	.+24     	; 0x209e <__fp_splitA+0x20>
    2086:	9f 3f       	cpi	r25, 0xFF	; 255
    2088:	79 f0       	breq	.+30     	; 0x20a8 <__fp_splitA+0x2a>
    208a:	87 95       	ror	r24
    208c:	08 95       	ret
    208e:	12 16       	cp	r1, r18
    2090:	13 06       	cpc	r1, r19
    2092:	14 06       	cpc	r1, r20
    2094:	55 1f       	adc	r21, r21
    2096:	f2 cf       	rjmp	.-28     	; 0x207c <__fp_split3+0xe>
    2098:	46 95       	lsr	r20
    209a:	f1 df       	rcall	.-30     	; 0x207e <__fp_splitA>
    209c:	08 c0       	rjmp	.+16     	; 0x20ae <__fp_splitA+0x30>
    209e:	16 16       	cp	r1, r22
    20a0:	17 06       	cpc	r1, r23
    20a2:	18 06       	cpc	r1, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	f1 cf       	rjmp	.-30     	; 0x208a <__fp_splitA+0xc>
    20a8:	86 95       	lsr	r24
    20aa:	71 05       	cpc	r23, r1
    20ac:	61 05       	cpc	r22, r1
    20ae:	08 94       	sec
    20b0:	08 95       	ret

000020b2 <__fp_zero>:
    20b2:	e8 94       	clt

000020b4 <__fp_szero>:
    20b4:	bb 27       	eor	r27, r27
    20b6:	66 27       	eor	r22, r22
    20b8:	77 27       	eor	r23, r23
    20ba:	cb 01       	movw	r24, r22
    20bc:	97 f9       	bld	r25, 7
    20be:	08 95       	ret

000020c0 <__gesf2>:
    20c0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fp_cmp>
    20c4:	08 f4       	brcc	.+2      	; 0x20c8 <__gesf2+0x8>
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	08 95       	ret

000020ca <__mulsf3>:
    20ca:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3x>
    20ce:	0c 94 26 10 	jmp	0x204c	; 0x204c <__fp_round>
    20d2:	0e 94 18 10 	call	0x2030	; 0x2030 <__fp_pscA>
    20d6:	38 f0       	brcs	.+14     	; 0x20e6 <__mulsf3+0x1c>
    20d8:	0e 94 1f 10 	call	0x203e	; 0x203e <__fp_pscB>
    20dc:	20 f0       	brcs	.+8      	; 0x20e6 <__mulsf3+0x1c>
    20de:	95 23       	and	r25, r21
    20e0:	11 f0       	breq	.+4      	; 0x20e6 <__mulsf3+0x1c>
    20e2:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__fp_inf>
    20e6:	0c 94 15 10 	jmp	0x202a	; 0x202a <__fp_nan>
    20ea:	11 24       	eor	r1, r1
    20ec:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__fp_szero>

000020f0 <__mulsf3x>:
    20f0:	0e 94 37 10 	call	0x206e	; 0x206e <__fp_split3>
    20f4:	70 f3       	brcs	.-36     	; 0x20d2 <__mulsf3+0x8>

000020f6 <__mulsf3_pse>:
    20f6:	95 9f       	mul	r25, r21
    20f8:	c1 f3       	breq	.-16     	; 0x20ea <__mulsf3+0x20>
    20fa:	95 0f       	add	r25, r21
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	55 1f       	adc	r21, r21
    2100:	62 9f       	mul	r22, r18
    2102:	f0 01       	movw	r30, r0
    2104:	72 9f       	mul	r23, r18
    2106:	bb 27       	eor	r27, r27
    2108:	f0 0d       	add	r31, r0
    210a:	b1 1d       	adc	r27, r1
    210c:	63 9f       	mul	r22, r19
    210e:	aa 27       	eor	r26, r26
    2110:	f0 0d       	add	r31, r0
    2112:	b1 1d       	adc	r27, r1
    2114:	aa 1f       	adc	r26, r26
    2116:	64 9f       	mul	r22, r20
    2118:	66 27       	eor	r22, r22
    211a:	b0 0d       	add	r27, r0
    211c:	a1 1d       	adc	r26, r1
    211e:	66 1f       	adc	r22, r22
    2120:	82 9f       	mul	r24, r18
    2122:	22 27       	eor	r18, r18
    2124:	b0 0d       	add	r27, r0
    2126:	a1 1d       	adc	r26, r1
    2128:	62 1f       	adc	r22, r18
    212a:	73 9f       	mul	r23, r19
    212c:	b0 0d       	add	r27, r0
    212e:	a1 1d       	adc	r26, r1
    2130:	62 1f       	adc	r22, r18
    2132:	83 9f       	mul	r24, r19
    2134:	a0 0d       	add	r26, r0
    2136:	61 1d       	adc	r22, r1
    2138:	22 1f       	adc	r18, r18
    213a:	74 9f       	mul	r23, r20
    213c:	33 27       	eor	r19, r19
    213e:	a0 0d       	add	r26, r0
    2140:	61 1d       	adc	r22, r1
    2142:	23 1f       	adc	r18, r19
    2144:	84 9f       	mul	r24, r20
    2146:	60 0d       	add	r22, r0
    2148:	21 1d       	adc	r18, r1
    214a:	82 2f       	mov	r24, r18
    214c:	76 2f       	mov	r23, r22
    214e:	6a 2f       	mov	r22, r26
    2150:	11 24       	eor	r1, r1
    2152:	9f 57       	subi	r25, 0x7F	; 127
    2154:	50 40       	sbci	r21, 0x00	; 0
    2156:	9a f0       	brmi	.+38     	; 0x217e <__mulsf3_pse+0x88>
    2158:	f1 f0       	breq	.+60     	; 0x2196 <__mulsf3_pse+0xa0>
    215a:	88 23       	and	r24, r24
    215c:	4a f0       	brmi	.+18     	; 0x2170 <__mulsf3_pse+0x7a>
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	bb 1f       	adc	r27, r27
    2164:	66 1f       	adc	r22, r22
    2166:	77 1f       	adc	r23, r23
    2168:	88 1f       	adc	r24, r24
    216a:	91 50       	subi	r25, 0x01	; 1
    216c:	50 40       	sbci	r21, 0x00	; 0
    216e:	a9 f7       	brne	.-22     	; 0x215a <__mulsf3_pse+0x64>
    2170:	9e 3f       	cpi	r25, 0xFE	; 254
    2172:	51 05       	cpc	r21, r1
    2174:	80 f0       	brcs	.+32     	; 0x2196 <__mulsf3_pse+0xa0>
    2176:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__fp_inf>
    217a:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__fp_szero>
    217e:	5f 3f       	cpi	r21, 0xFF	; 255
    2180:	e4 f3       	brlt	.-8      	; 0x217a <__mulsf3_pse+0x84>
    2182:	98 3e       	cpi	r25, 0xE8	; 232
    2184:	d4 f3       	brlt	.-12     	; 0x217a <__mulsf3_pse+0x84>
    2186:	86 95       	lsr	r24
    2188:	77 95       	ror	r23
    218a:	67 95       	ror	r22
    218c:	b7 95       	ror	r27
    218e:	f7 95       	ror	r31
    2190:	e7 95       	ror	r30
    2192:	9f 5f       	subi	r25, 0xFF	; 255
    2194:	c1 f7       	brne	.-16     	; 0x2186 <__mulsf3_pse+0x90>
    2196:	fe 2b       	or	r31, r30
    2198:	88 0f       	add	r24, r24
    219a:	91 1d       	adc	r25, r1
    219c:	96 95       	lsr	r25
    219e:	87 95       	ror	r24
    21a0:	97 f9       	bld	r25, 7
    21a2:	08 95       	ret
    21a4:	19 f4       	brne	.+6      	; 0x21ac <__mulsf3_pse+0xb6>
    21a6:	16 f4       	brtc	.+4      	; 0x21ac <__mulsf3_pse+0xb6>
    21a8:	0c 94 15 10 	jmp	0x202a	; 0x202a <__fp_nan>
    21ac:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__fp_mpack>

000021b0 <sqrt>:
    21b0:	0e 94 3f 10 	call	0x207e	; 0x207e <__fp_splitA>
    21b4:	b8 f3       	brcs	.-18     	; 0x21a4 <__mulsf3_pse+0xae>
    21b6:	99 23       	and	r25, r25
    21b8:	c9 f3       	breq	.-14     	; 0x21ac <__mulsf3_pse+0xb6>
    21ba:	b6 f3       	brts	.-20     	; 0x21a8 <__mulsf3_pse+0xb2>
    21bc:	9f 57       	subi	r25, 0x7F	; 127
    21be:	55 0b       	sbc	r21, r21
    21c0:	87 ff       	sbrs	r24, 7
    21c2:	0e 94 26 11 	call	0x224c	; 0x224c <__fp_norm2>
    21c6:	00 24       	eor	r0, r0
    21c8:	a0 e6       	ldi	r26, 0x60	; 96
    21ca:	40 ea       	ldi	r20, 0xA0	; 160
    21cc:	90 01       	movw	r18, r0
    21ce:	80 58       	subi	r24, 0x80	; 128
    21d0:	56 95       	lsr	r21
    21d2:	97 95       	ror	r25
    21d4:	28 f4       	brcc	.+10     	; 0x21e0 <sqrt+0x30>
    21d6:	80 5c       	subi	r24, 0xC0	; 192
    21d8:	66 0f       	add	r22, r22
    21da:	77 1f       	adc	r23, r23
    21dc:	88 1f       	adc	r24, r24
    21de:	20 f0       	brcs	.+8      	; 0x21e8 <sqrt+0x38>
    21e0:	26 17       	cp	r18, r22
    21e2:	37 07       	cpc	r19, r23
    21e4:	48 07       	cpc	r20, r24
    21e6:	30 f4       	brcc	.+12     	; 0x21f4 <sqrt+0x44>
    21e8:	62 1b       	sub	r22, r18
    21ea:	73 0b       	sbc	r23, r19
    21ec:	84 0b       	sbc	r24, r20
    21ee:	20 29       	or	r18, r0
    21f0:	31 29       	or	r19, r1
    21f2:	4a 2b       	or	r20, r26
    21f4:	a6 95       	lsr	r26
    21f6:	17 94       	ror	r1
    21f8:	07 94       	ror	r0
    21fa:	20 25       	eor	r18, r0
    21fc:	31 25       	eor	r19, r1
    21fe:	4a 27       	eor	r20, r26
    2200:	58 f7       	brcc	.-42     	; 0x21d8 <sqrt+0x28>
    2202:	66 0f       	add	r22, r22
    2204:	77 1f       	adc	r23, r23
    2206:	88 1f       	adc	r24, r24
    2208:	20 f0       	brcs	.+8      	; 0x2212 <sqrt+0x62>
    220a:	26 17       	cp	r18, r22
    220c:	37 07       	cpc	r19, r23
    220e:	48 07       	cpc	r20, r24
    2210:	30 f4       	brcc	.+12     	; 0x221e <sqrt+0x6e>
    2212:	62 0b       	sbc	r22, r18
    2214:	73 0b       	sbc	r23, r19
    2216:	84 0b       	sbc	r24, r20
    2218:	20 0d       	add	r18, r0
    221a:	31 1d       	adc	r19, r1
    221c:	41 1d       	adc	r20, r1
    221e:	a0 95       	com	r26
    2220:	81 f7       	brne	.-32     	; 0x2202 <sqrt+0x52>
    2222:	b9 01       	movw	r22, r18
    2224:	84 2f       	mov	r24, r20
    2226:	91 58       	subi	r25, 0x81	; 129
    2228:	88 0f       	add	r24, r24
    222a:	96 95       	lsr	r25
    222c:	87 95       	ror	r24
    222e:	08 95       	ret

00002230 <__fp_mpack>:
    2230:	9f 3f       	cpi	r25, 0xFF	; 255
    2232:	31 f0       	breq	.+12     	; 0x2240 <__fp_mpack_finite+0xc>

00002234 <__fp_mpack_finite>:
    2234:	91 50       	subi	r25, 0x01	; 1
    2236:	20 f4       	brcc	.+8      	; 0x2240 <__fp_mpack_finite+0xc>
    2238:	87 95       	ror	r24
    223a:	77 95       	ror	r23
    223c:	67 95       	ror	r22
    223e:	b7 95       	ror	r27
    2240:	88 0f       	add	r24, r24
    2242:	91 1d       	adc	r25, r1
    2244:	96 95       	lsr	r25
    2246:	87 95       	ror	r24
    2248:	97 f9       	bld	r25, 7
    224a:	08 95       	ret

0000224c <__fp_norm2>:
    224c:	91 50       	subi	r25, 0x01	; 1
    224e:	50 40       	sbci	r21, 0x00	; 0
    2250:	66 0f       	add	r22, r22
    2252:	77 1f       	adc	r23, r23
    2254:	88 1f       	adc	r24, r24
    2256:	d2 f7       	brpl	.-12     	; 0x224c <__fp_norm2>
    2258:	08 95       	ret

0000225a <vfprintf>:
    225a:	a0 e1       	ldi	r26, 0x10	; 16
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e3 e3       	ldi	r30, 0x33	; 51
    2260:	f1 e1       	ldi	r31, 0x11	; 17
    2262:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__>
    2266:	7c 01       	movw	r14, r24
    2268:	1b 01       	movw	r2, r22
    226a:	6a 01       	movw	r12, r20
    226c:	fc 01       	movw	r30, r24
    226e:	17 82       	std	Z+7, r1	; 0x07
    2270:	16 82       	std	Z+6, r1	; 0x06
    2272:	83 81       	ldd	r24, Z+3	; 0x03
    2274:	81 ff       	sbrs	r24, 1
    2276:	44 c3       	rjmp	.+1672   	; 0x2900 <vfprintf+0x6a6>
    2278:	9e 01       	movw	r18, r28
    227a:	2f 5f       	subi	r18, 0xFF	; 255
    227c:	3f 4f       	sbci	r19, 0xFF	; 255
    227e:	39 01       	movw	r6, r18
    2280:	f7 01       	movw	r30, r14
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	f1 01       	movw	r30, r2
    2286:	93 fd       	sbrc	r25, 3
    2288:	85 91       	lpm	r24, Z+
    228a:	93 ff       	sbrs	r25, 3
    228c:	81 91       	ld	r24, Z+
    228e:	1f 01       	movw	r2, r30
    2290:	88 23       	and	r24, r24
    2292:	09 f4       	brne	.+2      	; 0x2296 <vfprintf+0x3c>
    2294:	31 c3       	rjmp	.+1634   	; 0x28f8 <vfprintf+0x69e>
    2296:	85 32       	cpi	r24, 0x25	; 37
    2298:	39 f4       	brne	.+14     	; 0x22a8 <vfprintf+0x4e>
    229a:	93 fd       	sbrc	r25, 3
    229c:	85 91       	lpm	r24, Z+
    229e:	93 ff       	sbrs	r25, 3
    22a0:	81 91       	ld	r24, Z+
    22a2:	1f 01       	movw	r2, r30
    22a4:	85 32       	cpi	r24, 0x25	; 37
    22a6:	39 f4       	brne	.+14     	; 0x22b6 <vfprintf+0x5c>
    22a8:	b7 01       	movw	r22, r14
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    22b0:	56 01       	movw	r10, r12
    22b2:	65 01       	movw	r12, r10
    22b4:	e5 cf       	rjmp	.-54     	; 0x2280 <vfprintf+0x26>
    22b6:	10 e0       	ldi	r17, 0x00	; 0
    22b8:	51 2c       	mov	r5, r1
    22ba:	91 2c       	mov	r9, r1
    22bc:	ff e1       	ldi	r31, 0x1F	; 31
    22be:	f9 15       	cp	r31, r9
    22c0:	d8 f0       	brcs	.+54     	; 0x22f8 <vfprintf+0x9e>
    22c2:	8b 32       	cpi	r24, 0x2B	; 43
    22c4:	79 f0       	breq	.+30     	; 0x22e4 <vfprintf+0x8a>
    22c6:	38 f4       	brcc	.+14     	; 0x22d6 <vfprintf+0x7c>
    22c8:	80 32       	cpi	r24, 0x20	; 32
    22ca:	79 f0       	breq	.+30     	; 0x22ea <vfprintf+0x90>
    22cc:	83 32       	cpi	r24, 0x23	; 35
    22ce:	a1 f4       	brne	.+40     	; 0x22f8 <vfprintf+0x9e>
    22d0:	f9 2d       	mov	r31, r9
    22d2:	f0 61       	ori	r31, 0x10	; 16
    22d4:	2e c0       	rjmp	.+92     	; 0x2332 <vfprintf+0xd8>
    22d6:	8d 32       	cpi	r24, 0x2D	; 45
    22d8:	61 f0       	breq	.+24     	; 0x22f2 <vfprintf+0x98>
    22da:	80 33       	cpi	r24, 0x30	; 48
    22dc:	69 f4       	brne	.+26     	; 0x22f8 <vfprintf+0x9e>
    22de:	29 2d       	mov	r18, r9
    22e0:	21 60       	ori	r18, 0x01	; 1
    22e2:	2d c0       	rjmp	.+90     	; 0x233e <vfprintf+0xe4>
    22e4:	39 2d       	mov	r19, r9
    22e6:	32 60       	ori	r19, 0x02	; 2
    22e8:	93 2e       	mov	r9, r19
    22ea:	89 2d       	mov	r24, r9
    22ec:	84 60       	ori	r24, 0x04	; 4
    22ee:	98 2e       	mov	r9, r24
    22f0:	2a c0       	rjmp	.+84     	; 0x2346 <vfprintf+0xec>
    22f2:	e9 2d       	mov	r30, r9
    22f4:	e8 60       	ori	r30, 0x08	; 8
    22f6:	15 c0       	rjmp	.+42     	; 0x2322 <vfprintf+0xc8>
    22f8:	97 fc       	sbrc	r9, 7
    22fa:	2d c0       	rjmp	.+90     	; 0x2356 <vfprintf+0xfc>
    22fc:	20 ed       	ldi	r18, 0xD0	; 208
    22fe:	28 0f       	add	r18, r24
    2300:	2a 30       	cpi	r18, 0x0A	; 10
    2302:	88 f4       	brcc	.+34     	; 0x2326 <vfprintf+0xcc>
    2304:	96 fe       	sbrs	r9, 6
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <vfprintf+0xba>
    2308:	3a e0       	ldi	r19, 0x0A	; 10
    230a:	13 9f       	mul	r17, r19
    230c:	20 0d       	add	r18, r0
    230e:	11 24       	eor	r1, r1
    2310:	12 2f       	mov	r17, r18
    2312:	19 c0       	rjmp	.+50     	; 0x2346 <vfprintf+0xec>
    2314:	8a e0       	ldi	r24, 0x0A	; 10
    2316:	58 9e       	mul	r5, r24
    2318:	20 0d       	add	r18, r0
    231a:	11 24       	eor	r1, r1
    231c:	52 2e       	mov	r5, r18
    231e:	e9 2d       	mov	r30, r9
    2320:	e0 62       	ori	r30, 0x20	; 32
    2322:	9e 2e       	mov	r9, r30
    2324:	10 c0       	rjmp	.+32     	; 0x2346 <vfprintf+0xec>
    2326:	8e 32       	cpi	r24, 0x2E	; 46
    2328:	31 f4       	brne	.+12     	; 0x2336 <vfprintf+0xdc>
    232a:	96 fc       	sbrc	r9, 6
    232c:	e5 c2       	rjmp	.+1482   	; 0x28f8 <vfprintf+0x69e>
    232e:	f9 2d       	mov	r31, r9
    2330:	f0 64       	ori	r31, 0x40	; 64
    2332:	9f 2e       	mov	r9, r31
    2334:	08 c0       	rjmp	.+16     	; 0x2346 <vfprintf+0xec>
    2336:	8c 36       	cpi	r24, 0x6C	; 108
    2338:	21 f4       	brne	.+8      	; 0x2342 <vfprintf+0xe8>
    233a:	29 2d       	mov	r18, r9
    233c:	20 68       	ori	r18, 0x80	; 128
    233e:	92 2e       	mov	r9, r18
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <vfprintf+0xec>
    2342:	88 36       	cpi	r24, 0x68	; 104
    2344:	41 f4       	brne	.+16     	; 0x2356 <vfprintf+0xfc>
    2346:	f1 01       	movw	r30, r2
    2348:	93 fd       	sbrc	r25, 3
    234a:	85 91       	lpm	r24, Z+
    234c:	93 ff       	sbrs	r25, 3
    234e:	81 91       	ld	r24, Z+
    2350:	1f 01       	movw	r2, r30
    2352:	81 11       	cpse	r24, r1
    2354:	b3 cf       	rjmp	.-154    	; 0x22bc <vfprintf+0x62>
    2356:	9b eb       	ldi	r25, 0xBB	; 187
    2358:	98 0f       	add	r25, r24
    235a:	93 30       	cpi	r25, 0x03	; 3
    235c:	20 f4       	brcc	.+8      	; 0x2366 <vfprintf+0x10c>
    235e:	99 2d       	mov	r25, r9
    2360:	90 61       	ori	r25, 0x10	; 16
    2362:	80 5e       	subi	r24, 0xE0	; 224
    2364:	07 c0       	rjmp	.+14     	; 0x2374 <vfprintf+0x11a>
    2366:	9b e9       	ldi	r25, 0x9B	; 155
    2368:	98 0f       	add	r25, r24
    236a:	93 30       	cpi	r25, 0x03	; 3
    236c:	08 f0       	brcs	.+2      	; 0x2370 <vfprintf+0x116>
    236e:	66 c1       	rjmp	.+716    	; 0x263c <vfprintf+0x3e2>
    2370:	99 2d       	mov	r25, r9
    2372:	9f 7e       	andi	r25, 0xEF	; 239
    2374:	96 ff       	sbrs	r25, 6
    2376:	16 e0       	ldi	r17, 0x06	; 6
    2378:	9f 73       	andi	r25, 0x3F	; 63
    237a:	99 2e       	mov	r9, r25
    237c:	85 36       	cpi	r24, 0x65	; 101
    237e:	19 f4       	brne	.+6      	; 0x2386 <vfprintf+0x12c>
    2380:	90 64       	ori	r25, 0x40	; 64
    2382:	99 2e       	mov	r9, r25
    2384:	08 c0       	rjmp	.+16     	; 0x2396 <vfprintf+0x13c>
    2386:	86 36       	cpi	r24, 0x66	; 102
    2388:	21 f4       	brne	.+8      	; 0x2392 <vfprintf+0x138>
    238a:	39 2f       	mov	r19, r25
    238c:	30 68       	ori	r19, 0x80	; 128
    238e:	93 2e       	mov	r9, r19
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <vfprintf+0x13c>
    2392:	11 11       	cpse	r17, r1
    2394:	11 50       	subi	r17, 0x01	; 1
    2396:	97 fe       	sbrs	r9, 7
    2398:	07 c0       	rjmp	.+14     	; 0x23a8 <vfprintf+0x14e>
    239a:	1c 33       	cpi	r17, 0x3C	; 60
    239c:	50 f4       	brcc	.+20     	; 0x23b2 <vfprintf+0x158>
    239e:	44 24       	eor	r4, r4
    23a0:	43 94       	inc	r4
    23a2:	41 0e       	add	r4, r17
    23a4:	27 e0       	ldi	r18, 0x07	; 7
    23a6:	0b c0       	rjmp	.+22     	; 0x23be <vfprintf+0x164>
    23a8:	18 30       	cpi	r17, 0x08	; 8
    23aa:	38 f0       	brcs	.+14     	; 0x23ba <vfprintf+0x160>
    23ac:	27 e0       	ldi	r18, 0x07	; 7
    23ae:	17 e0       	ldi	r17, 0x07	; 7
    23b0:	05 c0       	rjmp	.+10     	; 0x23bc <vfprintf+0x162>
    23b2:	27 e0       	ldi	r18, 0x07	; 7
    23b4:	9c e3       	ldi	r25, 0x3C	; 60
    23b6:	49 2e       	mov	r4, r25
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <vfprintf+0x164>
    23ba:	21 2f       	mov	r18, r17
    23bc:	41 2c       	mov	r4, r1
    23be:	56 01       	movw	r10, r12
    23c0:	84 e0       	ldi	r24, 0x04	; 4
    23c2:	a8 0e       	add	r10, r24
    23c4:	b1 1c       	adc	r11, r1
    23c6:	f6 01       	movw	r30, r12
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	04 2d       	mov	r16, r4
    23d2:	a3 01       	movw	r20, r6
    23d4:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__ftoa_engine>
    23d8:	6c 01       	movw	r12, r24
    23da:	f9 81       	ldd	r31, Y+1	; 0x01
    23dc:	fc 87       	std	Y+12, r31	; 0x0c
    23de:	f0 ff       	sbrs	r31, 0
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <vfprintf+0x18c>
    23e2:	f3 ff       	sbrs	r31, 3
    23e4:	06 c0       	rjmp	.+12     	; 0x23f2 <vfprintf+0x198>
    23e6:	91 fc       	sbrc	r9, 1
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <vfprintf+0x19c>
    23ea:	92 fe       	sbrs	r9, 2
    23ec:	06 c0       	rjmp	.+12     	; 0x23fa <vfprintf+0x1a0>
    23ee:	00 e2       	ldi	r16, 0x20	; 32
    23f0:	05 c0       	rjmp	.+10     	; 0x23fc <vfprintf+0x1a2>
    23f2:	0d e2       	ldi	r16, 0x2D	; 45
    23f4:	03 c0       	rjmp	.+6      	; 0x23fc <vfprintf+0x1a2>
    23f6:	0b e2       	ldi	r16, 0x2B	; 43
    23f8:	01 c0       	rjmp	.+2      	; 0x23fc <vfprintf+0x1a2>
    23fa:	00 e0       	ldi	r16, 0x00	; 0
    23fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    23fe:	8c 70       	andi	r24, 0x0C	; 12
    2400:	19 f0       	breq	.+6      	; 0x2408 <vfprintf+0x1ae>
    2402:	01 11       	cpse	r16, r1
    2404:	5a c2       	rjmp	.+1204   	; 0x28ba <vfprintf+0x660>
    2406:	9b c2       	rjmp	.+1334   	; 0x293e <vfprintf+0x6e4>
    2408:	97 fe       	sbrs	r9, 7
    240a:	10 c0       	rjmp	.+32     	; 0x242c <vfprintf+0x1d2>
    240c:	4c 0c       	add	r4, r12
    240e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2410:	f4 ff       	sbrs	r31, 4
    2412:	04 c0       	rjmp	.+8      	; 0x241c <vfprintf+0x1c2>
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	81 33       	cpi	r24, 0x31	; 49
    2418:	09 f4       	brne	.+2      	; 0x241c <vfprintf+0x1c2>
    241a:	4a 94       	dec	r4
    241c:	14 14       	cp	r1, r4
    241e:	74 f5       	brge	.+92     	; 0x247c <vfprintf+0x222>
    2420:	28 e0       	ldi	r18, 0x08	; 8
    2422:	24 15       	cp	r18, r4
    2424:	78 f5       	brcc	.+94     	; 0x2484 <vfprintf+0x22a>
    2426:	88 e0       	ldi	r24, 0x08	; 8
    2428:	48 2e       	mov	r4, r24
    242a:	2c c0       	rjmp	.+88     	; 0x2484 <vfprintf+0x22a>
    242c:	96 fc       	sbrc	r9, 6
    242e:	2a c0       	rjmp	.+84     	; 0x2484 <vfprintf+0x22a>
    2430:	81 2f       	mov	r24, r17
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	8c 15       	cp	r24, r12
    2436:	9d 05       	cpc	r25, r13
    2438:	9c f0       	brlt	.+38     	; 0x2460 <vfprintf+0x206>
    243a:	3c ef       	ldi	r19, 0xFC	; 252
    243c:	c3 16       	cp	r12, r19
    243e:	3f ef       	ldi	r19, 0xFF	; 255
    2440:	d3 06       	cpc	r13, r19
    2442:	74 f0       	brlt	.+28     	; 0x2460 <vfprintf+0x206>
    2444:	89 2d       	mov	r24, r9
    2446:	80 68       	ori	r24, 0x80	; 128
    2448:	98 2e       	mov	r9, r24
    244a:	0a c0       	rjmp	.+20     	; 0x2460 <vfprintf+0x206>
    244c:	e2 e0       	ldi	r30, 0x02	; 2
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	ec 0f       	add	r30, r28
    2452:	fd 1f       	adc	r31, r29
    2454:	e1 0f       	add	r30, r17
    2456:	f1 1d       	adc	r31, r1
    2458:	80 81       	ld	r24, Z
    245a:	80 33       	cpi	r24, 0x30	; 48
    245c:	19 f4       	brne	.+6      	; 0x2464 <vfprintf+0x20a>
    245e:	11 50       	subi	r17, 0x01	; 1
    2460:	11 11       	cpse	r17, r1
    2462:	f4 cf       	rjmp	.-24     	; 0x244c <vfprintf+0x1f2>
    2464:	97 fe       	sbrs	r9, 7
    2466:	0e c0       	rjmp	.+28     	; 0x2484 <vfprintf+0x22a>
    2468:	44 24       	eor	r4, r4
    246a:	43 94       	inc	r4
    246c:	41 0e       	add	r4, r17
    246e:	81 2f       	mov	r24, r17
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	c8 16       	cp	r12, r24
    2474:	d9 06       	cpc	r13, r25
    2476:	2c f4       	brge	.+10     	; 0x2482 <vfprintf+0x228>
    2478:	1c 19       	sub	r17, r12
    247a:	04 c0       	rjmp	.+8      	; 0x2484 <vfprintf+0x22a>
    247c:	44 24       	eor	r4, r4
    247e:	43 94       	inc	r4
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <vfprintf+0x22a>
    2482:	10 e0       	ldi	r17, 0x00	; 0
    2484:	97 fe       	sbrs	r9, 7
    2486:	06 c0       	rjmp	.+12     	; 0x2494 <vfprintf+0x23a>
    2488:	1c 14       	cp	r1, r12
    248a:	1d 04       	cpc	r1, r13
    248c:	34 f4       	brge	.+12     	; 0x249a <vfprintf+0x240>
    248e:	c6 01       	movw	r24, r12
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	05 c0       	rjmp	.+10     	; 0x249e <vfprintf+0x244>
    2494:	85 e0       	ldi	r24, 0x05	; 5
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	02 c0       	rjmp	.+4      	; 0x249e <vfprintf+0x244>
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	01 11       	cpse	r16, r1
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	11 23       	and	r17, r17
    24a4:	31 f0       	breq	.+12     	; 0x24b2 <vfprintf+0x258>
    24a6:	21 2f       	mov	r18, r17
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	2f 5f       	subi	r18, 0xFF	; 255
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	82 0f       	add	r24, r18
    24b0:	93 1f       	adc	r25, r19
    24b2:	25 2d       	mov	r18, r5
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	82 17       	cp	r24, r18
    24b8:	93 07       	cpc	r25, r19
    24ba:	14 f4       	brge	.+4      	; 0x24c0 <vfprintf+0x266>
    24bc:	58 1a       	sub	r5, r24
    24be:	01 c0       	rjmp	.+2      	; 0x24c2 <vfprintf+0x268>
    24c0:	51 2c       	mov	r5, r1
    24c2:	89 2d       	mov	r24, r9
    24c4:	89 70       	andi	r24, 0x09	; 9
    24c6:	49 f4       	brne	.+18     	; 0x24da <vfprintf+0x280>
    24c8:	55 20       	and	r5, r5
    24ca:	39 f0       	breq	.+14     	; 0x24da <vfprintf+0x280>
    24cc:	b7 01       	movw	r22, r14
    24ce:	80 e2       	ldi	r24, 0x20	; 32
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    24d6:	5a 94       	dec	r5
    24d8:	f7 cf       	rjmp	.-18     	; 0x24c8 <vfprintf+0x26e>
    24da:	00 23       	and	r16, r16
    24dc:	29 f0       	breq	.+10     	; 0x24e8 <vfprintf+0x28e>
    24de:	b7 01       	movw	r22, r14
    24e0:	80 2f       	mov	r24, r16
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    24e8:	93 fc       	sbrc	r9, 3
    24ea:	09 c0       	rjmp	.+18     	; 0x24fe <vfprintf+0x2a4>
    24ec:	55 20       	and	r5, r5
    24ee:	39 f0       	breq	.+14     	; 0x24fe <vfprintf+0x2a4>
    24f0:	b7 01       	movw	r22, r14
    24f2:	80 e3       	ldi	r24, 0x30	; 48
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    24fa:	5a 94       	dec	r5
    24fc:	f7 cf       	rjmp	.-18     	; 0x24ec <vfprintf+0x292>
    24fe:	97 fe       	sbrs	r9, 7
    2500:	4c c0       	rjmp	.+152    	; 0x259a <vfprintf+0x340>
    2502:	46 01       	movw	r8, r12
    2504:	d7 fe       	sbrs	r13, 7
    2506:	02 c0       	rjmp	.+4      	; 0x250c <vfprintf+0x2b2>
    2508:	81 2c       	mov	r8, r1
    250a:	91 2c       	mov	r9, r1
    250c:	c6 01       	movw	r24, r12
    250e:	88 19       	sub	r24, r8
    2510:	99 09       	sbc	r25, r9
    2512:	f3 01       	movw	r30, r6
    2514:	e8 0f       	add	r30, r24
    2516:	f9 1f       	adc	r31, r25
    2518:	fe 87       	std	Y+14, r31	; 0x0e
    251a:	ed 87       	std	Y+13, r30	; 0x0d
    251c:	96 01       	movw	r18, r12
    251e:	24 19       	sub	r18, r4
    2520:	31 09       	sbc	r19, r1
    2522:	38 8b       	std	Y+16, r19	; 0x10
    2524:	2f 87       	std	Y+15, r18	; 0x0f
    2526:	01 2f       	mov	r16, r17
    2528:	10 e0       	ldi	r17, 0x00	; 0
    252a:	11 95       	neg	r17
    252c:	01 95       	neg	r16
    252e:	11 09       	sbc	r17, r1
    2530:	3f ef       	ldi	r19, 0xFF	; 255
    2532:	83 16       	cp	r8, r19
    2534:	93 06       	cpc	r9, r19
    2536:	29 f4       	brne	.+10     	; 0x2542 <vfprintf+0x2e8>
    2538:	b7 01       	movw	r22, r14
    253a:	8e e2       	ldi	r24, 0x2E	; 46
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2542:	c8 14       	cp	r12, r8
    2544:	d9 04       	cpc	r13, r9
    2546:	4c f0       	brlt	.+18     	; 0x255a <vfprintf+0x300>
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	98 89       	ldd	r25, Y+16	; 0x10
    254c:	88 15       	cp	r24, r8
    254e:	99 05       	cpc	r25, r9
    2550:	24 f4       	brge	.+8      	; 0x255a <vfprintf+0x300>
    2552:	ed 85       	ldd	r30, Y+13	; 0x0d
    2554:	fe 85       	ldd	r31, Y+14	; 0x0e
    2556:	81 81       	ldd	r24, Z+1	; 0x01
    2558:	01 c0       	rjmp	.+2      	; 0x255c <vfprintf+0x302>
    255a:	80 e3       	ldi	r24, 0x30	; 48
    255c:	f1 e0       	ldi	r31, 0x01	; 1
    255e:	8f 1a       	sub	r8, r31
    2560:	91 08       	sbc	r9, r1
    2562:	2d 85       	ldd	r18, Y+13	; 0x0d
    2564:	3e 85       	ldd	r19, Y+14	; 0x0e
    2566:	2f 5f       	subi	r18, 0xFF	; 255
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	3e 87       	std	Y+14, r19	; 0x0e
    256c:	2d 87       	std	Y+13, r18	; 0x0d
    256e:	80 16       	cp	r8, r16
    2570:	91 06       	cpc	r9, r17
    2572:	2c f0       	brlt	.+10     	; 0x257e <vfprintf+0x324>
    2574:	b7 01       	movw	r22, r14
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    257c:	d9 cf       	rjmp	.-78     	; 0x2530 <vfprintf+0x2d6>
    257e:	c8 14       	cp	r12, r8
    2580:	d9 04       	cpc	r13, r9
    2582:	41 f4       	brne	.+16     	; 0x2594 <vfprintf+0x33a>
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	96 33       	cpi	r25, 0x36	; 54
    2588:	20 f4       	brcc	.+8      	; 0x2592 <vfprintf+0x338>
    258a:	95 33       	cpi	r25, 0x35	; 53
    258c:	19 f4       	brne	.+6      	; 0x2594 <vfprintf+0x33a>
    258e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2590:	34 ff       	sbrs	r19, 4
    2592:	81 e3       	ldi	r24, 0x31	; 49
    2594:	b7 01       	movw	r22, r14
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	4e c0       	rjmp	.+156    	; 0x2636 <vfprintf+0x3dc>
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	81 33       	cpi	r24, 0x31	; 49
    259e:	19 f0       	breq	.+6      	; 0x25a6 <vfprintf+0x34c>
    25a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    25a2:	9f 7e       	andi	r25, 0xEF	; 239
    25a4:	9c 87       	std	Y+12, r25	; 0x0c
    25a6:	b7 01       	movw	r22, r14
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    25ae:	11 11       	cpse	r17, r1
    25b0:	05 c0       	rjmp	.+10     	; 0x25bc <vfprintf+0x362>
    25b2:	94 fc       	sbrc	r9, 4
    25b4:	18 c0       	rjmp	.+48     	; 0x25e6 <vfprintf+0x38c>
    25b6:	85 e6       	ldi	r24, 0x65	; 101
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	17 c0       	rjmp	.+46     	; 0x25ea <vfprintf+0x390>
    25bc:	b7 01       	movw	r22, r14
    25be:	8e e2       	ldi	r24, 0x2E	; 46
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    25c6:	1e 5f       	subi	r17, 0xFE	; 254
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	01 e0       	ldi	r16, 0x01	; 1
    25cc:	08 0f       	add	r16, r24
    25ce:	f3 01       	movw	r30, r6
    25d0:	e8 0f       	add	r30, r24
    25d2:	f1 1d       	adc	r31, r1
    25d4:	80 81       	ld	r24, Z
    25d6:	b7 01       	movw	r22, r14
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    25de:	80 2f       	mov	r24, r16
    25e0:	01 13       	cpse	r16, r17
    25e2:	f3 cf       	rjmp	.-26     	; 0x25ca <vfprintf+0x370>
    25e4:	e6 cf       	rjmp	.-52     	; 0x25b2 <vfprintf+0x358>
    25e6:	85 e4       	ldi	r24, 0x45	; 69
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	b7 01       	movw	r22, r14
    25ec:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    25f0:	d7 fc       	sbrc	r13, 7
    25f2:	06 c0       	rjmp	.+12     	; 0x2600 <vfprintf+0x3a6>
    25f4:	c1 14       	cp	r12, r1
    25f6:	d1 04       	cpc	r13, r1
    25f8:	41 f4       	brne	.+16     	; 0x260a <vfprintf+0x3b0>
    25fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    25fc:	e4 ff       	sbrs	r30, 4
    25fe:	05 c0       	rjmp	.+10     	; 0x260a <vfprintf+0x3b0>
    2600:	d1 94       	neg	r13
    2602:	c1 94       	neg	r12
    2604:	d1 08       	sbc	r13, r1
    2606:	8d e2       	ldi	r24, 0x2D	; 45
    2608:	01 c0       	rjmp	.+2      	; 0x260c <vfprintf+0x3b2>
    260a:	8b e2       	ldi	r24, 0x2B	; 43
    260c:	b7 01       	movw	r22, r14
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2614:	80 e3       	ldi	r24, 0x30	; 48
    2616:	2a e0       	ldi	r18, 0x0A	; 10
    2618:	c2 16       	cp	r12, r18
    261a:	d1 04       	cpc	r13, r1
    261c:	2c f0       	brlt	.+10     	; 0x2628 <vfprintf+0x3ce>
    261e:	8f 5f       	subi	r24, 0xFF	; 255
    2620:	fa e0       	ldi	r31, 0x0A	; 10
    2622:	cf 1a       	sub	r12, r31
    2624:	d1 08       	sbc	r13, r1
    2626:	f7 cf       	rjmp	.-18     	; 0x2616 <vfprintf+0x3bc>
    2628:	b7 01       	movw	r22, r14
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2630:	b7 01       	movw	r22, r14
    2632:	c6 01       	movw	r24, r12
    2634:	c0 96       	adiw	r24, 0x30	; 48
    2636:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    263a:	54 c1       	rjmp	.+680    	; 0x28e4 <vfprintf+0x68a>
    263c:	83 36       	cpi	r24, 0x63	; 99
    263e:	31 f0       	breq	.+12     	; 0x264c <vfprintf+0x3f2>
    2640:	83 37       	cpi	r24, 0x73	; 115
    2642:	79 f0       	breq	.+30     	; 0x2662 <vfprintf+0x408>
    2644:	83 35       	cpi	r24, 0x53	; 83
    2646:	09 f0       	breq	.+2      	; 0x264a <vfprintf+0x3f0>
    2648:	56 c0       	rjmp	.+172    	; 0x26f6 <vfprintf+0x49c>
    264a:	20 c0       	rjmp	.+64     	; 0x268c <vfprintf+0x432>
    264c:	56 01       	movw	r10, r12
    264e:	32 e0       	ldi	r19, 0x02	; 2
    2650:	a3 0e       	add	r10, r19
    2652:	b1 1c       	adc	r11, r1
    2654:	f6 01       	movw	r30, r12
    2656:	80 81       	ld	r24, Z
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	01 e0       	ldi	r16, 0x01	; 1
    265c:	10 e0       	ldi	r17, 0x00	; 0
    265e:	63 01       	movw	r12, r6
    2660:	12 c0       	rjmp	.+36     	; 0x2686 <vfprintf+0x42c>
    2662:	56 01       	movw	r10, r12
    2664:	f2 e0       	ldi	r31, 0x02	; 2
    2666:	af 0e       	add	r10, r31
    2668:	b1 1c       	adc	r11, r1
    266a:	f6 01       	movw	r30, r12
    266c:	c0 80       	ld	r12, Z
    266e:	d1 80       	ldd	r13, Z+1	; 0x01
    2670:	96 fe       	sbrs	r9, 6
    2672:	03 c0       	rjmp	.+6      	; 0x267a <vfprintf+0x420>
    2674:	61 2f       	mov	r22, r17
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	02 c0       	rjmp	.+4      	; 0x267e <vfprintf+0x424>
    267a:	6f ef       	ldi	r22, 0xFF	; 255
    267c:	7f ef       	ldi	r23, 0xFF	; 255
    267e:	c6 01       	movw	r24, r12
    2680:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strnlen>
    2684:	8c 01       	movw	r16, r24
    2686:	f9 2d       	mov	r31, r9
    2688:	ff 77       	andi	r31, 0x7F	; 127
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <vfprintf+0x45a>
    268c:	56 01       	movw	r10, r12
    268e:	22 e0       	ldi	r18, 0x02	; 2
    2690:	a2 0e       	add	r10, r18
    2692:	b1 1c       	adc	r11, r1
    2694:	f6 01       	movw	r30, r12
    2696:	c0 80       	ld	r12, Z
    2698:	d1 80       	ldd	r13, Z+1	; 0x01
    269a:	96 fe       	sbrs	r9, 6
    269c:	03 c0       	rjmp	.+6      	; 0x26a4 <vfprintf+0x44a>
    269e:	61 2f       	mov	r22, r17
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <vfprintf+0x44e>
    26a4:	6f ef       	ldi	r22, 0xFF	; 255
    26a6:	7f ef       	ldi	r23, 0xFF	; 255
    26a8:	c6 01       	movw	r24, r12
    26aa:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <strnlen_P>
    26ae:	8c 01       	movw	r16, r24
    26b0:	f9 2d       	mov	r31, r9
    26b2:	f0 68       	ori	r31, 0x80	; 128
    26b4:	9f 2e       	mov	r9, r31
    26b6:	f3 fd       	sbrc	r31, 3
    26b8:	1a c0       	rjmp	.+52     	; 0x26ee <vfprintf+0x494>
    26ba:	85 2d       	mov	r24, r5
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	08 17       	cp	r16, r24
    26c0:	19 07       	cpc	r17, r25
    26c2:	a8 f4       	brcc	.+42     	; 0x26ee <vfprintf+0x494>
    26c4:	b7 01       	movw	r22, r14
    26c6:	80 e2       	ldi	r24, 0x20	; 32
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    26ce:	5a 94       	dec	r5
    26d0:	f4 cf       	rjmp	.-24     	; 0x26ba <vfprintf+0x460>
    26d2:	f6 01       	movw	r30, r12
    26d4:	97 fc       	sbrc	r9, 7
    26d6:	85 91       	lpm	r24, Z+
    26d8:	97 fe       	sbrs	r9, 7
    26da:	81 91       	ld	r24, Z+
    26dc:	6f 01       	movw	r12, r30
    26de:	b7 01       	movw	r22, r14
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    26e6:	51 10       	cpse	r5, r1
    26e8:	5a 94       	dec	r5
    26ea:	01 50       	subi	r16, 0x01	; 1
    26ec:	11 09       	sbc	r17, r1
    26ee:	01 15       	cp	r16, r1
    26f0:	11 05       	cpc	r17, r1
    26f2:	79 f7       	brne	.-34     	; 0x26d2 <vfprintf+0x478>
    26f4:	f7 c0       	rjmp	.+494    	; 0x28e4 <vfprintf+0x68a>
    26f6:	84 36       	cpi	r24, 0x64	; 100
    26f8:	11 f0       	breq	.+4      	; 0x26fe <vfprintf+0x4a4>
    26fa:	89 36       	cpi	r24, 0x69	; 105
    26fc:	61 f5       	brne	.+88     	; 0x2756 <vfprintf+0x4fc>
    26fe:	56 01       	movw	r10, r12
    2700:	97 fe       	sbrs	r9, 7
    2702:	09 c0       	rjmp	.+18     	; 0x2716 <vfprintf+0x4bc>
    2704:	24 e0       	ldi	r18, 0x04	; 4
    2706:	a2 0e       	add	r10, r18
    2708:	b1 1c       	adc	r11, r1
    270a:	f6 01       	movw	r30, r12
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	0a c0       	rjmp	.+20     	; 0x272a <vfprintf+0x4d0>
    2716:	f2 e0       	ldi	r31, 0x02	; 2
    2718:	af 0e       	add	r10, r31
    271a:	b1 1c       	adc	r11, r1
    271c:	f6 01       	movw	r30, r12
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	07 2e       	mov	r0, r23
    2724:	00 0c       	add	r0, r0
    2726:	88 0b       	sbc	r24, r24
    2728:	99 0b       	sbc	r25, r25
    272a:	f9 2d       	mov	r31, r9
    272c:	ff 76       	andi	r31, 0x6F	; 111
    272e:	9f 2e       	mov	r9, r31
    2730:	97 ff       	sbrs	r25, 7
    2732:	09 c0       	rjmp	.+18     	; 0x2746 <vfprintf+0x4ec>
    2734:	90 95       	com	r25
    2736:	80 95       	com	r24
    2738:	70 95       	com	r23
    273a:	61 95       	neg	r22
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	8f 4f       	sbci	r24, 0xFF	; 255
    2740:	9f 4f       	sbci	r25, 0xFF	; 255
    2742:	f0 68       	ori	r31, 0x80	; 128
    2744:	9f 2e       	mov	r9, r31
    2746:	2a e0       	ldi	r18, 0x0A	; 10
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	a3 01       	movw	r20, r6
    274c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__ultoa_invert>
    2750:	c8 2e       	mov	r12, r24
    2752:	c6 18       	sub	r12, r6
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <vfprintf+0x57a>
    2756:	09 2d       	mov	r16, r9
    2758:	85 37       	cpi	r24, 0x75	; 117
    275a:	21 f4       	brne	.+8      	; 0x2764 <vfprintf+0x50a>
    275c:	0f 7e       	andi	r16, 0xEF	; 239
    275e:	2a e0       	ldi	r18, 0x0A	; 10
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	1d c0       	rjmp	.+58     	; 0x279e <vfprintf+0x544>
    2764:	09 7f       	andi	r16, 0xF9	; 249
    2766:	8f 36       	cpi	r24, 0x6F	; 111
    2768:	91 f0       	breq	.+36     	; 0x278e <vfprintf+0x534>
    276a:	18 f4       	brcc	.+6      	; 0x2772 <vfprintf+0x518>
    276c:	88 35       	cpi	r24, 0x58	; 88
    276e:	59 f0       	breq	.+22     	; 0x2786 <vfprintf+0x52c>
    2770:	c3 c0       	rjmp	.+390    	; 0x28f8 <vfprintf+0x69e>
    2772:	80 37       	cpi	r24, 0x70	; 112
    2774:	19 f0       	breq	.+6      	; 0x277c <vfprintf+0x522>
    2776:	88 37       	cpi	r24, 0x78	; 120
    2778:	11 f0       	breq	.+4      	; 0x277e <vfprintf+0x524>
    277a:	be c0       	rjmp	.+380    	; 0x28f8 <vfprintf+0x69e>
    277c:	00 61       	ori	r16, 0x10	; 16
    277e:	04 ff       	sbrs	r16, 4
    2780:	09 c0       	rjmp	.+18     	; 0x2794 <vfprintf+0x53a>
    2782:	04 60       	ori	r16, 0x04	; 4
    2784:	07 c0       	rjmp	.+14     	; 0x2794 <vfprintf+0x53a>
    2786:	94 fe       	sbrs	r9, 4
    2788:	08 c0       	rjmp	.+16     	; 0x279a <vfprintf+0x540>
    278a:	06 60       	ori	r16, 0x06	; 6
    278c:	06 c0       	rjmp	.+12     	; 0x279a <vfprintf+0x540>
    278e:	28 e0       	ldi	r18, 0x08	; 8
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	05 c0       	rjmp	.+10     	; 0x279e <vfprintf+0x544>
    2794:	20 e1       	ldi	r18, 0x10	; 16
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	02 c0       	rjmp	.+4      	; 0x279e <vfprintf+0x544>
    279a:	20 e1       	ldi	r18, 0x10	; 16
    279c:	32 e0       	ldi	r19, 0x02	; 2
    279e:	56 01       	movw	r10, r12
    27a0:	07 ff       	sbrs	r16, 7
    27a2:	09 c0       	rjmp	.+18     	; 0x27b6 <vfprintf+0x55c>
    27a4:	84 e0       	ldi	r24, 0x04	; 4
    27a6:	a8 0e       	add	r10, r24
    27a8:	b1 1c       	adc	r11, r1
    27aa:	f6 01       	movw	r30, r12
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	08 c0       	rjmp	.+16     	; 0x27c6 <vfprintf+0x56c>
    27b6:	f2 e0       	ldi	r31, 0x02	; 2
    27b8:	af 0e       	add	r10, r31
    27ba:	b1 1c       	adc	r11, r1
    27bc:	f6 01       	movw	r30, r12
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a3 01       	movw	r20, r6
    27c8:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__ultoa_invert>
    27cc:	c8 2e       	mov	r12, r24
    27ce:	c6 18       	sub	r12, r6
    27d0:	0f 77       	andi	r16, 0x7F	; 127
    27d2:	90 2e       	mov	r9, r16
    27d4:	96 fe       	sbrs	r9, 6
    27d6:	0b c0       	rjmp	.+22     	; 0x27ee <vfprintf+0x594>
    27d8:	09 2d       	mov	r16, r9
    27da:	0e 7f       	andi	r16, 0xFE	; 254
    27dc:	c1 16       	cp	r12, r17
    27de:	50 f4       	brcc	.+20     	; 0x27f4 <vfprintf+0x59a>
    27e0:	94 fe       	sbrs	r9, 4
    27e2:	0a c0       	rjmp	.+20     	; 0x27f8 <vfprintf+0x59e>
    27e4:	92 fc       	sbrc	r9, 2
    27e6:	08 c0       	rjmp	.+16     	; 0x27f8 <vfprintf+0x59e>
    27e8:	09 2d       	mov	r16, r9
    27ea:	0e 7e       	andi	r16, 0xEE	; 238
    27ec:	05 c0       	rjmp	.+10     	; 0x27f8 <vfprintf+0x59e>
    27ee:	dc 2c       	mov	r13, r12
    27f0:	09 2d       	mov	r16, r9
    27f2:	03 c0       	rjmp	.+6      	; 0x27fa <vfprintf+0x5a0>
    27f4:	dc 2c       	mov	r13, r12
    27f6:	01 c0       	rjmp	.+2      	; 0x27fa <vfprintf+0x5a0>
    27f8:	d1 2e       	mov	r13, r17
    27fa:	04 ff       	sbrs	r16, 4
    27fc:	0d c0       	rjmp	.+26     	; 0x2818 <vfprintf+0x5be>
    27fe:	fe 01       	movw	r30, r28
    2800:	ec 0d       	add	r30, r12
    2802:	f1 1d       	adc	r31, r1
    2804:	80 81       	ld	r24, Z
    2806:	80 33       	cpi	r24, 0x30	; 48
    2808:	11 f4       	brne	.+4      	; 0x280e <vfprintf+0x5b4>
    280a:	09 7e       	andi	r16, 0xE9	; 233
    280c:	09 c0       	rjmp	.+18     	; 0x2820 <vfprintf+0x5c6>
    280e:	02 ff       	sbrs	r16, 2
    2810:	06 c0       	rjmp	.+12     	; 0x281e <vfprintf+0x5c4>
    2812:	d3 94       	inc	r13
    2814:	d3 94       	inc	r13
    2816:	04 c0       	rjmp	.+8      	; 0x2820 <vfprintf+0x5c6>
    2818:	80 2f       	mov	r24, r16
    281a:	86 78       	andi	r24, 0x86	; 134
    281c:	09 f0       	breq	.+2      	; 0x2820 <vfprintf+0x5c6>
    281e:	d3 94       	inc	r13
    2820:	03 fd       	sbrc	r16, 3
    2822:	11 c0       	rjmp	.+34     	; 0x2846 <vfprintf+0x5ec>
    2824:	00 ff       	sbrs	r16, 0
    2826:	06 c0       	rjmp	.+12     	; 0x2834 <vfprintf+0x5da>
    2828:	1c 2d       	mov	r17, r12
    282a:	d5 14       	cp	r13, r5
    282c:	80 f4       	brcc	.+32     	; 0x284e <vfprintf+0x5f4>
    282e:	15 0d       	add	r17, r5
    2830:	1d 19       	sub	r17, r13
    2832:	0d c0       	rjmp	.+26     	; 0x284e <vfprintf+0x5f4>
    2834:	d5 14       	cp	r13, r5
    2836:	58 f4       	brcc	.+22     	; 0x284e <vfprintf+0x5f4>
    2838:	b7 01       	movw	r22, r14
    283a:	80 e2       	ldi	r24, 0x20	; 32
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2842:	d3 94       	inc	r13
    2844:	f7 cf       	rjmp	.-18     	; 0x2834 <vfprintf+0x5da>
    2846:	d5 14       	cp	r13, r5
    2848:	10 f4       	brcc	.+4      	; 0x284e <vfprintf+0x5f4>
    284a:	5d 18       	sub	r5, r13
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <vfprintf+0x5f6>
    284e:	51 2c       	mov	r5, r1
    2850:	04 ff       	sbrs	r16, 4
    2852:	10 c0       	rjmp	.+32     	; 0x2874 <vfprintf+0x61a>
    2854:	b7 01       	movw	r22, r14
    2856:	80 e3       	ldi	r24, 0x30	; 48
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    285e:	02 ff       	sbrs	r16, 2
    2860:	17 c0       	rjmp	.+46     	; 0x2890 <vfprintf+0x636>
    2862:	01 fd       	sbrc	r16, 1
    2864:	03 c0       	rjmp	.+6      	; 0x286c <vfprintf+0x612>
    2866:	88 e7       	ldi	r24, 0x78	; 120
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <vfprintf+0x616>
    286c:	88 e5       	ldi	r24, 0x58	; 88
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	b7 01       	movw	r22, r14
    2872:	0c c0       	rjmp	.+24     	; 0x288c <vfprintf+0x632>
    2874:	80 2f       	mov	r24, r16
    2876:	86 78       	andi	r24, 0x86	; 134
    2878:	59 f0       	breq	.+22     	; 0x2890 <vfprintf+0x636>
    287a:	01 ff       	sbrs	r16, 1
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <vfprintf+0x628>
    287e:	8b e2       	ldi	r24, 0x2B	; 43
    2880:	01 c0       	rjmp	.+2      	; 0x2884 <vfprintf+0x62a>
    2882:	80 e2       	ldi	r24, 0x20	; 32
    2884:	07 fd       	sbrc	r16, 7
    2886:	8d e2       	ldi	r24, 0x2D	; 45
    2888:	b7 01       	movw	r22, r14
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2890:	c1 16       	cp	r12, r17
    2892:	38 f4       	brcc	.+14     	; 0x28a2 <vfprintf+0x648>
    2894:	b7 01       	movw	r22, r14
    2896:	80 e3       	ldi	r24, 0x30	; 48
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    289e:	11 50       	subi	r17, 0x01	; 1
    28a0:	f7 cf       	rjmp	.-18     	; 0x2890 <vfprintf+0x636>
    28a2:	ca 94       	dec	r12
    28a4:	f3 01       	movw	r30, r6
    28a6:	ec 0d       	add	r30, r12
    28a8:	f1 1d       	adc	r31, r1
    28aa:	80 81       	ld	r24, Z
    28ac:	b7 01       	movw	r22, r14
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    28b4:	c1 10       	cpse	r12, r1
    28b6:	f5 cf       	rjmp	.-22     	; 0x28a2 <vfprintf+0x648>
    28b8:	15 c0       	rjmp	.+42     	; 0x28e4 <vfprintf+0x68a>
    28ba:	f4 e0       	ldi	r31, 0x04	; 4
    28bc:	f5 15       	cp	r31, r5
    28be:	60 f5       	brcc	.+88     	; 0x2918 <vfprintf+0x6be>
    28c0:	84 e0       	ldi	r24, 0x04	; 4
    28c2:	58 1a       	sub	r5, r24
    28c4:	93 fe       	sbrs	r9, 3
    28c6:	1f c0       	rjmp	.+62     	; 0x2906 <vfprintf+0x6ac>
    28c8:	01 11       	cpse	r16, r1
    28ca:	27 c0       	rjmp	.+78     	; 0x291a <vfprintf+0x6c0>
    28cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    28ce:	23 ff       	sbrs	r18, 3
    28d0:	2a c0       	rjmp	.+84     	; 0x2926 <vfprintf+0x6cc>
    28d2:	00 e0       	ldi	r16, 0x00	; 0
    28d4:	11 e0       	ldi	r17, 0x01	; 1
    28d6:	39 2d       	mov	r19, r9
    28d8:	30 71       	andi	r19, 0x10	; 16
    28da:	93 2e       	mov	r9, r19
    28dc:	f8 01       	movw	r30, r16
    28de:	84 91       	lpm	r24, Z
    28e0:	81 11       	cpse	r24, r1
    28e2:	24 c0       	rjmp	.+72     	; 0x292c <vfprintf+0x6d2>
    28e4:	55 20       	and	r5, r5
    28e6:	09 f4       	brne	.+2      	; 0x28ea <vfprintf+0x690>
    28e8:	e4 cc       	rjmp	.-1592   	; 0x22b2 <vfprintf+0x58>
    28ea:	b7 01       	movw	r22, r14
    28ec:	80 e2       	ldi	r24, 0x20	; 32
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    28f4:	5a 94       	dec	r5
    28f6:	f6 cf       	rjmp	.-20     	; 0x28e4 <vfprintf+0x68a>
    28f8:	f7 01       	movw	r30, r14
    28fa:	86 81       	ldd	r24, Z+6	; 0x06
    28fc:	97 81       	ldd	r25, Z+7	; 0x07
    28fe:	26 c0       	rjmp	.+76     	; 0x294c <vfprintf+0x6f2>
    2900:	8f ef       	ldi	r24, 0xFF	; 255
    2902:	9f ef       	ldi	r25, 0xFF	; 255
    2904:	23 c0       	rjmp	.+70     	; 0x294c <vfprintf+0x6f2>
    2906:	b7 01       	movw	r22, r14
    2908:	80 e2       	ldi	r24, 0x20	; 32
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2910:	5a 94       	dec	r5
    2912:	51 10       	cpse	r5, r1
    2914:	f8 cf       	rjmp	.-16     	; 0x2906 <vfprintf+0x6ac>
    2916:	d8 cf       	rjmp	.-80     	; 0x28c8 <vfprintf+0x66e>
    2918:	51 2c       	mov	r5, r1
    291a:	b7 01       	movw	r22, r14
    291c:	80 2f       	mov	r24, r16
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2924:	d3 cf       	rjmp	.-90     	; 0x28cc <vfprintf+0x672>
    2926:	04 e0       	ldi	r16, 0x04	; 4
    2928:	11 e0       	ldi	r17, 0x01	; 1
    292a:	d5 cf       	rjmp	.-86     	; 0x28d6 <vfprintf+0x67c>
    292c:	91 10       	cpse	r9, r1
    292e:	80 52       	subi	r24, 0x20	; 32
    2930:	b7 01       	movw	r22, r14
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2938:	0f 5f       	subi	r16, 0xFF	; 255
    293a:	1f 4f       	sbci	r17, 0xFF	; 255
    293c:	cf cf       	rjmp	.-98     	; 0x28dc <vfprintf+0x682>
    293e:	23 e0       	ldi	r18, 0x03	; 3
    2940:	25 15       	cp	r18, r5
    2942:	10 f4       	brcc	.+4      	; 0x2948 <vfprintf+0x6ee>
    2944:	83 e0       	ldi	r24, 0x03	; 3
    2946:	bd cf       	rjmp	.-134    	; 0x28c2 <vfprintf+0x668>
    2948:	51 2c       	mov	r5, r1
    294a:	c0 cf       	rjmp	.-128    	; 0x28cc <vfprintf+0x672>
    294c:	60 96       	adiw	r28, 0x10	; 16
    294e:	e2 e1       	ldi	r30, 0x12	; 18
    2950:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__>

00002954 <__udivmodsi4>:
    2954:	a1 e2       	ldi	r26, 0x21	; 33
    2956:	1a 2e       	mov	r1, r26
    2958:	aa 1b       	sub	r26, r26
    295a:	bb 1b       	sub	r27, r27
    295c:	fd 01       	movw	r30, r26
    295e:	0d c0       	rjmp	.+26     	; 0x297a <__udivmodsi4_ep>

00002960 <__udivmodsi4_loop>:
    2960:	aa 1f       	adc	r26, r26
    2962:	bb 1f       	adc	r27, r27
    2964:	ee 1f       	adc	r30, r30
    2966:	ff 1f       	adc	r31, r31
    2968:	a2 17       	cp	r26, r18
    296a:	b3 07       	cpc	r27, r19
    296c:	e4 07       	cpc	r30, r20
    296e:	f5 07       	cpc	r31, r21
    2970:	20 f0       	brcs	.+8      	; 0x297a <__udivmodsi4_ep>
    2972:	a2 1b       	sub	r26, r18
    2974:	b3 0b       	sbc	r27, r19
    2976:	e4 0b       	sbc	r30, r20
    2978:	f5 0b       	sbc	r31, r21

0000297a <__udivmodsi4_ep>:
    297a:	66 1f       	adc	r22, r22
    297c:	77 1f       	adc	r23, r23
    297e:	88 1f       	adc	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	1a 94       	dec	r1
    2984:	69 f7       	brne	.-38     	; 0x2960 <__udivmodsi4_loop>
    2986:	60 95       	com	r22
    2988:	70 95       	com	r23
    298a:	80 95       	com	r24
    298c:	90 95       	com	r25
    298e:	9b 01       	movw	r18, r22
    2990:	ac 01       	movw	r20, r24
    2992:	bd 01       	movw	r22, r26
    2994:	cf 01       	movw	r24, r30
    2996:	08 95       	ret

00002998 <__tablejump2__>:
    2998:	ee 0f       	add	r30, r30
    299a:	ff 1f       	adc	r31, r31
    299c:	05 90       	lpm	r0, Z+
    299e:	f4 91       	lpm	r31, Z
    29a0:	e0 2d       	mov	r30, r0
    29a2:	09 94       	ijmp

000029a4 <__umulhisi3>:
    29a4:	a2 9f       	mul	r26, r18
    29a6:	b0 01       	movw	r22, r0
    29a8:	b3 9f       	mul	r27, r19
    29aa:	c0 01       	movw	r24, r0
    29ac:	a3 9f       	mul	r26, r19
    29ae:	70 0d       	add	r23, r0
    29b0:	81 1d       	adc	r24, r1
    29b2:	11 24       	eor	r1, r1
    29b4:	91 1d       	adc	r25, r1
    29b6:	b2 9f       	mul	r27, r18
    29b8:	70 0d       	add	r23, r0
    29ba:	81 1d       	adc	r24, r1
    29bc:	11 24       	eor	r1, r1
    29be:	91 1d       	adc	r25, r1
    29c0:	08 95       	ret

000029c2 <__prologue_saves__>:
    29c2:	2f 92       	push	r2
    29c4:	3f 92       	push	r3
    29c6:	4f 92       	push	r4
    29c8:	5f 92       	push	r5
    29ca:	6f 92       	push	r6
    29cc:	7f 92       	push	r7
    29ce:	8f 92       	push	r8
    29d0:	9f 92       	push	r9
    29d2:	af 92       	push	r10
    29d4:	bf 92       	push	r11
    29d6:	cf 92       	push	r12
    29d8:	df 92       	push	r13
    29da:	ef 92       	push	r14
    29dc:	ff 92       	push	r15
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	ca 1b       	sub	r28, r26
    29ec:	db 0b       	sbc	r29, r27
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	09 94       	ijmp

000029fa <__epilogue_restores__>:
    29fa:	2a 88       	ldd	r2, Y+18	; 0x12
    29fc:	39 88       	ldd	r3, Y+17	; 0x11
    29fe:	48 88       	ldd	r4, Y+16	; 0x10
    2a00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2a0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2a10:	df 80       	ldd	r13, Y+7	; 0x07
    2a12:	ee 80       	ldd	r14, Y+6	; 0x06
    2a14:	fd 80       	ldd	r15, Y+5	; 0x05
    2a16:	0c 81       	ldd	r16, Y+4	; 0x04
    2a18:	1b 81       	ldd	r17, Y+3	; 0x03
    2a1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2a1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2a1e:	ce 0f       	add	r28, r30
    2a20:	d1 1d       	adc	r29, r1
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	ed 01       	movw	r28, r26
    2a2e:	08 95       	ret

00002a30 <__ftoa_engine>:
    2a30:	28 30       	cpi	r18, 0x08	; 8
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <__ftoa_engine+0x6>
    2a34:	27 e0       	ldi	r18, 0x07	; 7
    2a36:	33 27       	eor	r19, r19
    2a38:	da 01       	movw	r26, r20
    2a3a:	99 0f       	add	r25, r25
    2a3c:	31 1d       	adc	r19, r1
    2a3e:	87 fd       	sbrc	r24, 7
    2a40:	91 60       	ori	r25, 0x01	; 1
    2a42:	00 96       	adiw	r24, 0x00	; 0
    2a44:	61 05       	cpc	r22, r1
    2a46:	71 05       	cpc	r23, r1
    2a48:	39 f4       	brne	.+14     	; 0x2a58 <__ftoa_engine+0x28>
    2a4a:	32 60       	ori	r19, 0x02	; 2
    2a4c:	2e 5f       	subi	r18, 0xFE	; 254
    2a4e:	3d 93       	st	X+, r19
    2a50:	30 e3       	ldi	r19, 0x30	; 48
    2a52:	2a 95       	dec	r18
    2a54:	e1 f7       	brne	.-8      	; 0x2a4e <__ftoa_engine+0x1e>
    2a56:	08 95       	ret
    2a58:	9f 3f       	cpi	r25, 0xFF	; 255
    2a5a:	30 f0       	brcs	.+12     	; 0x2a68 <__ftoa_engine+0x38>
    2a5c:	80 38       	cpi	r24, 0x80	; 128
    2a5e:	71 05       	cpc	r23, r1
    2a60:	61 05       	cpc	r22, r1
    2a62:	09 f0       	breq	.+2      	; 0x2a66 <__ftoa_engine+0x36>
    2a64:	3c 5f       	subi	r19, 0xFC	; 252
    2a66:	3c 5f       	subi	r19, 0xFC	; 252
    2a68:	3d 93       	st	X+, r19
    2a6a:	91 30       	cpi	r25, 0x01	; 1
    2a6c:	08 f0       	brcs	.+2      	; 0x2a70 <__ftoa_engine+0x40>
    2a6e:	80 68       	ori	r24, 0x80	; 128
    2a70:	91 1d       	adc	r25, r1
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	1f 93       	push	r17
    2a78:	0f 93       	push	r16
    2a7a:	ff 92       	push	r15
    2a7c:	ef 92       	push	r14
    2a7e:	19 2f       	mov	r17, r25
    2a80:	98 7f       	andi	r25, 0xF8	; 248
    2a82:	96 95       	lsr	r25
    2a84:	e9 2f       	mov	r30, r25
    2a86:	96 95       	lsr	r25
    2a88:	96 95       	lsr	r25
    2a8a:	e9 0f       	add	r30, r25
    2a8c:	ff 27       	eor	r31, r31
    2a8e:	ee 59       	subi	r30, 0x9E	; 158
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	99 27       	eor	r25, r25
    2a94:	33 27       	eor	r19, r19
    2a96:	ee 24       	eor	r14, r14
    2a98:	ff 24       	eor	r15, r15
    2a9a:	a7 01       	movw	r20, r14
    2a9c:	e7 01       	movw	r28, r14
    2a9e:	05 90       	lpm	r0, Z+
    2aa0:	08 94       	sec
    2aa2:	07 94       	ror	r0
    2aa4:	28 f4       	brcc	.+10     	; 0x2ab0 <__ftoa_engine+0x80>
    2aa6:	36 0f       	add	r19, r22
    2aa8:	e7 1e       	adc	r14, r23
    2aaa:	f8 1e       	adc	r15, r24
    2aac:	49 1f       	adc	r20, r25
    2aae:	51 1d       	adc	r21, r1
    2ab0:	66 0f       	add	r22, r22
    2ab2:	77 1f       	adc	r23, r23
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	06 94       	lsr	r0
    2aba:	a1 f7       	brne	.-24     	; 0x2aa4 <__ftoa_engine+0x74>
    2abc:	05 90       	lpm	r0, Z+
    2abe:	07 94       	ror	r0
    2ac0:	28 f4       	brcc	.+10     	; 0x2acc <__ftoa_engine+0x9c>
    2ac2:	e7 0e       	add	r14, r23
    2ac4:	f8 1e       	adc	r15, r24
    2ac6:	49 1f       	adc	r20, r25
    2ac8:	56 1f       	adc	r21, r22
    2aca:	c1 1d       	adc	r28, r1
    2acc:	77 0f       	add	r23, r23
    2ace:	88 1f       	adc	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	66 1f       	adc	r22, r22
    2ad4:	06 94       	lsr	r0
    2ad6:	a1 f7       	brne	.-24     	; 0x2ac0 <__ftoa_engine+0x90>
    2ad8:	05 90       	lpm	r0, Z+
    2ada:	07 94       	ror	r0
    2adc:	28 f4       	brcc	.+10     	; 0x2ae8 <__ftoa_engine+0xb8>
    2ade:	f8 0e       	add	r15, r24
    2ae0:	49 1f       	adc	r20, r25
    2ae2:	56 1f       	adc	r21, r22
    2ae4:	c7 1f       	adc	r28, r23
    2ae6:	d1 1d       	adc	r29, r1
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	66 1f       	adc	r22, r22
    2aee:	77 1f       	adc	r23, r23
    2af0:	06 94       	lsr	r0
    2af2:	a1 f7       	brne	.-24     	; 0x2adc <__ftoa_engine+0xac>
    2af4:	05 90       	lpm	r0, Z+
    2af6:	07 94       	ror	r0
    2af8:	20 f4       	brcc	.+8      	; 0x2b02 <__ftoa_engine+0xd2>
    2afa:	49 0f       	add	r20, r25
    2afc:	56 1f       	adc	r21, r22
    2afe:	c7 1f       	adc	r28, r23
    2b00:	d8 1f       	adc	r29, r24
    2b02:	99 0f       	add	r25, r25
    2b04:	66 1f       	adc	r22, r22
    2b06:	77 1f       	adc	r23, r23
    2b08:	88 1f       	adc	r24, r24
    2b0a:	06 94       	lsr	r0
    2b0c:	a9 f7       	brne	.-22     	; 0x2af8 <__ftoa_engine+0xc8>
    2b0e:	84 91       	lpm	r24, Z
    2b10:	10 95       	com	r17
    2b12:	17 70       	andi	r17, 0x07	; 7
    2b14:	41 f0       	breq	.+16     	; 0x2b26 <__ftoa_engine+0xf6>
    2b16:	d6 95       	lsr	r29
    2b18:	c7 95       	ror	r28
    2b1a:	57 95       	ror	r21
    2b1c:	47 95       	ror	r20
    2b1e:	f7 94       	ror	r15
    2b20:	e7 94       	ror	r14
    2b22:	1a 95       	dec	r17
    2b24:	c1 f7       	brne	.-16     	; 0x2b16 <__ftoa_engine+0xe6>
    2b26:	e8 e0       	ldi	r30, 0x08	; 8
    2b28:	f1 e0       	ldi	r31, 0x01	; 1
    2b2a:	68 94       	set
    2b2c:	15 90       	lpm	r1, Z+
    2b2e:	15 91       	lpm	r17, Z+
    2b30:	35 91       	lpm	r19, Z+
    2b32:	65 91       	lpm	r22, Z+
    2b34:	95 91       	lpm	r25, Z+
    2b36:	05 90       	lpm	r0, Z+
    2b38:	7f e2       	ldi	r23, 0x2F	; 47
    2b3a:	73 95       	inc	r23
    2b3c:	e1 18       	sub	r14, r1
    2b3e:	f1 0a       	sbc	r15, r17
    2b40:	43 0b       	sbc	r20, r19
    2b42:	56 0b       	sbc	r21, r22
    2b44:	c9 0b       	sbc	r28, r25
    2b46:	d0 09       	sbc	r29, r0
    2b48:	c0 f7       	brcc	.-16     	; 0x2b3a <__ftoa_engine+0x10a>
    2b4a:	e1 0c       	add	r14, r1
    2b4c:	f1 1e       	adc	r15, r17
    2b4e:	43 1f       	adc	r20, r19
    2b50:	56 1f       	adc	r21, r22
    2b52:	c9 1f       	adc	r28, r25
    2b54:	d0 1d       	adc	r29, r0
    2b56:	7e f4       	brtc	.+30     	; 0x2b76 <__ftoa_engine+0x146>
    2b58:	70 33       	cpi	r23, 0x30	; 48
    2b5a:	11 f4       	brne	.+4      	; 0x2b60 <__ftoa_engine+0x130>
    2b5c:	8a 95       	dec	r24
    2b5e:	e6 cf       	rjmp	.-52     	; 0x2b2c <__ftoa_engine+0xfc>
    2b60:	e8 94       	clt
    2b62:	01 50       	subi	r16, 0x01	; 1
    2b64:	30 f0       	brcs	.+12     	; 0x2b72 <__ftoa_engine+0x142>
    2b66:	08 0f       	add	r16, r24
    2b68:	0a f4       	brpl	.+2      	; 0x2b6c <__ftoa_engine+0x13c>
    2b6a:	00 27       	eor	r16, r16
    2b6c:	02 17       	cp	r16, r18
    2b6e:	08 f4       	brcc	.+2      	; 0x2b72 <__ftoa_engine+0x142>
    2b70:	20 2f       	mov	r18, r16
    2b72:	23 95       	inc	r18
    2b74:	02 2f       	mov	r16, r18
    2b76:	7a 33       	cpi	r23, 0x3A	; 58
    2b78:	28 f0       	brcs	.+10     	; 0x2b84 <__ftoa_engine+0x154>
    2b7a:	79 e3       	ldi	r23, 0x39	; 57
    2b7c:	7d 93       	st	X+, r23
    2b7e:	2a 95       	dec	r18
    2b80:	e9 f7       	brne	.-6      	; 0x2b7c <__ftoa_engine+0x14c>
    2b82:	10 c0       	rjmp	.+32     	; 0x2ba4 <__ftoa_engine+0x174>
    2b84:	7d 93       	st	X+, r23
    2b86:	2a 95       	dec	r18
    2b88:	89 f6       	brne	.-94     	; 0x2b2c <__ftoa_engine+0xfc>
    2b8a:	06 94       	lsr	r0
    2b8c:	97 95       	ror	r25
    2b8e:	67 95       	ror	r22
    2b90:	37 95       	ror	r19
    2b92:	17 95       	ror	r17
    2b94:	17 94       	ror	r1
    2b96:	e1 18       	sub	r14, r1
    2b98:	f1 0a       	sbc	r15, r17
    2b9a:	43 0b       	sbc	r20, r19
    2b9c:	56 0b       	sbc	r21, r22
    2b9e:	c9 0b       	sbc	r28, r25
    2ba0:	d0 09       	sbc	r29, r0
    2ba2:	98 f0       	brcs	.+38     	; 0x2bca <__ftoa_engine+0x19a>
    2ba4:	23 95       	inc	r18
    2ba6:	7e 91       	ld	r23, -X
    2ba8:	73 95       	inc	r23
    2baa:	7a 33       	cpi	r23, 0x3A	; 58
    2bac:	08 f0       	brcs	.+2      	; 0x2bb0 <__ftoa_engine+0x180>
    2bae:	70 e3       	ldi	r23, 0x30	; 48
    2bb0:	7c 93       	st	X, r23
    2bb2:	20 13       	cpse	r18, r16
    2bb4:	b8 f7       	brcc	.-18     	; 0x2ba4 <__ftoa_engine+0x174>
    2bb6:	7e 91       	ld	r23, -X
    2bb8:	70 61       	ori	r23, 0x10	; 16
    2bba:	7d 93       	st	X+, r23
    2bbc:	30 f0       	brcs	.+12     	; 0x2bca <__ftoa_engine+0x19a>
    2bbe:	83 95       	inc	r24
    2bc0:	71 e3       	ldi	r23, 0x31	; 49
    2bc2:	7d 93       	st	X+, r23
    2bc4:	70 e3       	ldi	r23, 0x30	; 48
    2bc6:	2a 95       	dec	r18
    2bc8:	e1 f7       	brne	.-8      	; 0x2bc2 <__ftoa_engine+0x192>
    2bca:	11 24       	eor	r1, r1
    2bcc:	ef 90       	pop	r14
    2bce:	ff 90       	pop	r15
    2bd0:	0f 91       	pop	r16
    2bd2:	1f 91       	pop	r17
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	99 27       	eor	r25, r25
    2bda:	87 fd       	sbrc	r24, 7
    2bdc:	90 95       	com	r25
    2bde:	08 95       	ret

00002be0 <strnlen_P>:
    2be0:	fc 01       	movw	r30, r24
    2be2:	05 90       	lpm	r0, Z+
    2be4:	61 50       	subi	r22, 0x01	; 1
    2be6:	70 40       	sbci	r23, 0x00	; 0
    2be8:	01 10       	cpse	r0, r1
    2bea:	d8 f7       	brcc	.-10     	; 0x2be2 <strnlen_P+0x2>
    2bec:	80 95       	com	r24
    2bee:	90 95       	com	r25
    2bf0:	8e 0f       	add	r24, r30
    2bf2:	9f 1f       	adc	r25, r31
    2bf4:	08 95       	ret

00002bf6 <strnlen>:
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	61 50       	subi	r22, 0x01	; 1
    2bfa:	70 40       	sbci	r23, 0x00	; 0
    2bfc:	01 90       	ld	r0, Z+
    2bfe:	01 10       	cpse	r0, r1
    2c00:	d8 f7       	brcc	.-10     	; 0x2bf8 <strnlen+0x2>
    2c02:	80 95       	com	r24
    2c04:	90 95       	com	r25
    2c06:	8e 0f       	add	r24, r30
    2c08:	9f 1f       	adc	r25, r31
    2c0a:	08 95       	ret

00002c0c <fputc>:
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	fb 01       	movw	r30, r22
    2c16:	23 81       	ldd	r18, Z+3	; 0x03
    2c18:	21 fd       	sbrc	r18, 1
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <fputc+0x16>
    2c1c:	8f ef       	ldi	r24, 0xFF	; 255
    2c1e:	9f ef       	ldi	r25, 0xFF	; 255
    2c20:	2c c0       	rjmp	.+88     	; 0x2c7a <fputc+0x6e>
    2c22:	22 ff       	sbrs	r18, 2
    2c24:	16 c0       	rjmp	.+44     	; 0x2c52 <fputc+0x46>
    2c26:	46 81       	ldd	r20, Z+6	; 0x06
    2c28:	57 81       	ldd	r21, Z+7	; 0x07
    2c2a:	24 81       	ldd	r18, Z+4	; 0x04
    2c2c:	35 81       	ldd	r19, Z+5	; 0x05
    2c2e:	42 17       	cp	r20, r18
    2c30:	53 07       	cpc	r21, r19
    2c32:	44 f4       	brge	.+16     	; 0x2c44 <fputc+0x38>
    2c34:	a0 81       	ld	r26, Z
    2c36:	b1 81       	ldd	r27, Z+1	; 0x01
    2c38:	9d 01       	movw	r18, r26
    2c3a:	2f 5f       	subi	r18, 0xFF	; 255
    2c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3e:	31 83       	std	Z+1, r19	; 0x01
    2c40:	20 83       	st	Z, r18
    2c42:	8c 93       	st	X, r24
    2c44:	26 81       	ldd	r18, Z+6	; 0x06
    2c46:	37 81       	ldd	r19, Z+7	; 0x07
    2c48:	2f 5f       	subi	r18, 0xFF	; 255
    2c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4c:	37 83       	std	Z+7, r19	; 0x07
    2c4e:	26 83       	std	Z+6, r18	; 0x06
    2c50:	14 c0       	rjmp	.+40     	; 0x2c7a <fputc+0x6e>
    2c52:	8b 01       	movw	r16, r22
    2c54:	ec 01       	movw	r28, r24
    2c56:	fb 01       	movw	r30, r22
    2c58:	00 84       	ldd	r0, Z+8	; 0x08
    2c5a:	f1 85       	ldd	r31, Z+9	; 0x09
    2c5c:	e0 2d       	mov	r30, r0
    2c5e:	09 95       	icall
    2c60:	89 2b       	or	r24, r25
    2c62:	e1 f6       	brne	.-72     	; 0x2c1c <fputc+0x10>
    2c64:	d8 01       	movw	r26, r16
    2c66:	16 96       	adiw	r26, 0x06	; 6
    2c68:	8d 91       	ld	r24, X+
    2c6a:	9c 91       	ld	r25, X
    2c6c:	17 97       	sbiw	r26, 0x07	; 7
    2c6e:	01 96       	adiw	r24, 0x01	; 1
    2c70:	17 96       	adiw	r26, 0x07	; 7
    2c72:	9c 93       	st	X, r25
    2c74:	8e 93       	st	-X, r24
    2c76:	16 97       	sbiw	r26, 0x06	; 6
    2c78:	ce 01       	movw	r24, r28
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	08 95       	ret

00002c84 <snprintf>:
    2c84:	ae e0       	ldi	r26, 0x0E	; 14
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	e8 e4       	ldi	r30, 0x48	; 72
    2c8a:	f6 e1       	ldi	r31, 0x16	; 22
    2c8c:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__prologue_saves__+0x1c>
    2c90:	0d 89       	ldd	r16, Y+21	; 0x15
    2c92:	1e 89       	ldd	r17, Y+22	; 0x16
    2c94:	8f 89       	ldd	r24, Y+23	; 0x17
    2c96:	98 8d       	ldd	r25, Y+24	; 0x18
    2c98:	26 e0       	ldi	r18, 0x06	; 6
    2c9a:	2c 83       	std	Y+4, r18	; 0x04
    2c9c:	1a 83       	std	Y+2, r17	; 0x02
    2c9e:	09 83       	std	Y+1, r16	; 0x01
    2ca0:	97 ff       	sbrs	r25, 7
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <snprintf+0x24>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e8       	ldi	r25, 0x80	; 128
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	ae 01       	movw	r20, r28
    2cb0:	45 5e       	subi	r20, 0xE5	; 229
    2cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb8:	ce 01       	movw	r24, r28
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	0e 94 2d 11 	call	0x225a	; 0x225a <vfprintf>
    2cc0:	4d 81       	ldd	r20, Y+5	; 0x05
    2cc2:	5e 81       	ldd	r21, Y+6	; 0x06
    2cc4:	57 fd       	sbrc	r21, 7
    2cc6:	0a c0       	rjmp	.+20     	; 0x2cdc <snprintf+0x58>
    2cc8:	2f 81       	ldd	r18, Y+7	; 0x07
    2cca:	38 85       	ldd	r19, Y+8	; 0x08
    2ccc:	42 17       	cp	r20, r18
    2cce:	53 07       	cpc	r21, r19
    2cd0:	0c f4       	brge	.+2      	; 0x2cd4 <snprintf+0x50>
    2cd2:	9a 01       	movw	r18, r20
    2cd4:	f8 01       	movw	r30, r16
    2cd6:	e2 0f       	add	r30, r18
    2cd8:	f3 1f       	adc	r31, r19
    2cda:	10 82       	st	Z, r1
    2cdc:	2e 96       	adiw	r28, 0x0e	; 14
    2cde:	e4 e0       	ldi	r30, 0x04	; 4
    2ce0:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__epilogue_restores__+0x1c>

00002ce4 <sscanf>:
    2ce4:	ae e0       	ldi	r26, 0x0E	; 14
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	e8 e7       	ldi	r30, 0x78	; 120
    2cea:	f6 e1       	ldi	r31, 0x16	; 22
    2cec:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x20>
    2cf0:	85 e0       	ldi	r24, 0x05	; 5
    2cf2:	8c 83       	std	Y+4, r24	; 0x04
    2cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    2cfc:	ae 01       	movw	r20, r28
    2cfe:	49 5e       	subi	r20, 0xE9	; 233
    2d00:	5f 4f       	sbci	r21, 0xFF	; 255
    2d02:	6d 89       	ldd	r22, Y+21	; 0x15
    2d04:	7e 89       	ldd	r23, Y+22	; 0x16
    2d06:	ce 01       	movw	r24, r28
    2d08:	01 96       	adiw	r24, 0x01	; 1
    2d0a:	0e 94 85 18 	call	0x310a	; 0x310a <vfscanf>
    2d0e:	2e 96       	adiw	r28, 0x0e	; 14
    2d10:	e2 e0       	ldi	r30, 0x02	; 2
    2d12:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x20>

00002d16 <__ultoa_invert>:
    2d16:	fa 01       	movw	r30, r20
    2d18:	aa 27       	eor	r26, r26
    2d1a:	28 30       	cpi	r18, 0x08	; 8
    2d1c:	51 f1       	breq	.+84     	; 0x2d72 <__ultoa_invert+0x5c>
    2d1e:	20 31       	cpi	r18, 0x10	; 16
    2d20:	81 f1       	breq	.+96     	; 0x2d82 <__ultoa_invert+0x6c>
    2d22:	e8 94       	clt
    2d24:	6f 93       	push	r22
    2d26:	6e 7f       	andi	r22, 0xFE	; 254
    2d28:	6e 5f       	subi	r22, 0xFE	; 254
    2d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d30:	af 4f       	sbci	r26, 0xFF	; 255
    2d32:	b1 e0       	ldi	r27, 0x01	; 1
    2d34:	3e d0       	rcall	.+124    	; 0x2db2 <__ultoa_invert+0x9c>
    2d36:	b4 e0       	ldi	r27, 0x04	; 4
    2d38:	3c d0       	rcall	.+120    	; 0x2db2 <__ultoa_invert+0x9c>
    2d3a:	67 0f       	add	r22, r23
    2d3c:	78 1f       	adc	r23, r24
    2d3e:	89 1f       	adc	r24, r25
    2d40:	9a 1f       	adc	r25, r26
    2d42:	a1 1d       	adc	r26, r1
    2d44:	68 0f       	add	r22, r24
    2d46:	79 1f       	adc	r23, r25
    2d48:	8a 1f       	adc	r24, r26
    2d4a:	91 1d       	adc	r25, r1
    2d4c:	a1 1d       	adc	r26, r1
    2d4e:	6a 0f       	add	r22, r26
    2d50:	71 1d       	adc	r23, r1
    2d52:	81 1d       	adc	r24, r1
    2d54:	91 1d       	adc	r25, r1
    2d56:	a1 1d       	adc	r26, r1
    2d58:	20 d0       	rcall	.+64     	; 0x2d9a <__ultoa_invert+0x84>
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <__ultoa_invert+0x48>
    2d5c:	68 94       	set
    2d5e:	3f 91       	pop	r19
    2d60:	2a e0       	ldi	r18, 0x0A	; 10
    2d62:	26 9f       	mul	r18, r22
    2d64:	11 24       	eor	r1, r1
    2d66:	30 19       	sub	r19, r0
    2d68:	30 5d       	subi	r19, 0xD0	; 208
    2d6a:	31 93       	st	Z+, r19
    2d6c:	de f6       	brtc	.-74     	; 0x2d24 <__ultoa_invert+0xe>
    2d6e:	cf 01       	movw	r24, r30
    2d70:	08 95       	ret
    2d72:	46 2f       	mov	r20, r22
    2d74:	47 70       	andi	r20, 0x07	; 7
    2d76:	40 5d       	subi	r20, 0xD0	; 208
    2d78:	41 93       	st	Z+, r20
    2d7a:	b3 e0       	ldi	r27, 0x03	; 3
    2d7c:	0f d0       	rcall	.+30     	; 0x2d9c <__ultoa_invert+0x86>
    2d7e:	c9 f7       	brne	.-14     	; 0x2d72 <__ultoa_invert+0x5c>
    2d80:	f6 cf       	rjmp	.-20     	; 0x2d6e <__ultoa_invert+0x58>
    2d82:	46 2f       	mov	r20, r22
    2d84:	4f 70       	andi	r20, 0x0F	; 15
    2d86:	40 5d       	subi	r20, 0xD0	; 208
    2d88:	4a 33       	cpi	r20, 0x3A	; 58
    2d8a:	18 f0       	brcs	.+6      	; 0x2d92 <__ultoa_invert+0x7c>
    2d8c:	49 5d       	subi	r20, 0xD9	; 217
    2d8e:	31 fd       	sbrc	r19, 1
    2d90:	40 52       	subi	r20, 0x20	; 32
    2d92:	41 93       	st	Z+, r20
    2d94:	02 d0       	rcall	.+4      	; 0x2d9a <__ultoa_invert+0x84>
    2d96:	a9 f7       	brne	.-22     	; 0x2d82 <__ultoa_invert+0x6c>
    2d98:	ea cf       	rjmp	.-44     	; 0x2d6e <__ultoa_invert+0x58>
    2d9a:	b4 e0       	ldi	r27, 0x04	; 4
    2d9c:	a6 95       	lsr	r26
    2d9e:	97 95       	ror	r25
    2da0:	87 95       	ror	r24
    2da2:	77 95       	ror	r23
    2da4:	67 95       	ror	r22
    2da6:	ba 95       	dec	r27
    2da8:	c9 f7       	brne	.-14     	; 0x2d9c <__ultoa_invert+0x86>
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	61 05       	cpc	r22, r1
    2dae:	71 05       	cpc	r23, r1
    2db0:	08 95       	ret
    2db2:	9b 01       	movw	r18, r22
    2db4:	ac 01       	movw	r20, r24
    2db6:	0a 2e       	mov	r0, r26
    2db8:	06 94       	lsr	r0
    2dba:	57 95       	ror	r21
    2dbc:	47 95       	ror	r20
    2dbe:	37 95       	ror	r19
    2dc0:	27 95       	ror	r18
    2dc2:	ba 95       	dec	r27
    2dc4:	c9 f7       	brne	.-14     	; 0x2db8 <__ultoa_invert+0xa2>
    2dc6:	62 0f       	add	r22, r18
    2dc8:	73 1f       	adc	r23, r19
    2dca:	84 1f       	adc	r24, r20
    2dcc:	95 1f       	adc	r25, r21
    2dce:	a0 1d       	adc	r26, r0
    2dd0:	08 95       	ret

00002dd2 <putval>:
    2dd2:	20 fd       	sbrc	r18, 0
    2dd4:	09 c0       	rjmp	.+18     	; 0x2de8 <putval+0x16>
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	23 fd       	sbrc	r18, 3
    2dda:	05 c0       	rjmp	.+10     	; 0x2de6 <putval+0x14>
    2ddc:	22 ff       	sbrs	r18, 2
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <putval+0x12>
    2de0:	73 83       	std	Z+3, r23	; 0x03
    2de2:	62 83       	std	Z+2, r22	; 0x02
    2de4:	51 83       	std	Z+1, r21	; 0x01
    2de6:	40 83       	st	Z, r20
    2de8:	08 95       	ret

00002dea <mulacc>:
    2dea:	44 fd       	sbrc	r20, 4
    2dec:	17 c0       	rjmp	.+46     	; 0x2e1c <mulacc+0x32>
    2dee:	46 fd       	sbrc	r20, 6
    2df0:	17 c0       	rjmp	.+46     	; 0x2e20 <mulacc+0x36>
    2df2:	ab 01       	movw	r20, r22
    2df4:	bc 01       	movw	r22, r24
    2df6:	da 01       	movw	r26, r20
    2df8:	fb 01       	movw	r30, r22
    2dfa:	aa 0f       	add	r26, r26
    2dfc:	bb 1f       	adc	r27, r27
    2dfe:	ee 1f       	adc	r30, r30
    2e00:	ff 1f       	adc	r31, r31
    2e02:	10 94       	com	r1
    2e04:	d1 f7       	brne	.-12     	; 0x2dfa <mulacc+0x10>
    2e06:	4a 0f       	add	r20, r26
    2e08:	5b 1f       	adc	r21, r27
    2e0a:	6e 1f       	adc	r22, r30
    2e0c:	7f 1f       	adc	r23, r31
    2e0e:	cb 01       	movw	r24, r22
    2e10:	ba 01       	movw	r22, r20
    2e12:	66 0f       	add	r22, r22
    2e14:	77 1f       	adc	r23, r23
    2e16:	88 1f       	adc	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	09 c0       	rjmp	.+18     	; 0x2e2e <mulacc+0x44>
    2e1c:	33 e0       	ldi	r19, 0x03	; 3
    2e1e:	01 c0       	rjmp	.+2      	; 0x2e22 <mulacc+0x38>
    2e20:	34 e0       	ldi	r19, 0x04	; 4
    2e22:	66 0f       	add	r22, r22
    2e24:	77 1f       	adc	r23, r23
    2e26:	88 1f       	adc	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	31 50       	subi	r19, 0x01	; 1
    2e2c:	d1 f7       	brne	.-12     	; 0x2e22 <mulacc+0x38>
    2e2e:	62 0f       	add	r22, r18
    2e30:	71 1d       	adc	r23, r1
    2e32:	81 1d       	adc	r24, r1
    2e34:	91 1d       	adc	r25, r1
    2e36:	08 95       	ret

00002e38 <skip_spaces>:
    2e38:	0f 93       	push	r16
    2e3a:	1f 93       	push	r17
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	8c 01       	movw	r16, r24
    2e42:	c8 01       	movw	r24, r16
    2e44:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    2e48:	ec 01       	movw	r28, r24
    2e4a:	97 fd       	sbrc	r25, 7
    2e4c:	08 c0       	rjmp	.+16     	; 0x2e5e <skip_spaces+0x26>
    2e4e:	0e 94 96 19 	call	0x332c	; 0x332c <isspace>
    2e52:	89 2b       	or	r24, r25
    2e54:	b1 f7       	brne	.-20     	; 0x2e42 <skip_spaces+0xa>
    2e56:	b8 01       	movw	r22, r16
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <ungetc>
    2e5e:	ce 01       	movw	r24, r28
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	1f 91       	pop	r17
    2e66:	0f 91       	pop	r16
    2e68:	08 95       	ret

00002e6a <conv_int>:
    2e6a:	8f 92       	push	r8
    2e6c:	9f 92       	push	r9
    2e6e:	af 92       	push	r10
    2e70:	bf 92       	push	r11
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	8c 01       	movw	r16, r24
    2e80:	d6 2f       	mov	r29, r22
    2e82:	7a 01       	movw	r14, r20
    2e84:	b2 2e       	mov	r11, r18
    2e86:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    2e8a:	9c 01       	movw	r18, r24
    2e8c:	33 27       	eor	r19, r19
    2e8e:	2b 32       	cpi	r18, 0x2B	; 43
    2e90:	31 05       	cpc	r19, r1
    2e92:	31 f0       	breq	.+12     	; 0x2ea0 <conv_int+0x36>
    2e94:	2d 32       	cpi	r18, 0x2D	; 45
    2e96:	31 05       	cpc	r19, r1
    2e98:	61 f4       	brne	.+24     	; 0x2eb2 <conv_int+0x48>
    2e9a:	8b 2d       	mov	r24, r11
    2e9c:	80 68       	ori	r24, 0x80	; 128
    2e9e:	b8 2e       	mov	r11, r24
    2ea0:	d1 50       	subi	r29, 0x01	; 1
    2ea2:	11 f4       	brne	.+4      	; 0x2ea8 <conv_int+0x3e>
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	68 c0       	rjmp	.+208    	; 0x2f78 <conv_int+0x10e>
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    2eae:	97 fd       	sbrc	r25, 7
    2eb0:	f9 cf       	rjmp	.-14     	; 0x2ea4 <conv_int+0x3a>
    2eb2:	cb 2d       	mov	r28, r11
    2eb4:	cd 7f       	andi	r28, 0xFD	; 253
    2eb6:	2b 2d       	mov	r18, r11
    2eb8:	20 73       	andi	r18, 0x30	; 48
    2eba:	09 f5       	brne	.+66     	; 0x2efe <conv_int+0x94>
    2ebc:	80 33       	cpi	r24, 0x30	; 48
    2ebe:	f9 f4       	brne	.+62     	; 0x2efe <conv_int+0x94>
    2ec0:	aa 24       	eor	r10, r10
    2ec2:	aa 94       	dec	r10
    2ec4:	ad 0e       	add	r10, r29
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <conv_int+0x60>
    2ec8:	43 c0       	rjmp	.+134    	; 0x2f50 <conv_int+0xe6>
    2eca:	c8 01       	movw	r24, r16
    2ecc:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    2ed0:	97 fd       	sbrc	r25, 7
    2ed2:	3e c0       	rjmp	.+124    	; 0x2f50 <conv_int+0xe6>
    2ed4:	9c 01       	movw	r18, r24
    2ed6:	2f 7d       	andi	r18, 0xDF	; 223
    2ed8:	33 27       	eor	r19, r19
    2eda:	28 35       	cpi	r18, 0x58	; 88
    2edc:	31 05       	cpc	r19, r1
    2ede:	49 f4       	brne	.+18     	; 0x2ef2 <conv_int+0x88>
    2ee0:	c2 64       	ori	r28, 0x42	; 66
    2ee2:	d2 50       	subi	r29, 0x02	; 2
    2ee4:	a9 f1       	breq	.+106    	; 0x2f50 <conv_int+0xe6>
    2ee6:	c8 01       	movw	r24, r16
    2ee8:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    2eec:	97 ff       	sbrs	r25, 7
    2eee:	07 c0       	rjmp	.+14     	; 0x2efe <conv_int+0x94>
    2ef0:	2f c0       	rjmp	.+94     	; 0x2f50 <conv_int+0xe6>
    2ef2:	b6 fe       	sbrs	r11, 6
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <conv_int+0x90>
    2ef6:	c2 60       	ori	r28, 0x02	; 2
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <conv_int+0x92>
    2efa:	c2 61       	ori	r28, 0x12	; 18
    2efc:	da 2d       	mov	r29, r10
    2efe:	81 2c       	mov	r8, r1
    2f00:	91 2c       	mov	r9, r1
    2f02:	54 01       	movw	r10, r8
    2f04:	20 ed       	ldi	r18, 0xD0	; 208
    2f06:	28 0f       	add	r18, r24
    2f08:	28 30       	cpi	r18, 0x08	; 8
    2f0a:	80 f0       	brcs	.+32     	; 0x2f2c <conv_int+0xc2>
    2f0c:	c4 ff       	sbrs	r28, 4
    2f0e:	04 c0       	rjmp	.+8      	; 0x2f18 <conv_int+0xae>
    2f10:	b8 01       	movw	r22, r16
    2f12:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <ungetc>
    2f16:	19 c0       	rjmp	.+50     	; 0x2f4a <conv_int+0xe0>
    2f18:	2a 30       	cpi	r18, 0x0A	; 10
    2f1a:	40 f0       	brcs	.+16     	; 0x2f2c <conv_int+0xc2>
    2f1c:	c6 ff       	sbrs	r28, 6
    2f1e:	f8 cf       	rjmp	.-16     	; 0x2f10 <conv_int+0xa6>
    2f20:	2f 7d       	andi	r18, 0xDF	; 223
    2f22:	3f ee       	ldi	r19, 0xEF	; 239
    2f24:	32 0f       	add	r19, r18
    2f26:	36 30       	cpi	r19, 0x06	; 6
    2f28:	98 f7       	brcc	.-26     	; 0x2f10 <conv_int+0xa6>
    2f2a:	27 50       	subi	r18, 0x07	; 7
    2f2c:	4c 2f       	mov	r20, r28
    2f2e:	c5 01       	movw	r24, r10
    2f30:	b4 01       	movw	r22, r8
    2f32:	0e 94 f5 16 	call	0x2dea	; 0x2dea <mulacc>
    2f36:	4b 01       	movw	r8, r22
    2f38:	5c 01       	movw	r10, r24
    2f3a:	c2 60       	ori	r28, 0x02	; 2
    2f3c:	d1 50       	subi	r29, 0x01	; 1
    2f3e:	59 f0       	breq	.+22     	; 0x2f56 <conv_int+0xec>
    2f40:	c8 01       	movw	r24, r16
    2f42:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    2f46:	97 ff       	sbrs	r25, 7
    2f48:	dd cf       	rjmp	.-70     	; 0x2f04 <conv_int+0x9a>
    2f4a:	c1 fd       	sbrc	r28, 1
    2f4c:	04 c0       	rjmp	.+8      	; 0x2f56 <conv_int+0xec>
    2f4e:	aa cf       	rjmp	.-172    	; 0x2ea4 <conv_int+0x3a>
    2f50:	81 2c       	mov	r8, r1
    2f52:	91 2c       	mov	r9, r1
    2f54:	54 01       	movw	r10, r8
    2f56:	c7 ff       	sbrs	r28, 7
    2f58:	08 c0       	rjmp	.+16     	; 0x2f6a <conv_int+0x100>
    2f5a:	b0 94       	com	r11
    2f5c:	a0 94       	com	r10
    2f5e:	90 94       	com	r9
    2f60:	80 94       	com	r8
    2f62:	81 1c       	adc	r8, r1
    2f64:	91 1c       	adc	r9, r1
    2f66:	a1 1c       	adc	r10, r1
    2f68:	b1 1c       	adc	r11, r1
    2f6a:	2c 2f       	mov	r18, r28
    2f6c:	b5 01       	movw	r22, r10
    2f6e:	a4 01       	movw	r20, r8
    2f70:	c7 01       	movw	r24, r14
    2f72:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <putval>
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	ff 90       	pop	r15
    2f82:	ef 90       	pop	r14
    2f84:	bf 90       	pop	r11
    2f86:	af 90       	pop	r10
    2f88:	9f 90       	pop	r9
    2f8a:	8f 90       	pop	r8
    2f8c:	08 95       	ret

00002f8e <conv_brk>:
    2f8e:	a0 e2       	ldi	r26, 0x20	; 32
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	ed ec       	ldi	r30, 0xCD	; 205
    2f94:	f7 e1       	ldi	r31, 0x17	; 23
    2f96:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__prologue_saves__+0x6>
    2f9a:	5c 01       	movw	r10, r24
    2f9c:	96 2e       	mov	r9, r22
    2f9e:	7a 01       	movw	r14, r20
    2fa0:	f9 01       	movw	r30, r18
    2fa2:	8e 01       	movw	r16, r28
    2fa4:	0f 5f       	subi	r16, 0xFF	; 255
    2fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa8:	68 01       	movw	r12, r16
    2faa:	80 e2       	ldi	r24, 0x20	; 32
    2fac:	d8 01       	movw	r26, r16
    2fae:	1d 92       	st	X+, r1
    2fb0:	8a 95       	dec	r24
    2fb2:	e9 f7       	brne	.-6      	; 0x2fae <conv_brk+0x20>
    2fb4:	d5 01       	movw	r26, r10
    2fb6:	13 96       	adiw	r26, 0x03	; 3
    2fb8:	8c 90       	ld	r8, X
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	61 2c       	mov	r6, r1
    2fc0:	71 2c       	mov	r7, r1
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	61 e0       	ldi	r22, 0x01	; 1
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	83 fc       	sbrc	r8, 3
    2fca:	25 91       	lpm	r18, Z+
    2fcc:	83 fe       	sbrs	r8, 3
    2fce:	21 91       	ld	r18, Z+
    2fd0:	8f 01       	movw	r16, r30
    2fd2:	52 2e       	mov	r5, r18
    2fd4:	21 11       	cpse	r18, r1
    2fd6:	03 c0       	rjmp	.+6      	; 0x2fde <conv_brk+0x50>
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	92 c0       	rjmp	.+292    	; 0x3102 <conv_brk+0x174>
    2fde:	2e 35       	cpi	r18, 0x5E	; 94
    2fe0:	11 f4       	brne	.+4      	; 0x2fe6 <conv_brk+0x58>
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	51 f1       	breq	.+84     	; 0x303a <conv_brk+0xac>
    2fe6:	43 2f       	mov	r20, r19
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	48 17       	cp	r20, r24
    2fec:	59 07       	cpc	r21, r25
    2fee:	3c f4       	brge	.+14     	; 0x2ffe <conv_brk+0x70>
    2ff0:	2d 35       	cpi	r18, 0x5D	; 93
    2ff2:	59 f1       	breq	.+86     	; 0x304a <conv_brk+0xbc>
    2ff4:	2d 32       	cpi	r18, 0x2D	; 45
    2ff6:	19 f4       	brne	.+6      	; 0x2ffe <conv_brk+0x70>
    2ff8:	77 20       	and	r7, r7
    2ffa:	09 f1       	breq	.+66     	; 0x303e <conv_brk+0xb0>
    2ffc:	03 c0       	rjmp	.+6      	; 0x3004 <conv_brk+0x76>
    2ffe:	77 20       	and	r7, r7
    3000:	09 f4       	brne	.+2      	; 0x3004 <conv_brk+0x76>
    3002:	6a c0       	rjmp	.+212    	; 0x30d8 <conv_brk+0x14a>
    3004:	45 2d       	mov	r20, r5
    3006:	46 95       	lsr	r20
    3008:	46 95       	lsr	r20
    300a:	46 95       	lsr	r20
    300c:	d6 01       	movw	r26, r12
    300e:	a4 0f       	add	r26, r20
    3010:	b1 1d       	adc	r27, r1
    3012:	45 2d       	mov	r20, r5
    3014:	47 70       	andi	r20, 0x07	; 7
    3016:	8b 01       	movw	r16, r22
    3018:	02 c0       	rjmp	.+4      	; 0x301e <conv_brk+0x90>
    301a:	00 0f       	add	r16, r16
    301c:	11 1f       	adc	r17, r17
    301e:	4a 95       	dec	r20
    3020:	e2 f7       	brpl	.-8      	; 0x301a <conv_brk+0x8c>
    3022:	a8 01       	movw	r20, r16
    3024:	5c 91       	ld	r21, X
    3026:	45 2b       	or	r20, r21
    3028:	4c 93       	st	X, r20
    302a:	65 14       	cp	r6, r5
    302c:	59 f0       	breq	.+22     	; 0x3044 <conv_brk+0xb6>
    302e:	56 14       	cp	r5, r6
    3030:	10 f4       	brcc	.+4      	; 0x3036 <conv_brk+0xa8>
    3032:	53 94       	inc	r5
    3034:	e7 cf       	rjmp	.-50     	; 0x3004 <conv_brk+0x76>
    3036:	5a 94       	dec	r5
    3038:	e5 cf       	rjmp	.-54     	; 0x3004 <conv_brk+0x76>
    303a:	31 e0       	ldi	r19, 0x01	; 1
    303c:	04 c0       	rjmp	.+8      	; 0x3046 <conv_brk+0xb8>
    303e:	77 24       	eor	r7, r7
    3040:	73 94       	inc	r7
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <conv_brk+0xb8>
    3044:	71 2c       	mov	r7, r1
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	bf cf       	rjmp	.-130    	; 0x2fc8 <conv_brk+0x3a>
    304a:	77 20       	and	r7, r7
    304c:	19 f0       	breq	.+6      	; 0x3054 <conv_brk+0xc6>
    304e:	8e 81       	ldd	r24, Y+6	; 0x06
    3050:	80 62       	ori	r24, 0x20	; 32
    3052:	8e 83       	std	Y+6, r24	; 0x06
    3054:	31 11       	cpse	r19, r1
    3056:	03 c0       	rjmp	.+6      	; 0x305e <conv_brk+0xd0>
    3058:	88 24       	eor	r8, r8
    305a:	83 94       	inc	r8
    305c:	17 c0       	rjmp	.+46     	; 0x308c <conv_brk+0xfe>
    305e:	f6 01       	movw	r30, r12
    3060:	9e 01       	movw	r18, r28
    3062:	2f 5d       	subi	r18, 0xDF	; 223
    3064:	3f 4f       	sbci	r19, 0xFF	; 255
    3066:	80 81       	ld	r24, Z
    3068:	80 95       	com	r24
    306a:	81 93       	st	Z+, r24
    306c:	2e 17       	cp	r18, r30
    306e:	3f 07       	cpc	r19, r31
    3070:	d1 f7       	brne	.-12     	; 0x3066 <conv_brk+0xd8>
    3072:	f2 cf       	rjmp	.-28     	; 0x3058 <conv_brk+0xca>
    3074:	e1 14       	cp	r14, r1
    3076:	f1 04       	cpc	r15, r1
    3078:	29 f0       	breq	.+10     	; 0x3084 <conv_brk+0xf6>
    307a:	d7 01       	movw	r26, r14
    307c:	8c 93       	st	X, r24
    307e:	f7 01       	movw	r30, r14
    3080:	31 96       	adiw	r30, 0x01	; 1
    3082:	7f 01       	movw	r14, r30
    3084:	9a 94       	dec	r9
    3086:	81 2c       	mov	r8, r1
    3088:	99 20       	and	r9, r9
    308a:	f9 f0       	breq	.+62     	; 0x30ca <conv_brk+0x13c>
    308c:	c5 01       	movw	r24, r10
    308e:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    3092:	97 fd       	sbrc	r25, 7
    3094:	18 c0       	rjmp	.+48     	; 0x30c6 <conv_brk+0x138>
    3096:	fc 01       	movw	r30, r24
    3098:	ff 27       	eor	r31, r31
    309a:	23 e0       	ldi	r18, 0x03	; 3
    309c:	f5 95       	asr	r31
    309e:	e7 95       	ror	r30
    30a0:	2a 95       	dec	r18
    30a2:	e1 f7       	brne	.-8      	; 0x309c <conv_brk+0x10e>
    30a4:	ec 0d       	add	r30, r12
    30a6:	fd 1d       	adc	r31, r13
    30a8:	20 81       	ld	r18, Z
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	ac 01       	movw	r20, r24
    30ae:	47 70       	andi	r20, 0x07	; 7
    30b0:	55 27       	eor	r21, r21
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <conv_brk+0x12a>
    30b4:	35 95       	asr	r19
    30b6:	27 95       	ror	r18
    30b8:	4a 95       	dec	r20
    30ba:	e2 f7       	brpl	.-8      	; 0x30b4 <conv_brk+0x126>
    30bc:	20 fd       	sbrc	r18, 0
    30be:	da cf       	rjmp	.-76     	; 0x3074 <conv_brk+0xe6>
    30c0:	b5 01       	movw	r22, r10
    30c2:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <ungetc>
    30c6:	81 10       	cpse	r8, r1
    30c8:	87 cf       	rjmp	.-242    	; 0x2fd8 <conv_brk+0x4a>
    30ca:	e1 14       	cp	r14, r1
    30cc:	f1 04       	cpc	r15, r1
    30ce:	11 f0       	breq	.+4      	; 0x30d4 <conv_brk+0x146>
    30d0:	d7 01       	movw	r26, r14
    30d2:	1c 92       	st	X, r1
    30d4:	c8 01       	movw	r24, r16
    30d6:	15 c0       	rjmp	.+42     	; 0x3102 <conv_brk+0x174>
    30d8:	42 2f       	mov	r20, r18
    30da:	46 95       	lsr	r20
    30dc:	46 95       	lsr	r20
    30de:	46 95       	lsr	r20
    30e0:	d6 01       	movw	r26, r12
    30e2:	a4 0f       	add	r26, r20
    30e4:	b1 1d       	adc	r27, r1
    30e6:	42 2f       	mov	r20, r18
    30e8:	47 70       	andi	r20, 0x07	; 7
    30ea:	8b 01       	movw	r16, r22
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <conv_brk+0x164>
    30ee:	00 0f       	add	r16, r16
    30f0:	11 1f       	adc	r17, r17
    30f2:	4a 95       	dec	r20
    30f4:	e2 f7       	brpl	.-8      	; 0x30ee <conv_brk+0x160>
    30f6:	a8 01       	movw	r20, r16
    30f8:	5c 91       	ld	r21, X
    30fa:	45 2b       	or	r20, r21
    30fc:	4c 93       	st	X, r20
    30fe:	62 2e       	mov	r6, r18
    3100:	a2 cf       	rjmp	.-188    	; 0x3046 <conv_brk+0xb8>
    3102:	a0 96       	adiw	r28, 0x20	; 32
    3104:	ef e0       	ldi	r30, 0x0F	; 15
    3106:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__epilogue_restores__+0x6>

0000310a <vfscanf>:
    310a:	a0 e0       	ldi	r26, 0x00	; 0
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	eb e8       	ldi	r30, 0x8B	; 139
    3110:	f8 e1       	ldi	r31, 0x18	; 24
    3112:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__prologue_saves__+0x6>
    3116:	6c 01       	movw	r12, r24
    3118:	eb 01       	movw	r28, r22
    311a:	5a 01       	movw	r10, r20
    311c:	fc 01       	movw	r30, r24
    311e:	17 82       	std	Z+7, r1	; 0x07
    3120:	16 82       	std	Z+6, r1	; 0x06
    3122:	51 2c       	mov	r5, r1
    3124:	f6 01       	movw	r30, r12
    3126:	e3 80       	ldd	r14, Z+3	; 0x03
    3128:	fe 01       	movw	r30, r28
    312a:	e3 fc       	sbrc	r14, 3
    312c:	85 91       	lpm	r24, Z+
    312e:	e3 fe       	sbrs	r14, 3
    3130:	81 91       	ld	r24, Z+
    3132:	18 2f       	mov	r17, r24
    3134:	ef 01       	movw	r28, r30
    3136:	88 23       	and	r24, r24
    3138:	09 f4       	brne	.+2      	; 0x313c <vfscanf+0x32>
    313a:	ee c0       	rjmp	.+476    	; 0x3318 <vfscanf+0x20e>
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0e 94 96 19 	call	0x332c	; 0x332c <isspace>
    3142:	89 2b       	or	r24, r25
    3144:	21 f0       	breq	.+8      	; 0x314e <vfscanf+0x44>
    3146:	c6 01       	movw	r24, r12
    3148:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <skip_spaces>
    314c:	eb cf       	rjmp	.-42     	; 0x3124 <vfscanf+0x1a>
    314e:	15 32       	cpi	r17, 0x25	; 37
    3150:	41 f4       	brne	.+16     	; 0x3162 <vfscanf+0x58>
    3152:	fe 01       	movw	r30, r28
    3154:	e3 fc       	sbrc	r14, 3
    3156:	15 91       	lpm	r17, Z+
    3158:	e3 fe       	sbrs	r14, 3
    315a:	11 91       	ld	r17, Z+
    315c:	ef 01       	movw	r28, r30
    315e:	15 32       	cpi	r17, 0x25	; 37
    3160:	81 f4       	brne	.+32     	; 0x3182 <vfscanf+0x78>
    3162:	c6 01       	movw	r24, r12
    3164:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    3168:	97 fd       	sbrc	r25, 7
    316a:	d4 c0       	rjmp	.+424    	; 0x3314 <vfscanf+0x20a>
    316c:	41 2f       	mov	r20, r17
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	9c 01       	movw	r18, r24
    3172:	33 27       	eor	r19, r19
    3174:	24 17       	cp	r18, r20
    3176:	35 07       	cpc	r19, r21
    3178:	a9 f2       	breq	.-86     	; 0x3124 <vfscanf+0x1a>
    317a:	b6 01       	movw	r22, r12
    317c:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <ungetc>
    3180:	cb c0       	rjmp	.+406    	; 0x3318 <vfscanf+0x20e>
    3182:	1a 32       	cpi	r17, 0x2A	; 42
    3184:	39 f4       	brne	.+14     	; 0x3194 <vfscanf+0x8a>
    3186:	e3 fc       	sbrc	r14, 3
    3188:	15 91       	lpm	r17, Z+
    318a:	e3 fe       	sbrs	r14, 3
    318c:	11 91       	ld	r17, Z+
    318e:	ef 01       	movw	r28, r30
    3190:	01 e0       	ldi	r16, 0x01	; 1
    3192:	01 c0       	rjmp	.+2      	; 0x3196 <vfscanf+0x8c>
    3194:	00 e0       	ldi	r16, 0x00	; 0
    3196:	f1 2c       	mov	r15, r1
    3198:	20 ed       	ldi	r18, 0xD0	; 208
    319a:	21 0f       	add	r18, r17
    319c:	2a 30       	cpi	r18, 0x0A	; 10
    319e:	80 f4       	brcc	.+32     	; 0x31c0 <vfscanf+0xb6>
    31a0:	02 60       	ori	r16, 0x02	; 2
    31a2:	6f 2d       	mov	r22, r15
    31a4:	70 e0       	ldi	r23, 0x00	; 0
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	40 e2       	ldi	r20, 0x20	; 32
    31ac:	0e 94 f5 16 	call	0x2dea	; 0x2dea <mulacc>
    31b0:	f6 2e       	mov	r15, r22
    31b2:	fe 01       	movw	r30, r28
    31b4:	e3 fc       	sbrc	r14, 3
    31b6:	15 91       	lpm	r17, Z+
    31b8:	e3 fe       	sbrs	r14, 3
    31ba:	11 91       	ld	r17, Z+
    31bc:	ef 01       	movw	r28, r30
    31be:	ec cf       	rjmp	.-40     	; 0x3198 <vfscanf+0x8e>
    31c0:	01 ff       	sbrs	r16, 1
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <vfscanf+0xc0>
    31c4:	f1 10       	cpse	r15, r1
    31c6:	03 c0       	rjmp	.+6      	; 0x31ce <vfscanf+0xc4>
    31c8:	a7 c0       	rjmp	.+334    	; 0x3318 <vfscanf+0x20e>
    31ca:	ff 24       	eor	r15, r15
    31cc:	fa 94       	dec	r15
    31ce:	18 36       	cpi	r17, 0x68	; 104
    31d0:	19 f0       	breq	.+6      	; 0x31d8 <vfscanf+0xce>
    31d2:	1c 36       	cpi	r17, 0x6C	; 108
    31d4:	51 f0       	breq	.+20     	; 0x31ea <vfscanf+0xe0>
    31d6:	10 c0       	rjmp	.+32     	; 0x31f8 <vfscanf+0xee>
    31d8:	fe 01       	movw	r30, r28
    31da:	e3 fc       	sbrc	r14, 3
    31dc:	15 91       	lpm	r17, Z+
    31de:	e3 fe       	sbrs	r14, 3
    31e0:	11 91       	ld	r17, Z+
    31e2:	ef 01       	movw	r28, r30
    31e4:	18 36       	cpi	r17, 0x68	; 104
    31e6:	41 f4       	brne	.+16     	; 0x31f8 <vfscanf+0xee>
    31e8:	08 60       	ori	r16, 0x08	; 8
    31ea:	04 60       	ori	r16, 0x04	; 4
    31ec:	fe 01       	movw	r30, r28
    31ee:	e3 fc       	sbrc	r14, 3
    31f0:	15 91       	lpm	r17, Z+
    31f2:	e3 fe       	sbrs	r14, 3
    31f4:	11 91       	ld	r17, Z+
    31f6:	ef 01       	movw	r28, r30
    31f8:	11 23       	and	r17, r17
    31fa:	09 f4       	brne	.+2      	; 0x31fe <vfscanf+0xf4>
    31fc:	8d c0       	rjmp	.+282    	; 0x3318 <vfscanf+0x20e>
    31fe:	61 2f       	mov	r22, r17
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	82 e0       	ldi	r24, 0x02	; 2
    3204:	92 e0       	ldi	r25, 0x02	; 2
    3206:	0e 94 9f 19 	call	0x333e	; 0x333e <strchr_P>
    320a:	89 2b       	or	r24, r25
    320c:	09 f4       	brne	.+2      	; 0x3210 <vfscanf+0x106>
    320e:	84 c0       	rjmp	.+264    	; 0x3318 <vfscanf+0x20e>
    3210:	00 fd       	sbrc	r16, 0
    3212:	07 c0       	rjmp	.+14     	; 0x3222 <vfscanf+0x118>
    3214:	f5 01       	movw	r30, r10
    3216:	80 80       	ld	r8, Z
    3218:	91 80       	ldd	r9, Z+1	; 0x01
    321a:	c5 01       	movw	r24, r10
    321c:	02 96       	adiw	r24, 0x02	; 2
    321e:	5c 01       	movw	r10, r24
    3220:	02 c0       	rjmp	.+4      	; 0x3226 <vfscanf+0x11c>
    3222:	81 2c       	mov	r8, r1
    3224:	91 2c       	mov	r9, r1
    3226:	1e 36       	cpi	r17, 0x6E	; 110
    3228:	51 f4       	brne	.+20     	; 0x323e <vfscanf+0x134>
    322a:	f6 01       	movw	r30, r12
    322c:	46 81       	ldd	r20, Z+6	; 0x06
    322e:	57 81       	ldd	r21, Z+7	; 0x07
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	70 e0       	ldi	r23, 0x00	; 0
    3234:	20 2f       	mov	r18, r16
    3236:	c4 01       	movw	r24, r8
    3238:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <putval>
    323c:	73 cf       	rjmp	.-282    	; 0x3124 <vfscanf+0x1a>
    323e:	13 36       	cpi	r17, 0x63	; 99
    3240:	a9 f4       	brne	.+42     	; 0x326c <vfscanf+0x162>
    3242:	01 fd       	sbrc	r16, 1
    3244:	02 c0       	rjmp	.+4      	; 0x324a <vfscanf+0x140>
    3246:	ff 24       	eor	r15, r15
    3248:	f3 94       	inc	r15
    324a:	c6 01       	movw	r24, r12
    324c:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    3250:	97 fd       	sbrc	r25, 7
    3252:	60 c0       	rjmp	.+192    	; 0x3314 <vfscanf+0x20a>
    3254:	81 14       	cp	r8, r1
    3256:	91 04       	cpc	r9, r1
    3258:	29 f0       	breq	.+10     	; 0x3264 <vfscanf+0x15a>
    325a:	f4 01       	movw	r30, r8
    325c:	80 83       	st	Z, r24
    325e:	c4 01       	movw	r24, r8
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	4c 01       	movw	r8, r24
    3264:	fa 94       	dec	r15
    3266:	f1 10       	cpse	r15, r1
    3268:	f0 cf       	rjmp	.-32     	; 0x324a <vfscanf+0x140>
    326a:	50 c0       	rjmp	.+160    	; 0x330c <vfscanf+0x202>
    326c:	1b 35       	cpi	r17, 0x5B	; 91
    326e:	59 f4       	brne	.+22     	; 0x3286 <vfscanf+0x17c>
    3270:	9e 01       	movw	r18, r28
    3272:	a4 01       	movw	r20, r8
    3274:	6f 2d       	mov	r22, r15
    3276:	c6 01       	movw	r24, r12
    3278:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <conv_brk>
    327c:	ec 01       	movw	r28, r24
    327e:	89 2b       	or	r24, r25
    3280:	09 f0       	breq	.+2      	; 0x3284 <vfscanf+0x17a>
    3282:	44 c0       	rjmp	.+136    	; 0x330c <vfscanf+0x202>
    3284:	3e c0       	rjmp	.+124    	; 0x3302 <vfscanf+0x1f8>
    3286:	c6 01       	movw	r24, r12
    3288:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <skip_spaces>
    328c:	97 fd       	sbrc	r25, 7
    328e:	42 c0       	rjmp	.+132    	; 0x3314 <vfscanf+0x20a>
    3290:	1f 36       	cpi	r17, 0x6F	; 111
    3292:	61 f1       	breq	.+88     	; 0x32ec <vfscanf+0x1e2>
    3294:	28 f4       	brcc	.+10     	; 0x32a0 <vfscanf+0x196>
    3296:	14 36       	cpi	r17, 0x64	; 100
    3298:	39 f1       	breq	.+78     	; 0x32e8 <vfscanf+0x1de>
    329a:	19 36       	cpi	r17, 0x69	; 105
    329c:	51 f1       	breq	.+84     	; 0x32f2 <vfscanf+0x1e8>
    329e:	28 c0       	rjmp	.+80     	; 0x32f0 <vfscanf+0x1e6>
    32a0:	13 37       	cpi	r17, 0x73	; 115
    32a2:	71 f0       	breq	.+28     	; 0x32c0 <vfscanf+0x1b6>
    32a4:	15 37       	cpi	r17, 0x75	; 117
    32a6:	01 f1       	breq	.+64     	; 0x32e8 <vfscanf+0x1de>
    32a8:	23 c0       	rjmp	.+70     	; 0x32f0 <vfscanf+0x1e6>
    32aa:	81 14       	cp	r8, r1
    32ac:	91 04       	cpc	r9, r1
    32ae:	29 f0       	breq	.+10     	; 0x32ba <vfscanf+0x1b0>
    32b0:	f4 01       	movw	r30, r8
    32b2:	60 82       	st	Z, r6
    32b4:	c4 01       	movw	r24, r8
    32b6:	01 96       	adiw	r24, 0x01	; 1
    32b8:	4c 01       	movw	r8, r24
    32ba:	fa 94       	dec	r15
    32bc:	ff 20       	and	r15, r15
    32be:	71 f0       	breq	.+28     	; 0x32dc <vfscanf+0x1d2>
    32c0:	c6 01       	movw	r24, r12
    32c2:	0e 94 aa 19 	call	0x3354	; 0x3354 <fgetc>
    32c6:	3c 01       	movw	r6, r24
    32c8:	97 fd       	sbrc	r25, 7
    32ca:	08 c0       	rjmp	.+16     	; 0x32dc <vfscanf+0x1d2>
    32cc:	0e 94 96 19 	call	0x332c	; 0x332c <isspace>
    32d0:	89 2b       	or	r24, r25
    32d2:	59 f3       	breq	.-42     	; 0x32aa <vfscanf+0x1a0>
    32d4:	b6 01       	movw	r22, r12
    32d6:	c3 01       	movw	r24, r6
    32d8:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <ungetc>
    32dc:	81 14       	cp	r8, r1
    32de:	91 04       	cpc	r9, r1
    32e0:	a9 f0       	breq	.+42     	; 0x330c <vfscanf+0x202>
    32e2:	f4 01       	movw	r30, r8
    32e4:	10 82       	st	Z, r1
    32e6:	12 c0       	rjmp	.+36     	; 0x330c <vfscanf+0x202>
    32e8:	00 62       	ori	r16, 0x20	; 32
    32ea:	03 c0       	rjmp	.+6      	; 0x32f2 <vfscanf+0x1e8>
    32ec:	00 61       	ori	r16, 0x10	; 16
    32ee:	01 c0       	rjmp	.+2      	; 0x32f2 <vfscanf+0x1e8>
    32f0:	00 64       	ori	r16, 0x40	; 64
    32f2:	20 2f       	mov	r18, r16
    32f4:	a4 01       	movw	r20, r8
    32f6:	6f 2d       	mov	r22, r15
    32f8:	c6 01       	movw	r24, r12
    32fa:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <conv_int>
    32fe:	81 11       	cpse	r24, r1
    3300:	05 c0       	rjmp	.+10     	; 0x330c <vfscanf+0x202>
    3302:	f6 01       	movw	r30, r12
    3304:	83 81       	ldd	r24, Z+3	; 0x03
    3306:	80 73       	andi	r24, 0x30	; 48
    3308:	29 f4       	brne	.+10     	; 0x3314 <vfscanf+0x20a>
    330a:	06 c0       	rjmp	.+12     	; 0x3318 <vfscanf+0x20e>
    330c:	00 fd       	sbrc	r16, 0
    330e:	0a cf       	rjmp	.-492    	; 0x3124 <vfscanf+0x1a>
    3310:	53 94       	inc	r5
    3312:	08 cf       	rjmp	.-496    	; 0x3124 <vfscanf+0x1a>
    3314:	55 20       	and	r5, r5
    3316:	19 f0       	breq	.+6      	; 0x331e <vfscanf+0x214>
    3318:	85 2d       	mov	r24, r5
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	02 c0       	rjmp	.+4      	; 0x3322 <vfscanf+0x218>
    331e:	8f ef       	ldi	r24, 0xFF	; 255
    3320:	9f ef       	ldi	r25, 0xFF	; 255
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	ef e0       	ldi	r30, 0x0F	; 15
    3328:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__epilogue_restores__+0x6>

0000332c <isspace>:
    332c:	91 11       	cpse	r25, r1
    332e:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__ctype_isfalse>
    3332:	80 32       	cpi	r24, 0x20	; 32
    3334:	19 f0       	breq	.+6      	; 0x333c <isspace+0x10>
    3336:	89 50       	subi	r24, 0x09	; 9
    3338:	85 50       	subi	r24, 0x05	; 5
    333a:	c8 f7       	brcc	.-14     	; 0x332e <isspace+0x2>
    333c:	08 95       	ret

0000333e <strchr_P>:
    333e:	fc 01       	movw	r30, r24
    3340:	05 90       	lpm	r0, Z+
    3342:	06 16       	cp	r0, r22
    3344:	21 f0       	breq	.+8      	; 0x334e <strchr_P+0x10>
    3346:	00 20       	and	r0, r0
    3348:	d9 f7       	brne	.-10     	; 0x3340 <strchr_P+0x2>
    334a:	c0 01       	movw	r24, r0
    334c:	08 95       	ret
    334e:	31 97       	sbiw	r30, 0x01	; 1
    3350:	cf 01       	movw	r24, r30
    3352:	08 95       	ret

00003354 <fgetc>:
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	ec 01       	movw	r28, r24
    335a:	2b 81       	ldd	r18, Y+3	; 0x03
    335c:	20 ff       	sbrs	r18, 0
    335e:	33 c0       	rjmp	.+102    	; 0x33c6 <fgetc+0x72>
    3360:	26 ff       	sbrs	r18, 6
    3362:	0a c0       	rjmp	.+20     	; 0x3378 <fgetc+0x24>
    3364:	2f 7b       	andi	r18, 0xBF	; 191
    3366:	2b 83       	std	Y+3, r18	; 0x03
    3368:	8e 81       	ldd	r24, Y+6	; 0x06
    336a:	9f 81       	ldd	r25, Y+7	; 0x07
    336c:	01 96       	adiw	r24, 0x01	; 1
    336e:	9f 83       	std	Y+7, r25	; 0x07
    3370:	8e 83       	std	Y+6, r24	; 0x06
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	29 c0       	rjmp	.+82     	; 0x33ca <fgetc+0x76>
    3378:	22 ff       	sbrs	r18, 2
    337a:	0f c0       	rjmp	.+30     	; 0x339a <fgetc+0x46>
    337c:	e8 81       	ld	r30, Y
    337e:	f9 81       	ldd	r31, Y+1	; 0x01
    3380:	80 81       	ld	r24, Z
    3382:	08 2e       	mov	r0, r24
    3384:	00 0c       	add	r0, r0
    3386:	99 0b       	sbc	r25, r25
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	19 f4       	brne	.+6      	; 0x3392 <fgetc+0x3e>
    338c:	20 62       	ori	r18, 0x20	; 32
    338e:	2b 83       	std	Y+3, r18	; 0x03
    3390:	1a c0       	rjmp	.+52     	; 0x33c6 <fgetc+0x72>
    3392:	31 96       	adiw	r30, 0x01	; 1
    3394:	f9 83       	std	Y+1, r31	; 0x01
    3396:	e8 83       	st	Y, r30
    3398:	0e c0       	rjmp	.+28     	; 0x33b6 <fgetc+0x62>
    339a:	ea 85       	ldd	r30, Y+10	; 0x0a
    339c:	fb 85       	ldd	r31, Y+11	; 0x0b
    339e:	09 95       	icall
    33a0:	97 ff       	sbrs	r25, 7
    33a2:	09 c0       	rjmp	.+18     	; 0x33b6 <fgetc+0x62>
    33a4:	2b 81       	ldd	r18, Y+3	; 0x03
    33a6:	01 96       	adiw	r24, 0x01	; 1
    33a8:	11 f0       	breq	.+4      	; 0x33ae <fgetc+0x5a>
    33aa:	80 e2       	ldi	r24, 0x20	; 32
    33ac:	01 c0       	rjmp	.+2      	; 0x33b0 <fgetc+0x5c>
    33ae:	80 e1       	ldi	r24, 0x10	; 16
    33b0:	82 2b       	or	r24, r18
    33b2:	8b 83       	std	Y+3, r24	; 0x03
    33b4:	08 c0       	rjmp	.+16     	; 0x33c6 <fgetc+0x72>
    33b6:	2e 81       	ldd	r18, Y+6	; 0x06
    33b8:	3f 81       	ldd	r19, Y+7	; 0x07
    33ba:	2f 5f       	subi	r18, 0xFF	; 255
    33bc:	3f 4f       	sbci	r19, 0xFF	; 255
    33be:	3f 83       	std	Y+7, r19	; 0x07
    33c0:	2e 83       	std	Y+6, r18	; 0x06
    33c2:	99 27       	eor	r25, r25
    33c4:	02 c0       	rjmp	.+4      	; 0x33ca <fgetc+0x76>
    33c6:	8f ef       	ldi	r24, 0xFF	; 255
    33c8:	9f ef       	ldi	r25, 0xFF	; 255
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	08 95       	ret

000033d0 <ungetc>:
    33d0:	fb 01       	movw	r30, r22
    33d2:	23 81       	ldd	r18, Z+3	; 0x03
    33d4:	20 ff       	sbrs	r18, 0
    33d6:	12 c0       	rjmp	.+36     	; 0x33fc <ungetc+0x2c>
    33d8:	26 fd       	sbrc	r18, 6
    33da:	10 c0       	rjmp	.+32     	; 0x33fc <ungetc+0x2c>
    33dc:	8f 3f       	cpi	r24, 0xFF	; 255
    33de:	3f ef       	ldi	r19, 0xFF	; 255
    33e0:	93 07       	cpc	r25, r19
    33e2:	61 f0       	breq	.+24     	; 0x33fc <ungetc+0x2c>
    33e4:	82 83       	std	Z+2, r24	; 0x02
    33e6:	2f 7d       	andi	r18, 0xDF	; 223
    33e8:	20 64       	ori	r18, 0x40	; 64
    33ea:	23 83       	std	Z+3, r18	; 0x03
    33ec:	26 81       	ldd	r18, Z+6	; 0x06
    33ee:	37 81       	ldd	r19, Z+7	; 0x07
    33f0:	21 50       	subi	r18, 0x01	; 1
    33f2:	31 09       	sbc	r19, r1
    33f4:	37 83       	std	Z+7, r19	; 0x07
    33f6:	26 83       	std	Z+6, r18	; 0x06
    33f8:	99 27       	eor	r25, r25
    33fa:	08 95       	ret
    33fc:	8f ef       	ldi	r24, 0xFF	; 255
    33fe:	9f ef       	ldi	r25, 0xFF	; 255
    3400:	08 95       	ret

00003402 <__ctype_isfalse>:
    3402:	99 27       	eor	r25, r25
    3404:	88 27       	eor	r24, r24

00003406 <__ctype_istrue>:
    3406:	08 95       	ret

00003408 <_exit>:
    3408:	f8 94       	cli

0000340a <__stop_program>:
    340a:	ff cf       	rjmp	.-2      	; 0x340a <__stop_program>
