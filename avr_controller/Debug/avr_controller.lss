
avr_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  0000353e  000035d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000353e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  00800152  00800152  00003624  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e9f  00000000  00000000  00003a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015d7  00000000  00000000  000078cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024c7  00000000  00000000  00008ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b7c  00000000  00000000  0000b370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010ea  00000000  00000000  0000beec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e57  00000000  00000000  0000cfd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00010e2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 01 	jmp	0x300	; 0x300 <__ctors_end>
       4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
       8:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
       c:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_3>
      10:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__vector_4>
      14:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      18:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      1c:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_7>
      20:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      24:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_9>
      28:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_10>
      2c:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_11>
      30:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      34:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      38:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      3c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      40:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      44:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_17>
      48:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      4c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      50:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      54:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      58:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      5c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      60:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      64:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      68:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      6c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      70:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      74:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      78:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      7c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      80:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_32>
      84:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      88:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      8c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      90:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      94:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      98:	0c 94 33 04 	jmp	0x866	; 0x866 <__vector_38>
      9c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      a0:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      a4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      a8:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      ac:	7b 05       	cpc	r23, r11
      ae:	67 05       	cpc	r22, r7
      b0:	8e 05       	cpc	r24, r14
      b2:	67 05       	cpc	r22, r7
      b4:	8e 05       	cpc	r24, r14
      b6:	8e 05       	cpc	r24, r14
      b8:	7b 05       	cpc	r23, r11
      ba:	7b 05       	cpc	r23, r11
      bc:	8e 05       	cpc	r24, r14
      be:	8e 05       	cpc	r24, r14
      c0:	67 05       	cpc	r22, r7
      c2:	8e 05       	cpc	r24, r14
      c4:	67 05       	cpc	r22, r7
      c6:	7b 05       	cpc	r23, r11
      c8:	e1 05       	cpc	r30, r1
      ca:	cd 05       	cpc	r28, r13
      cc:	f4 05       	cpc	r31, r4
      ce:	cd 05       	cpc	r28, r13
      d0:	f4 05       	cpc	r31, r4
      d2:	f4 05       	cpc	r31, r4
      d4:	e1 05       	cpc	r30, r1
      d6:	e1 05       	cpc	r30, r1
      d8:	f4 05       	cpc	r31, r4
      da:	f4 05       	cpc	r31, r4
      dc:	cd 05       	cpc	r28, r13
      de:	f4 05       	cpc	r31, r4
      e0:	cd 05       	cpc	r28, r13
      e2:	e1 05       	cpc	r30, r1
      e4:	47 06       	cpc	r4, r23
      e6:	33 06       	cpc	r3, r19
      e8:	5a 06       	cpc	r5, r26
      ea:	33 06       	cpc	r3, r19
      ec:	5a 06       	cpc	r5, r26
      ee:	5a 06       	cpc	r5, r26
      f0:	47 06       	cpc	r4, r23
      f2:	47 06       	cpc	r4, r23
      f4:	5a 06       	cpc	r5, r26
      f6:	5a 06       	cpc	r5, r26
      f8:	33 06       	cpc	r3, r19
      fa:	5a 06       	cpc	r5, r26
      fc:	33 06       	cpc	r3, r19
      fe:	47 06       	cpc	r4, r23
     100:	b2 06       	cpc	r11, r18
     102:	9e 06       	cpc	r9, r30
     104:	c5 06       	cpc	r12, r21
     106:	9e 06       	cpc	r9, r30
     108:	c5 06       	cpc	r12, r21
     10a:	c5 06       	cpc	r12, r21
     10c:	b2 06       	cpc	r11, r18
     10e:	b2 06       	cpc	r11, r18
     110:	c5 06       	cpc	r12, r21
     112:	c5 06       	cpc	r12, r21
     114:	9e 06       	cpc	r9, r30
     116:	c5 06       	cpc	r12, r21
     118:	9e 06       	cpc	r9, r30
     11a:	b2 06       	cpc	r11, r18

0000011c <__trampolines_end>:
     11c:	6e 61       	ori	r22, 0x1E	; 30
     11e:	6e 00       	.word	0x006e	; ????

00000120 <__c.2332>:
     120:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     130:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     140:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     150:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     160:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     170:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     180:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     190:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1a0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1b0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1c0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1d0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1e0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1f0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     200:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     210:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000021e <__c.2474>:
     21e:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000022a <__c.2445>:
     22a:	49 4d 55 20 46 61 69 6c 65 64 0d 0a 00              IMU Failed...

00000237 <__c.2443>:
     237:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

00000242 <__c.2441>:
     242:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

0000024d <descriptor_list>:
     24d:	00 01 00 00 e4 02 12 00 02 00 00 a1 02 43 00 03     .............C..
     25d:	00 00 9d 02 04 01 03 09 04 89 02 12 02 03 09 04     ................
     26d:	81 02 06 03 03 09 04 77 02 08                       .......w..

00000277 <string3>:
     277:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000281 <string2>:
     281:	06 03 4d 00 32 00 00 00                             ..M.2...

00000289 <string1>:
     289:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     299:	65 00 00 00                                         e...

0000029d <string0>:
     29d:	04 03 09 04                                         ....

000002a1 <config1_descriptor>:
     2a1:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     2b1:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     2c1:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     2d1:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     2e1:	40 00 00                                            @..

000002e4 <device_descriptor>:
     2e4:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     2f4:	03 01                                               ..

000002f6 <endpoint_config_table>:
     2f6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000300 <__ctors_end>:
     300:	11 24       	eor	r1, r1
     302:	1f be       	out	0x3f, r1	; 63
     304:	cf ef       	ldi	r28, 0xFF	; 255
     306:	da e0       	ldi	r29, 0x0A	; 10
     308:	de bf       	out	0x3e, r29	; 62
     30a:	cd bf       	out	0x3d, r28	; 61

0000030c <__do_copy_data>:
     30c:	11 e0       	ldi	r17, 0x01	; 1
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b1 e0       	ldi	r27, 0x01	; 1
     312:	ee e3       	ldi	r30, 0x3E	; 62
     314:	f5 e3       	ldi	r31, 0x35	; 53
     316:	02 c0       	rjmp	.+4      	; 0x31c <__do_copy_data+0x10>
     318:	05 90       	lpm	r0, Z+
     31a:	0d 92       	st	X+, r0
     31c:	a2 35       	cpi	r26, 0x52	; 82
     31e:	b1 07       	cpc	r27, r17
     320:	d9 f7       	brne	.-10     	; 0x318 <__do_copy_data+0xc>

00000322 <__do_clear_bss>:
     322:	21 e0       	ldi	r18, 0x01	; 1
     324:	a2 e5       	ldi	r26, 0x52	; 82
     326:	b1 e0       	ldi	r27, 0x01	; 1
     328:	01 c0       	rjmp	.+2      	; 0x32c <.do_clear_bss_start>

0000032a <.do_clear_bss_loop>:
     32a:	1d 92       	st	X+, r1

0000032c <.do_clear_bss_start>:
     32c:	a3 3f       	cpi	r26, 0xF3	; 243
     32e:	b2 07       	cpc	r27, r18
     330:	e1 f7       	brne	.-8      	; 0x32a <.do_clear_bss_loop>
     332:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
     336:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <_exit>

0000033a <__bad_interrupt>:
     33a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033e <timer4_init_50Hz>:
   16 MHz / 2048 = 7812.5 Hz
   7812.5 Hz × 0.01 s ≈ 78 → OCR4A = 78 ⇒ 100.08 Hz         */
static void timer4_init_50Hz(void)
{
    /* reset all Timer-4 control registers (mandatory for this timer) */
    TCCR4A = 0;
     33e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    TCCR4B = 0;
     342:	e1 ec       	ldi	r30, 0xC1	; 193
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	10 82       	st	Z, r1
    TCCR4C = 0;
     348:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    TCCR4D = 0; // set WGM40 and WGM41 to normal mode
     34c:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7f80c3>

    TCNT4 = 0;  /* start from zero                        */
     350:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__TEXT_REGION_LENGTH__+0x7f80bf>
     354:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__TEXT_REGION_LENGTH__+0x7f80be>
    OCR4A = 78; /* compare after 312 counts (~20 ms)      */
     358:	8e e4       	ldi	r24, 0x4E	; 78
     35a:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7f80cf>

    TIMSK4 |= _BV(OCIE4A); /* enable Compare-A interrupt             */
     35e:	a2 e7       	ldi	r26, 0x72	; 114
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	8c 91       	ld	r24, X
     364:	80 64       	ori	r24, 0x40	; 64
     366:	8c 93       	st	X, r24

    /* start clock: prescaler = 2048  →  CS43 | CS41                        */
    TCCR4B |= _BV(CS43) | _BV(CS42);
     368:	80 81       	ld	r24, Z
     36a:	8c 60       	ori	r24, 0x0C	; 12
     36c:	80 83       	st	Z, r24
     36e:	08 95       	ret

00000370 <parse_jetson_line>:

    extern float rx_distance, rx_angle, rx_lin_acc, rx_max_ang_acc;
    extern uint16_t rx_max_vel, rx_max_omega, rx_last_vel, rx_last_omega;

    // Note: "%f" for floats, "%u" for uint16_t on AVR
    int cnt = sscanf(line,
     370:	23 e5       	ldi	r18, 0x53	; 83
     372:	31 e0       	ldi	r19, 0x01	; 1
     374:	3f 93       	push	r19
     376:	2f 93       	push	r18
     378:	27 e5       	ldi	r18, 0x57	; 87
     37a:	31 e0       	ldi	r19, 0x01	; 1
     37c:	3f 93       	push	r19
     37e:	2f 93       	push	r18
     380:	2b e5       	ldi	r18, 0x5B	; 91
     382:	31 e0       	ldi	r19, 0x01	; 1
     384:	3f 93       	push	r19
     386:	2f 93       	push	r18
     388:	2d e5       	ldi	r18, 0x5D	; 93
     38a:	31 e0       	ldi	r19, 0x01	; 1
     38c:	3f 93       	push	r19
     38e:	2f 93       	push	r18
     390:	2f e5       	ldi	r18, 0x5F	; 95
     392:	31 e0       	ldi	r19, 0x01	; 1
     394:	3f 93       	push	r19
     396:	2f 93       	push	r18
     398:	21 e6       	ldi	r18, 0x61	; 97
     39a:	31 e0       	ldi	r19, 0x01	; 1
     39c:	3f 93       	push	r19
     39e:	2f 93       	push	r18
     3a0:	23 e6       	ldi	r18, 0x63	; 99
     3a2:	31 e0       	ldi	r19, 0x01	; 1
     3a4:	3f 93       	push	r19
     3a6:	2f 93       	push	r18
     3a8:	27 e6       	ldi	r18, 0x67	; 103
     3aa:	31 e0       	ldi	r19, 0x01	; 1
     3ac:	3f 93       	push	r19
     3ae:	2f 93       	push	r18
     3b0:	27 e0       	ldi	r18, 0x07	; 7
     3b2:	31 e0       	ldi	r19, 0x01	; 1
     3b4:	3f 93       	push	r19
     3b6:	2f 93       	push	r18
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <sscanf>
                     &rx_max_omega,
                     &rx_last_vel,
                     &rx_last_omega,
                     &rx_lin_acc,
                     &rx_max_ang_acc);
    return (cnt == 8) ? 1 : 0;
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	4d b7       	in	r20, 0x3d	; 61
     3c4:	5e b7       	in	r21, 0x3e	; 62
     3c6:	4c 5e       	subi	r20, 0xEC	; 236
     3c8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	5e bf       	out	0x3e, r21	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	4d bf       	out	0x3d, r20	; 61
     3d4:	08 97       	sbiw	r24, 0x08	; 8
     3d6:	09 f0       	breq	.+2      	; 0x3da <parse_jetson_line+0x6a>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
}
     3da:	82 2f       	mov	r24, r18
     3dc:	08 95       	ret

000003de <receive_from_jetson>:

static void receive_from_jetson(void)
{
    while (m_usb_rx_available())
     3de:	21 c0       	rjmp	.+66     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
    {
        char c = m_usb_rx_char();
     3e0:	0e 94 00 0a 	call	0x1400	; 0x1400 <m_usb_rx_char>
        // start parsing if new line detected
        if (c == '\n' || c == '\r')
     3e4:	8a 30       	cpi	r24, 0x0A	; 10
     3e6:	11 f0       	breq	.+4      	; 0x3ec <receive_from_jetson+0xe>
     3e8:	8d 30       	cpi	r24, 0x0D	; 13
     3ea:	79 f4       	brne	.+30     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
        {
            if (rx_index > 0)
     3ec:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <rx_index>
     3f0:	ee 23       	and	r30, r30
     3f2:	b9 f0       	breq	.+46     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
            {
                rx_buf[rx_index] = '\0';
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e3 59       	subi	r30, 0x93	; 147
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	10 82       	st	Z, r1
                if (parse_jetson_line(rx_buf))
     3fc:	8d e6       	ldi	r24, 0x6D	; 109
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 b8 01 	call	0x370	; 0x370 <parse_jetson_line>
                {
                }
                rx_index = 0;
     404:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <rx_index>
     408:	0c c0       	rjmp	.+24     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
            }
        }
        else if (rx_index < (RX_BUF_SIZE - 1))
     40a:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <rx_index>
     40e:	ef 33       	cpi	r30, 0x3F	; 63
     410:	40 f4       	brcc	.+16     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
        {
            rx_buf[rx_index++] = c;
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	9e 0f       	add	r25, r30
     416:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <rx_index>
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	e3 59       	subi	r30, 0x93	; 147
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	80 83       	st	Z, r24
    return (cnt == 8) ? 1 : 0;
}

static void receive_from_jetson(void)
{
    while (m_usb_rx_available())
     422:	0e 94 1e 0a 	call	0x143c	; 0x143c <m_usb_rx_available>
     426:	81 11       	cpse	r24, r1
     428:	db cf       	rjmp	.-74     	; 0x3e0 <receive_from_jetson+0x2>
        else if (rx_index < (RX_BUF_SIZE - 1))
        {
            rx_buf[rx_index++] = c;
        }
    }
}
     42a:	08 95       	ret

0000042c <usb_send_ram>:
    m_usb_tx_push();
}

/* ------------------- Tiny helper ------------------------- */
static void usb_send_ram(const char *s)
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ec 01       	movw	r28, r24
    while (*s)
     432:	03 c0       	rjmp	.+6      	; 0x43a <usb_send_ram+0xe>
        m_usb_tx_char(*s++);
     434:	21 96       	adiw	r28, 0x01	; 1
     436:	0e 94 2d 0a 	call	0x145a	; 0x145a <m_usb_tx_char>
}

/* ------------------- Tiny helper ------------------------- */
static void usb_send_ram(const char *s)
{
    while (*s)
     43a:	88 81       	ld	r24, Y
     43c:	81 11       	cpse	r24, r1
     43e:	fa cf       	rjmp	.-12     	; 0x434 <usb_send_ram+0x8>
        m_usb_tx_char(*s++);
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <send_telemetry>:
    flag_telemetry_due = 1; /* signal main loop           */
}

/* ------------------- TELEMETRY SENDER (called from main) ----------------- */
static void send_telemetry(bool emerg)
{
     446:	2f 92       	push	r2
     448:	3f 92       	push	r3
     44a:	4f 92       	push	r4
     44c:	5f 92       	push	r5
     44e:	6f 92       	push	r6
     450:	7f 92       	push	r7
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	c1 5b       	subi	r28, 0xB1	; 177
     470:	d1 09       	sbc	r29, r1
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
     47c:	c9 55       	subi	r28, 0x59	; 89
     47e:	df 4f       	sbci	r29, 0xFF	; 255
     480:	88 83       	st	Y, r24
     482:	c7 5a       	subi	r28, 0xA7	; 167
     484:	d0 40       	sbci	r29, 0x00	; 0
    char line[160];

    /* ---------- IMU ---------- */
    int16_t h16, r16, p16;
    bno055_get_euler(&h16, &r16, &p16);
     486:	ae 01       	movw	r20, r28
     488:	4b 55       	subi	r20, 0x5B	; 91
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	be 01       	movw	r22, r28
     48e:	6d 55       	subi	r22, 0x5D	; 93
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	ce 01       	movw	r24, r28
     494:	8f 55       	subi	r24, 0x5F	; 95
     496:	9f 4f       	sbci	r25, 0xFF	; 255
     498:	0e 94 39 08 	call	0x1072	; 0x1072 <bno055_get_euler>

    float h = h16 / 16.0f;
     49c:	cf 55       	subi	r28, 0x5F	; 95
     49e:	df 4f       	sbci	r29, 0xFF	; 255
     4a0:	68 81       	ld	r22, Y
     4a2:	79 81       	ldd	r23, Y+1	; 0x01
     4a4:	c1 5a       	subi	r28, 0xA1	; 161
     4a6:	d0 40       	sbci	r29, 0x00	; 0
     4a8:	07 2e       	mov	r0, r23
     4aa:	00 0c       	add	r0, r0
     4ac:	88 0b       	sbc	r24, r24
     4ae:	99 0b       	sbc	r25, r25
     4b0:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e8       	ldi	r20, 0x80	; 128
     4ba:	5d e3       	ldi	r21, 0x3D	; 61
     4bc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
     4c0:	c8 55       	subi	r28, 0x58	; 88
     4c2:	df 4f       	sbci	r29, 0xFF	; 255
     4c4:	68 83       	st	Y, r22
     4c6:	c8 5a       	subi	r28, 0xA8	; 168
     4c8:	d0 40       	sbci	r29, 0x00	; 0
     4ca:	c7 55       	subi	r28, 0x57	; 87
     4cc:	df 4f       	sbci	r29, 0xFF	; 255
     4ce:	78 83       	st	Y, r23
     4d0:	c9 5a       	subi	r28, 0xA9	; 169
     4d2:	d0 40       	sbci	r29, 0x00	; 0
     4d4:	c6 55       	subi	r28, 0x56	; 86
     4d6:	df 4f       	sbci	r29, 0xFF	; 255
     4d8:	88 83       	st	Y, r24
     4da:	ca 5a       	subi	r28, 0xAA	; 170
     4dc:	d0 40       	sbci	r29, 0x00	; 0
     4de:	c5 55       	subi	r28, 0x55	; 85
     4e0:	df 4f       	sbci	r29, 0xFF	; 255
     4e2:	98 83       	st	Y, r25
     4e4:	cb 5a       	subi	r28, 0xAB	; 171
     4e6:	d0 40       	sbci	r29, 0x00	; 0
    float r = r16 / 16.0f;
     4e8:	cd 55       	subi	r28, 0x5D	; 93
     4ea:	df 4f       	sbci	r29, 0xFF	; 255
     4ec:	68 81       	ld	r22, Y
     4ee:	79 81       	ldd	r23, Y+1	; 0x01
     4f0:	c3 5a       	subi	r28, 0xA3	; 163
     4f2:	d0 40       	sbci	r29, 0x00	; 0
     4f4:	07 2e       	mov	r0, r23
     4f6:	00 0c       	add	r0, r0
     4f8:	88 0b       	sbc	r24, r24
     4fa:	99 0b       	sbc	r25, r25
     4fc:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e8       	ldi	r20, 0x80	; 128
     506:	5d e3       	ldi	r21, 0x3D	; 61
     508:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
     50c:	c4 55       	subi	r28, 0x54	; 84
     50e:	df 4f       	sbci	r29, 0xFF	; 255
     510:	68 83       	st	Y, r22
     512:	cc 5a       	subi	r28, 0xAC	; 172
     514:	d0 40       	sbci	r29, 0x00	; 0
     516:	c3 55       	subi	r28, 0x53	; 83
     518:	df 4f       	sbci	r29, 0xFF	; 255
     51a:	78 83       	st	Y, r23
     51c:	cd 5a       	subi	r28, 0xAD	; 173
     51e:	d0 40       	sbci	r29, 0x00	; 0
     520:	c2 55       	subi	r28, 0x52	; 82
     522:	df 4f       	sbci	r29, 0xFF	; 255
     524:	88 83       	st	Y, r24
     526:	ce 5a       	subi	r28, 0xAE	; 174
     528:	d0 40       	sbci	r29, 0x00	; 0
     52a:	c1 55       	subi	r28, 0x51	; 81
     52c:	df 4f       	sbci	r29, 0xFF	; 255
     52e:	98 83       	st	Y, r25
     530:	cf 5a       	subi	r28, 0xAF	; 175
     532:	d0 40       	sbci	r29, 0x00	; 0
    float p = p16 / 16.0f;
     534:	cb 55       	subi	r28, 0x5B	; 91
     536:	df 4f       	sbci	r29, 0xFF	; 255
     538:	68 81       	ld	r22, Y
     53a:	79 81       	ldd	r23, Y+1	; 0x01
     53c:	c5 5a       	subi	r28, 0xA5	; 165
     53e:	d0 40       	sbci	r29, 0x00	; 0
     540:	07 2e       	mov	r0, r23
     542:	00 0c       	add	r0, r0
     544:	88 0b       	sbc	r24, r24
     546:	99 0b       	sbc	r25, r25
     548:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	5d e3       	ldi	r21, 0x3D	; 61
     554:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
     558:	c0 55       	subi	r28, 0x50	; 80
     55a:	df 4f       	sbci	r29, 0xFF	; 255
     55c:	68 83       	st	Y, r22
     55e:	c0 5b       	subi	r28, 0xB0	; 176
     560:	d0 40       	sbci	r29, 0x00	; 0
     562:	cf 54       	subi	r28, 0x4F	; 79
     564:	df 4f       	sbci	r29, 0xFF	; 255
     566:	78 83       	st	Y, r23
     568:	c1 5b       	subi	r28, 0xB1	; 177
     56a:	d0 40       	sbci	r29, 0x00	; 0
     56c:	18 2f       	mov	r17, r24
     56e:	09 2f       	mov	r16, r25

    // uint8_t cal = bno055_is_fully_calibrated() ? 1u : 0u;

    /* ---------- ADC ---------- */
    uint16_t vbat_1 = analog_get_battery_1_mV();
     570:	0e 94 9b 04 	call	0x936	; 0x936 <analog_get_battery_1_mV>
     574:	b8 2e       	mov	r11, r24
     576:	a9 2e       	mov	r10, r25
    uint16_t vbat_2 = analog_get_battery_2_mV();
     578:	0e 94 ab 04 	call	0x956	; 0x956 <analog_get_battery_2_mV>
     57c:	98 2e       	mov	r9, r24
     57e:	89 2e       	mov	r8, r25
    uint16_t cliffL = analog_get_cliff_left();
     580:	0e 94 bb 04 	call	0x976	; 0x976 <analog_get_cliff_left>
     584:	78 2e       	mov	r7, r24
     586:	69 2e       	mov	r6, r25
    uint16_t cliffC = analog_get_cliff_front();
     588:	0e 94 bf 04 	call	0x97e	; 0x97e <analog_get_cliff_front>
     58c:	58 2e       	mov	r5, r24
     58e:	49 2e       	mov	r4, r25
    uint16_t cliffR = analog_get_cliff_right();
     590:	0e 94 c3 04 	call	0x986	; 0x986 <analog_get_cliff_right>
     594:	38 2e       	mov	r3, r24
     596:	29 2e       	mov	r2, r25

    /* ---------- Encoders ---------- */
    int32_t encL = encoder_get_left();
     598:	0e 94 d4 06 	call	0xda8	; 0xda8 <encoder_get_left>
     59c:	f6 2e       	mov	r15, r22
     59e:	e7 2e       	mov	r14, r23
     5a0:	d8 2e       	mov	r13, r24
     5a2:	c9 2e       	mov	r12, r25
    int32_t encR = encoder_get_right();
     5a4:	0e 94 df 06 	call	0xdbe	; 0xdbe <encoder_get_right>
	// 	encoder_reset_right();
	// }

    /* ---------- Format & ship ---------- */
    /* Packet Structure: { Yaw Roll Pitch encoderLeft encoderRight bat1Voltage bat2Voltage LeftCliff CenterCliff RightCliff emergencyFlag }  */
    snprintf(line, sizeof(line),
     5a8:	1f 92       	push	r1
     5aa:	c9 55       	subi	r28, 0x59	; 89
     5ac:	df 4f       	sbci	r29, 0xFF	; 255
     5ae:	28 81       	ld	r18, Y
     5b0:	c7 5a       	subi	r28, 0xA7	; 167
     5b2:	d0 40       	sbci	r29, 0x00	; 0
     5b4:	2f 93       	push	r18
     5b6:	2f 92       	push	r2
     5b8:	3f 92       	push	r3
     5ba:	4f 92       	push	r4
     5bc:	5f 92       	push	r5
     5be:	6f 92       	push	r6
     5c0:	7f 92       	push	r7
     5c2:	8f 92       	push	r8
     5c4:	9f 92       	push	r9
     5c6:	af 92       	push	r10
     5c8:	bf 92       	push	r11
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	7f 93       	push	r23
     5d0:	6f 93       	push	r22
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 54       	subi	r28, 0x4F	; 79
     5e0:	df 4f       	sbci	r29, 0xFF	; 255
     5e2:	88 81       	ld	r24, Y
     5e4:	c1 5b       	subi	r28, 0xB1	; 177
     5e6:	d0 40       	sbci	r29, 0x00	; 0
     5e8:	8f 93       	push	r24
     5ea:	c0 55       	subi	r28, 0x50	; 80
     5ec:	df 4f       	sbci	r29, 0xFF	; 255
     5ee:	98 81       	ld	r25, Y
     5f0:	c0 5b       	subi	r28, 0xB0	; 176
     5f2:	d0 40       	sbci	r29, 0x00	; 0
     5f4:	9f 93       	push	r25
     5f6:	c1 55       	subi	r28, 0x51	; 81
     5f8:	df 4f       	sbci	r29, 0xFF	; 255
     5fa:	28 81       	ld	r18, Y
     5fc:	cf 5a       	subi	r28, 0xAF	; 175
     5fe:	d0 40       	sbci	r29, 0x00	; 0
     600:	2f 93       	push	r18
     602:	c2 55       	subi	r28, 0x52	; 82
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	88 81       	ld	r24, Y
     608:	ce 5a       	subi	r28, 0xAE	; 174
     60a:	d0 40       	sbci	r29, 0x00	; 0
     60c:	8f 93       	push	r24
     60e:	c3 55       	subi	r28, 0x53	; 83
     610:	df 4f       	sbci	r29, 0xFF	; 255
     612:	98 81       	ld	r25, Y
     614:	cd 5a       	subi	r28, 0xAD	; 173
     616:	d0 40       	sbci	r29, 0x00	; 0
     618:	9f 93       	push	r25
     61a:	c4 55       	subi	r28, 0x54	; 84
     61c:	df 4f       	sbci	r29, 0xFF	; 255
     61e:	28 81       	ld	r18, Y
     620:	cc 5a       	subi	r28, 0xAC	; 172
     622:	d0 40       	sbci	r29, 0x00	; 0
     624:	2f 93       	push	r18
     626:	c5 55       	subi	r28, 0x55	; 85
     628:	df 4f       	sbci	r29, 0xFF	; 255
     62a:	88 81       	ld	r24, Y
     62c:	cb 5a       	subi	r28, 0xAB	; 171
     62e:	d0 40       	sbci	r29, 0x00	; 0
     630:	8f 93       	push	r24
     632:	c6 55       	subi	r28, 0x56	; 86
     634:	df 4f       	sbci	r29, 0xFF	; 255
     636:	98 81       	ld	r25, Y
     638:	ca 5a       	subi	r28, 0xAA	; 170
     63a:	d0 40       	sbci	r29, 0x00	; 0
     63c:	9f 93       	push	r25
     63e:	c7 55       	subi	r28, 0x57	; 87
     640:	df 4f       	sbci	r29, 0xFF	; 255
     642:	28 81       	ld	r18, Y
     644:	c9 5a       	subi	r28, 0xA9	; 169
     646:	d0 40       	sbci	r29, 0x00	; 0
     648:	2f 93       	push	r18
     64a:	c8 55       	subi	r28, 0x58	; 88
     64c:	df 4f       	sbci	r29, 0xFF	; 255
     64e:	88 81       	ld	r24, Y
     650:	c8 5a       	subi	r28, 0xA8	; 168
     652:	d0 40       	sbci	r29, 0x00	; 0
     654:	8f 93       	push	r24
     656:	8f e1       	ldi	r24, 0x1F	; 31
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	1f 92       	push	r1
     660:	80 ea       	ldi	r24, 0xA0	; 160
     662:	8f 93       	push	r24
     664:	8e 01       	movw	r16, r28
     666:	0f 5f       	subi	r16, 0xFF	; 255
     668:	1f 4f       	sbci	r17, 0xFF	; 255
     66a:	1f 93       	push	r17
     66c:	0f 93       	push	r16
     66e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <snprintf>
             "%6.2f %6.2f %6.2f %10ld %10ld %u %u %u %u %u %u\r\n", h, r, p, (long)encL, (long)encR, vbat_1, vbat_2, cliffL, cliffC, cliffR, emerg);

    usb_send_ram(line);
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	c8 01       	movw	r24, r16
     67e:	0e 94 16 02 	call	0x42c	; 0x42c <usb_send_ram>
    m_usb_tx_push();
     682:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <m_usb_tx_push>
}
     686:	cf 54       	subi	r28, 0x4F	; 79
     688:	df 4f       	sbci	r29, 0xFF	; 255
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	bf 90       	pop	r11
     6a6:	af 90       	pop	r10
     6a8:	9f 90       	pop	r9
     6aa:	8f 90       	pop	r8
     6ac:	7f 90       	pop	r7
     6ae:	6f 90       	pop	r6
     6b0:	5f 90       	pop	r5
     6b2:	4f 90       	pop	r4
     6b4:	3f 90       	pop	r3
     6b6:	2f 90       	pop	r2
     6b8:	08 95       	ret

000006ba <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	31 ee       	ldi	r19, 0xE1	; 225
     6be:	84 e0       	ldi	r24, 0x04	; 4
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	80 40       	sbci	r24, 0x00	; 0
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <main+0x6>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <main+0x10>
     6ca:	00 00       	nop
/* ====================================================*/
int main(void)
{
    /* ---- initialize everything ---- */
    _delay_ms(100);
    m_usb_init();
     6cc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <m_usb_init>

    // If usb handshake fails, this will block the entire execution of the code, remove at production ready code
    while (!m_usb_isconnected())
     6d0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <m_usb_isconnected>
     6d4:	88 23       	and	r24, r24
     6d6:	e1 f3       	breq	.-8      	; 0x6d0 <main+0x16>
    {
    } /* wait for host terminal      */

    m_usb_tx_string("M2 ready\r\n");
     6d8:	82 e4       	ldi	r24, 0x42	; 66
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	0e 94 30 0c 	call	0x1860	; 0x1860 <print_P>

    motors_init();
     6e0:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <motors_init>
    encoder_init();
     6e4:	0e 94 c7 04 	call	0x98e	; 0x98e <encoder_init>
    analog_init();
     6e8:	0e 94 46 04 	call	0x88c	; 0x88c <analog_init>

    m_usb_tx_string("M2 ready\r\n");
     6ec:	87 e3       	ldi	r24, 0x37	; 55
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	0e 94 30 0c 	call	0x1860	; 0x1860 <print_P>

    twi_init();
     6f4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <twi_init>
    if (!bno055_init())
     6f8:	0e 94 f7 07 	call	0xfee	; 0xfee <bno055_init>
     6fc:	81 11       	cpse	r24, r1
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <main+0x4e>
    {
        m_usb_tx_string("IMU Failed\r\n");
     700:	8a e2       	ldi	r24, 0x2A	; 42
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0e 94 30 0c 	call	0x1860	; 0x1860 <print_P>
    }

    /* ---- start 50 Hz timer & enable global IRQs ---- */
    timer4_init_50Hz(); /* Timer-3 compare-match every 20 ms        */
     708:	0e 94 9f 01 	call	0x33e	; 0x33e <timer4_init_50Hz>
    sei();              /* global interrupt enable                 */
     70c:	78 94       	sei

    /* ---------------- MAIN LOOP ---------------------- */
	bool  onetime = true;
	
	motors_enable_left(true);
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 ff 08 	call	0x11fe	; 0x11fe <motors_enable_left>
	motors_enable_right(true);
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	0e 94 09 09 	call	0x1212	; 0x1212 <motors_enable_right>

	motors_set_dir_left(true);
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 1c 09 	call	0x1238	; 0x1238 <motors_set_dir_left>
	motors_set_dir_right(false);
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 26 09 	call	0x124c	; 0x124c <motors_set_dir_right>
     726:	8f e3       	ldi	r24, 0x3F	; 63
     728:	9f e1       	ldi	r25, 0x1F	; 31
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <main+0x70>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <main+0x76>
     730:	00 00       	nop
	_delay_ms(2);
	motors_set_speed_left(360);
     732:	88 e6       	ldi	r24, 0x68	; 104
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 30 09 	call	0x1260	; 0x1260 <motors_set_speed_left>
	motors_set_speed_right(360);
     73a:	88 e6       	ldi	r24, 0x68	; 104
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 65 09 	call	0x12ca	; 0x12ca <motors_set_speed_right>
     742:	9a ea       	ldi	r25, 0xAA	; 170
     744:	26 ee       	ldi	r18, 0xE6	; 230
     746:	36 e9       	ldi	r19, 0x96	; 150
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	91 50       	subi	r25, 0x01	; 1
     74c:	20 40       	sbci	r18, 0x00	; 0
     74e:	30 40       	sbci	r19, 0x00	; 0
     750:	80 40       	sbci	r24, 0x00	; 0
     752:	d9 f7       	brne	.-10     	; 0x74a <main+0x90>
     754:	00 00       	nop
	_delay_ms(10000);
	
	motors_stop_all();
     756:	0e 94 9c 09 	call	0x1338	; 0x1338 <motors_stop_all>
    /* ---- start 50 Hz timer & enable global IRQs ---- */
    timer4_init_50Hz(); /* Timer-3 compare-match every 20 ms        */
    sei();              /* global interrupt enable                 */

    /* ---------------- MAIN LOOP ---------------------- */
	bool  onetime = true;
     75a:	d1 e0       	ldi	r29, 0x01	; 1
	motors_stop_all();
	
    while (1)
    {
        // check for any incoming Jetson data
        receive_from_jetson();
     75c:	0e 94 ef 01 	call	0x3de	; 0x3de <receive_from_jetson>

        /* ---------- Emergency Button press status ---------- */
        bool emerg = encoder_emergency_hit();
     760:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <encoder_emergency_hit>
     764:	c8 2f       	mov	r28, r24

        if (flag_telemetry_due)
     766:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     76a:	88 23       	and	r24, r24
     76c:	29 f0       	breq	.+10     	; 0x778 <main+0xbe>
        {
            send_telemetry(emerg);
     76e:	8c 2f       	mov	r24, r28
     770:	0e 94 23 02 	call	0x446	; 0x446 <send_telemetry>
            flag_telemetry_due = 0;
     774:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
        }
		
		if (onetime){
     778:	d1 11       	cpse	r29, r1
				
				onetime = false;
     77a:	d0 e0       	ldi	r29, 0x00	; 0
		}

        if (!emerg)
     77c:	c1 11       	cpse	r28, r1
     77e:	ee cf       	rjmp	.-36     	; 0x75c <main+0xa2>
        {
            if (profile_requested)
     780:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <profile_requested>
     784:	88 23       	and	r24, r24
     786:	09 f4       	brne	.+2      	; 0x78a <main+0xd0>
     788:	5f c0       	rjmp	.+190    	; 0x848 <main+0x18e>
            {
                // decide pure turn vs straight?line
                if (fabsf(rx_angle) > 0.01f && fabsf(rx_distance) < 1e-3f)
     78a:	80 90 63 01 	lds	r8, 0x0163	; 0x800163 <rx_angle>
     78e:	90 90 64 01 	lds	r9, 0x0164	; 0x800164 <rx_angle+0x1>
     792:	a0 90 65 01 	lds	r10, 0x0165	; 0x800165 <rx_angle+0x2>
     796:	b0 90 66 01 	lds	r11, 0x0166	; 0x800166 <rx_angle+0x3>
     79a:	c5 01       	movw	r24, r10
     79c:	b4 01       	movw	r22, r8
     79e:	9f 77       	andi	r25, 0x7F	; 127
     7a0:	2a e0       	ldi	r18, 0x0A	; 10
     7a2:	37 ed       	ldi	r19, 0xD7	; 215
     7a4:	43 e2       	ldi	r20, 0x23	; 35
     7a6:	5c e3       	ldi	r21, 0x3C	; 60
     7a8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__gesf2>
     7ac:	18 16       	cp	r1, r24
     7ae:	64 f5       	brge	.+88     	; 0x808 <main+0x14e>
     7b0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <rx_distance>
     7b4:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_distance+0x1>
     7b8:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <rx_distance+0x2>
     7bc:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <rx_distance+0x3>
     7c0:	bc 01       	movw	r22, r24
     7c2:	cd 01       	movw	r24, r26
     7c4:	9f 77       	andi	r25, 0x7F	; 127
     7c6:	2f e6       	ldi	r18, 0x6F	; 111
     7c8:	32 e1       	ldi	r19, 0x12	; 18
     7ca:	43 e8       	ldi	r20, 0x83	; 131
     7cc:	5a e3       	ldi	r21, 0x3A	; 58
     7ce:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__cmpsf2>
     7d2:	88 23       	and	r24, r24
     7d4:	cc f4       	brge	.+50     	; 0x808 <main+0x14e>
                {
                    profiler_turn_init(rx_angle,
     7d6:	c0 90 53 01 	lds	r12, 0x0153	; 0x800153 <rx_max_ang_acc>
     7da:	d0 90 54 01 	lds	r13, 0x0154	; 0x800154 <rx_max_ang_acc+0x1>
     7de:	e0 90 55 01 	lds	r14, 0x0155	; 0x800155 <rx_max_ang_acc+0x2>
     7e2:	f0 90 56 01 	lds	r15, 0x0156	; 0x800156 <rx_max_ang_acc+0x3>
     7e6:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <rx_max_omega>
     7ea:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <rx_max_omega+0x1>
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 47 10 	call	0x208e	; 0x208e <__floatunsisf>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	87 01       	movw	r16, r14
     7fc:	76 01       	movw	r14, r12
     7fe:	c5 01       	movw	r24, r10
     800:	b4 01       	movw	r22, r8
     802:	0e 94 76 0d 	call	0x1aec	; 0x1aec <profiler_turn_init>
     806:	1e c0       	rjmp	.+60     	; 0x844 <main+0x18a>
                                       rx_max_omega,
                                       rx_max_ang_acc);
                }
                else
                {
                    profiler_init(rx_distance,
     808:	80 90 57 01 	lds	r8, 0x0157	; 0x800157 <rx_lin_acc>
     80c:	90 90 58 01 	lds	r9, 0x0158	; 0x800158 <rx_lin_acc+0x1>
     810:	a0 90 59 01 	lds	r10, 0x0159	; 0x800159 <rx_lin_acc+0x2>
     814:	b0 90 5a 01 	lds	r11, 0x015A	; 0x80015a <rx_lin_acc+0x3>
     818:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <rx_max_vel>
     81c:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <rx_max_vel+0x1>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 47 10 	call	0x208e	; 0x208e <__floatunsisf>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <rx_distance>
     830:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <rx_distance+0x1>
     834:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_distance+0x2>
     838:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_distance+0x3>
     83c:	85 01       	movw	r16, r10
     83e:	74 01       	movw	r14, r8
     840:	0e 94 48 0c 	call	0x1890	; 0x1890 <profiler_init>
                                  rx_max_vel,
                                  rx_lin_acc);
                }
                profile_requested = false;
     844:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <profile_requested>
            }

            if (profiler_turn_is_running())
     848:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <profiler_turn_is_running>
     84c:	88 23       	and	r24, r24
     84e:	19 f0       	breq	.+6      	; 0x856 <main+0x19c>
            {
                profiler_turn_update();
     850:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <profiler_turn_update>
     854:	83 cf       	rjmp	.-250    	; 0x75c <main+0xa2>
            }
            else if (profiler_is_running())
     856:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <profiler_is_running>
     85a:	88 23       	and	r24, r24
     85c:	09 f4       	brne	.+2      	; 0x860 <main+0x1a6>
     85e:	7e cf       	rjmp	.-260    	; 0x75c <main+0xa2>
            {
                profiler_update();
     860:	0e 94 84 0c 	call	0x1908	; 0x1908 <profiler_update>
     864:	7b cf       	rjmp	.-266    	; 0x75c <main+0xa2>

00000866 <__vector_38>:
    TCCR4B |= _BV(CS43) | _BV(CS42);
}

/* ----------------------- TIMER-4 COMPARE ISR --------------------------- */
ISR(TIMER4_COMPA_vect)
{
     866:	1f 92       	push	r1
     868:	0f 92       	push	r0
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	0f 92       	push	r0
     86e:	11 24       	eor	r1, r1
     870:	8f 93       	push	r24
    TCNT4 = 0;              /* emulate CTC                */
     872:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__TEXT_REGION_LENGTH__+0x7f80bf>
     876:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__TEXT_REGION_LENGTH__+0x7f80be>
    flag_telemetry_due = 1; /* signal main loop           */
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
}
     880:	8f 91       	pop	r24
     882:	0f 90       	pop	r0
     884:	0f be       	out	0x3f, r0	; 63
     886:	0f 90       	pop	r0
     888:	1f 90       	pop	r1
     88a:	18 95       	reti

0000088c <analog_init>:

/* ------------------------------------------------------- */
void analog_init(void)
{
	/* AVcc reference, right-adjust, start on channel 0 */
	ADMUX  = (1<<REFS0);            /* AVcc with ext. cap on AREF */
     88c:	ec e7       	ldi	r30, 0x7C	; 124
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 e4       	ldi	r24, 0x40	; 64
     892:	80 83       	st	Z, r24

static inline void adc_select_channel(uint8_t ch)
{
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
     894:	80 81       	ld	r24, Z
     896:	80 7f       	andi	r24, 0xF0	; 240
     898:	80 83       	st	Z, r24
		ADCSRB &= ~(1<<MUX5);
     89a:	eb e7       	ldi	r30, 0x7B	; 123
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	8f 7d       	andi	r24, 0xDF	; 223
     8a2:	80 83       	st	Z, r24
	/* AVcc reference, right-adjust, start on channel 0 */
	ADMUX  = (1<<REFS0);            /* AVcc with ext. cap on AREF */
	adc_select_channel(0);

	/* prescaler, enable, no free-running */
	ADCSRA = (1<<ADEN) | ADC_PRESCALER_BITS;
     8a4:	87 e8       	ldi	r24, 0x87	; 135
     8a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	/* Disable digital input buffers on the used analog pins to save power/noise */
	DIDR0 =  (1<<ADC0D) | (1<<ADC1D) | (1<<ADC4D) | (1<<ADC5D) | (1<<ADC6D);
     8aa:	83 e7       	ldi	r24, 0x73	; 115
     8ac:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     8b0:	08 95       	ret

000008b2 <analog_read_raw>:
#include <avr/io.h>

static inline void adc_select_channel(uint8_t ch)
{
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
     8b2:	88 30       	cpi	r24, 0x08	; 8
     8b4:	80 f4       	brcc	.+32     	; 0x8d6 <analog_read_raw+0x24>
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
     8b6:	ec e7       	ldi	r30, 0x7C	; 124
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	90 81       	ld	r25, Z
     8bc:	90 7f       	andi	r25, 0xF0	; 240
     8be:	89 2b       	or	r24, r25
     8c0:	80 83       	st	Z, r24
		ADCSRB &= ~(1<<MUX5);
     8c2:	eb e7       	ldi	r30, 0x7B	; 123
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	8f 7d       	andi	r24, 0xDF	; 223
     8ca:	80 83       	st	Z, r24
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     8cc:	20 e0       	ldi	r18, 0x00	; 0
}

/* blocking, software-averaged read ---------------------- */
uint16_t analog_read_raw(uint8_t channel)
{
	uint32_t acc = 0;
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	ba 01       	movw	r22, r20
     8d4:	23 c0       	rjmp	.+70     	; 0x91c <analog_read_raw+0x6a>
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
		ADCSRB &= ~(1<<MUX5);
		} else {
		ADMUX  = (ADMUX & 0xF0) | (ch - 8);
     8d6:	ec e7       	ldi	r30, 0x7C	; 124
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	90 81       	ld	r25, Z
     8dc:	90 7f       	andi	r25, 0xF0	; 240
     8de:	88 50       	subi	r24, 0x08	; 8
     8e0:	89 2b       	or	r24, r25
     8e2:	80 83       	st	Z, r24
		ADCSRB |=  (1<<MUX5);
     8e4:	eb e7       	ldi	r30, 0x7B	; 123
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	80 62       	ori	r24, 0x20	; 32
     8ec:	80 83       	st	Z, r24
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     8ee:	20 e0       	ldi	r18, 0x00	; 0
}

/* blocking, software-averaged read ---------------------- */
uint16_t analog_read_raw(uint8_t channel)
{
	uint32_t acc = 0;
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	ba 01       	movw	r22, r20
     8f6:	12 c0       	rjmp	.+36     	; 0x91c <analog_read_raw+0x6a>

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
		ADCSRA |= (1<<ADSC);               /* start conversion          */
     8f8:	ea e7       	ldi	r30, 0x7A	; 122
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	90 81       	ld	r25, Z
     8fe:	90 64       	ori	r25, 0x40	; 64
     900:	90 83       	st	Z, r25
		while (ADCSRA & (1<<ADSC)) {;}     /* wait until ADSC clears    */
     902:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     906:	96 fd       	sbrc	r25, 6
     908:	fc cf       	rjmp	.-8      	; 0x902 <analog_read_raw+0x50>
		acc += ADC;                        /* read ADCL then ADCH       */
     90a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     90e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     912:	48 0f       	add	r20, r24
     914:	59 1f       	adc	r21, r25
     916:	61 1d       	adc	r22, r1
     918:	71 1d       	adc	r23, r1
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     91a:	2f 5f       	subi	r18, 0xFF	; 255
     91c:	24 30       	cpi	r18, 0x04	; 4
     91e:	60 f3       	brcs	.-40     	; 0x8f8 <analog_read_raw+0x46>
		ADCSRA |= (1<<ADSC);               /* start conversion          */
		while (ADCSRA & (1<<ADSC)) {;}     /* wait until ADSC clears    */
		acc += ADC;                        /* read ADCL then ADCH       */
	}
	return (uint16_t)(acc / ADC_NUM_SAMPLES);
     920:	db 01       	movw	r26, r22
     922:	ca 01       	movw	r24, r20
     924:	b6 95       	lsr	r27
     926:	a7 95       	ror	r26
     928:	97 95       	ror	r25
     92a:	87 95       	ror	r24
     92c:	b6 95       	lsr	r27
     92e:	a7 95       	ror	r26
     930:	97 95       	ror	r25
     932:	87 95       	ror	r24
}
     934:	08 95       	ret

00000936 <analog_get_battery_1_mV>:
	return (uint16_t)mv;
}

uint16_t analog_get_battery_1_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_MAIN));
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 59 04 	call	0x8b2	; 0x8b2 <analog_read_raw>

/* ---------------- convenience wrappers -----------------*/
static inline uint16_t to_millivolt(uint16_t adc)
{
	/*  (adc * 1100 mV /1023) * scale-factor  */
	uint32_t mv = (uint32_t)adc * 1100UL / 1023UL;   /* ? AVcc=3.3 V ? update */
     93c:	9c 01       	movw	r18, r24
     93e:	ac e4       	ldi	r26, 0x4C	; 76
     940:	b4 e0       	ldi	r27, 0x04	; 4
     942:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__umulhisi3>
     946:	2f ef       	ldi	r18, 0xFF	; 255
     948:	33 e0       	ldi	r19, 0x03	; 3
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodsi4>
}

uint16_t analog_get_battery_1_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_MAIN));
}
     952:	c9 01       	movw	r24, r18
     954:	08 95       	ret

00000956 <analog_get_battery_2_mV>:

uint16_t analog_get_battery_2_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_AUX));
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 59 04 	call	0x8b2	; 0x8b2 <analog_read_raw>

/* ---------------- convenience wrappers -----------------*/
static inline uint16_t to_millivolt(uint16_t adc)
{
	/*  (adc * 1100 mV /1023) * scale-factor  */
	uint32_t mv = (uint32_t)adc * 1100UL / 1023UL;   /* ? AVcc=3.3 V ? update */
     95c:	9c 01       	movw	r18, r24
     95e:	ac e4       	ldi	r26, 0x4C	; 76
     960:	b4 e0       	ldi	r27, 0x04	; 4
     962:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__umulhisi3>
     966:	2f ef       	ldi	r18, 0xFF	; 255
     968:	33 e0       	ldi	r19, 0x03	; 3
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodsi4>
}

uint16_t analog_get_battery_2_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_AUX));
}
     972:	c9 01       	movw	r24, r18
     974:	08 95       	ret

00000976 <analog_get_cliff_left>:

uint16_t analog_get_cliff_left (void){ return analog_read_raw(ADC_CH_CLIFF_LEFT);  }
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	0e 94 59 04 	call	0x8b2	; 0x8b2 <analog_read_raw>
     97c:	08 95       	ret

0000097e <analog_get_cliff_front>:
uint16_t analog_get_cliff_front(void){ return analog_read_raw(ADC_CH_CLIFF_FRONT); }
     97e:	85 e0       	ldi	r24, 0x05	; 5
     980:	0e 94 59 04 	call	0x8b2	; 0x8b2 <analog_read_raw>
     984:	08 95       	ret

00000986 <analog_get_cliff_right>:
uint16_t analog_get_cliff_right(void){ return analog_read_raw(ADC_CH_CLIFF_RIGHT); }
     986:	86 e0       	ldi	r24, 0x06	; 6
     988:	0e 94 59 04 	call	0x8b2	; 0x8b2 <analog_read_raw>
     98c:	08 95       	ret

0000098e <encoder_init>:

void encoder_reset_right(void)
{
	cli();
	right_cnt = 0;
	sei();
     98e:	8a b1       	in	r24, 0x0a	; 10
     990:	8b 7f       	andi	r24, 0xFB	; 251
     992:	8a b9       	out	0x0a, r24	; 10
     994:	8a b1       	in	r24, 0x0a	; 10
     996:	87 7f       	andi	r24, 0xF7	; 247
     998:	8a b9       	out	0x0a, r24	; 10
     99a:	8b b1       	in	r24, 0x0b	; 11
     99c:	84 60       	ori	r24, 0x04	; 4
     99e:	8b b9       	out	0x0b, r24	; 11
     9a0:	8b b1       	in	r24, 0x0b	; 11
     9a2:	88 60       	ori	r24, 0x08	; 8
     9a4:	8b b9       	out	0x0b, r24	; 11
     9a6:	e9 e6       	ldi	r30, 0x69	; 105
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	80 61       	ori	r24, 0x10	; 16
     9ae:	80 83       	st	Z, r24
     9b0:	80 81       	ld	r24, Z
     9b2:	8f 7d       	andi	r24, 0xDF	; 223
     9b4:	80 83       	st	Z, r24
     9b6:	8d b3       	in	r24, 0x1d	; 29
     9b8:	84 60       	ori	r24, 0x04	; 4
     9ba:	8d bb       	out	0x1d, r24	; 29
     9bc:	80 81       	ld	r24, Z
     9be:	80 64       	ori	r24, 0x40	; 64
     9c0:	80 83       	st	Z, r24
     9c2:	80 81       	ld	r24, Z
     9c4:	8f 77       	andi	r24, 0x7F	; 127
     9c6:	80 83       	st	Z, r24
     9c8:	8d b3       	in	r24, 0x1d	; 29
     9ca:	88 60       	ori	r24, 0x08	; 8
     9cc:	8d bb       	out	0x1d, r24	; 29
     9ce:	4a 9b       	sbis	0x09, 2	; 9
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <encoder_init+0x48>
     9d2:	22 e0       	ldi	r18, 0x02	; 2
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <encoder_init+0x4a>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	99 b1       	in	r25, 0x09	; 9
     9da:	93 fb       	bst	r25, 3
     9dc:	88 27       	eor	r24, r24
     9de:	80 f9       	bld	r24, 0
     9e0:	82 2b       	or	r24, r18
     9e2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <left_last_state>
     9e6:	8d b1       	in	r24, 0x0d	; 13
     9e8:	8f 7b       	andi	r24, 0xBF	; 191
     9ea:	8d b9       	out	0x0d, r24	; 13
     9ec:	8e b1       	in	r24, 0x0e	; 14
     9ee:	80 64       	ori	r24, 0x40	; 64
     9f0:	8e b9       	out	0x0e, r24	; 14
     9f2:	84 b1       	in	r24, 0x04	; 4
     9f4:	8f 7e       	andi	r24, 0xEF	; 239
     9f6:	84 b9       	out	0x04, r24	; 4
     9f8:	84 b1       	in	r24, 0x04	; 4
     9fa:	8f 77       	andi	r24, 0x7F	; 127
     9fc:	84 b9       	out	0x04, r24	; 4
     9fe:	85 b1       	in	r24, 0x05	; 5
     a00:	80 61       	ori	r24, 0x10	; 16
     a02:	85 b9       	out	0x05, r24	; 5
     a04:	85 b1       	in	r24, 0x05	; 5
     a06:	80 68       	ori	r24, 0x80	; 128
     a08:	85 b9       	out	0x05, r24	; 5
     a0a:	ea e6       	ldi	r30, 0x6A	; 106
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	80 61       	ori	r24, 0x10	; 16
     a12:	80 83       	st	Z, r24
     a14:	80 81       	ld	r24, Z
     a16:	8f 7d       	andi	r24, 0xDF	; 223
     a18:	80 83       	st	Z, r24
     a1a:	8d b3       	in	r24, 0x1d	; 29
     a1c:	80 64       	ori	r24, 0x40	; 64
     a1e:	8d bb       	out	0x1d, r24	; 29
     a20:	e8 e6       	ldi	r30, 0x68	; 104
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	81 60       	ori	r24, 0x01	; 1
     a28:	80 83       	st	Z, r24
     a2a:	eb e6       	ldi	r30, 0x6B	; 107
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	80 69       	ori	r24, 0x90	; 144
     a32:	80 83       	st	Z, r24
     a34:	1c 9b       	sbis	0x03, 4	; 3
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <__DATA_REGION_LENGTH__+0x3c>
     a38:	22 e0       	ldi	r18, 0x02	; 2
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__DATA_REGION_LENGTH__+0x3e>
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	9c b1       	in	r25, 0x0c	; 12
     a40:	96 fb       	bst	r25, 6
     a42:	88 27       	eor	r24, r24
     a44:	80 f9       	bld	r24, 0
     a46:	82 2b       	or	r24, r18
     a48:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <right_last_state>
     a4c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <right_cnt>
     a50:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <right_cnt+0x1>
     a54:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <right_cnt+0x2>
     a58:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <right_cnt+0x3>
     a5c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <left_cnt>
     a60:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <left_cnt+0x1>
     a64:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <left_cnt+0x2>
     a68:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <left_cnt+0x3>
     a6c:	08 95       	ret

00000a6e <__vector_3>:
     a6e:	1f 92       	push	r1
     a70:	0f 92       	push	r0
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	0f 92       	push	r0
     a76:	11 24       	eor	r1, r1
     a78:	2f 93       	push	r18
     a7a:	3f 93       	push	r19
     a7c:	8f 93       	push	r24
     a7e:	9f 93       	push	r25
     a80:	af 93       	push	r26
     a82:	bf 93       	push	r27
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31
     a88:	39 b1       	in	r19, 0x09	; 9
     a8a:	29 b1       	in	r18, 0x09	; 9
     a8c:	23 fb       	bst	r18, 3
     a8e:	22 27       	eor	r18, r18
     a90:	20 f9       	bld	r18, 0
     a92:	32 fb       	bst	r19, 2
     a94:	88 27       	eor	r24, r24
     a96:	80 f9       	bld	r24, 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	28 2b       	or	r18, r24
     aa0:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <left_last_state>
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	e2 2f       	mov	r30, r18
     ab0:	e8 2b       	or	r30, r24
     ab2:	8e 2f       	mov	r24, r30
     ab4:	ee 0f       	add	r30, r30
     ab6:	99 0b       	sbc	r25, r25
     ab8:	aa 0b       	sbc	r26, r26
     aba:	bb 0b       	sbc	r27, r27
     abc:	fc 01       	movw	r30, r24
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	ee 30       	cpi	r30, 0x0E	; 14
     ac2:	f1 05       	cpc	r31, r1
     ac4:	58 f5       	brcc	.+86     	; 0xb1c <__stack+0x1d>
     ac6:	ea 5a       	subi	r30, 0xAA	; 170
     ac8:	ff 4f       	sbci	r31, 0xFF	; 255
     aca:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__tablejump2__>
     ace:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <left_cnt>
     ad2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     ad6:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     ada:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	a1 09       	sbc	r26, r1
     ae2:	b1 09       	sbc	r27, r1
     ae4:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <left_cnt>
     ae8:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <left_cnt+0x1>
     aec:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <left_cnt+0x2>
     af0:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <left_cnt+0x3>
     af4:	13 c0       	rjmp	.+38     	; 0xb1c <__stack+0x1d>
     af6:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <left_cnt>
     afa:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     afe:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     b02:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	a1 1d       	adc	r26, r1
     b0a:	b1 1d       	adc	r27, r1
     b0c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <left_cnt>
     b10:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <left_cnt+0x1>
     b14:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <left_cnt+0x2>
     b18:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <left_cnt+0x3>
     b1c:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <left_last_state>
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_4>:
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	2f 93       	push	r18
     b46:	3f 93       	push	r19
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
     b54:	39 b1       	in	r19, 0x09	; 9
     b56:	29 b1       	in	r18, 0x09	; 9
     b58:	23 fb       	bst	r18, 3
     b5a:	22 27       	eor	r18, r18
     b5c:	20 f9       	bld	r18, 0
     b5e:	32 fb       	bst	r19, 2
     b60:	88 27       	eor	r24, r24
     b62:	80 f9       	bld	r24, 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	28 2b       	or	r18, r24
     b6c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <left_last_state>
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	e2 2f       	mov	r30, r18
     b7c:	e8 2b       	or	r30, r24
     b7e:	8e 2f       	mov	r24, r30
     b80:	ee 0f       	add	r30, r30
     b82:	99 0b       	sbc	r25, r25
     b84:	aa 0b       	sbc	r26, r26
     b86:	bb 0b       	sbc	r27, r27
     b88:	fc 01       	movw	r30, r24
     b8a:	31 97       	sbiw	r30, 0x01	; 1
     b8c:	ee 30       	cpi	r30, 0x0E	; 14
     b8e:	f1 05       	cpc	r31, r1
     b90:	58 f5       	brcc	.+86     	; 0xbe8 <__vector_4+0xae>
     b92:	ec 59       	subi	r30, 0x9C	; 156
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__tablejump2__>
     b9a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <left_cnt>
     b9e:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     ba2:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     ba6:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	a1 09       	sbc	r26, r1
     bae:	b1 09       	sbc	r27, r1
     bb0:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <left_cnt>
     bb4:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <left_cnt+0x1>
     bb8:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <left_cnt+0x2>
     bbc:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <left_cnt+0x3>
     bc0:	13 c0       	rjmp	.+38     	; 0xbe8 <__vector_4+0xae>
     bc2:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <left_cnt>
     bc6:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     bca:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     bce:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	a1 1d       	adc	r26, r1
     bd6:	b1 1d       	adc	r27, r1
     bd8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <left_cnt>
     bdc:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <left_cnt+0x1>
     be0:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <left_cnt+0x2>
     be4:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <left_cnt+0x3>
     be8:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <left_last_state>
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	3f 91       	pop	r19
     bfa:	2f 91       	pop	r18
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	1f 90       	pop	r1
     c04:	18 95       	reti

00000c06 <__vector_7>:
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
     c20:	33 b1       	in	r19, 0x03	; 3
     c22:	2c b1       	in	r18, 0x0c	; 12
     c24:	26 fb       	bst	r18, 6
     c26:	22 27       	eor	r18, r18
     c28:	20 f9       	bld	r18, 0
     c2a:	34 fb       	bst	r19, 4
     c2c:	88 27       	eor	r24, r24
     c2e:	80 f9       	bld	r24, 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	28 2b       	or	r18, r24
     c38:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <right_last_state>
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	e2 2f       	mov	r30, r18
     c48:	e8 2b       	or	r30, r24
     c4a:	8e 2f       	mov	r24, r30
     c4c:	ee 0f       	add	r30, r30
     c4e:	99 0b       	sbc	r25, r25
     c50:	aa 0b       	sbc	r26, r26
     c52:	bb 0b       	sbc	r27, r27
     c54:	fc 01       	movw	r30, r24
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	ee 30       	cpi	r30, 0x0E	; 14
     c5a:	f1 05       	cpc	r31, r1
     c5c:	58 f5       	brcc	.+86     	; 0xcb4 <__vector_7+0xae>
     c5e:	ee 58       	subi	r30, 0x8E	; 142
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__tablejump2__>
     c66:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <right_cnt>
     c6a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     c6e:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     c72:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	a1 09       	sbc	r26, r1
     c7a:	b1 09       	sbc	r27, r1
     c7c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <right_cnt>
     c80:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <right_cnt+0x1>
     c84:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <right_cnt+0x2>
     c88:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <right_cnt+0x3>
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <__vector_7+0xae>
     c8e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <right_cnt>
     c92:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     c96:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     c9a:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	a1 1d       	adc	r26, r1
     ca2:	b1 1d       	adc	r27, r1
     ca4:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <right_cnt>
     ca8:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <right_cnt+0x1>
     cac:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <right_cnt+0x2>
     cb0:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <right_cnt+0x3>
     cb4:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <right_last_state>
     cb8:	ff 91       	pop	r31
     cba:	ef 91       	pop	r30
     cbc:	bf 91       	pop	r27
     cbe:	af 91       	pop	r26
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	3f 91       	pop	r19
     cc6:	2f 91       	pop	r18
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	0f 90       	pop	r0
     cce:	1f 90       	pop	r1
     cd0:	18 95       	reti

00000cd2 <__vector_9>:
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
     cec:	1f 99       	sbic	0x03, 7	; 3
     cee:	03 c0       	rjmp	.+6      	; 0xcf6 <__vector_9+0x24>
     cf0:	21 e0       	ldi	r18, 0x01	; 1
     cf2:	20 93 ad 01 	sts	0x01AD, r18	; 0x8001ad <emg_flag>
     cf6:	33 b1       	in	r19, 0x03	; 3
     cf8:	2c b1       	in	r18, 0x0c	; 12
     cfa:	26 fb       	bst	r18, 6
     cfc:	22 27       	eor	r18, r18
     cfe:	20 f9       	bld	r18, 0
     d00:	34 fb       	bst	r19, 4
     d02:	88 27       	eor	r24, r24
     d04:	80 f9       	bld	r24, 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	28 2b       	or	r18, r24
     d0e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <right_last_state>
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	e2 2f       	mov	r30, r18
     d1e:	e8 2b       	or	r30, r24
     d20:	8e 2f       	mov	r24, r30
     d22:	ee 0f       	add	r30, r30
     d24:	99 0b       	sbc	r25, r25
     d26:	aa 0b       	sbc	r26, r26
     d28:	bb 0b       	sbc	r27, r27
     d2a:	fc 01       	movw	r30, r24
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	ee 30       	cpi	r30, 0x0E	; 14
     d30:	f1 05       	cpc	r31, r1
     d32:	58 f5       	brcc	.+86     	; 0xd8a <__vector_9+0xb8>
     d34:	e0 58       	subi	r30, 0x80	; 128
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__tablejump2__>
     d3c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <right_cnt>
     d40:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     d44:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     d48:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	a1 09       	sbc	r26, r1
     d50:	b1 09       	sbc	r27, r1
     d52:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <right_cnt>
     d56:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <right_cnt+0x1>
     d5a:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <right_cnt+0x2>
     d5e:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <right_cnt+0x3>
     d62:	13 c0       	rjmp	.+38     	; 0xd8a <__vector_9+0xb8>
     d64:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <right_cnt>
     d68:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     d6c:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     d70:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	a1 1d       	adc	r26, r1
     d78:	b1 1d       	adc	r27, r1
     d7a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <right_cnt>
     d7e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <right_cnt+0x1>
     d82:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <right_cnt+0x2>
     d86:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <right_cnt+0x3>
     d8a:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <right_last_state>
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	3f 91       	pop	r19
     d9c:	2f 91       	pop	r18
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f 90       	pop	r0
     da4:	1f 90       	pop	r1
     da6:	18 95       	reti

00000da8 <encoder_get_left>:
     da8:	f8 94       	cli
     daa:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <left_cnt>
     dae:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     db2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     db6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     dba:	78 94       	sei
     dbc:	08 95       	ret

00000dbe <encoder_get_right>:
     dbe:	f8 94       	cli
     dc0:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <right_cnt>
     dc4:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     dc8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     dcc:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     dd0:	78 94       	sei
     dd2:	08 95       	ret

00000dd4 <encoder_emergency_hit>:
}

bool encoder_emergency_hit(void)
{
	bool hit;
	cli(); /* atomic: read-then-clear */
     dd4:	f8 94       	cli
	hit = emg_flag;
     dd6:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <emg_flag>
	emg_flag = false; // needs to stop all operations in a way that restart can fix it
     dda:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <emg_flag>
	sei();
     dde:	78 94       	sei
	return hit;
     de0:	08 95       	ret

00000de2 <twi_start>:
    }
}

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
     de2:	94 ea       	ldi	r25, 0xA4	; 164
     de4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     de8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     dec:	99 23       	and	r25, r25
     dee:	e4 f7       	brge	.-8      	; 0xde8 <twi_start+0x6>

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
     df0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     df4:	98 7f       	andi	r25, 0xF8	; 248
    if (st != 0x08 && st != 0x10)
     df6:	98 30       	cpi	r25, 0x08	; 8
     df8:	11 f0       	breq	.+4      	; 0xdfe <twi_start+0x1c>
     dfa:	90 31       	cpi	r25, 0x10	; 16
     dfc:	c1 f4       	brne	.+48     	; 0xe2e <twi_start+0x4c>
        return false; /* START / REP START */

    /* load SLA+R/W */
    TWDR = addr_rw;
     dfe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = TW_INT_FLAG | TW_ENABLE;
     e02:	84 e8       	ldi	r24, 0x84	; 132
     e04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     e08:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e0c:	88 23       	and	r24, r24
     e0e:	e4 f7       	brge	.-8      	; 0xe08 <twi_start+0x26>

    /* load SLA+R/W */
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
     e10:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e14:	88 7f       	andi	r24, 0xF8	; 248
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
     e16:	88 31       	cpi	r24, 0x18	; 24
     e18:	21 f0       	breq	.+8      	; 0xe22 <twi_start+0x40>
     e1a:	80 34       	cpi	r24, 0x40	; 64
     e1c:	21 f4       	brne	.+8      	; 0xe26 <twi_start+0x44>
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <twi_start+0x46>
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <twi_start+0x46>
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	89 2f       	mov	r24, r25
     e2a:	81 70       	andi	r24, 0x01	; 1
     e2c:	08 95       	ret
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
    if (st != 0x08 && st != 0x10)
        return false; /* START / REP START */
     e2e:	80 e0       	ldi	r24, 0x00	; 0
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
}
     e30:	08 95       	ret

00000e32 <twi_stop>:

static void twi_stop(void)
{
    TWCR = TW_INT_FLAG | TW_STOP | TW_ENABLE;
     e32:	84 e9       	ldi	r24, 0x94	; 148
     e34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e38:	08 95       	ret

00000e3a <twi_init>:

/*   PUBLIC TWI ROUTINES  */
void twi_init(void)
{
    /* prescaler bits (TWPS1:0) = 0 ? prescaler = 1 */
    TWSR &= ~((1u << TWPS0) | (1u << TWPS1));
     e3a:	e9 eb       	ldi	r30, 0xB9	; 185
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8c 7f       	andi	r24, 0xFC	; 252
     e42:	80 83       	st	Z, r24

    /* choose TWBR such that SCL ? TWI_SCL_HZ                   *
     * TWBR = (F_CPU / SCL - 16) / (2�4^TWPS)                  *
     * At 8MHz with 400kHz I2C: TWBR = (8,000,000/400,000 - 16) / 2 = 4 */
    TWBR = (uint8_t)((F_CPU / TWI_SCL_HZ - 16UL) / 2UL);
     e44:	88 e4       	ldi	r24, 0x48	; 72
     e46:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    {
        /* For 8MHz clock, with 400kHz I2C, TWBR should be 4 */
        TWBR = 4;
    }

    TWCR = TW_ENABLE; /* enable module, no interrupt yet */
     e4a:	84 e0       	ldi	r24, 0x04	; 4
     e4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e50:	08 95       	ret

00000e52 <twi_write>:
}

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	eb 01       	movw	r28, r22
     e5c:	14 2f       	mov	r17, r20
    if (!twi_start((sla << 1) | 0))
     e5e:	88 0f       	add	r24, r24
     e60:	0e 94 f1 06 	call	0xde2	; 0xde2 <twi_start>
     e64:	08 2f       	mov	r16, r24
     e66:	81 11       	cpse	r24, r1
     e68:	19 c0       	rjmp	.+50     	; 0xe9c <twi_write+0x4a>
     e6a:	1d c0       	rjmp	.+58     	; 0xea6 <twi_write+0x54>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
     e6c:	fe 01       	movw	r30, r28
     e6e:	e9 0f       	add	r30, r25
     e70:	f1 1d       	adc	r31, r1
     e72:	80 81       	ld	r24, Z
     e74:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        TWCR = TW_INT_FLAG | TW_ENABLE;
     e78:	84 e8       	ldi	r24, 0x84	; 132
     e7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     e7e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e82:	88 23       	and	r24, r24
     e84:	e4 f7       	brge	.-8      	; 0xe7e <twi_write+0x2c>
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
        TWCR = TW_INT_FLAG | TW_ENABLE;
        twi_wait();
        if (TW_STATUS != 0x28)
     e86:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e8a:	88 7f       	andi	r24, 0xF8	; 248
     e8c:	88 32       	cpi	r24, 0x28	; 40
     e8e:	21 f0       	breq	.+8      	; 0xe98 <twi_write+0x46>
        {
            twi_stop();
     e90:	0e 94 19 07 	call	0xe32	; 0xe32 <twi_stop>
            return false;
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <twi_write+0x54>

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 0))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     e98:	9f 5f       	subi	r25, 0xFF	; 255
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <twi_write+0x4c>
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	91 17       	cp	r25, r17
     ea0:	28 f3       	brcs	.-54     	; 0xe6c <twi_write+0x1a>
        {
            twi_stop();
            return false;
        } /* data ACK */
    }
    twi_stop();
     ea2:	0e 94 19 07 	call	0xe32	; 0xe32 <twi_stop>
    return true;
}
     ea6:	80 2f       	mov	r24, r16
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <twi_read>:

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	8b 01       	movw	r16, r22
     ebc:	c4 2f       	mov	r28, r20
    if (!twi_start((sla << 1) | 1))
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	0e 94 f1 06 	call	0xde2	; 0xde2 <twi_start>
     eca:	d8 2f       	mov	r29, r24
     ecc:	81 11       	cpse	r24, r1
     ece:	2f c0       	rjmp	.+94     	; 0xf2e <twi_read+0x7c>
     ed0:	33 c0       	rjmp	.+102    	; 0xf38 <twi_read+0x86>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
     ed2:	49 2f       	mov	r20, r25
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	2c 2f       	mov	r18, r28
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	21 50       	subi	r18, 0x01	; 1
     edc:	31 09       	sbc	r19, r1
     ede:	42 17       	cp	r20, r18
     ee0:	53 07       	cpc	r21, r19
     ee2:	11 f4       	brne	.+4      	; 0xee8 <twi_read+0x36>
     ee4:	84 e8       	ldi	r24, 0x84	; 132
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <twi_read+0x38>
     ee8:	84 ec       	ldi	r24, 0xC4	; 196
     eea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     eee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ef2:	88 23       	and	r24, r24
     ef4:	e4 f7       	brge	.-8      	; 0xeee <twi_read+0x3c>
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
        twi_wait();
        if ((i < len - 1 && TW_STATUS != 0x50) || /* data with ACK */
     ef6:	42 17       	cp	r20, r18
     ef8:	53 07       	cpc	r21, r19
     efa:	2c f4       	brge	.+10     	; 0xf06 <twi_read+0x54>
     efc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     f00:	88 7f       	andi	r24, 0xF8	; 248
     f02:	80 35       	cpi	r24, 0x50	; 80
     f04:	41 f4       	brne	.+16     	; 0xf16 <twi_read+0x64>
     f06:	42 17       	cp	r20, r18
     f08:	53 07       	cpc	r21, r19
     f0a:	49 f4       	brne	.+18     	; 0xf1e <twi_read+0x6c>
            (i == len - 1 && TW_STATUS != 0x58))  /* data with NACK */
     f0c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     f10:	88 7f       	andi	r24, 0xF8	; 248
     f12:	88 35       	cpi	r24, 0x58	; 88
     f14:	21 f0       	breq	.+8      	; 0xf1e <twi_read+0x6c>
        {
            twi_stop();
     f16:	0e 94 19 07 	call	0xe32	; 0xe32 <twi_stop>
            return false;
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
     f1c:	0d c0       	rjmp	.+26     	; 0xf38 <twi_read+0x86>
        }
        buf[i] = TWDR;
     f1e:	f8 01       	movw	r30, r16
     f20:	e9 0f       	add	r30, r25
     f22:	f1 1d       	adc	r31, r1
     f24:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     f28:	80 83       	st	Z, r24

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 1))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     f2a:	9f 5f       	subi	r25, 0xFF	; 255
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <twi_read+0x7e>
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9c 17       	cp	r25, r28
     f32:	78 f2       	brcs	.-98     	; 0xed2 <twi_read+0x20>
            twi_stop();
            return false;
        }
        buf[i] = TWDR;
    }
    twi_stop();
     f34:	0e 94 19 07 	call	0xe32	; 0xe32 <twi_stop>
    return true;
}
     f38:	8d 2f       	mov	r24, r29
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	08 95       	ret

00000f44 <bno055_write8>:

/*   BNO055 BASIC ACCESS  */
bool bno055_write8(uint8_t reg, uint8_t val)
{
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	00 d0       	rcall	.+0      	; 0xf4a <bno055_write8+0x6>
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
    uint8_t pkt[2] = {reg, val};
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	6a 83       	std	Y+2, r22	; 0x02
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
     f52:	42 e0       	ldi	r20, 0x02	; 2
     f54:	be 01       	movw	r22, r28
     f56:	6f 5f       	subi	r22, 0xFF	; 255
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	88 e2       	ldi	r24, 0x28	; 40
     f5c:	0e 94 29 07 	call	0xe52	; 0xe52 <twi_write>
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <bno055_set_mode>:
}

/*  HIGH-LEVEL HELPERS  */
static bool bno055_set_mode(uint8_t mode)
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
     f6a:	68 2f       	mov	r22, r24
     f6c:	8d e3       	ldi	r24, 0x3D	; 61
     f6e:	0e 94 a2 07 	call	0xf44	; 0xf44 <bno055_write8>
}
     f72:	08 95       	ret

00000f74 <bno055_read8>:
    uint8_t pkt[2] = {reg, val};
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
}

bool bno055_read8(uint8_t reg, uint8_t *val)
{
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	1f 92       	push	r1
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	8b 01       	movw	r16, r22
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	be 01       	movw	r22, r28
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	88 e2       	ldi	r24, 0x28	; 40
     f90:	0e 94 29 07 	call	0xe52	; 0xe52 <twi_write>
     f94:	88 23       	and	r24, r24
     f96:	29 f0       	breq	.+10     	; 0xfa2 <bno055_read8+0x2e>
        return false;
    return twi_read(BNO055_I2C_ADDR, val, 1);
     f98:	41 e0       	ldi	r20, 0x01	; 1
     f9a:	b8 01       	movw	r22, r16
     f9c:	88 e2       	ldi	r24, 0x28	; 40
     f9e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <twi_read>
}
     fa2:	0f 90       	pop	r0
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <bno055_read>:

bool bno055_read(uint8_t reg, uint8_t *buf, uint8_t len)
{
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	1f 92       	push	r1
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	8b 01       	movw	r16, r22
     fc2:	f4 2e       	mov	r15, r20
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	be 01       	movw	r22, r28
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	88 e2       	ldi	r24, 0x28	; 40
     fce:	0e 94 29 07 	call	0xe52	; 0xe52 <twi_write>
     fd2:	88 23       	and	r24, r24
     fd4:	29 f0       	breq	.+10     	; 0xfe0 <bno055_read+0x32>
        return false;
    return twi_read(BNO055_I2C_ADDR, buf, len);
     fd6:	4f 2d       	mov	r20, r15
     fd8:	b8 01       	movw	r22, r16
     fda:	88 e2       	ldi	r24, 0x28	; 40
     fdc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <twi_read>
}
     fe0:	0f 90       	pop	r0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	08 95       	ret

00000fee <bno055_init>:
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
}

bool bno055_init(void)
{
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	1f 92       	push	r1
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
    twi_init();
     ffa:	0e 94 1d 07 	call	0xe3a	; 0xe3a <twi_init>

    /* Ensure sensor is present */
    uint8_t id = 0;
     ffe:	19 82       	std	Y+1, r1	; 0x01
    if (!bno055_read8(0x00, &id) || id != 0xA0)
    1000:	be 01       	movw	r22, r28
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0e 94 ba 07 	call	0xf74	; 0xf74 <bno055_read8>
    100c:	18 2f       	mov	r17, r24
    100e:	88 23       	and	r24, r24
    1010:	51 f1       	breq	.+84     	; 0x1066 <bno055_init+0x78>
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	80 3a       	cpi	r24, 0xA0	; 160
    1016:	31 f5       	brne	.+76     	; 0x1064 <bno055_init+0x76>
        return false; /* CHIP_ID */

    /* Switch to CONFIG, reset, then NDOF */
    bno055_set_mode(0x00); /* CONFIG      */
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <bno055_set_mode>
    101e:	2f e7       	ldi	r18, 0x7F	; 127
    1020:	88 e3       	ldi	r24, 0x38	; 56
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	21 50       	subi	r18, 0x01	; 1
    1026:	80 40       	sbci	r24, 0x00	; 0
    1028:	90 40       	sbci	r25, 0x00	; 0
    102a:	e1 f7       	brne	.-8      	; 0x1024 <bno055_init+0x36>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <bno055_init+0x40>
    102e:	00 00       	nop
    _delay_ms(25);

    bno055_write8(0x3F, 0x20); /* SYS_TRIGGER, reset */
    1030:	60 e2       	ldi	r22, 0x20	; 32
    1032:	8f e3       	ldi	r24, 0x3F	; 63
    1034:	0e 94 a2 07 	call	0xf44	; 0xf44 <bno055_write8>
    1038:	2f ef       	ldi	r18, 0xFF	; 255
    103a:	8c eb       	ldi	r24, 0xBC	; 188
    103c:	9f e1       	ldi	r25, 0x1F	; 31
    103e:	21 50       	subi	r18, 0x01	; 1
    1040:	80 40       	sbci	r24, 0x00	; 0
    1042:	90 40       	sbci	r25, 0x00	; 0
    1044:	e1 f7       	brne	.-8      	; 0x103e <bno055_init+0x50>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <bno055_init+0x5a>
    1048:	00 00       	nop
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
    104a:	8c e0       	ldi	r24, 0x0C	; 12
    104c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <bno055_set_mode>
    1050:	2f ef       	ldi	r18, 0xFF	; 255
    1052:	89 ef       	ldi	r24, 0xF9	; 249
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	21 50       	subi	r18, 0x01	; 1
    1058:	80 40       	sbci	r24, 0x00	; 0
    105a:	90 40       	sbci	r25, 0x00	; 0
    105c:	e1 f7       	brne	.-8      	; 0x1056 <bno055_init+0x68>
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <bno055_init+0x72>
    1060:	00 00       	nop
    _delay_ms(20);
    return true;
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <bno055_init+0x78>
    twi_init();

    /* Ensure sensor is present */
    uint8_t id = 0;
    if (!bno055_read8(0x00, &id) || id != 0xA0)
        return false; /* CHIP_ID */
    1064:	10 e0       	ldi	r17, 0x00	; 0
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
    _delay_ms(20);
    return true;
}
    1066:	81 2f       	mov	r24, r17
    1068:	0f 90       	pop	r0
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	08 95       	ret

00001072 <bno055_get_euler>:

void bno055_get_euler(int16_t *h, int16_t *r, int16_t *p)
{
    1072:	cf 92       	push	r12
    1074:	df 92       	push	r13
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	00 d0       	rcall	.+0      	; 0x1084 <bno055_get_euler+0x12>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <bno055_get_euler+0x14>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <bno055_get_euler+0x16>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	6c 01       	movw	r12, r24
    108e:	7b 01       	movw	r14, r22
    1090:	8a 01       	movw	r16, r20
    uint8_t buf[6];
    if (bno055_read(0x1A, buf, 6))
    1092:	46 e0       	ldi	r20, 0x06	; 6
    1094:	be 01       	movw	r22, r28
    1096:	6f 5f       	subi	r22, 0xFF	; 255
    1098:	7f 4f       	sbci	r23, 0xFF	; 255
    109a:	8a e1       	ldi	r24, 0x1A	; 26
    109c:	0e 94 d7 07 	call	0xfae	; 0xfae <bno055_read>
    10a0:	88 23       	and	r24, r24
    10a2:	d9 f0       	breq	.+54     	; 0x10da <bno055_get_euler+0x68>
    { /* EULER_H_LSB */
        *h = (int16_t)(buf[0] | ((uint16_t)buf[1] << 8));
    10a4:	29 81       	ldd	r18, Y+1	; 0x01
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	98 2f       	mov	r25, r24
    10ac:	88 27       	eor	r24, r24
    10ae:	82 2b       	or	r24, r18
    10b0:	f6 01       	movw	r30, r12
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
        *r = (int16_t)(buf[2] | ((uint16_t)buf[3] << 8));
    10b6:	2b 81       	ldd	r18, Y+3	; 0x03
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	98 2f       	mov	r25, r24
    10be:	88 27       	eor	r24, r24
    10c0:	82 2b       	or	r24, r18
    10c2:	f7 01       	movw	r30, r14
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
        *p = (int16_t)(buf[4] | ((uint16_t)buf[5] << 8));
    10c8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	98 2f       	mov	r25, r24
    10d0:	88 27       	eor	r24, r24
    10d2:	82 2b       	or	r24, r18
    10d4:	f8 01       	movw	r30, r16
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
    }
}
    10da:	26 96       	adiw	r28, 0x06	; 6
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	08 95       	ret

000010f8 <motors_init>:
		RIGHT_PUL_PORT |= _BV(RIGHT_PUL_BIT);
		_delay_us(5);
		RIGHT_PUL_PORT &= ~_BV(RIGHT_PUL_BIT);
		_delay_us(5);
	}
}
    10f8:	87 b1       	in	r24, 0x07	; 7
    10fa:	80 64       	ori	r24, 0x40	; 64
    10fc:	87 b9       	out	0x07, r24	; 7
    10fe:	8a b1       	in	r24, 0x0a	; 10
    1100:	80 64       	ori	r24, 0x40	; 64
    1102:	8a b9       	out	0x0a, r24	; 10
    1104:	84 b1       	in	r24, 0x04	; 4
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	84 b9       	out	0x04, r24	; 4
    110a:	84 b1       	in	r24, 0x04	; 4
    110c:	80 62       	ori	r24, 0x20	; 32
    110e:	84 b9       	out	0x04, r24	; 4
    1110:	8a b1       	in	r24, 0x0a	; 10
    1112:	80 61       	ori	r24, 0x10	; 16
    1114:	8a b9       	out	0x0a, r24	; 10
    1116:	8a b1       	in	r24, 0x0a	; 10
    1118:	80 68       	ori	r24, 0x80	; 128
    111a:	8a b9       	out	0x0a, r24	; 10
    111c:	88 b1       	in	r24, 0x08	; 8
    111e:	80 64       	ori	r24, 0x40	; 64
    1120:	88 b9       	out	0x08, r24	; 8
    1122:	8b b1       	in	r24, 0x0b	; 11
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	8b b9       	out	0x0b, r24	; 11
    1128:	85 b1       	in	r24, 0x05	; 5
    112a:	8f 7b       	andi	r24, 0xBF	; 191
    112c:	85 b9       	out	0x05, r24	; 5
    112e:	85 b1       	in	r24, 0x05	; 5
    1130:	80 62       	ori	r24, 0x20	; 32
    1132:	85 b9       	out	0x05, r24	; 5
    1134:	8b b1       	in	r24, 0x0b	; 11
    1136:	80 61       	ori	r24, 0x10	; 16
    1138:	8b b9       	out	0x0b, r24	; 11
    113a:	8b b1       	in	r24, 0x0b	; 11
    113c:	8f 77       	andi	r24, 0x7F	; 127
    113e:	8b b9       	out	0x0b, r24	; 11
    1140:	90 e4       	ldi	r25, 0x40	; 64
    1142:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1146:	88 e0       	ldi	r24, 0x08	; 8
    1148:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    114c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1150:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1154:	e1 e7       	ldi	r30, 0x71	; 113
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	82 60       	ori	r24, 0x02	; 2
    115c:	80 83       	st	Z, r24
    115e:	ef e6       	ldi	r30, 0x6F	; 111
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	82 60       	ori	r24, 0x02	; 2
    1166:	80 83       	st	Z, r24
    1168:	08 95       	ret

0000116a <__vector_32>:
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <left_edge_cnt>
    1180:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <left_edge_cnt+0x1>
    1184:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <left_edge_cnt+0x2>
    1188:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <left_edge_cnt+0x3>
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	a1 1d       	adc	r26, r1
    1190:	b1 1d       	adc	r27, r1
    1192:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <left_edge_cnt>
    1196:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <left_edge_cnt+0x1>
    119a:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <left_edge_cnt+0x2>
    119e:	b0 93 bf 01 	sts	0x01BF, r27	; 0x8001bf <left_edge_cnt+0x3>
    11a2:	bf 91       	pop	r27
    11a4:	af 91       	pop	r26
    11a6:	9f 91       	pop	r25
    11a8:	8f 91       	pop	r24
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <__vector_17>:
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	0f 92       	push	r0
    11bc:	11 24       	eor	r1, r1
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	af 93       	push	r26
    11c4:	bf 93       	push	r27
    11c6:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <right_edge_cnt>
    11ca:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <right_edge_cnt+0x1>
    11ce:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <right_edge_cnt+0x2>
    11d2:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <right_edge_cnt+0x3>
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	a1 1d       	adc	r26, r1
    11da:	b1 1d       	adc	r27, r1
    11dc:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <right_edge_cnt>
    11e0:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <right_edge_cnt+0x1>
    11e4:	a0 93 ba 01 	sts	0x01BA, r26	; 0x8001ba <right_edge_cnt+0x2>
    11e8:	b0 93 bb 01 	sts	0x01BB, r27	; 0x8001bb <right_edge_cnt+0x3>
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <motors_enable_left>:
    11fe:	88 23       	and	r24, r24
    1200:	21 f0       	breq	.+8      	; 0x120a <motors_enable_left+0xc>
    1202:	85 b1       	in	r24, 0x05	; 5
    1204:	80 64       	ori	r24, 0x40	; 64
    1206:	85 b9       	out	0x05, r24	; 5
    1208:	08 95       	ret
    120a:	85 b1       	in	r24, 0x05	; 5
    120c:	8f 7b       	andi	r24, 0xBF	; 191
    120e:	85 b9       	out	0x05, r24	; 5
    1210:	08 95       	ret

00001212 <motors_enable_right>:
    1212:	88 23       	and	r24, r24
    1214:	21 f0       	breq	.+8      	; 0x121e <motors_enable_right+0xc>
    1216:	8b b1       	in	r24, 0x0b	; 11
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	8b b9       	out	0x0b, r24	; 11
    121c:	08 95       	ret
    121e:	8b b1       	in	r24, 0x0b	; 11
    1220:	8f 77       	andi	r24, 0x7F	; 127
    1222:	8b b9       	out	0x0b, r24	; 11
    1224:	08 95       	ret

00001226 <motors_enable_all>:
    1226:	cf 93       	push	r28
    1228:	c8 2f       	mov	r28, r24
    122a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <motors_enable_left>
    122e:	8c 2f       	mov	r24, r28
    1230:	0e 94 09 09 	call	0x1212	; 0x1212 <motors_enable_right>
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <motors_set_dir_left>:
    1238:	88 23       	and	r24, r24
    123a:	21 f0       	breq	.+8      	; 0x1244 <motors_set_dir_left+0xc>
    123c:	8b b1       	in	r24, 0x0b	; 11
    123e:	80 64       	ori	r24, 0x40	; 64
    1240:	8b b9       	out	0x0b, r24	; 11
    1242:	08 95       	ret
    1244:	8b b1       	in	r24, 0x0b	; 11
    1246:	8f 7b       	andi	r24, 0xBF	; 191
    1248:	8b b9       	out	0x0b, r24	; 11
    124a:	08 95       	ret

0000124c <motors_set_dir_right>:
    124c:	88 23       	and	r24, r24
    124e:	21 f0       	breq	.+8      	; 0x1258 <motors_set_dir_right+0xc>
    1250:	8b b1       	in	r24, 0x0b	; 11
    1252:	80 61       	ori	r24, 0x10	; 16
    1254:	8b b9       	out	0x0b, r24	; 11
    1256:	08 95       	ret
    1258:	8b b1       	in	r24, 0x0b	; 11
    125a:	8f 7e       	andi	r24, 0xEF	; 239
    125c:	8b b9       	out	0x0b, r24	; 11
    125e:	08 95       	ret

00001260 <motors_set_speed_left>:
    1260:	9c 01       	movw	r18, r24
    1262:	a8 ec       	ldi	r26, 0xC8	; 200
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__umulhisi3>
    126a:	2c e3       	ldi	r18, 0x3C	; 60
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodsi4>
    1276:	01 2e       	mov	r0, r17
    1278:	1b e0       	ldi	r17, 0x0B	; 11
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	44 1f       	adc	r20, r20
    1280:	55 1f       	adc	r21, r21
    1282:	1a 95       	dec	r17
    1284:	d1 f7       	brne	.-12     	; 0x127a <motors_set_speed_left+0x1a>
    1286:	10 2d       	mov	r17, r0
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	74 e2       	ldi	r23, 0x24	; 36
    128c:	84 ef       	ldi	r24, 0xF4	; 244
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodsi4>
    1294:	da 01       	movw	r26, r20
    1296:	c9 01       	movw	r24, r18
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	a1 09       	sbc	r26, r1
    129c:	b1 09       	sbc	r27, r1
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	21 e0       	ldi	r18, 0x01	; 1
    12a2:	a2 07       	cpc	r26, r18
    12a4:	b1 05       	cpc	r27, r1
    12a6:	20 f0       	brcs	.+8      	; 0x12b0 <motors_set_speed_left+0x50>
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	9f ef       	ldi	r25, 0xFF	; 255
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    12b4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
    12b8:	e1 e9       	ldi	r30, 0x91	; 145
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	88 7f       	andi	r24, 0xF8	; 248
    12c0:	80 83       	st	Z, r24
    12c2:	80 81       	ld	r24, Z
    12c4:	85 60       	ori	r24, 0x05	; 5
    12c6:	80 83       	st	Z, r24
    12c8:	08 95       	ret

000012ca <motors_set_speed_right>:
    12ca:	9c 01       	movw	r18, r24
    12cc:	a8 ec       	ldi	r26, 0xC8	; 200
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__umulhisi3>
    12d4:	2c e3       	ldi	r18, 0x3C	; 60
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodsi4>
    12e0:	01 2e       	mov	r0, r17
    12e2:	1b e0       	ldi	r17, 0x0B	; 11
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	44 1f       	adc	r20, r20
    12ea:	55 1f       	adc	r21, r21
    12ec:	1a 95       	dec	r17
    12ee:	d1 f7       	brne	.-12     	; 0x12e4 <motors_set_speed_right+0x1a>
    12f0:	10 2d       	mov	r17, r0
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	74 e2       	ldi	r23, 0x24	; 36
    12f6:	84 ef       	ldi	r24, 0xF4	; 244
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__udivmodsi4>
    12fe:	da 01       	movw	r26, r20
    1300:	c9 01       	movw	r24, r18
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	a1 09       	sbc	r26, r1
    1306:	b1 09       	sbc	r27, r1
    1308:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    130c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1310:	e1 e8       	ldi	r30, 0x81	; 129
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	88 7f       	andi	r24, 0xF8	; 248
    1318:	80 83       	st	Z, r24
    131a:	80 81       	ld	r24, Z
    131c:	85 60       	ori	r24, 0x05	; 5
    131e:	80 83       	st	Z, r24
    1320:	08 95       	ret

00001322 <motors_set_speed_both>:
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	eb 01       	movw	r28, r22
    1328:	0e 94 30 09 	call	0x1260	; 0x1260 <motors_set_speed_left>
    132c:	ce 01       	movw	r24, r28
    132e:	0e 94 65 09 	call	0x12ca	; 0x12ca <motors_set_speed_right>
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <motors_stop_all>:

void motors_stop_all(void)
{
	motors_enable_all(false);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	0e 94 13 09 	call	0x1226	; 0x1226 <motors_enable_all>

	TCCR1B &= ~(_BV(CS12) | _BV(CS11) | _BV(CS10)); /* stop Timer-1 */
    133e:	e1 e8       	ldi	r30, 0x81	; 129
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 7f       	andi	r24, 0xF8	; 248
    1346:	80 83       	st	Z, r24
	TCCR3B &= ~(_BV(CS32) | _BV(CS31) | _BV(CS30)); /* stop Timer-3 */
    1348:	e1 e9       	ldi	r30, 0x91	; 145
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	88 7f       	andi	r24, 0xF8	; 248
    1350:	80 83       	st	Z, r24
    1352:	08 95       	ret

00001354 <motors_reset_edge_counts>:
}

/* — API to reset & read counts atomically — */
void motors_reset_edge_counts(void)
{
	uint8_t oldSREG = SREG;
    1354:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1356:	f8 94       	cli
	left_edge_cnt = right_edge_cnt = 0;
    1358:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <right_edge_cnt>
    135c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <right_edge_cnt+0x1>
    1360:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <right_edge_cnt+0x2>
    1364:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <right_edge_cnt+0x3>
    1368:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <left_edge_cnt>
    136c:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <left_edge_cnt+0x1>
    1370:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <left_edge_cnt+0x2>
    1374:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <left_edge_cnt+0x3>
	SREG = oldSREG;
    1378:	8f bf       	out	0x3f, r24	; 63
    137a:	08 95       	ret

0000137c <motors_get_edge_count_left>:
}

uint32_t motors_get_edge_count_left(void)
{
	uint32_t c;
	uint8_t oldSREG = SREG;
    137c:	2f b7       	in	r18, 0x3f	; 63
	cli();
    137e:	f8 94       	cli
	c = left_edge_cnt;
    1380:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <left_edge_cnt>
    1384:	70 91 bd 01 	lds	r23, 0x01BD	; 0x8001bd <left_edge_cnt+0x1>
    1388:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <left_edge_cnt+0x2>
    138c:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <left_edge_cnt+0x3>
	SREG = oldSREG;
    1390:	2f bf       	out	0x3f, r18	; 63
	return c;
}
    1392:	08 95       	ret

00001394 <motors_get_edge_count_right>:

uint32_t motors_get_edge_count_right(void)
{
	uint32_t c;
	uint8_t oldSREG = SREG;
    1394:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1396:	f8 94       	cli
	c = right_edge_cnt;
    1398:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <right_edge_cnt>
    139c:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <right_edge_cnt+0x1>
    13a0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <right_edge_cnt+0x2>
    13a4:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <right_edge_cnt+0x3>
	SREG = oldSREG;
    13a8:	2f bf       	out	0x3f, r18	; 63
	return c;
}
    13aa:	08 95       	ret

000013ac <motors_get_step_count_left>:

uint32_t motors_get_step_count_left(void)
{
	return motors_get_edge_count_left() >> 1;
    13ac:	0e 94 be 09 	call	0x137c	; 0x137c <motors_get_edge_count_left>
    13b0:	96 95       	lsr	r25
    13b2:	87 95       	ror	r24
    13b4:	77 95       	ror	r23
    13b6:	67 95       	ror	r22
}
    13b8:	08 95       	ret

000013ba <motors_get_step_count_right>:

uint32_t motors_get_step_count_right(void)
{
	return motors_get_edge_count_right() >> 1;
    13ba:	0e 94 ca 09 	call	0x1394	; 0x1394 <motors_get_edge_count_right>
    13be:	96 95       	lsr	r25
    13c0:	87 95       	ror	r24
    13c2:	77 95       	ror	r23
    13c4:	67 95       	ror	r22
    13c6:	08 95       	ret

000013c8 <m_usb_init>:
	UEDATX = signals;
	UEDATX = 0;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
    13ce:	80 ea       	ldi	r24, 0xA0	; 160
    13d0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    13d4:	82 e1       	ldi	r24, 0x12	; 18
    13d6:	89 bd       	out	0x29, r24	; 41
    13d8:	09 b4       	in	r0, 0x29	; 41
    13da:	00 fe       	sbrs	r0, 0
    13dc:	fd cf       	rjmp	.-6      	; 0x13d8 <m_usb_init+0x10>
    13de:	80 e9       	ldi	r24, 0x90	; 144
    13e0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    13e4:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    13e8:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <usb_configuration>
    13ec:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <cdc_line_rtsdtr>
    13f0:	8c e0       	ldi	r24, 0x0C	; 12
    13f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    13f6:	78 94       	sei
    13f8:	08 95       	ret

000013fa <m_usb_isconnected>:
    13fa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usb_configuration>
    13fe:	08 95       	ret

00001400 <m_usb_rx_char>:
    1400:	9f b7       	in	r25, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usb_configuration>
    1408:	81 11       	cpse	r24, r1
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <m_usb_rx_char+0x12>
    140c:	9f bf       	out	0x3f, r25	; 63
    140e:	8f ef       	ldi	r24, 0xFF	; 255
    1410:	08 95       	ret
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1418:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    141c:	85 fd       	sbrc	r24, 5
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <m_usb_rx_char+0x26>
    1420:	9f bf       	out	0x3f, r25	; 63
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	08 95       	ret
    1426:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    142a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    142e:	25 fd       	sbrc	r18, 5
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <m_usb_rx_char+0x38>
    1432:	2b e6       	ldi	r18, 0x6B	; 107
    1434:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1438:	9f bf       	out	0x3f, r25	; 63
    143a:	08 95       	ret

0000143c <m_usb_rx_available>:
    143c:	9f b7       	in	r25, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usb_configuration>
    1444:	88 23       	and	r24, r24
    1446:	31 f0       	breq	.+12     	; 0x1454 <m_usb_rx_available+0x18>
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    144e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <m_usb_rx_available+0x1a>
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	9f bf       	out	0x3f, r25	; 63
    1458:	08 95       	ret

0000145a <m_usb_tx_char>:
    145a:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <usb_configuration>
    145e:	99 23       	and	r25, r25
    1460:	e1 f1       	breq	.+120    	; 0x14da <m_usb_tx_char+0x80>
    1462:	9f b7       	in	r25, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	24 e0       	ldi	r18, 0x04	; 4
    1468:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    146c:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <transmit_previous_timeout>
    1470:	22 23       	and	r18, r18
    1472:	49 f0       	breq	.+18     	; 0x1486 <m_usb_tx_char+0x2c>
    1474:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1478:	25 fd       	sbrc	r18, 5
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <m_usb_tx_char+0x28>
    147c:	9f bf       	out	0x3f, r25	; 63
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	08 95       	ret
    1482:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <transmit_previous_timeout>
    1486:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    148a:	37 5e       	subi	r19, 0xE7	; 231
    148c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1490:	25 fd       	sbrc	r18, 5
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <m_usb_tx_char+0x62>
    1494:	9f bf       	out	0x3f, r25	; 63
    1496:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    149a:	39 13       	cpse	r19, r25
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <m_usb_tx_char+0x4e>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <transmit_previous_timeout>
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	08 95       	ret
    14a8:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <usb_configuration>
    14ac:	99 23       	and	r25, r25
    14ae:	b9 f0       	breq	.+46     	; 0x14de <m_usb_tx_char+0x84>
    14b0:	9f b7       	in	r25, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	24 e0       	ldi	r18, 0x04	; 4
    14b6:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    14ba:	e8 cf       	rjmp	.-48     	; 0x148c <m_usb_tx_char+0x32>
    14bc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    14c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14c4:	85 fd       	sbrc	r24, 5
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <m_usb_tx_char+0x74>
    14c8:	8a e3       	ldi	r24, 0x3A	; 58
    14ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14ce:	85 e0       	ldi	r24, 0x05	; 5
    14d0:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <transmit_flush_timer>
    14d4:	9f bf       	out	0x3f, r25	; 63
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	08 95       	ret
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	08 95       	ret
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	08 95       	ret

000014e2 <m_usb_tx_push>:
    14e2:	8f b7       	in	r24, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <transmit_flush_timer>
    14ea:	99 23       	and	r25, r25
    14ec:	41 f0       	breq	.+16     	; 0x14fe <m_usb_tx_push+0x1c>
    14ee:	94 e0       	ldi	r25, 0x04	; 4
    14f0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    14f4:	9a e3       	ldi	r25, 0x3A	; 58
    14f6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14fa:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <transmit_flush_timer>
    14fe:	8f bf       	out	0x3f, r24	; 63
    1500:	08 95       	ret

00001502 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
	uint8_t intbits, t;

	intbits = UDINT;
    1514:	e1 ee       	ldi	r30, 0xE1	; 225
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
	UDINT = 0;
    151a:	10 82       	st	Z, r1
	if (intbits & (1 << EORSTI))
    151c:	83 ff       	sbrs	r24, 3
    151e:	11 c0       	rjmp	.+34     	; 0x1542 <__vector_10+0x40>
	{
		UENUM = 0;
    1520:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
		UECONX = 1;
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		UECFG0X = EP_TYPE_CONTROL;
    152a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    152e:	92 e1       	ldi	r25, 0x12	; 18
    1530:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
		UEIENX = (1 << RXSTPE);
    1534:	98 e0       	ldi	r25, 0x08	; 8
    1536:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
		usb_configuration = 0;
    153a:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <usb_configuration>
		cdc_line_rtsdtr = 0;
    153e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <cdc_line_rtsdtr>
	}
	if (intbits & (1 << SOFI))
    1542:	82 ff       	sbrs	r24, 2
    1544:	13 c0       	rjmp	.+38     	; 0x156c <__vector_10+0x6a>
	{
		if (usb_configuration)
    1546:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usb_configuration>
    154a:	88 23       	and	r24, r24
    154c:	79 f0       	breq	.+30     	; 0x156c <__vector_10+0x6a>
		{
			t = transmit_flush_timer;
    154e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <transmit_flush_timer>
			if (t)
    1552:	88 23       	and	r24, r24
    1554:	59 f0       	breq	.+22     	; 0x156c <__vector_10+0x6a>
			{
				transmit_flush_timer = --t;
    1556:	81 50       	subi	r24, 0x01	; 1
    1558:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <transmit_flush_timer>
				if (!t)
    155c:	81 11       	cpse	r24, r1
    155e:	06 c0       	rjmp	.+12     	; 0x156c <__vector_10+0x6a>
				{
					UENUM = CDC_TX_ENDPOINT;
    1560:	84 e0       	ldi	r24, 0x04	; 4
    1562:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
					UEINTX = 0x3A;
    1566:	8a e3       	ldi	r24, 0x3A	; 58
    1568:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				}
			}
		}
	}
}
    156c:	ff 91       	pop	r31
    156e:	ef 91       	pop	r30
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t desc_length;

	UENUM = 0;
    15a4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	intbits = UEINTX;
    15a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	if (intbits & (1 << RXSTPI))
    15ac:	83 ff       	sbrs	r24, 3
    15ae:	42 c1       	rjmp	.+644    	; 0x1834 <__vector_11+0x2b6>
	{
		bmRequestType = UEDATX;
    15b0:	e1 ef       	ldi	r30, 0xF1	; 241
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	b0 81       	ld	r27, Z
		bRequest = UEDATX;
    15b6:	a0 81       	ld	r26, Z
		wValue = UEDATX;
    15b8:	20 81       	ld	r18, Z
		wValue |= (UEDATX << 8);
    15ba:	80 81       	ld	r24, Z
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	98 2f       	mov	r25, r24
    15c0:	88 27       	eor	r24, r24
    15c2:	82 2b       	or	r24, r18
		wIndex = UEDATX;
    15c4:	40 81       	ld	r20, Z
		wIndex |= (UEDATX << 8);
    15c6:	20 81       	ld	r18, Z
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	32 2f       	mov	r19, r18
    15cc:	22 27       	eor	r18, r18
    15ce:	b9 01       	movw	r22, r18
    15d0:	64 2b       	or	r22, r20
		wLength = UEDATX;
    15d2:	40 81       	ld	r20, Z
		wLength |= (UEDATX << 8);
    15d4:	20 81       	ld	r18, Z
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	32 2f       	mov	r19, r18
    15da:	22 27       	eor	r18, r18
    15dc:	f9 01       	movw	r30, r18
    15de:	e4 2b       	or	r30, r20
    15e0:	af 01       	movw	r20, r30
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
    15e2:	22 ef       	ldi	r18, 0xF2	; 242
    15e4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		if (bRequest == GET_DESCRIPTOR)
    15e8:	a6 30       	cpi	r26, 0x06	; 6
    15ea:	09 f0       	breq	.+2      	; 0x15ee <__vector_11+0x70>
    15ec:	51 c0       	rjmp	.+162    	; 0x1690 <__vector_11+0x112>
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	2d e4       	ldi	r18, 0x4D	; 77
    15f2:	32 e0       	ldi	r19, 0x02	; 2
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
			{
				if (i >= NUM_DESC_LIST)
    15f4:	a6 30       	cpi	r26, 0x06	; 6
    15f6:	20 f0       	brcs	.+8      	; 0x1600 <__vector_11+0x82>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
    15f8:	81 e2       	ldi	r24, 0x21	; 33
    15fa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					return;
    15fe:	1d c1       	rjmp	.+570    	; 0x183a <__vector_11+0x2bc>
				}
				desc_val = pgm_read_word(list);
    1600:	f9 01       	movw	r30, r18
    1602:	c5 91       	lpm	r28, Z+
    1604:	d4 91       	lpm	r29, Z
				if (desc_val != wValue)
    1606:	8c 17       	cp	r24, r28
    1608:	9d 07       	cpc	r25, r29
    160a:	19 f0       	breq	.+6      	; 0x1612 <__vector_11+0x94>
				{
					list += sizeof(struct descriptor_list_struct);
    160c:	29 5f       	subi	r18, 0xF9	; 249
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
    1610:	1c c0       	rjmp	.+56     	; 0x164a <__vector_11+0xcc>
				}
				list += 2;
    1612:	f9 01       	movw	r30, r18
    1614:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1616:	c5 91       	lpm	r28, Z+
    1618:	d4 91       	lpm	r29, Z
				if (desc_val != wIndex)
    161a:	6c 17       	cp	r22, r28
    161c:	7d 07       	cpc	r23, r29
    161e:	19 f0       	breq	.+6      	; 0x1626 <__vector_11+0xa8>
				{
					list += sizeof(struct descriptor_list_struct) - 2;
    1620:	29 5f       	subi	r18, 0xF9	; 249
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
    1624:	12 c0       	rjmp	.+36     	; 0x164a <__vector_11+0xcc>
				}
				list += 2;
    1626:	f9 01       	movw	r30, r18
    1628:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    162a:	85 91       	lpm	r24, Z+
    162c:	94 91       	lpm	r25, Z
				list += 2;
    162e:	f9 01       	movw	r30, r18
    1630:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1632:	64 91       	lpm	r22, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1634:	9a 01       	movw	r18, r20
    1636:	4f 3f       	cpi	r20, 0xFF	; 255
    1638:	51 05       	cpc	r21, r1
    163a:	19 f0       	breq	.+6      	; 0x1642 <__vector_11+0xc4>
    163c:	10 f0       	brcs	.+4      	; 0x1642 <__vector_11+0xc4>
    163e:	2f ef       	ldi	r18, 0xFF	; 255
    1640:	30 e0       	ldi	r19, 0x00	; 0
			if (len > desc_length)
    1642:	62 17       	cp	r22, r18
    1644:	20 f0       	brcs	.+8      	; 0x164e <__vector_11+0xd0>
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1646:	62 2f       	mov	r22, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <__vector_11+0xd0>
		wLength |= (UEDATX << 8);
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
		if (bRequest == GET_DESCRIPTOR)
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
    164a:	af 5f       	subi	r26, 0xFF	; 255
				list += 2;
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
    164c:	d3 cf       	rjmp	.-90     	; 0x15f4 <__vector_11+0x76>
			do
			{
				// wait for host ready for IN packet
				do
				{
					i = UEINTX;
    164e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
    1652:	32 2f       	mov	r19, r18
    1654:	35 70       	andi	r19, 0x05	; 5
    1656:	d9 f3       	breq	.-10     	; 0x164e <__vector_11+0xd0>
				if (i & (1 << RXOUTI))
    1658:	22 fd       	sbrc	r18, 2
    165a:	ef c0       	rjmp	.+478    	; 0x183a <__vector_11+0x2bc>
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    165c:	36 2f       	mov	r19, r22
    165e:	61 31       	cpi	r22, 0x11	; 17
    1660:	08 f0       	brcs	.+2      	; 0x1664 <__vector_11+0xe6>
    1662:	30 e1       	ldi	r19, 0x10	; 16
				for (i = n; i; i--)
    1664:	23 2f       	mov	r18, r19
    1666:	09 c0       	rjmp	.+18     	; 0x167a <__vector_11+0xfc>
				{
					UEDATX = pgm_read_byte(desc_addr++);
    1668:	ac 01       	movw	r20, r24
    166a:	4f 5f       	subi	r20, 0xFF	; 255
    166c:	5f 4f       	sbci	r21, 0xFF	; 255
    166e:	fc 01       	movw	r30, r24
    1670:	84 91       	lpm	r24, Z
    1672:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
    1676:	21 50       	subi	r18, 0x01	; 1
				{
					UEDATX = pgm_read_byte(desc_addr++);
    1678:	ca 01       	movw	r24, r20
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
    167a:	21 11       	cpse	r18, r1
    167c:	f5 cf       	rjmp	.-22     	; 0x1668 <__vector_11+0xea>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    167e:	63 1b       	sub	r22, r19
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1680:	2e ef       	ldi	r18, 0xFE	; 254
    1682:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1686:	61 11       	cpse	r22, r1
    1688:	e2 cf       	rjmp	.-60     	; 0x164e <__vector_11+0xd0>
    168a:	30 31       	cpi	r19, 0x10	; 16
    168c:	01 f3       	breq	.-64     	; 0x164e <__vector_11+0xd0>
    168e:	d5 c0       	rjmp	.+426    	; 0x183a <__vector_11+0x2bc>
			return;
		}
		if (bRequest == SET_ADDRESS)
    1690:	a5 30       	cpi	r26, 0x05	; 5
    1692:	59 f4       	brne	.+22     	; 0x16aa <__vector_11+0x12c>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1694:	2e ef       	ldi	r18, 0xFE	; 254
    1696:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    169a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    169e:	20 ff       	sbrs	r18, 0
    16a0:	fc cf       	rjmp	.-8      	; 0x169a <__vector_11+0x11c>
		}
		if (bRequest == SET_ADDRESS)
		{
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1 << ADDEN);
    16a2:	80 68       	ori	r24, 0x80	; 128
    16a4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
			return;
    16a8:	c8 c0       	rjmp	.+400    	; 0x183a <__vector_11+0x2bc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0)
    16aa:	a9 30       	cpi	r26, 0x09	; 9
    16ac:	79 f5       	brne	.+94     	; 0x170c <__vector_11+0x18e>
    16ae:	b1 11       	cpse	r27, r1
    16b0:	2d c0       	rjmp	.+90     	; 0x170c <__vector_11+0x18e>
		{
			usb_configuration = wValue;
    16b2:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <usb_configuration>
			cdc_line_rtsdtr = 0;
    16b6:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <cdc_line_rtsdtr>
			transmit_flush_timer = 0;
    16ba:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <transmit_flush_timer>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    16be:	8e ef       	ldi	r24, 0xFE	; 254
    16c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
    16c4:	81 e0       	ldi	r24, 0x01	; 1
		{
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    16c6:	26 ef       	ldi	r18, 0xF6	; 246
    16c8:	32 e0       	ldi	r19, 0x02	; 2
			for (i = 1; i < 5; i++)
    16ca:	18 c0       	rjmp	.+48     	; 0x16fc <__vector_11+0x17e>
			{
				UENUM = i;
    16cc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				en = pgm_read_byte(cfg++);
    16d0:	a9 01       	movw	r20, r18
    16d2:	4f 5f       	subi	r20, 0xFF	; 255
    16d4:	5f 4f       	sbci	r21, 0xFF	; 255
    16d6:	f9 01       	movw	r30, r18
    16d8:	94 91       	lpm	r25, Z
				UECONX = en;
    16da:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				if (en)
    16de:	99 23       	and	r25, r25
    16e0:	59 f0       	breq	.+22     	; 0x16f8 <__vector_11+0x17a>
				{
					UECFG0X = pgm_read_byte(cfg++);
    16e2:	fa 01       	movw	r30, r20
    16e4:	44 91       	lpm	r20, Z
    16e6:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
					UECFG1X = pgm_read_byte(cfg++);
    16ea:	31 96       	adiw	r30, 0x01	; 1
    16ec:	e4 91       	lpm	r30, Z
    16ee:	2d 5f       	subi	r18, 0xFD	; 253
    16f0:	3f 4f       	sbci	r19, 0xFF	; 255
    16f2:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <__vector_11+0x17c>
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
			{
				UENUM = i;
				en = pgm_read_byte(cfg++);
    16f8:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
    16fa:	8f 5f       	subi	r24, 0xFF	; 255
    16fc:	85 30       	cpi	r24, 0x05	; 5
    16fe:	30 f3       	brcs	.-52     	; 0x16cc <__vector_11+0x14e>
				{
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
			UERST = 0x1E;
    1700:	ea ee       	ldi	r30, 0xEA	; 234
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8e e1       	ldi	r24, 0x1E	; 30
    1706:	80 83       	st	Z, r24
			UERST = 0;
    1708:	10 82       	st	Z, r1
			return;
    170a:	97 c0       	rjmp	.+302    	; 0x183a <__vector_11+0x2bc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
    170c:	a8 30       	cpi	r26, 0x08	; 8
    170e:	71 f4       	brne	.+28     	; 0x172c <__vector_11+0x1ae>
    1710:	b0 38       	cpi	r27, 0x80	; 128
    1712:	61 f4       	brne	.+24     	; 0x172c <__vector_11+0x1ae>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    1714:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1718:	80 ff       	sbrs	r24, 0
    171a:	fc cf       	rjmp	.-8      	; 0x1714 <__vector_11+0x196>
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
		{
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    171c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usb_configuration>
    1720:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1724:	8e ef       	ldi	r24, 0xFE	; 254
    1726:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    172a:	87 c0       	rjmp	.+270    	; 0x183a <__vector_11+0x2bc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
    172c:	a1 32       	cpi	r26, 0x21	; 33
    172e:	a9 f4       	brne	.+42     	; 0x175a <__vector_11+0x1dc>
    1730:	b1 3a       	cpi	r27, 0xA1	; 161
    1732:	99 f4       	brne	.+38     	; 0x175a <__vector_11+0x1dc>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    1734:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1738:	80 ff       	sbrs	r24, 0
    173a:	fc cf       	rjmp	.-8      	; 0x1734 <__vector_11+0x1b6>
    173c:	e0 e0       	ldi	r30, 0x00	; 0
    173e:	f1 e0       	ldi	r31, 0x01	; 1
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	05 c0       	rjmp	.+10     	; 0x174e <__vector_11+0x1d0>
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				UEDATX = *p++;
    1744:	90 81       	ld	r25, Z
    1746:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    174a:	8f 5f       	subi	r24, 0xFF	; 255
			{
				UEDATX = *p++;
    174c:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    174e:	87 30       	cpi	r24, 0x07	; 7
    1750:	c8 f3       	brcs	.-14     	; 0x1744 <__vector_11+0x1c6>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1752:	8e ef       	ldi	r24, 0xFE	; 254
    1754:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1758:	70 c0       	rjmp	.+224    	; 0x183a <__vector_11+0x2bc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
    175a:	a0 32       	cpi	r26, 0x20	; 32
    175c:	c1 f4       	brne	.+48     	; 0x178e <__vector_11+0x210>
    175e:	b1 32       	cpi	r27, 0x21	; 33
    1760:	b1 f4       	brne	.+44     	; 0x178e <__vector_11+0x210>
{
	UEINTX = ~(1 << TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1 << RXOUTI)))
    1762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1766:	82 ff       	sbrs	r24, 2
    1768:	fc cf       	rjmp	.-8      	; 0x1762 <__vector_11+0x1e4>
    176a:	e0 e0       	ldi	r30, 0x00	; 0
    176c:	f1 e0       	ldi	r31, 0x01	; 1
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	05 c0       	rjmp	.+10     	; 0x177c <__vector_11+0x1fe>
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				*p++ = UEDATX;
    1772:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1776:	90 83       	st	Z, r25
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1778:	8f 5f       	subi	r24, 0xFF	; 255
			{
				*p++ = UEDATX;
    177a:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    177c:	87 30       	cpi	r24, 0x07	; 7
    177e:	c8 f3       	brcs	.-14     	; 0x1772 <__vector_11+0x1f4>
	while (!(UEINTX & (1 << RXOUTI)))
		;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1 << RXOUTI);
    1780:	e8 ee       	ldi	r30, 0xE8	; 232
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8b ef       	ldi	r24, 0xFB	; 251
    1786:	80 83       	st	Z, r24
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1788:	8e ef       	ldi	r24, 0xFE	; 254
    178a:	80 83       	st	Z, r24
    178c:	56 c0       	rjmp	.+172    	; 0x183a <__vector_11+0x2bc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21)
    178e:	a2 32       	cpi	r26, 0x22	; 34
    1790:	61 f4       	brne	.+24     	; 0x17aa <__vector_11+0x22c>
    1792:	b1 32       	cpi	r27, 0x21	; 33
    1794:	51 f4       	brne	.+20     	; 0x17aa <__vector_11+0x22c>
		{
			cdc_line_rtsdtr = wValue;
    1796:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <cdc_line_rtsdtr>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    179a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    179e:	80 ff       	sbrs	r24, 0
    17a0:	fc cf       	rjmp	.-8      	; 0x179a <__vector_11+0x21c>
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    17a2:	8e ef       	ldi	r24, 0xFE	; 254
    17a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    17a8:	48 c0       	rjmp	.+144    	; 0x183a <__vector_11+0x2bc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS)
    17aa:	a1 11       	cpse	r26, r1
    17ac:	1b c0       	rjmp	.+54     	; 0x17e4 <__vector_11+0x266>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    17ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    17b2:	80 ff       	sbrs	r24, 0
    17b4:	fc cf       	rjmp	.-8      	; 0x17ae <__vector_11+0x230>
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
    17b6:	b2 38       	cpi	r27, 0x82	; 130
    17b8:	61 f4       	brne	.+24     	; 0x17d2 <__vector_11+0x254>
			{
				UENUM = wIndex;
    17ba:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (UECONX & (1 << STALLRQ))
    17be:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    17c2:	85 fd       	sbrc	r24, 5
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <__vector_11+0x24c>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <__vector_11+0x24e>
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
			{
				UENUM = wIndex;
				if (UECONX & (1 << STALLRQ))
					i = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
				UENUM = 0;
    17cc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <__vector_11+0x256>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
    17d2:	80 e0       	ldi	r24, 0x00	; 0
				if (UECONX & (1 << STALLRQ))
					i = 1;
				UENUM = 0;
			}
#endif
			UEDATX = i;
    17d4:	e1 ef       	ldi	r30, 0xF1	; 241
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 83       	st	Z, r24
			UEDATX = 0;
    17da:	10 82       	st	Z, r1
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    17dc:	8e ef       	ldi	r24, 0xFE	; 254
    17de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    17e2:	2b c0       	rjmp	.+86     	; 0x183a <__vector_11+0x2bc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE) && bmRequestType == 0x02 && wValue == 0)
    17e4:	a1 30       	cpi	r26, 0x01	; 1
    17e6:	11 f0       	breq	.+4      	; 0x17ec <__vector_11+0x26e>
    17e8:	a3 30       	cpi	r26, 0x03	; 3
    17ea:	21 f5       	brne	.+72     	; 0x1834 <__vector_11+0x2b6>
    17ec:	b2 30       	cpi	r27, 0x02	; 2
    17ee:	11 f5       	brne	.+68     	; 0x1834 <__vector_11+0x2b6>
    17f0:	89 2b       	or	r24, r25
    17f2:	01 f5       	brne	.+64     	; 0x1834 <__vector_11+0x2b6>
		{
			i = wIndex & 0x7F;
    17f4:	26 2f       	mov	r18, r22
    17f6:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT)
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	82 0f       	add	r24, r18
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	d0 f4       	brcc	.+52     	; 0x1834 <__vector_11+0x2b6>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1800:	8e ef       	ldi	r24, 0xFE	; 254
    1802:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		{
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT)
			{
				usb_send_in();
				UENUM = i;
    1806:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (bRequest == SET_FEATURE)
    180a:	a3 30       	cpi	r26, 0x03	; 3
    180c:	21 f4       	brne	.+8      	; 0x1816 <__vector_11+0x298>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN);
    180e:	81 e2       	ldi	r24, 0x21	; 33
    1810:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1814:	12 c0       	rjmp	.+36     	; 0x183a <__vector_11+0x2bc>
				}
				else
				{
					UECONX = (1 << STALLRQC) | (1 << RSTDT) | (1 << EPEN);
    1816:	89 e1       	ldi	r24, 0x19	; 25
    1818:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					UERST = (1 << i);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <__vector_11+0x2a8>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	2a 95       	dec	r18
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <__vector_11+0x2a4>
    182a:	ea ee       	ldi	r30, 0xEA	; 234
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 83       	st	Z, r24
					UERST = 0;
    1830:	10 82       	st	Z, r1
    1832:	03 c0       	rjmp	.+6      	; 0x183a <__vector_11+0x2bc>
				return;
			}
		}
#endif
	}
	UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
    1834:	81 e2       	ldi	r24, 0x21	; 33
    1836:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
}
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	bf 91       	pop	r27
    1844:	af 91       	pop	r26
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	7f 91       	pop	r23
    184c:	6f 91       	pop	r22
    184e:	5f 91       	pop	r21
    1850:	4f 91       	pop	r20
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	0f 90       	pop	r0
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	0f 90       	pop	r0
    185c:	1f 90       	pop	r1
    185e:	18 95       	reti

00001860 <print_P>:

// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	fc 01       	movw	r30, r24
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
    1868:	8f 01       	movw	r16, r30
    186a:	0f 5f       	subi	r16, 0xFF	; 255
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
    186e:	c4 91       	lpm	r28, Z
		if (!c)
    1870:	cc 23       	and	r28, r28
    1872:	51 f0       	breq	.+20     	; 0x1888 <print_P+0x28>
			break;
		if (c == '\n')
    1874:	ca 30       	cpi	r28, 0x0A	; 10
    1876:	19 f4       	brne	.+6      	; 0x187e <print_P+0x1e>
			usb_tx_char('\r');
    1878:	8d e0       	ldi	r24, 0x0D	; 13
    187a:	0e 94 2d 0a 	call	0x145a	; 0x145a <m_usb_tx_char>
		usb_tx_char(c);
    187e:	8c 2f       	mov	r24, r28
    1880:	0e 94 2d 0a 	call	0x145a	; 0x145a <m_usb_tx_char>
{
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
    1884:	f8 01       	movw	r30, r16
		if (!c)
			break;
		if (c == '\n')
			usb_tx_char('\r');
		usb_tx_char(c);
	}
    1886:	f0 cf       	rjmp	.-32     	; 0x1868 <print_P+0x8>
}
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	08 95       	ret

00001890 <profiler_init>:

/*---------------------------- LINEAR PROFILE API ----------------------------*/
void profiler_init(float distance_mm,
				   float max_vel_mm_s,
				   float acc_mm_s2)
{
    1890:	ef 92       	push	r14
    1892:	ff 92       	push	r15
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
	target_dist_mm = distance_mm;
    1898:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <target_dist_mm>
    189c:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <target_dist_mm+0x1>
    18a0:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <target_dist_mm+0x2>
    18a4:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <target_dist_mm+0x3>
	lin_max_vel = max_vel_mm_s;
    18a8:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <lin_max_vel>
    18ac:	30 93 ec 01 	sts	0x01EC, r19	; 0x8001ec <lin_max_vel+0x1>
    18b0:	40 93 ed 01 	sts	0x01ED, r20	; 0x8001ed <lin_max_vel+0x2>
    18b4:	50 93 ee 01 	sts	0x01EE, r21	; 0x8001ee <lin_max_vel+0x3>
	lin_acc = acc_mm_s2;
    18b8:	e0 92 e7 01 	sts	0x01E7, r14	; 0x8001e7 <lin_acc>
    18bc:	f0 92 e8 01 	sts	0x01E8, r15	; 0x8001e8 <lin_acc+0x1>
    18c0:	00 93 e9 01 	sts	0x01E9, r16	; 0x8001e9 <lin_acc+0x2>
    18c4:	10 93 ea 01 	sts	0x01EA, r17	; 0x8001ea <lin_acc+0x3>

	/* compute encoder counts per mm */
	float circ = WHEEL_DIAMETER_MM * M_PI;
	lin_counts_per_mm = (4.0f * (float)ENCODER_PPR) / circ;
    18c8:	84 ee       	ldi	r24, 0xE4	; 228
    18ca:	97 eb       	ldi	r25, 0xB7	; 183
    18cc:	ab ec       	ldi	r26, 0xCB	; 203
    18ce:	b0 e4       	ldi	r27, 0x40	; 64
    18d0:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <lin_counts_per_mm>
    18d4:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <lin_counts_per_mm+0x1>
    18d8:	a0 93 e5 01 	sts	0x01E5, r26	; 0x8001e5 <lin_counts_per_mm+0x2>
    18dc:	b0 93 e6 01 	sts	0x01E6, r27	; 0x8001e6 <lin_counts_per_mm+0x3>

	/* reset & snapshot encoder */
	motors_reset_edge_counts();
    18e0:	0e 94 aa 09 	call	0x1354	; 0x1354 <motors_reset_edge_counts>
	lin_start_steps = motors_get_step_count_left();
    18e4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <motors_get_step_count_left>
    18e8:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <lin_start_steps>
    18ec:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <lin_start_steps+0x1>
    18f0:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <lin_start_steps+0x2>
    18f4:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <lin_start_steps+0x3>

	lin_running = true;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <lin_running>
}
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	08 95       	ret

00001908 <profiler_update>:

void profiler_update(void)
{
    1908:	4f 92       	push	r4
    190a:	5f 92       	push	r5
    190c:	6f 92       	push	r6
    190e:	7f 92       	push	r7
    1910:	8f 92       	push	r8
    1912:	9f 92       	push	r9
    1914:	af 92       	push	r10
    1916:	bf 92       	push	r11
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	2c 97       	sbiw	r28, 0x0c	; 12
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
	if (!lin_running)
    1934:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <lin_running>
    1938:	88 23       	and	r24, r24
    193a:	09 f4       	brne	.+2      	; 0x193e <profiler_update+0x36>
    193c:	bf c0       	rjmp	.+382    	; 0x1abc <profiler_update+0x1b4>
		return;

	/* distance so far [mm] */
	uint32_t steps = motors_get_step_count_left() - lin_start_steps;
    193e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <motors_get_step_count_left>
    1942:	c0 90 df 01 	lds	r12, 0x01DF	; 0x8001df <lin_start_steps>
    1946:	d0 90 e0 01 	lds	r13, 0x01E0	; 0x8001e0 <lin_start_steps+0x1>
    194a:	e0 90 e1 01 	lds	r14, 0x01E1	; 0x8001e1 <lin_start_steps+0x2>
    194e:	f0 90 e2 01 	lds	r15, 0x01E2	; 0x8001e2 <lin_start_steps+0x3>
    1952:	6c 19       	sub	r22, r12
    1954:	7d 09       	sbc	r23, r13
    1956:	8e 09       	sbc	r24, r14
    1958:	9f 09       	sbc	r25, r15
	float dist_mm = steps / lin_counts_per_mm;
    195a:	0e 94 47 10 	call	0x208e	; 0x208e <__floatunsisf>
    195e:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <lin_counts_per_mm>
    1962:	30 91 e4 01 	lds	r19, 0x01E4	; 0x8001e4 <lin_counts_per_mm+0x1>
    1966:	40 91 e5 01 	lds	r20, 0x01E5	; 0x8001e5 <lin_counts_per_mm+0x2>
    196a:	50 91 e6 01 	lds	r21, 0x01E6	; 0x8001e6 <lin_counts_per_mm+0x3>
    196e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divsf3>
    1972:	4b 01       	movw	r8, r22
    1974:	5c 01       	movw	r10, r24

	/* trapezoid breakpoints */
	float d_acc = (lin_max_vel * lin_max_vel) / (2.0f * lin_acc);
    1976:	c0 90 eb 01 	lds	r12, 0x01EB	; 0x8001eb <lin_max_vel>
    197a:	d0 90 ec 01 	lds	r13, 0x01EC	; 0x8001ec <lin_max_vel+0x1>
    197e:	e0 90 ed 01 	lds	r14, 0x01ED	; 0x8001ed <lin_max_vel+0x2>
    1982:	f0 90 ee 01 	lds	r15, 0x01EE	; 0x8001ee <lin_max_vel+0x3>
    1986:	a7 01       	movw	r20, r14
    1988:	96 01       	movw	r18, r12
    198a:	c7 01       	movw	r24, r14
    198c:	b6 01       	movw	r22, r12
    198e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1992:	2b 01       	movw	r4, r22
    1994:	3c 01       	movw	r6, r24
    1996:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <lin_acc>
    199a:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <lin_acc+0x1>
    199e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <lin_acc+0x2>
    19a2:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <lin_acc+0x3>
    19a6:	9b 01       	movw	r18, r22
    19a8:	ac 01       	movw	r20, r24
    19aa:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__addsf3>
    19ae:	6d 83       	std	Y+5, r22	; 0x05
    19b0:	7e 83       	std	Y+6, r23	; 0x06
    19b2:	8f 83       	std	Y+7, r24	; 0x07
    19b4:	98 87       	std	Y+8, r25	; 0x08
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	c3 01       	movw	r24, r6
    19bc:	b2 01       	movw	r22, r4
    19be:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divsf3>
    19c2:	69 83       	std	Y+1, r22	; 0x01
    19c4:	7a 83       	std	Y+2, r23	; 0x02
    19c6:	8b 83       	std	Y+3, r24	; 0x03
    19c8:	9c 83       	std	Y+4, r25	; 0x04
	float d_decel = d_acc;
	float cruise_end = target_dist_mm - d_decel;
    19ca:	40 90 ef 01 	lds	r4, 0x01EF	; 0x8001ef <target_dist_mm>
    19ce:	50 90 f0 01 	lds	r5, 0x01F0	; 0x8001f0 <target_dist_mm+0x1>
    19d2:	60 90 f1 01 	lds	r6, 0x01F1	; 0x8001f1 <target_dist_mm+0x2>
    19d6:	70 90 f2 01 	lds	r7, 0x01F2	; 0x8001f2 <target_dist_mm+0x3>
    19da:	9b 01       	movw	r18, r22
    19dc:	ac 01       	movw	r20, r24
    19de:	c3 01       	movw	r24, r6
    19e0:	b2 01       	movw	r22, r4
    19e2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__subsf3>
    19e6:	69 87       	std	Y+9, r22	; 0x09
    19e8:	7a 87       	std	Y+10, r23	; 0x0a
    19ea:	8b 87       	std	Y+11, r24	; 0x0b
    19ec:	9c 87       	std	Y+12, r25	; 0x0c

	/* compute desired v [mm/s] */
	float v;
	if (dist_mm < d_acc)
    19ee:	29 81       	ldd	r18, Y+1	; 0x01
    19f0:	3a 81       	ldd	r19, Y+2	; 0x02
    19f2:	4b 81       	ldd	r20, Y+3	; 0x03
    19f4:	5c 81       	ldd	r21, Y+4	; 0x04
    19f6:	c5 01       	movw	r24, r10
    19f8:	b4 01       	movw	r22, r8
    19fa:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__cmpsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	6c f4       	brge	.+26     	; 0x1a1c <profiler_update+0x114>
	{
		v = sqrtf(2.0f * lin_acc * dist_mm);
    1a02:	2d 81       	ldd	r18, Y+5	; 0x05
    1a04:	3e 81       	ldd	r19, Y+6	; 0x06
    1a06:	4f 81       	ldd	r20, Y+7	; 0x07
    1a08:	58 85       	ldd	r21, Y+8	; 0x08
    1a0a:	c5 01       	movw	r24, r10
    1a0c:	b4 01       	movw	r22, r8
    1a0e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1a12:	0e 94 71 11 	call	0x22e2	; 0x22e2 <sqrt>
    1a16:	6b 01       	movw	r12, r22
    1a18:	7c 01       	movw	r14, r24
    1a1a:	1c c0       	rjmp	.+56     	; 0x1a54 <profiler_update+0x14c>
	}
	else if (dist_mm < cruise_end)
    1a1c:	29 85       	ldd	r18, Y+9	; 0x09
    1a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a20:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a22:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a24:	c5 01       	movw	r24, r10
    1a26:	b4 01       	movw	r22, r8
    1a28:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__cmpsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	94 f0       	brlt	.+36     	; 0x1a54 <profiler_update+0x14c>
	{
		v = lin_max_vel;
	}
	else
	{
		float rem = target_dist_mm - dist_mm;
    1a30:	a5 01       	movw	r20, r10
    1a32:	94 01       	movw	r18, r8
    1a34:	c3 01       	movw	r24, r6
    1a36:	b2 01       	movw	r22, r4
    1a38:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__subsf3>
    1a3c:	9b 01       	movw	r18, r22
    1a3e:	ac 01       	movw	r20, r24
		v = sqrtf(2.0f * lin_acc * rem);
    1a40:	6d 81       	ldd	r22, Y+5	; 0x05
    1a42:	7e 81       	ldd	r23, Y+6	; 0x06
    1a44:	8f 81       	ldd	r24, Y+7	; 0x07
    1a46:	98 85       	ldd	r25, Y+8	; 0x08
    1a48:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1a4c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <sqrt>
    1a50:	6b 01       	movw	r12, r22
    1a52:	7c 01       	movw	r14, r24
	}

	/* convert to RPM */
	float revs_s = v / (WHEEL_DIAMETER_MM * M_PI);
    1a54:	23 e6       	ldi	r18, 0x63	; 99
    1a56:	34 e1       	ldi	r19, 0x14	; 20
    1a58:	4d e1       	ldi	r20, 0x1D	; 29
    1a5a:	54 e4       	ldi	r21, 0x44	; 68
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	b6 01       	movw	r22, r12
    1a60:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divsf3>
	uint16_t rpm = (uint16_t)(revs_s * 60.0f + 0.5f);
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e7       	ldi	r20, 0x70	; 112
    1a6a:	52 e4       	ldi	r21, 0x42	; 66
    1a6c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__addsf3>
    1a7c:	0e 94 18 10 	call	0x2030	; 0x2030 <__fixunssfsi>
    1a80:	6b 01       	movw	r12, r22
    1a82:	7c 01       	movw	r14, r24

	/* command both wheels forward */
	motors_set_dir_left(true);
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	0e 94 1c 09 	call	0x1238	; 0x1238 <motors_set_dir_left>
	motors_set_dir_right(true);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	0e 94 26 09 	call	0x124c	; 0x124c <motors_set_dir_right>
	motors_set_speed_both(rpm, rpm);
    1a90:	b6 01       	movw	r22, r12
    1a92:	c6 01       	movw	r24, r12
    1a94:	0e 94 91 09 	call	0x1322	; 0x1322 <motors_set_speed_both>

	/* done? */
	if (dist_mm >= target_dist_mm)
    1a98:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <target_dist_mm>
    1a9c:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <target_dist_mm+0x1>
    1aa0:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <target_dist_mm+0x2>
    1aa4:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <target_dist_mm+0x3>
    1aa8:	c5 01       	movw	r24, r10
    1aaa:	b4 01       	movw	r22, r8
    1aac:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__gesf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	24 f0       	brlt	.+8      	; 0x1abc <profiler_update+0x1b4>
	{
		motors_stop_all();
    1ab4:	0e 94 9c 09 	call	0x1338	; 0x1338 <motors_stop_all>
		lin_running = false;
    1ab8:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <lin_running>
	}
}
    1abc:	2c 96       	adiw	r28, 0x0c	; 12
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	08 95       	ret

00001ae6 <profiler_is_running>:

bool profiler_is_running(void)
{
	return lin_running;
}
    1ae6:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <lin_running>
    1aea:	08 95       	ret

00001aec <profiler_turn_init>:

/*---------------------------- ROTATION PROFILE API -------------------------------*/
void profiler_turn_init(float angle_deg,
						float max_omega_deg_s,
						float ang_acc_deg_s2)
{
    1aec:	4f 92       	push	r4
    1aee:	5f 92       	push	r5
    1af0:	6f 92       	push	r6
    1af2:	7f 92       	push	r7
    1af4:	8f 92       	push	r8
    1af6:	9f 92       	push	r9
    1af8:	af 92       	push	r10
    1afa:	bf 92       	push	r11
    1afc:	cf 92       	push	r12
    1afe:	df 92       	push	r13
    1b00:	ef 92       	push	r14
    1b02:	ff 92       	push	r15
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	4b 01       	movw	r8, r22
    1b0c:	5c 01       	movw	r10, r24
    1b0e:	29 01       	movw	r4, r18
    1b10:	3a 01       	movw	r6, r20
    1b12:	67 01       	movw	r12, r14
    1b14:	78 01       	movw	r14, r16
	/* 1) Compute how far each wheel must travel: d = (L/2)*?_rad */
	float theta = angle_deg * (M_PI / 180.0f);
    1b16:	25 e3       	ldi	r18, 0x35	; 53
    1b18:	3a ef       	ldi	r19, 0xFA	; 250
    1b1a:	4e e8       	ldi	r20, 0x8E	; 142
    1b1c:	5c e3       	ldi	r21, 0x3C	; 60
    1b1e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
	float half_track = WHEEL_BASE_MM * 0.5f;
	target_wheel_mm = fabsf(half_track * theta);
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e8       	ldi	r19, 0x80	; 128
    1b26:	44 e8       	ldi	r20, 0x84	; 132
    1b28:	53 e4       	ldi	r21, 0x43	; 67
    1b2a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bf 77       	andi	r27, 0x7F	; 127
    1b34:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <target_wheel_mm>
    1b38:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <target_wheel_mm+0x1>
    1b3c:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <target_wheel_mm+0x2>
    1b40:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <target_wheel_mm+0x3>
	turn_ccw = (angle_deg > 0.0f);
    1b44:	c1 e0       	ldi	r28, 0x01	; 1
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	a9 01       	movw	r20, r18
    1b4c:	c5 01       	movw	r24, r10
    1b4e:	b4 01       	movw	r22, r8
    1b50:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__gesf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	0c f0       	brlt	.+2      	; 0x1b5a <profiler_turn_init+0x6e>
    1b58:	c0 e0       	ldi	r28, 0x00	; 0
    1b5a:	c0 93 c4 01 	sts	0x01C4, r28	; 0x8001c4 <turn_ccw>

	/* 2) Convert angular ? linear at wheel rim */
	turn_max_vel = fabsf(max_omega_deg_s * (M_PI / 180.0f) * half_track);
    1b5e:	25 e3       	ldi	r18, 0x35	; 53
    1b60:	3a ef       	ldi	r19, 0xFA	; 250
    1b62:	4e e8       	ldi	r20, 0x8E	; 142
    1b64:	5c e3       	ldi	r21, 0x3C	; 60
    1b66:	c3 01       	movw	r24, r6
    1b68:	b2 01       	movw	r22, r4
    1b6a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e8       	ldi	r19, 0x80	; 128
    1b72:	44 e8       	ldi	r20, 0x84	; 132
    1b74:	53 e4       	ldi	r21, 0x43	; 67
    1b76:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bf 77       	andi	r27, 0x7F	; 127
    1b80:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <turn_max_vel>
    1b84:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <turn_max_vel+0x1>
    1b88:	a0 93 d8 01 	sts	0x01D8, r26	; 0x8001d8 <turn_max_vel+0x2>
    1b8c:	b0 93 d9 01 	sts	0x01D9, r27	; 0x8001d9 <turn_max_vel+0x3>
	turn_acc = fabsf(ang_acc_deg_s2 * (M_PI / 180.0f) * half_track);
    1b90:	25 e3       	ldi	r18, 0x35	; 53
    1b92:	3a ef       	ldi	r19, 0xFA	; 250
    1b94:	4e e8       	ldi	r20, 0x8E	; 142
    1b96:	5c e3       	ldi	r21, 0x3C	; 60
    1b98:	c7 01       	movw	r24, r14
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e8       	ldi	r19, 0x80	; 128
    1ba4:	44 e8       	ldi	r20, 0x84	; 132
    1ba6:	53 e4       	ldi	r21, 0x43	; 67
    1ba8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bf 77       	andi	r27, 0x7F	; 127
    1bb2:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <turn_acc>
    1bb6:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <turn_acc+0x1>
    1bba:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <turn_acc+0x2>
    1bbe:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <turn_acc+0x3>

	/* 3) Encoder counts per mm (same formula) */
	float circ = WHEEL_DIAMETER_MM * M_PI;
	turn_counts_per_mm = (4.0f * (float)ENCODER_PPR) / circ;
    1bc2:	84 ee       	ldi	r24, 0xE4	; 228
    1bc4:	97 eb       	ldi	r25, 0xB7	; 183
    1bc6:	ab ec       	ldi	r26, 0xCB	; 203
    1bc8:	b0 e4       	ldi	r27, 0x40	; 64
    1bca:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <turn_counts_per_mm>
    1bce:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <turn_counts_per_mm+0x1>
    1bd2:	a0 93 d0 01 	sts	0x01D0, r26	; 0x8001d0 <turn_counts_per_mm+0x2>
    1bd6:	b0 93 d1 01 	sts	0x01D1, r27	; 0x8001d1 <turn_counts_per_mm+0x3>

	/* 4) Reset & snapshot both encoders */
	motors_reset_edge_counts();
    1bda:	0e 94 aa 09 	call	0x1354	; 0x1354 <motors_reset_edge_counts>
	turn_start_left = motors_get_step_count_left();
    1bde:	0e 94 d6 09 	call	0x13ac	; 0x13ac <motors_get_step_count_left>
    1be2:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <turn_start_left>
    1be6:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <turn_start_left+0x1>
    1bea:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <turn_start_left+0x2>
    1bee:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <turn_start_left+0x3>
	turn_start_right = motors_get_step_count_right();
    1bf2:	0e 94 dd 09 	call	0x13ba	; 0x13ba <motors_get_step_count_right>
    1bf6:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <turn_start_right>
    1bfa:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <turn_start_right+0x1>
    1bfe:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <turn_start_right+0x2>
    1c02:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <turn_start_right+0x3>

	turn_running = true;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <turn_running>
}
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	bf 90       	pop	r11
    1c1c:	af 90       	pop	r10
    1c1e:	9f 90       	pop	r9
    1c20:	8f 90       	pop	r8
    1c22:	7f 90       	pop	r7
    1c24:	6f 90       	pop	r6
    1c26:	5f 90       	pop	r5
    1c28:	4f 90       	pop	r4
    1c2a:	08 95       	ret

00001c2c <profiler_turn_update>:

void profiler_turn_update(void)
{
    1c2c:	4f 92       	push	r4
    1c2e:	5f 92       	push	r5
    1c30:	6f 92       	push	r6
    1c32:	7f 92       	push	r7
    1c34:	8f 92       	push	r8
    1c36:	9f 92       	push	r9
    1c38:	af 92       	push	r10
    1c3a:	bf 92       	push	r11
    1c3c:	cf 92       	push	r12
    1c3e:	df 92       	push	r13
    1c40:	ef 92       	push	r14
    1c42:	ff 92       	push	r15
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	28 97       	sbiw	r28, 0x08	; 8
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
	if (!turn_running)
    1c58:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <turn_running>
    1c5c:	88 23       	and	r24, r24
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <profiler_turn_update+0x36>
    1c60:	eb c0       	rjmp	.+470    	; 0x1e38 <profiler_turn_update+0x20c>
		return;

	/* average wheel travel [mm] */
	uint32_t sl = motors_get_step_count_left() - turn_start_left;
    1c62:	0e 94 d6 09 	call	0x13ac	; 0x13ac <motors_get_step_count_left>
    1c66:	c0 90 ca 01 	lds	r12, 0x01CA	; 0x8001ca <turn_start_left>
    1c6a:	d0 90 cb 01 	lds	r13, 0x01CB	; 0x8001cb <turn_start_left+0x1>
    1c6e:	e0 90 cc 01 	lds	r14, 0x01CC	; 0x8001cc <turn_start_left+0x2>
    1c72:	f0 90 cd 01 	lds	r15, 0x01CD	; 0x8001cd <turn_start_left+0x3>
    1c76:	4b 01       	movw	r8, r22
    1c78:	5c 01       	movw	r10, r24
    1c7a:	8c 18       	sub	r8, r12
    1c7c:	9d 08       	sbc	r9, r13
    1c7e:	ae 08       	sbc	r10, r14
    1c80:	bf 08       	sbc	r11, r15
	uint32_t sr = motors_get_step_count_right() - turn_start_right;
    1c82:	0e 94 dd 09 	call	0x13ba	; 0x13ba <motors_get_step_count_right>
    1c86:	c0 90 c6 01 	lds	r12, 0x01C6	; 0x8001c6 <turn_start_right>
    1c8a:	d0 90 c7 01 	lds	r13, 0x01C7	; 0x8001c7 <turn_start_right+0x1>
    1c8e:	e0 90 c8 01 	lds	r14, 0x01C8	; 0x8001c8 <turn_start_right+0x2>
    1c92:	f0 90 c9 01 	lds	r15, 0x01C9	; 0x8001c9 <turn_start_right+0x3>
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	2c 19       	sub	r18, r12
    1c9c:	3d 09       	sbc	r19, r13
    1c9e:	4e 09       	sbc	r20, r14
    1ca0:	5f 09       	sbc	r21, r15
    1ca2:	69 01       	movw	r12, r18
    1ca4:	7a 01       	movw	r14, r20
	float dl = sl / turn_counts_per_mm;
    1ca6:	c5 01       	movw	r24, r10
    1ca8:	b4 01       	movw	r22, r8
    1caa:	0e 94 47 10 	call	0x208e	; 0x208e <__floatunsisf>
    1cae:	80 90 ce 01 	lds	r8, 0x01CE	; 0x8001ce <turn_counts_per_mm>
    1cb2:	90 90 cf 01 	lds	r9, 0x01CF	; 0x8001cf <turn_counts_per_mm+0x1>
    1cb6:	a0 90 d0 01 	lds	r10, 0x01D0	; 0x8001d0 <turn_counts_per_mm+0x2>
    1cba:	b0 90 d1 01 	lds	r11, 0x01D1	; 0x8001d1 <turn_counts_per_mm+0x3>
    1cbe:	a5 01       	movw	r20, r10
    1cc0:	94 01       	movw	r18, r8
    1cc2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divsf3>
    1cc6:	2b 01       	movw	r4, r22
    1cc8:	3c 01       	movw	r6, r24
	float dr = sr / turn_counts_per_mm;
    1cca:	c7 01       	movw	r24, r14
    1ccc:	b6 01       	movw	r22, r12
    1cce:	0e 94 47 10 	call	0x208e	; 0x208e <__floatunsisf>
    1cd2:	a5 01       	movw	r20, r10
    1cd4:	94 01       	movw	r18, r8
    1cd6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divsf3>
    1cda:	9b 01       	movw	r18, r22
    1cdc:	ac 01       	movw	r20, r24
	float d = (dl + dr) * 0.5f;
    1cde:	c3 01       	movw	r24, r6
    1ce0:	b2 01       	movw	r22, r4
    1ce2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__addsf3>
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1cf2:	4b 01       	movw	r8, r22
    1cf4:	5c 01       	movw	r10, r24

	/* trapezoid breakpoints */
	float d_acc = (turn_max_vel * turn_max_vel) / (2.0f * turn_acc);
    1cf6:	c0 90 d6 01 	lds	r12, 0x01D6	; 0x8001d6 <turn_max_vel>
    1cfa:	d0 90 d7 01 	lds	r13, 0x01D7	; 0x8001d7 <turn_max_vel+0x1>
    1cfe:	e0 90 d8 01 	lds	r14, 0x01D8	; 0x8001d8 <turn_max_vel+0x2>
    1d02:	f0 90 d9 01 	lds	r15, 0x01D9	; 0x8001d9 <turn_max_vel+0x3>
    1d06:	a7 01       	movw	r20, r14
    1d08:	96 01       	movw	r18, r12
    1d0a:	c7 01       	movw	r24, r14
    1d0c:	b6 01       	movw	r22, r12
    1d0e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1d12:	2b 01       	movw	r4, r22
    1d14:	3c 01       	movw	r6, r24
    1d16:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <turn_acc>
    1d1a:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <turn_acc+0x1>
    1d1e:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <turn_acc+0x2>
    1d22:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <turn_acc+0x3>
    1d26:	9b 01       	movw	r18, r22
    1d28:	ac 01       	movw	r20, r24
    1d2a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__addsf3>
    1d2e:	69 83       	std	Y+1, r22	; 0x01
    1d30:	7a 83       	std	Y+2, r23	; 0x02
    1d32:	8b 83       	std	Y+3, r24	; 0x03
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	9b 01       	movw	r18, r22
    1d38:	ac 01       	movw	r20, r24
    1d3a:	c3 01       	movw	r24, r6
    1d3c:	b2 01       	movw	r22, r4
    1d3e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divsf3>
    1d42:	6d 83       	std	Y+5, r22	; 0x05
    1d44:	7e 83       	std	Y+6, r23	; 0x06
    1d46:	8f 83       	std	Y+7, r24	; 0x07
    1d48:	98 87       	std	Y+8, r25	; 0x08
	float d_decel = d_acc;

	/* desired v [mm/s] */
	float v;
	if (d < d_acc)
    1d4a:	9b 01       	movw	r18, r22
    1d4c:	ac 01       	movw	r20, r24
    1d4e:	c5 01       	movw	r24, r10
    1d50:	b4 01       	movw	r22, r8
    1d52:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__cmpsf2>
    1d56:	88 23       	and	r24, r24
    1d58:	6c f4       	brge	.+26     	; 0x1d74 <profiler_turn_update+0x148>
	{
		v = sqrtf(2.0f * turn_acc * d);
    1d5a:	29 81       	ldd	r18, Y+1	; 0x01
    1d5c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d5e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d60:	5c 81       	ldd	r21, Y+4	; 0x04
    1d62:	c5 01       	movw	r24, r10
    1d64:	b4 01       	movw	r22, r8
    1d66:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1d6a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <sqrt>
    1d6e:	6b 01       	movw	r12, r22
    1d70:	7c 01       	movw	r14, r24
    1d72:	2a c0       	rjmp	.+84     	; 0x1dc8 <profiler_turn_update+0x19c>
	}
	else if (d < (target_wheel_mm - d_decel))
    1d74:	40 90 da 01 	lds	r4, 0x01DA	; 0x8001da <target_wheel_mm>
    1d78:	50 90 db 01 	lds	r5, 0x01DB	; 0x8001db <target_wheel_mm+0x1>
    1d7c:	60 90 dc 01 	lds	r6, 0x01DC	; 0x8001dc <target_wheel_mm+0x2>
    1d80:	70 90 dd 01 	lds	r7, 0x01DD	; 0x8001dd <target_wheel_mm+0x3>
    1d84:	2d 81       	ldd	r18, Y+5	; 0x05
    1d86:	3e 81       	ldd	r19, Y+6	; 0x06
    1d88:	4f 81       	ldd	r20, Y+7	; 0x07
    1d8a:	58 85       	ldd	r21, Y+8	; 0x08
    1d8c:	c3 01       	movw	r24, r6
    1d8e:	b2 01       	movw	r22, r4
    1d90:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__subsf3>
    1d94:	9b 01       	movw	r18, r22
    1d96:	ac 01       	movw	r20, r24
    1d98:	c5 01       	movw	r24, r10
    1d9a:	b4 01       	movw	r22, r8
    1d9c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__cmpsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	94 f0       	brlt	.+36     	; 0x1dc8 <profiler_turn_update+0x19c>
	{
		v = turn_max_vel;
	}
	else
	{
		float rem = target_wheel_mm - d;
    1da4:	a5 01       	movw	r20, r10
    1da6:	94 01       	movw	r18, r8
    1da8:	c3 01       	movw	r24, r6
    1daa:	b2 01       	movw	r22, r4
    1dac:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__subsf3>
    1db0:	9b 01       	movw	r18, r22
    1db2:	ac 01       	movw	r20, r24
		v = sqrtf(2.0f * turn_acc * rem);
    1db4:	69 81       	ldd	r22, Y+1	; 0x01
    1db6:	7a 81       	ldd	r23, Y+2	; 0x02
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1dc0:	0e 94 71 11 	call	0x22e2	; 0x22e2 <sqrt>
    1dc4:	6b 01       	movw	r12, r22
    1dc6:	7c 01       	movw	r14, r24
	}

	/* convert to RPM */
	float revs_s = v / (WHEEL_DIAMETER_MM * M_PI);
    1dc8:	23 e6       	ldi	r18, 0x63	; 99
    1dca:	34 e1       	ldi	r19, 0x14	; 20
    1dcc:	4d e1       	ldi	r20, 0x1D	; 29
    1dce:	54 e4       	ldi	r21, 0x44	; 68
    1dd0:	c7 01       	movw	r24, r14
    1dd2:	b6 01       	movw	r22, r12
    1dd4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divsf3>
	uint16_t rpm = (uint16_t)(revs_s * 60.0f + 0.5f);
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e7       	ldi	r20, 0x70	; 112
    1dde:	52 e4       	ldi	r21, 0x42	; 66
    1de0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsf3>
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__addsf3>
    1df0:	0e 94 18 10 	call	0x2030	; 0x2030 <__fixunssfsi>
    1df4:	6b 01       	movw	r12, r22
    1df6:	7c 01       	movw	r14, r24

	/* opposite wheel dirs for in-place turn */
	motors_set_dir_left(!turn_ccw);
    1df8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <turn_ccw>
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	89 27       	eor	r24, r25
    1e00:	0e 94 1c 09 	call	0x1238	; 0x1238 <motors_set_dir_left>
	motors_set_dir_right(turn_ccw);
    1e04:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <turn_ccw>
    1e08:	0e 94 26 09 	call	0x124c	; 0x124c <motors_set_dir_right>
	motors_set_speed_both(rpm, rpm);
    1e0c:	b6 01       	movw	r22, r12
    1e0e:	c6 01       	movw	r24, r12
    1e10:	0e 94 91 09 	call	0x1322	; 0x1322 <motors_set_speed_both>

	/* done? */
	if (d >= target_wheel_mm)
    1e14:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <target_wheel_mm>
    1e18:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <target_wheel_mm+0x1>
    1e1c:	40 91 dc 01 	lds	r20, 0x01DC	; 0x8001dc <target_wheel_mm+0x2>
    1e20:	50 91 dd 01 	lds	r21, 0x01DD	; 0x8001dd <target_wheel_mm+0x3>
    1e24:	c5 01       	movw	r24, r10
    1e26:	b4 01       	movw	r22, r8
    1e28:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__gesf2>
    1e2c:	88 23       	and	r24, r24
    1e2e:	24 f0       	brlt	.+8      	; 0x1e38 <profiler_turn_update+0x20c>
	{
		motors_stop_all();
    1e30:	0e 94 9c 09 	call	0x1338	; 0x1338 <motors_stop_all>
		turn_running = false;
    1e34:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <turn_running>
	}
}
    1e38:	28 96       	adiw	r28, 0x08	; 8
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	bf 90       	pop	r11
    1e52:	af 90       	pop	r10
    1e54:	9f 90       	pop	r9
    1e56:	8f 90       	pop	r8
    1e58:	7f 90       	pop	r7
    1e5a:	6f 90       	pop	r6
    1e5c:	5f 90       	pop	r5
    1e5e:	4f 90       	pop	r4
    1e60:	08 95       	ret

00001e62 <profiler_turn_is_running>:

bool profiler_turn_is_running(void)
{
	return turn_running;
}
    1e62:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <turn_running>
    1e66:	08 95       	ret

00001e68 <__subsf3>:
    1e68:	50 58       	subi	r21, 0x80	; 128

00001e6a <__addsf3>:
    1e6a:	bb 27       	eor	r27, r27
    1e6c:	aa 27       	eor	r26, r26
    1e6e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__addsf3x>
    1e72:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__fp_round>
    1e76:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fp_pscA>
    1e7a:	38 f0       	brcs	.+14     	; 0x1e8a <__addsf3+0x20>
    1e7c:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fp_pscB>
    1e80:	20 f0       	brcs	.+8      	; 0x1e8a <__addsf3+0x20>
    1e82:	39 f4       	brne	.+14     	; 0x1e92 <__addsf3+0x28>
    1e84:	9f 3f       	cpi	r25, 0xFF	; 255
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <__addsf3+0x24>
    1e88:	26 f4       	brtc	.+8      	; 0x1e92 <__addsf3+0x28>
    1e8a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__fp_nan>
    1e8e:	0e f4       	brtc	.+2      	; 0x1e92 <__addsf3+0x28>
    1e90:	e0 95       	com	r30
    1e92:	e7 fb       	bst	r30, 7
    1e94:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__fp_inf>

00001e98 <__addsf3x>:
    1e98:	e9 2f       	mov	r30, r25
    1e9a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__fp_split3>
    1e9e:	58 f3       	brcs	.-42     	; 0x1e76 <__addsf3+0xc>
    1ea0:	ba 17       	cp	r27, r26
    1ea2:	62 07       	cpc	r22, r18
    1ea4:	73 07       	cpc	r23, r19
    1ea6:	84 07       	cpc	r24, r20
    1ea8:	95 07       	cpc	r25, r21
    1eaa:	20 f0       	brcs	.+8      	; 0x1eb4 <__addsf3x+0x1c>
    1eac:	79 f4       	brne	.+30     	; 0x1ecc <__addsf3x+0x34>
    1eae:	a6 f5       	brtc	.+104    	; 0x1f18 <__addsf3x+0x80>
    1eb0:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__fp_zero>
    1eb4:	0e f4       	brtc	.+2      	; 0x1eb8 <__addsf3x+0x20>
    1eb6:	e0 95       	com	r30
    1eb8:	0b 2e       	mov	r0, r27
    1eba:	ba 2f       	mov	r27, r26
    1ebc:	a0 2d       	mov	r26, r0
    1ebe:	0b 01       	movw	r0, r22
    1ec0:	b9 01       	movw	r22, r18
    1ec2:	90 01       	movw	r18, r0
    1ec4:	0c 01       	movw	r0, r24
    1ec6:	ca 01       	movw	r24, r20
    1ec8:	a0 01       	movw	r20, r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	ff 27       	eor	r31, r31
    1ece:	59 1b       	sub	r21, r25
    1ed0:	99 f0       	breq	.+38     	; 0x1ef8 <__addsf3x+0x60>
    1ed2:	59 3f       	cpi	r21, 0xF9	; 249
    1ed4:	50 f4       	brcc	.+20     	; 0x1eea <__addsf3x+0x52>
    1ed6:	50 3e       	cpi	r21, 0xE0	; 224
    1ed8:	68 f1       	brcs	.+90     	; 0x1f34 <__addsf3x+0x9c>
    1eda:	1a 16       	cp	r1, r26
    1edc:	f0 40       	sbci	r31, 0x00	; 0
    1ede:	a2 2f       	mov	r26, r18
    1ee0:	23 2f       	mov	r18, r19
    1ee2:	34 2f       	mov	r19, r20
    1ee4:	44 27       	eor	r20, r20
    1ee6:	58 5f       	subi	r21, 0xF8	; 248
    1ee8:	f3 cf       	rjmp	.-26     	; 0x1ed0 <__addsf3x+0x38>
    1eea:	46 95       	lsr	r20
    1eec:	37 95       	ror	r19
    1eee:	27 95       	ror	r18
    1ef0:	a7 95       	ror	r26
    1ef2:	f0 40       	sbci	r31, 0x00	; 0
    1ef4:	53 95       	inc	r21
    1ef6:	c9 f7       	brne	.-14     	; 0x1eea <__addsf3x+0x52>
    1ef8:	7e f4       	brtc	.+30     	; 0x1f18 <__addsf3x+0x80>
    1efa:	1f 16       	cp	r1, r31
    1efc:	ba 0b       	sbc	r27, r26
    1efe:	62 0b       	sbc	r22, r18
    1f00:	73 0b       	sbc	r23, r19
    1f02:	84 0b       	sbc	r24, r20
    1f04:	ba f0       	brmi	.+46     	; 0x1f34 <__addsf3x+0x9c>
    1f06:	91 50       	subi	r25, 0x01	; 1
    1f08:	a1 f0       	breq	.+40     	; 0x1f32 <__addsf3x+0x9a>
    1f0a:	ff 0f       	add	r31, r31
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	66 1f       	adc	r22, r22
    1f10:	77 1f       	adc	r23, r23
    1f12:	88 1f       	adc	r24, r24
    1f14:	c2 f7       	brpl	.-16     	; 0x1f06 <__addsf3x+0x6e>
    1f16:	0e c0       	rjmp	.+28     	; 0x1f34 <__addsf3x+0x9c>
    1f18:	ba 0f       	add	r27, r26
    1f1a:	62 1f       	adc	r22, r18
    1f1c:	73 1f       	adc	r23, r19
    1f1e:	84 1f       	adc	r24, r20
    1f20:	48 f4       	brcc	.+18     	; 0x1f34 <__addsf3x+0x9c>
    1f22:	87 95       	ror	r24
    1f24:	77 95       	ror	r23
    1f26:	67 95       	ror	r22
    1f28:	b7 95       	ror	r27
    1f2a:	f7 95       	ror	r31
    1f2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f2e:	08 f0       	brcs	.+2      	; 0x1f32 <__addsf3x+0x9a>
    1f30:	b0 cf       	rjmp	.-160    	; 0x1e92 <__addsf3+0x28>
    1f32:	93 95       	inc	r25
    1f34:	88 0f       	add	r24, r24
    1f36:	08 f0       	brcs	.+2      	; 0x1f3a <__addsf3x+0xa2>
    1f38:	99 27       	eor	r25, r25
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	97 95       	ror	r25
    1f3e:	87 95       	ror	r24
    1f40:	08 95       	ret

00001f42 <__cmpsf2>:
    1f42:	0e 94 84 10 	call	0x2108	; 0x2108 <__fp_cmp>
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <__cmpsf2+0x8>
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	08 95       	ret

00001f4c <__divsf3>:
    1f4c:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__divsf3x>
    1f50:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__fp_round>
    1f54:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fp_pscB>
    1f58:	58 f0       	brcs	.+22     	; 0x1f70 <__divsf3+0x24>
    1f5a:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fp_pscA>
    1f5e:	40 f0       	brcs	.+16     	; 0x1f70 <__divsf3+0x24>
    1f60:	29 f4       	brne	.+10     	; 0x1f6c <__divsf3+0x20>
    1f62:	5f 3f       	cpi	r21, 0xFF	; 255
    1f64:	29 f0       	breq	.+10     	; 0x1f70 <__divsf3+0x24>
    1f66:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__fp_inf>
    1f6a:	51 11       	cpse	r21, r1
    1f6c:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__fp_szero>
    1f70:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__fp_nan>

00001f74 <__divsf3x>:
    1f74:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__fp_split3>
    1f78:	68 f3       	brcs	.-38     	; 0x1f54 <__divsf3+0x8>

00001f7a <__divsf3_pse>:
    1f7a:	99 23       	and	r25, r25
    1f7c:	b1 f3       	breq	.-20     	; 0x1f6a <__divsf3+0x1e>
    1f7e:	55 23       	and	r21, r21
    1f80:	91 f3       	breq	.-28     	; 0x1f66 <__divsf3+0x1a>
    1f82:	95 1b       	sub	r25, r21
    1f84:	55 0b       	sbc	r21, r21
    1f86:	bb 27       	eor	r27, r27
    1f88:	aa 27       	eor	r26, r26
    1f8a:	62 17       	cp	r22, r18
    1f8c:	73 07       	cpc	r23, r19
    1f8e:	84 07       	cpc	r24, r20
    1f90:	38 f0       	brcs	.+14     	; 0x1fa0 <__divsf3_pse+0x26>
    1f92:	9f 5f       	subi	r25, 0xFF	; 255
    1f94:	5f 4f       	sbci	r21, 0xFF	; 255
    1f96:	22 0f       	add	r18, r18
    1f98:	33 1f       	adc	r19, r19
    1f9a:	44 1f       	adc	r20, r20
    1f9c:	aa 1f       	adc	r26, r26
    1f9e:	a9 f3       	breq	.-22     	; 0x1f8a <__divsf3_pse+0x10>
    1fa0:	35 d0       	rcall	.+106    	; 0x200c <__divsf3_pse+0x92>
    1fa2:	0e 2e       	mov	r0, r30
    1fa4:	3a f0       	brmi	.+14     	; 0x1fb4 <__divsf3_pse+0x3a>
    1fa6:	e0 e8       	ldi	r30, 0x80	; 128
    1fa8:	32 d0       	rcall	.+100    	; 0x200e <__divsf3_pse+0x94>
    1faa:	91 50       	subi	r25, 0x01	; 1
    1fac:	50 40       	sbci	r21, 0x00	; 0
    1fae:	e6 95       	lsr	r30
    1fb0:	00 1c       	adc	r0, r0
    1fb2:	ca f7       	brpl	.-14     	; 0x1fa6 <__divsf3_pse+0x2c>
    1fb4:	2b d0       	rcall	.+86     	; 0x200c <__divsf3_pse+0x92>
    1fb6:	fe 2f       	mov	r31, r30
    1fb8:	29 d0       	rcall	.+82     	; 0x200c <__divsf3_pse+0x92>
    1fba:	66 0f       	add	r22, r22
    1fbc:	77 1f       	adc	r23, r23
    1fbe:	88 1f       	adc	r24, r24
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	26 17       	cp	r18, r22
    1fc4:	37 07       	cpc	r19, r23
    1fc6:	48 07       	cpc	r20, r24
    1fc8:	ab 07       	cpc	r26, r27
    1fca:	b0 e8       	ldi	r27, 0x80	; 128
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <__divsf3_pse+0x56>
    1fce:	bb 0b       	sbc	r27, r27
    1fd0:	80 2d       	mov	r24, r0
    1fd2:	bf 01       	movw	r22, r30
    1fd4:	ff 27       	eor	r31, r31
    1fd6:	93 58       	subi	r25, 0x83	; 131
    1fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fda:	3a f0       	brmi	.+14     	; 0x1fea <__divsf3_pse+0x70>
    1fdc:	9e 3f       	cpi	r25, 0xFE	; 254
    1fde:	51 05       	cpc	r21, r1
    1fe0:	78 f0       	brcs	.+30     	; 0x2000 <__divsf3_pse+0x86>
    1fe2:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__fp_inf>
    1fe6:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__fp_szero>
    1fea:	5f 3f       	cpi	r21, 0xFF	; 255
    1fec:	e4 f3       	brlt	.-8      	; 0x1fe6 <__divsf3_pse+0x6c>
    1fee:	98 3e       	cpi	r25, 0xE8	; 232
    1ff0:	d4 f3       	brlt	.-12     	; 0x1fe6 <__divsf3_pse+0x6c>
    1ff2:	86 95       	lsr	r24
    1ff4:	77 95       	ror	r23
    1ff6:	67 95       	ror	r22
    1ff8:	b7 95       	ror	r27
    1ffa:	f7 95       	ror	r31
    1ffc:	9f 5f       	subi	r25, 0xFF	; 255
    1ffe:	c9 f7       	brne	.-14     	; 0x1ff2 <__divsf3_pse+0x78>
    2000:	88 0f       	add	r24, r24
    2002:	91 1d       	adc	r25, r1
    2004:	96 95       	lsr	r25
    2006:	87 95       	ror	r24
    2008:	97 f9       	bld	r25, 7
    200a:	08 95       	ret
    200c:	e1 e0       	ldi	r30, 0x01	; 1
    200e:	66 0f       	add	r22, r22
    2010:	77 1f       	adc	r23, r23
    2012:	88 1f       	adc	r24, r24
    2014:	bb 1f       	adc	r27, r27
    2016:	62 17       	cp	r22, r18
    2018:	73 07       	cpc	r23, r19
    201a:	84 07       	cpc	r24, r20
    201c:	ba 07       	cpc	r27, r26
    201e:	20 f0       	brcs	.+8      	; 0x2028 <__divsf3_pse+0xae>
    2020:	62 1b       	sub	r22, r18
    2022:	73 0b       	sbc	r23, r19
    2024:	84 0b       	sbc	r24, r20
    2026:	ba 0b       	sbc	r27, r26
    2028:	ee 1f       	adc	r30, r30
    202a:	88 f7       	brcc	.-30     	; 0x200e <__divsf3_pse+0x94>
    202c:	e0 95       	com	r30
    202e:	08 95       	ret

00002030 <__fixunssfsi>:
    2030:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__fp_splitA>
    2034:	88 f0       	brcs	.+34     	; 0x2058 <__fixunssfsi+0x28>
    2036:	9f 57       	subi	r25, 0x7F	; 127
    2038:	98 f0       	brcs	.+38     	; 0x2060 <__fixunssfsi+0x30>
    203a:	b9 2f       	mov	r27, r25
    203c:	99 27       	eor	r25, r25
    203e:	b7 51       	subi	r27, 0x17	; 23
    2040:	b0 f0       	brcs	.+44     	; 0x206e <__fixunssfsi+0x3e>
    2042:	e1 f0       	breq	.+56     	; 0x207c <__fixunssfsi+0x4c>
    2044:	66 0f       	add	r22, r22
    2046:	77 1f       	adc	r23, r23
    2048:	88 1f       	adc	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	1a f0       	brmi	.+6      	; 0x2054 <__fixunssfsi+0x24>
    204e:	ba 95       	dec	r27
    2050:	c9 f7       	brne	.-14     	; 0x2044 <__fixunssfsi+0x14>
    2052:	14 c0       	rjmp	.+40     	; 0x207c <__fixunssfsi+0x4c>
    2054:	b1 30       	cpi	r27, 0x01	; 1
    2056:	91 f0       	breq	.+36     	; 0x207c <__fixunssfsi+0x4c>
    2058:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fp_zero>
    205c:	b1 e0       	ldi	r27, 0x01	; 1
    205e:	08 95       	ret
    2060:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__fp_zero>
    2064:	67 2f       	mov	r22, r23
    2066:	78 2f       	mov	r23, r24
    2068:	88 27       	eor	r24, r24
    206a:	b8 5f       	subi	r27, 0xF8	; 248
    206c:	39 f0       	breq	.+14     	; 0x207c <__fixunssfsi+0x4c>
    206e:	b9 3f       	cpi	r27, 0xF9	; 249
    2070:	cc f3       	brlt	.-14     	; 0x2064 <__fixunssfsi+0x34>
    2072:	86 95       	lsr	r24
    2074:	77 95       	ror	r23
    2076:	67 95       	ror	r22
    2078:	b3 95       	inc	r27
    207a:	d9 f7       	brne	.-10     	; 0x2072 <__fixunssfsi+0x42>
    207c:	3e f4       	brtc	.+14     	; 0x208c <__fixunssfsi+0x5c>
    207e:	90 95       	com	r25
    2080:	80 95       	com	r24
    2082:	70 95       	com	r23
    2084:	61 95       	neg	r22
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	8f 4f       	sbci	r24, 0xFF	; 255
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	08 95       	ret

0000208e <__floatunsisf>:
    208e:	e8 94       	clt
    2090:	09 c0       	rjmp	.+18     	; 0x20a4 <__floatsisf+0x12>

00002092 <__floatsisf>:
    2092:	97 fb       	bst	r25, 7
    2094:	3e f4       	brtc	.+14     	; 0x20a4 <__floatsisf+0x12>
    2096:	90 95       	com	r25
    2098:	80 95       	com	r24
    209a:	70 95       	com	r23
    209c:	61 95       	neg	r22
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	8f 4f       	sbci	r24, 0xFF	; 255
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	99 23       	and	r25, r25
    20a6:	a9 f0       	breq	.+42     	; 0x20d2 <__floatsisf+0x40>
    20a8:	f9 2f       	mov	r31, r25
    20aa:	96 e9       	ldi	r25, 0x96	; 150
    20ac:	bb 27       	eor	r27, r27
    20ae:	93 95       	inc	r25
    20b0:	f6 95       	lsr	r31
    20b2:	87 95       	ror	r24
    20b4:	77 95       	ror	r23
    20b6:	67 95       	ror	r22
    20b8:	b7 95       	ror	r27
    20ba:	f1 11       	cpse	r31, r1
    20bc:	f8 cf       	rjmp	.-16     	; 0x20ae <__floatsisf+0x1c>
    20be:	fa f4       	brpl	.+62     	; 0x20fe <__floatsisf+0x6c>
    20c0:	bb 0f       	add	r27, r27
    20c2:	11 f4       	brne	.+4      	; 0x20c8 <__floatsisf+0x36>
    20c4:	60 ff       	sbrs	r22, 0
    20c6:	1b c0       	rjmp	.+54     	; 0x20fe <__floatsisf+0x6c>
    20c8:	6f 5f       	subi	r22, 0xFF	; 255
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	8f 4f       	sbci	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	16 c0       	rjmp	.+44     	; 0x20fe <__floatsisf+0x6c>
    20d2:	88 23       	and	r24, r24
    20d4:	11 f0       	breq	.+4      	; 0x20da <__floatsisf+0x48>
    20d6:	96 e9       	ldi	r25, 0x96	; 150
    20d8:	11 c0       	rjmp	.+34     	; 0x20fc <__floatsisf+0x6a>
    20da:	77 23       	and	r23, r23
    20dc:	21 f0       	breq	.+8      	; 0x20e6 <__floatsisf+0x54>
    20de:	9e e8       	ldi	r25, 0x8E	; 142
    20e0:	87 2f       	mov	r24, r23
    20e2:	76 2f       	mov	r23, r22
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <__floatsisf+0x5e>
    20e6:	66 23       	and	r22, r22
    20e8:	71 f0       	breq	.+28     	; 0x2106 <__floatsisf+0x74>
    20ea:	96 e8       	ldi	r25, 0x86	; 134
    20ec:	86 2f       	mov	r24, r22
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	2a f0       	brmi	.+10     	; 0x20fe <__floatsisf+0x6c>
    20f4:	9a 95       	dec	r25
    20f6:	66 0f       	add	r22, r22
    20f8:	77 1f       	adc	r23, r23
    20fa:	88 1f       	adc	r24, r24
    20fc:	da f7       	brpl	.-10     	; 0x20f4 <__floatsisf+0x62>
    20fe:	88 0f       	add	r24, r24
    2100:	96 95       	lsr	r25
    2102:	87 95       	ror	r24
    2104:	97 f9       	bld	r25, 7
    2106:	08 95       	ret

00002108 <__fp_cmp>:
    2108:	99 0f       	add	r25, r25
    210a:	00 08       	sbc	r0, r0
    210c:	55 0f       	add	r21, r21
    210e:	aa 0b       	sbc	r26, r26
    2110:	e0 e8       	ldi	r30, 0x80	; 128
    2112:	fe ef       	ldi	r31, 0xFE	; 254
    2114:	16 16       	cp	r1, r22
    2116:	17 06       	cpc	r1, r23
    2118:	e8 07       	cpc	r30, r24
    211a:	f9 07       	cpc	r31, r25
    211c:	c0 f0       	brcs	.+48     	; 0x214e <__fp_cmp+0x46>
    211e:	12 16       	cp	r1, r18
    2120:	13 06       	cpc	r1, r19
    2122:	e4 07       	cpc	r30, r20
    2124:	f5 07       	cpc	r31, r21
    2126:	98 f0       	brcs	.+38     	; 0x214e <__fp_cmp+0x46>
    2128:	62 1b       	sub	r22, r18
    212a:	73 0b       	sbc	r23, r19
    212c:	84 0b       	sbc	r24, r20
    212e:	95 0b       	sbc	r25, r21
    2130:	39 f4       	brne	.+14     	; 0x2140 <__fp_cmp+0x38>
    2132:	0a 26       	eor	r0, r26
    2134:	61 f0       	breq	.+24     	; 0x214e <__fp_cmp+0x46>
    2136:	23 2b       	or	r18, r19
    2138:	24 2b       	or	r18, r20
    213a:	25 2b       	or	r18, r21
    213c:	21 f4       	brne	.+8      	; 0x2146 <__fp_cmp+0x3e>
    213e:	08 95       	ret
    2140:	0a 26       	eor	r0, r26
    2142:	09 f4       	brne	.+2      	; 0x2146 <__fp_cmp+0x3e>
    2144:	a1 40       	sbci	r26, 0x01	; 1
    2146:	a6 95       	lsr	r26
    2148:	8f ef       	ldi	r24, 0xFF	; 255
    214a:	81 1d       	adc	r24, r1
    214c:	81 1d       	adc	r24, r1
    214e:	08 95       	ret

00002150 <__fp_inf>:
    2150:	97 f9       	bld	r25, 7
    2152:	9f 67       	ori	r25, 0x7F	; 127
    2154:	80 e8       	ldi	r24, 0x80	; 128
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	08 95       	ret

0000215c <__fp_nan>:
    215c:	9f ef       	ldi	r25, 0xFF	; 255
    215e:	80 ec       	ldi	r24, 0xC0	; 192
    2160:	08 95       	ret

00002162 <__fp_pscA>:
    2162:	00 24       	eor	r0, r0
    2164:	0a 94       	dec	r0
    2166:	16 16       	cp	r1, r22
    2168:	17 06       	cpc	r1, r23
    216a:	18 06       	cpc	r1, r24
    216c:	09 06       	cpc	r0, r25
    216e:	08 95       	ret

00002170 <__fp_pscB>:
    2170:	00 24       	eor	r0, r0
    2172:	0a 94       	dec	r0
    2174:	12 16       	cp	r1, r18
    2176:	13 06       	cpc	r1, r19
    2178:	14 06       	cpc	r1, r20
    217a:	05 06       	cpc	r0, r21
    217c:	08 95       	ret

0000217e <__fp_round>:
    217e:	09 2e       	mov	r0, r25
    2180:	03 94       	inc	r0
    2182:	00 0c       	add	r0, r0
    2184:	11 f4       	brne	.+4      	; 0x218a <__fp_round+0xc>
    2186:	88 23       	and	r24, r24
    2188:	52 f0       	brmi	.+20     	; 0x219e <__fp_round+0x20>
    218a:	bb 0f       	add	r27, r27
    218c:	40 f4       	brcc	.+16     	; 0x219e <__fp_round+0x20>
    218e:	bf 2b       	or	r27, r31
    2190:	11 f4       	brne	.+4      	; 0x2196 <__fp_round+0x18>
    2192:	60 ff       	sbrs	r22, 0
    2194:	04 c0       	rjmp	.+8      	; 0x219e <__fp_round+0x20>
    2196:	6f 5f       	subi	r22, 0xFF	; 255
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	8f 4f       	sbci	r24, 0xFF	; 255
    219c:	9f 4f       	sbci	r25, 0xFF	; 255
    219e:	08 95       	ret

000021a0 <__fp_split3>:
    21a0:	57 fd       	sbrc	r21, 7
    21a2:	90 58       	subi	r25, 0x80	; 128
    21a4:	44 0f       	add	r20, r20
    21a6:	55 1f       	adc	r21, r21
    21a8:	59 f0       	breq	.+22     	; 0x21c0 <__fp_splitA+0x10>
    21aa:	5f 3f       	cpi	r21, 0xFF	; 255
    21ac:	71 f0       	breq	.+28     	; 0x21ca <__fp_splitA+0x1a>
    21ae:	47 95       	ror	r20

000021b0 <__fp_splitA>:
    21b0:	88 0f       	add	r24, r24
    21b2:	97 fb       	bst	r25, 7
    21b4:	99 1f       	adc	r25, r25
    21b6:	61 f0       	breq	.+24     	; 0x21d0 <__fp_splitA+0x20>
    21b8:	9f 3f       	cpi	r25, 0xFF	; 255
    21ba:	79 f0       	breq	.+30     	; 0x21da <__fp_splitA+0x2a>
    21bc:	87 95       	ror	r24
    21be:	08 95       	ret
    21c0:	12 16       	cp	r1, r18
    21c2:	13 06       	cpc	r1, r19
    21c4:	14 06       	cpc	r1, r20
    21c6:	55 1f       	adc	r21, r21
    21c8:	f2 cf       	rjmp	.-28     	; 0x21ae <__fp_split3+0xe>
    21ca:	46 95       	lsr	r20
    21cc:	f1 df       	rcall	.-30     	; 0x21b0 <__fp_splitA>
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <__fp_splitA+0x30>
    21d0:	16 16       	cp	r1, r22
    21d2:	17 06       	cpc	r1, r23
    21d4:	18 06       	cpc	r1, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	f1 cf       	rjmp	.-30     	; 0x21bc <__fp_splitA+0xc>
    21da:	86 95       	lsr	r24
    21dc:	71 05       	cpc	r23, r1
    21de:	61 05       	cpc	r22, r1
    21e0:	08 94       	sec
    21e2:	08 95       	ret

000021e4 <__fp_zero>:
    21e4:	e8 94       	clt

000021e6 <__fp_szero>:
    21e6:	bb 27       	eor	r27, r27
    21e8:	66 27       	eor	r22, r22
    21ea:	77 27       	eor	r23, r23
    21ec:	cb 01       	movw	r24, r22
    21ee:	97 f9       	bld	r25, 7
    21f0:	08 95       	ret

000021f2 <__gesf2>:
    21f2:	0e 94 84 10 	call	0x2108	; 0x2108 <__fp_cmp>
    21f6:	08 f4       	brcc	.+2      	; 0x21fa <__gesf2+0x8>
    21f8:	8f ef       	ldi	r24, 0xFF	; 255
    21fa:	08 95       	ret

000021fc <__mulsf3>:
    21fc:	0e 94 11 11 	call	0x2222	; 0x2222 <__mulsf3x>
    2200:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__fp_round>
    2204:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fp_pscA>
    2208:	38 f0       	brcs	.+14     	; 0x2218 <__mulsf3+0x1c>
    220a:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fp_pscB>
    220e:	20 f0       	brcs	.+8      	; 0x2218 <__mulsf3+0x1c>
    2210:	95 23       	and	r25, r21
    2212:	11 f0       	breq	.+4      	; 0x2218 <__mulsf3+0x1c>
    2214:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__fp_inf>
    2218:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__fp_nan>
    221c:	11 24       	eor	r1, r1
    221e:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__fp_szero>

00002222 <__mulsf3x>:
    2222:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__fp_split3>
    2226:	70 f3       	brcs	.-36     	; 0x2204 <__mulsf3+0x8>

00002228 <__mulsf3_pse>:
    2228:	95 9f       	mul	r25, r21
    222a:	c1 f3       	breq	.-16     	; 0x221c <__mulsf3+0x20>
    222c:	95 0f       	add	r25, r21
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	55 1f       	adc	r21, r21
    2232:	62 9f       	mul	r22, r18
    2234:	f0 01       	movw	r30, r0
    2236:	72 9f       	mul	r23, r18
    2238:	bb 27       	eor	r27, r27
    223a:	f0 0d       	add	r31, r0
    223c:	b1 1d       	adc	r27, r1
    223e:	63 9f       	mul	r22, r19
    2240:	aa 27       	eor	r26, r26
    2242:	f0 0d       	add	r31, r0
    2244:	b1 1d       	adc	r27, r1
    2246:	aa 1f       	adc	r26, r26
    2248:	64 9f       	mul	r22, r20
    224a:	66 27       	eor	r22, r22
    224c:	b0 0d       	add	r27, r0
    224e:	a1 1d       	adc	r26, r1
    2250:	66 1f       	adc	r22, r22
    2252:	82 9f       	mul	r24, r18
    2254:	22 27       	eor	r18, r18
    2256:	b0 0d       	add	r27, r0
    2258:	a1 1d       	adc	r26, r1
    225a:	62 1f       	adc	r22, r18
    225c:	73 9f       	mul	r23, r19
    225e:	b0 0d       	add	r27, r0
    2260:	a1 1d       	adc	r26, r1
    2262:	62 1f       	adc	r22, r18
    2264:	83 9f       	mul	r24, r19
    2266:	a0 0d       	add	r26, r0
    2268:	61 1d       	adc	r22, r1
    226a:	22 1f       	adc	r18, r18
    226c:	74 9f       	mul	r23, r20
    226e:	33 27       	eor	r19, r19
    2270:	a0 0d       	add	r26, r0
    2272:	61 1d       	adc	r22, r1
    2274:	23 1f       	adc	r18, r19
    2276:	84 9f       	mul	r24, r20
    2278:	60 0d       	add	r22, r0
    227a:	21 1d       	adc	r18, r1
    227c:	82 2f       	mov	r24, r18
    227e:	76 2f       	mov	r23, r22
    2280:	6a 2f       	mov	r22, r26
    2282:	11 24       	eor	r1, r1
    2284:	9f 57       	subi	r25, 0x7F	; 127
    2286:	50 40       	sbci	r21, 0x00	; 0
    2288:	9a f0       	brmi	.+38     	; 0x22b0 <__mulsf3_pse+0x88>
    228a:	f1 f0       	breq	.+60     	; 0x22c8 <__mulsf3_pse+0xa0>
    228c:	88 23       	and	r24, r24
    228e:	4a f0       	brmi	.+18     	; 0x22a2 <__mulsf3_pse+0x7a>
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	bb 1f       	adc	r27, r27
    2296:	66 1f       	adc	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	88 1f       	adc	r24, r24
    229c:	91 50       	subi	r25, 0x01	; 1
    229e:	50 40       	sbci	r21, 0x00	; 0
    22a0:	a9 f7       	brne	.-22     	; 0x228c <__mulsf3_pse+0x64>
    22a2:	9e 3f       	cpi	r25, 0xFE	; 254
    22a4:	51 05       	cpc	r21, r1
    22a6:	80 f0       	brcs	.+32     	; 0x22c8 <__mulsf3_pse+0xa0>
    22a8:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__fp_inf>
    22ac:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__fp_szero>
    22b0:	5f 3f       	cpi	r21, 0xFF	; 255
    22b2:	e4 f3       	brlt	.-8      	; 0x22ac <__mulsf3_pse+0x84>
    22b4:	98 3e       	cpi	r25, 0xE8	; 232
    22b6:	d4 f3       	brlt	.-12     	; 0x22ac <__mulsf3_pse+0x84>
    22b8:	86 95       	lsr	r24
    22ba:	77 95       	ror	r23
    22bc:	67 95       	ror	r22
    22be:	b7 95       	ror	r27
    22c0:	f7 95       	ror	r31
    22c2:	e7 95       	ror	r30
    22c4:	9f 5f       	subi	r25, 0xFF	; 255
    22c6:	c1 f7       	brne	.-16     	; 0x22b8 <__mulsf3_pse+0x90>
    22c8:	fe 2b       	or	r31, r30
    22ca:	88 0f       	add	r24, r24
    22cc:	91 1d       	adc	r25, r1
    22ce:	96 95       	lsr	r25
    22d0:	87 95       	ror	r24
    22d2:	97 f9       	bld	r25, 7
    22d4:	08 95       	ret
    22d6:	19 f4       	brne	.+6      	; 0x22de <__mulsf3_pse+0xb6>
    22d8:	16 f4       	brtc	.+4      	; 0x22de <__mulsf3_pse+0xb6>
    22da:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__fp_nan>
    22de:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__fp_mpack>

000022e2 <sqrt>:
    22e2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__fp_splitA>
    22e6:	b8 f3       	brcs	.-18     	; 0x22d6 <__mulsf3_pse+0xae>
    22e8:	99 23       	and	r25, r25
    22ea:	c9 f3       	breq	.-14     	; 0x22de <__mulsf3_pse+0xb6>
    22ec:	b6 f3       	brts	.-20     	; 0x22da <__mulsf3_pse+0xb2>
    22ee:	9f 57       	subi	r25, 0x7F	; 127
    22f0:	55 0b       	sbc	r21, r21
    22f2:	87 ff       	sbrs	r24, 7
    22f4:	0e 94 bf 11 	call	0x237e	; 0x237e <__fp_norm2>
    22f8:	00 24       	eor	r0, r0
    22fa:	a0 e6       	ldi	r26, 0x60	; 96
    22fc:	40 ea       	ldi	r20, 0xA0	; 160
    22fe:	90 01       	movw	r18, r0
    2300:	80 58       	subi	r24, 0x80	; 128
    2302:	56 95       	lsr	r21
    2304:	97 95       	ror	r25
    2306:	28 f4       	brcc	.+10     	; 0x2312 <sqrt+0x30>
    2308:	80 5c       	subi	r24, 0xC0	; 192
    230a:	66 0f       	add	r22, r22
    230c:	77 1f       	adc	r23, r23
    230e:	88 1f       	adc	r24, r24
    2310:	20 f0       	brcs	.+8      	; 0x231a <sqrt+0x38>
    2312:	26 17       	cp	r18, r22
    2314:	37 07       	cpc	r19, r23
    2316:	48 07       	cpc	r20, r24
    2318:	30 f4       	brcc	.+12     	; 0x2326 <sqrt+0x44>
    231a:	62 1b       	sub	r22, r18
    231c:	73 0b       	sbc	r23, r19
    231e:	84 0b       	sbc	r24, r20
    2320:	20 29       	or	r18, r0
    2322:	31 29       	or	r19, r1
    2324:	4a 2b       	or	r20, r26
    2326:	a6 95       	lsr	r26
    2328:	17 94       	ror	r1
    232a:	07 94       	ror	r0
    232c:	20 25       	eor	r18, r0
    232e:	31 25       	eor	r19, r1
    2330:	4a 27       	eor	r20, r26
    2332:	58 f7       	brcc	.-42     	; 0x230a <sqrt+0x28>
    2334:	66 0f       	add	r22, r22
    2336:	77 1f       	adc	r23, r23
    2338:	88 1f       	adc	r24, r24
    233a:	20 f0       	brcs	.+8      	; 0x2344 <sqrt+0x62>
    233c:	26 17       	cp	r18, r22
    233e:	37 07       	cpc	r19, r23
    2340:	48 07       	cpc	r20, r24
    2342:	30 f4       	brcc	.+12     	; 0x2350 <sqrt+0x6e>
    2344:	62 0b       	sbc	r22, r18
    2346:	73 0b       	sbc	r23, r19
    2348:	84 0b       	sbc	r24, r20
    234a:	20 0d       	add	r18, r0
    234c:	31 1d       	adc	r19, r1
    234e:	41 1d       	adc	r20, r1
    2350:	a0 95       	com	r26
    2352:	81 f7       	brne	.-32     	; 0x2334 <sqrt+0x52>
    2354:	b9 01       	movw	r22, r18
    2356:	84 2f       	mov	r24, r20
    2358:	91 58       	subi	r25, 0x81	; 129
    235a:	88 0f       	add	r24, r24
    235c:	96 95       	lsr	r25
    235e:	87 95       	ror	r24
    2360:	08 95       	ret

00002362 <__fp_mpack>:
    2362:	9f 3f       	cpi	r25, 0xFF	; 255
    2364:	31 f0       	breq	.+12     	; 0x2372 <__fp_mpack_finite+0xc>

00002366 <__fp_mpack_finite>:
    2366:	91 50       	subi	r25, 0x01	; 1
    2368:	20 f4       	brcc	.+8      	; 0x2372 <__fp_mpack_finite+0xc>
    236a:	87 95       	ror	r24
    236c:	77 95       	ror	r23
    236e:	67 95       	ror	r22
    2370:	b7 95       	ror	r27
    2372:	88 0f       	add	r24, r24
    2374:	91 1d       	adc	r25, r1
    2376:	96 95       	lsr	r25
    2378:	87 95       	ror	r24
    237a:	97 f9       	bld	r25, 7
    237c:	08 95       	ret

0000237e <__fp_norm2>:
    237e:	91 50       	subi	r25, 0x01	; 1
    2380:	50 40       	sbci	r21, 0x00	; 0
    2382:	66 0f       	add	r22, r22
    2384:	77 1f       	adc	r23, r23
    2386:	88 1f       	adc	r24, r24
    2388:	d2 f7       	brpl	.-12     	; 0x237e <__fp_norm2>
    238a:	08 95       	ret

0000238c <vfprintf>:
    238c:	a0 e1       	ldi	r26, 0x10	; 16
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	ec ec       	ldi	r30, 0xCC	; 204
    2392:	f1 e1       	ldi	r31, 0x11	; 17
    2394:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__prologue_saves__>
    2398:	7c 01       	movw	r14, r24
    239a:	1b 01       	movw	r2, r22
    239c:	6a 01       	movw	r12, r20
    239e:	fc 01       	movw	r30, r24
    23a0:	17 82       	std	Z+7, r1	; 0x07
    23a2:	16 82       	std	Z+6, r1	; 0x06
    23a4:	83 81       	ldd	r24, Z+3	; 0x03
    23a6:	81 ff       	sbrs	r24, 1
    23a8:	44 c3       	rjmp	.+1672   	; 0x2a32 <vfprintf+0x6a6>
    23aa:	9e 01       	movw	r18, r28
    23ac:	2f 5f       	subi	r18, 0xFF	; 255
    23ae:	3f 4f       	sbci	r19, 0xFF	; 255
    23b0:	39 01       	movw	r6, r18
    23b2:	f7 01       	movw	r30, r14
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	f1 01       	movw	r30, r2
    23b8:	93 fd       	sbrc	r25, 3
    23ba:	85 91       	lpm	r24, Z+
    23bc:	93 ff       	sbrs	r25, 3
    23be:	81 91       	ld	r24, Z+
    23c0:	1f 01       	movw	r2, r30
    23c2:	88 23       	and	r24, r24
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <vfprintf+0x3c>
    23c6:	31 c3       	rjmp	.+1634   	; 0x2a2a <vfprintf+0x69e>
    23c8:	85 32       	cpi	r24, 0x25	; 37
    23ca:	39 f4       	brne	.+14     	; 0x23da <vfprintf+0x4e>
    23cc:	93 fd       	sbrc	r25, 3
    23ce:	85 91       	lpm	r24, Z+
    23d0:	93 ff       	sbrs	r25, 3
    23d2:	81 91       	ld	r24, Z+
    23d4:	1f 01       	movw	r2, r30
    23d6:	85 32       	cpi	r24, 0x25	; 37
    23d8:	39 f4       	brne	.+14     	; 0x23e8 <vfprintf+0x5c>
    23da:	b7 01       	movw	r22, r14
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    23e2:	56 01       	movw	r10, r12
    23e4:	65 01       	movw	r12, r10
    23e6:	e5 cf       	rjmp	.-54     	; 0x23b2 <vfprintf+0x26>
    23e8:	10 e0       	ldi	r17, 0x00	; 0
    23ea:	51 2c       	mov	r5, r1
    23ec:	91 2c       	mov	r9, r1
    23ee:	ff e1       	ldi	r31, 0x1F	; 31
    23f0:	f9 15       	cp	r31, r9
    23f2:	d8 f0       	brcs	.+54     	; 0x242a <vfprintf+0x9e>
    23f4:	8b 32       	cpi	r24, 0x2B	; 43
    23f6:	79 f0       	breq	.+30     	; 0x2416 <vfprintf+0x8a>
    23f8:	38 f4       	brcc	.+14     	; 0x2408 <vfprintf+0x7c>
    23fa:	80 32       	cpi	r24, 0x20	; 32
    23fc:	79 f0       	breq	.+30     	; 0x241c <vfprintf+0x90>
    23fe:	83 32       	cpi	r24, 0x23	; 35
    2400:	a1 f4       	brne	.+40     	; 0x242a <vfprintf+0x9e>
    2402:	f9 2d       	mov	r31, r9
    2404:	f0 61       	ori	r31, 0x10	; 16
    2406:	2e c0       	rjmp	.+92     	; 0x2464 <vfprintf+0xd8>
    2408:	8d 32       	cpi	r24, 0x2D	; 45
    240a:	61 f0       	breq	.+24     	; 0x2424 <vfprintf+0x98>
    240c:	80 33       	cpi	r24, 0x30	; 48
    240e:	69 f4       	brne	.+26     	; 0x242a <vfprintf+0x9e>
    2410:	29 2d       	mov	r18, r9
    2412:	21 60       	ori	r18, 0x01	; 1
    2414:	2d c0       	rjmp	.+90     	; 0x2470 <vfprintf+0xe4>
    2416:	39 2d       	mov	r19, r9
    2418:	32 60       	ori	r19, 0x02	; 2
    241a:	93 2e       	mov	r9, r19
    241c:	89 2d       	mov	r24, r9
    241e:	84 60       	ori	r24, 0x04	; 4
    2420:	98 2e       	mov	r9, r24
    2422:	2a c0       	rjmp	.+84     	; 0x2478 <vfprintf+0xec>
    2424:	e9 2d       	mov	r30, r9
    2426:	e8 60       	ori	r30, 0x08	; 8
    2428:	15 c0       	rjmp	.+42     	; 0x2454 <vfprintf+0xc8>
    242a:	97 fc       	sbrc	r9, 7
    242c:	2d c0       	rjmp	.+90     	; 0x2488 <vfprintf+0xfc>
    242e:	20 ed       	ldi	r18, 0xD0	; 208
    2430:	28 0f       	add	r18, r24
    2432:	2a 30       	cpi	r18, 0x0A	; 10
    2434:	88 f4       	brcc	.+34     	; 0x2458 <vfprintf+0xcc>
    2436:	96 fe       	sbrs	r9, 6
    2438:	06 c0       	rjmp	.+12     	; 0x2446 <vfprintf+0xba>
    243a:	3a e0       	ldi	r19, 0x0A	; 10
    243c:	13 9f       	mul	r17, r19
    243e:	20 0d       	add	r18, r0
    2440:	11 24       	eor	r1, r1
    2442:	12 2f       	mov	r17, r18
    2444:	19 c0       	rjmp	.+50     	; 0x2478 <vfprintf+0xec>
    2446:	8a e0       	ldi	r24, 0x0A	; 10
    2448:	58 9e       	mul	r5, r24
    244a:	20 0d       	add	r18, r0
    244c:	11 24       	eor	r1, r1
    244e:	52 2e       	mov	r5, r18
    2450:	e9 2d       	mov	r30, r9
    2452:	e0 62       	ori	r30, 0x20	; 32
    2454:	9e 2e       	mov	r9, r30
    2456:	10 c0       	rjmp	.+32     	; 0x2478 <vfprintf+0xec>
    2458:	8e 32       	cpi	r24, 0x2E	; 46
    245a:	31 f4       	brne	.+12     	; 0x2468 <vfprintf+0xdc>
    245c:	96 fc       	sbrc	r9, 6
    245e:	e5 c2       	rjmp	.+1482   	; 0x2a2a <vfprintf+0x69e>
    2460:	f9 2d       	mov	r31, r9
    2462:	f0 64       	ori	r31, 0x40	; 64
    2464:	9f 2e       	mov	r9, r31
    2466:	08 c0       	rjmp	.+16     	; 0x2478 <vfprintf+0xec>
    2468:	8c 36       	cpi	r24, 0x6C	; 108
    246a:	21 f4       	brne	.+8      	; 0x2474 <vfprintf+0xe8>
    246c:	29 2d       	mov	r18, r9
    246e:	20 68       	ori	r18, 0x80	; 128
    2470:	92 2e       	mov	r9, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <vfprintf+0xec>
    2474:	88 36       	cpi	r24, 0x68	; 104
    2476:	41 f4       	brne	.+16     	; 0x2488 <vfprintf+0xfc>
    2478:	f1 01       	movw	r30, r2
    247a:	93 fd       	sbrc	r25, 3
    247c:	85 91       	lpm	r24, Z+
    247e:	93 ff       	sbrs	r25, 3
    2480:	81 91       	ld	r24, Z+
    2482:	1f 01       	movw	r2, r30
    2484:	81 11       	cpse	r24, r1
    2486:	b3 cf       	rjmp	.-154    	; 0x23ee <vfprintf+0x62>
    2488:	9b eb       	ldi	r25, 0xBB	; 187
    248a:	98 0f       	add	r25, r24
    248c:	93 30       	cpi	r25, 0x03	; 3
    248e:	20 f4       	brcc	.+8      	; 0x2498 <vfprintf+0x10c>
    2490:	99 2d       	mov	r25, r9
    2492:	90 61       	ori	r25, 0x10	; 16
    2494:	80 5e       	subi	r24, 0xE0	; 224
    2496:	07 c0       	rjmp	.+14     	; 0x24a6 <vfprintf+0x11a>
    2498:	9b e9       	ldi	r25, 0x9B	; 155
    249a:	98 0f       	add	r25, r24
    249c:	93 30       	cpi	r25, 0x03	; 3
    249e:	08 f0       	brcs	.+2      	; 0x24a2 <vfprintf+0x116>
    24a0:	66 c1       	rjmp	.+716    	; 0x276e <vfprintf+0x3e2>
    24a2:	99 2d       	mov	r25, r9
    24a4:	9f 7e       	andi	r25, 0xEF	; 239
    24a6:	96 ff       	sbrs	r25, 6
    24a8:	16 e0       	ldi	r17, 0x06	; 6
    24aa:	9f 73       	andi	r25, 0x3F	; 63
    24ac:	99 2e       	mov	r9, r25
    24ae:	85 36       	cpi	r24, 0x65	; 101
    24b0:	19 f4       	brne	.+6      	; 0x24b8 <vfprintf+0x12c>
    24b2:	90 64       	ori	r25, 0x40	; 64
    24b4:	99 2e       	mov	r9, r25
    24b6:	08 c0       	rjmp	.+16     	; 0x24c8 <vfprintf+0x13c>
    24b8:	86 36       	cpi	r24, 0x66	; 102
    24ba:	21 f4       	brne	.+8      	; 0x24c4 <vfprintf+0x138>
    24bc:	39 2f       	mov	r19, r25
    24be:	30 68       	ori	r19, 0x80	; 128
    24c0:	93 2e       	mov	r9, r19
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <vfprintf+0x13c>
    24c4:	11 11       	cpse	r17, r1
    24c6:	11 50       	subi	r17, 0x01	; 1
    24c8:	97 fe       	sbrs	r9, 7
    24ca:	07 c0       	rjmp	.+14     	; 0x24da <vfprintf+0x14e>
    24cc:	1c 33       	cpi	r17, 0x3C	; 60
    24ce:	50 f4       	brcc	.+20     	; 0x24e4 <vfprintf+0x158>
    24d0:	44 24       	eor	r4, r4
    24d2:	43 94       	inc	r4
    24d4:	41 0e       	add	r4, r17
    24d6:	27 e0       	ldi	r18, 0x07	; 7
    24d8:	0b c0       	rjmp	.+22     	; 0x24f0 <vfprintf+0x164>
    24da:	18 30       	cpi	r17, 0x08	; 8
    24dc:	38 f0       	brcs	.+14     	; 0x24ec <vfprintf+0x160>
    24de:	27 e0       	ldi	r18, 0x07	; 7
    24e0:	17 e0       	ldi	r17, 0x07	; 7
    24e2:	05 c0       	rjmp	.+10     	; 0x24ee <vfprintf+0x162>
    24e4:	27 e0       	ldi	r18, 0x07	; 7
    24e6:	9c e3       	ldi	r25, 0x3C	; 60
    24e8:	49 2e       	mov	r4, r25
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <vfprintf+0x164>
    24ec:	21 2f       	mov	r18, r17
    24ee:	41 2c       	mov	r4, r1
    24f0:	56 01       	movw	r10, r12
    24f2:	84 e0       	ldi	r24, 0x04	; 4
    24f4:	a8 0e       	add	r10, r24
    24f6:	b1 1c       	adc	r11, r1
    24f8:	f6 01       	movw	r30, r12
    24fa:	60 81       	ld	r22, Z
    24fc:	71 81       	ldd	r23, Z+1	; 0x01
    24fe:	82 81       	ldd	r24, Z+2	; 0x02
    2500:	93 81       	ldd	r25, Z+3	; 0x03
    2502:	04 2d       	mov	r16, r4
    2504:	a3 01       	movw	r20, r6
    2506:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__ftoa_engine>
    250a:	6c 01       	movw	r12, r24
    250c:	f9 81       	ldd	r31, Y+1	; 0x01
    250e:	fc 87       	std	Y+12, r31	; 0x0c
    2510:	f0 ff       	sbrs	r31, 0
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <vfprintf+0x18c>
    2514:	f3 ff       	sbrs	r31, 3
    2516:	06 c0       	rjmp	.+12     	; 0x2524 <vfprintf+0x198>
    2518:	91 fc       	sbrc	r9, 1
    251a:	06 c0       	rjmp	.+12     	; 0x2528 <vfprintf+0x19c>
    251c:	92 fe       	sbrs	r9, 2
    251e:	06 c0       	rjmp	.+12     	; 0x252c <vfprintf+0x1a0>
    2520:	00 e2       	ldi	r16, 0x20	; 32
    2522:	05 c0       	rjmp	.+10     	; 0x252e <vfprintf+0x1a2>
    2524:	0d e2       	ldi	r16, 0x2D	; 45
    2526:	03 c0       	rjmp	.+6      	; 0x252e <vfprintf+0x1a2>
    2528:	0b e2       	ldi	r16, 0x2B	; 43
    252a:	01 c0       	rjmp	.+2      	; 0x252e <vfprintf+0x1a2>
    252c:	00 e0       	ldi	r16, 0x00	; 0
    252e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2530:	8c 70       	andi	r24, 0x0C	; 12
    2532:	19 f0       	breq	.+6      	; 0x253a <vfprintf+0x1ae>
    2534:	01 11       	cpse	r16, r1
    2536:	5a c2       	rjmp	.+1204   	; 0x29ec <vfprintf+0x660>
    2538:	9b c2       	rjmp	.+1334   	; 0x2a70 <vfprintf+0x6e4>
    253a:	97 fe       	sbrs	r9, 7
    253c:	10 c0       	rjmp	.+32     	; 0x255e <vfprintf+0x1d2>
    253e:	4c 0c       	add	r4, r12
    2540:	fc 85       	ldd	r31, Y+12	; 0x0c
    2542:	f4 ff       	sbrs	r31, 4
    2544:	04 c0       	rjmp	.+8      	; 0x254e <vfprintf+0x1c2>
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	81 33       	cpi	r24, 0x31	; 49
    254a:	09 f4       	brne	.+2      	; 0x254e <vfprintf+0x1c2>
    254c:	4a 94       	dec	r4
    254e:	14 14       	cp	r1, r4
    2550:	74 f5       	brge	.+92     	; 0x25ae <vfprintf+0x222>
    2552:	28 e0       	ldi	r18, 0x08	; 8
    2554:	24 15       	cp	r18, r4
    2556:	78 f5       	brcc	.+94     	; 0x25b6 <vfprintf+0x22a>
    2558:	88 e0       	ldi	r24, 0x08	; 8
    255a:	48 2e       	mov	r4, r24
    255c:	2c c0       	rjmp	.+88     	; 0x25b6 <vfprintf+0x22a>
    255e:	96 fc       	sbrc	r9, 6
    2560:	2a c0       	rjmp	.+84     	; 0x25b6 <vfprintf+0x22a>
    2562:	81 2f       	mov	r24, r17
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	8c 15       	cp	r24, r12
    2568:	9d 05       	cpc	r25, r13
    256a:	9c f0       	brlt	.+38     	; 0x2592 <vfprintf+0x206>
    256c:	3c ef       	ldi	r19, 0xFC	; 252
    256e:	c3 16       	cp	r12, r19
    2570:	3f ef       	ldi	r19, 0xFF	; 255
    2572:	d3 06       	cpc	r13, r19
    2574:	74 f0       	brlt	.+28     	; 0x2592 <vfprintf+0x206>
    2576:	89 2d       	mov	r24, r9
    2578:	80 68       	ori	r24, 0x80	; 128
    257a:	98 2e       	mov	r9, r24
    257c:	0a c0       	rjmp	.+20     	; 0x2592 <vfprintf+0x206>
    257e:	e2 e0       	ldi	r30, 0x02	; 2
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	ec 0f       	add	r30, r28
    2584:	fd 1f       	adc	r31, r29
    2586:	e1 0f       	add	r30, r17
    2588:	f1 1d       	adc	r31, r1
    258a:	80 81       	ld	r24, Z
    258c:	80 33       	cpi	r24, 0x30	; 48
    258e:	19 f4       	brne	.+6      	; 0x2596 <vfprintf+0x20a>
    2590:	11 50       	subi	r17, 0x01	; 1
    2592:	11 11       	cpse	r17, r1
    2594:	f4 cf       	rjmp	.-24     	; 0x257e <vfprintf+0x1f2>
    2596:	97 fe       	sbrs	r9, 7
    2598:	0e c0       	rjmp	.+28     	; 0x25b6 <vfprintf+0x22a>
    259a:	44 24       	eor	r4, r4
    259c:	43 94       	inc	r4
    259e:	41 0e       	add	r4, r17
    25a0:	81 2f       	mov	r24, r17
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	c8 16       	cp	r12, r24
    25a6:	d9 06       	cpc	r13, r25
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <vfprintf+0x228>
    25aa:	1c 19       	sub	r17, r12
    25ac:	04 c0       	rjmp	.+8      	; 0x25b6 <vfprintf+0x22a>
    25ae:	44 24       	eor	r4, r4
    25b0:	43 94       	inc	r4
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <vfprintf+0x22a>
    25b4:	10 e0       	ldi	r17, 0x00	; 0
    25b6:	97 fe       	sbrs	r9, 7
    25b8:	06 c0       	rjmp	.+12     	; 0x25c6 <vfprintf+0x23a>
    25ba:	1c 14       	cp	r1, r12
    25bc:	1d 04       	cpc	r1, r13
    25be:	34 f4       	brge	.+12     	; 0x25cc <vfprintf+0x240>
    25c0:	c6 01       	movw	r24, r12
    25c2:	01 96       	adiw	r24, 0x01	; 1
    25c4:	05 c0       	rjmp	.+10     	; 0x25d0 <vfprintf+0x244>
    25c6:	85 e0       	ldi	r24, 0x05	; 5
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <vfprintf+0x244>
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	01 11       	cpse	r16, r1
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	11 23       	and	r17, r17
    25d6:	31 f0       	breq	.+12     	; 0x25e4 <vfprintf+0x258>
    25d8:	21 2f       	mov	r18, r17
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	2f 5f       	subi	r18, 0xFF	; 255
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	82 0f       	add	r24, r18
    25e2:	93 1f       	adc	r25, r19
    25e4:	25 2d       	mov	r18, r5
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	82 17       	cp	r24, r18
    25ea:	93 07       	cpc	r25, r19
    25ec:	14 f4       	brge	.+4      	; 0x25f2 <vfprintf+0x266>
    25ee:	58 1a       	sub	r5, r24
    25f0:	01 c0       	rjmp	.+2      	; 0x25f4 <vfprintf+0x268>
    25f2:	51 2c       	mov	r5, r1
    25f4:	89 2d       	mov	r24, r9
    25f6:	89 70       	andi	r24, 0x09	; 9
    25f8:	49 f4       	brne	.+18     	; 0x260c <vfprintf+0x280>
    25fa:	55 20       	and	r5, r5
    25fc:	39 f0       	breq	.+14     	; 0x260c <vfprintf+0x280>
    25fe:	b7 01       	movw	r22, r14
    2600:	80 e2       	ldi	r24, 0x20	; 32
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2608:	5a 94       	dec	r5
    260a:	f7 cf       	rjmp	.-18     	; 0x25fa <vfprintf+0x26e>
    260c:	00 23       	and	r16, r16
    260e:	29 f0       	breq	.+10     	; 0x261a <vfprintf+0x28e>
    2610:	b7 01       	movw	r22, r14
    2612:	80 2f       	mov	r24, r16
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    261a:	93 fc       	sbrc	r9, 3
    261c:	09 c0       	rjmp	.+18     	; 0x2630 <vfprintf+0x2a4>
    261e:	55 20       	and	r5, r5
    2620:	39 f0       	breq	.+14     	; 0x2630 <vfprintf+0x2a4>
    2622:	b7 01       	movw	r22, r14
    2624:	80 e3       	ldi	r24, 0x30	; 48
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    262c:	5a 94       	dec	r5
    262e:	f7 cf       	rjmp	.-18     	; 0x261e <vfprintf+0x292>
    2630:	97 fe       	sbrs	r9, 7
    2632:	4c c0       	rjmp	.+152    	; 0x26cc <vfprintf+0x340>
    2634:	46 01       	movw	r8, r12
    2636:	d7 fe       	sbrs	r13, 7
    2638:	02 c0       	rjmp	.+4      	; 0x263e <vfprintf+0x2b2>
    263a:	81 2c       	mov	r8, r1
    263c:	91 2c       	mov	r9, r1
    263e:	c6 01       	movw	r24, r12
    2640:	88 19       	sub	r24, r8
    2642:	99 09       	sbc	r25, r9
    2644:	f3 01       	movw	r30, r6
    2646:	e8 0f       	add	r30, r24
    2648:	f9 1f       	adc	r31, r25
    264a:	fe 87       	std	Y+14, r31	; 0x0e
    264c:	ed 87       	std	Y+13, r30	; 0x0d
    264e:	96 01       	movw	r18, r12
    2650:	24 19       	sub	r18, r4
    2652:	31 09       	sbc	r19, r1
    2654:	38 8b       	std	Y+16, r19	; 0x10
    2656:	2f 87       	std	Y+15, r18	; 0x0f
    2658:	01 2f       	mov	r16, r17
    265a:	10 e0       	ldi	r17, 0x00	; 0
    265c:	11 95       	neg	r17
    265e:	01 95       	neg	r16
    2660:	11 09       	sbc	r17, r1
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	83 16       	cp	r8, r19
    2666:	93 06       	cpc	r9, r19
    2668:	29 f4       	brne	.+10     	; 0x2674 <vfprintf+0x2e8>
    266a:	b7 01       	movw	r22, r14
    266c:	8e e2       	ldi	r24, 0x2E	; 46
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2674:	c8 14       	cp	r12, r8
    2676:	d9 04       	cpc	r13, r9
    2678:	4c f0       	brlt	.+18     	; 0x268c <vfprintf+0x300>
    267a:	8f 85       	ldd	r24, Y+15	; 0x0f
    267c:	98 89       	ldd	r25, Y+16	; 0x10
    267e:	88 15       	cp	r24, r8
    2680:	99 05       	cpc	r25, r9
    2682:	24 f4       	brge	.+8      	; 0x268c <vfprintf+0x300>
    2684:	ed 85       	ldd	r30, Y+13	; 0x0d
    2686:	fe 85       	ldd	r31, Y+14	; 0x0e
    2688:	81 81       	ldd	r24, Z+1	; 0x01
    268a:	01 c0       	rjmp	.+2      	; 0x268e <vfprintf+0x302>
    268c:	80 e3       	ldi	r24, 0x30	; 48
    268e:	f1 e0       	ldi	r31, 0x01	; 1
    2690:	8f 1a       	sub	r8, r31
    2692:	91 08       	sbc	r9, r1
    2694:	2d 85       	ldd	r18, Y+13	; 0x0d
    2696:	3e 85       	ldd	r19, Y+14	; 0x0e
    2698:	2f 5f       	subi	r18, 0xFF	; 255
    269a:	3f 4f       	sbci	r19, 0xFF	; 255
    269c:	3e 87       	std	Y+14, r19	; 0x0e
    269e:	2d 87       	std	Y+13, r18	; 0x0d
    26a0:	80 16       	cp	r8, r16
    26a2:	91 06       	cpc	r9, r17
    26a4:	2c f0       	brlt	.+10     	; 0x26b0 <vfprintf+0x324>
    26a6:	b7 01       	movw	r22, r14
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    26ae:	d9 cf       	rjmp	.-78     	; 0x2662 <vfprintf+0x2d6>
    26b0:	c8 14       	cp	r12, r8
    26b2:	d9 04       	cpc	r13, r9
    26b4:	41 f4       	brne	.+16     	; 0x26c6 <vfprintf+0x33a>
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	96 33       	cpi	r25, 0x36	; 54
    26ba:	20 f4       	brcc	.+8      	; 0x26c4 <vfprintf+0x338>
    26bc:	95 33       	cpi	r25, 0x35	; 53
    26be:	19 f4       	brne	.+6      	; 0x26c6 <vfprintf+0x33a>
    26c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    26c2:	34 ff       	sbrs	r19, 4
    26c4:	81 e3       	ldi	r24, 0x31	; 49
    26c6:	b7 01       	movw	r22, r14
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	4e c0       	rjmp	.+156    	; 0x2768 <vfprintf+0x3dc>
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	81 33       	cpi	r24, 0x31	; 49
    26d0:	19 f0       	breq	.+6      	; 0x26d8 <vfprintf+0x34c>
    26d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    26d4:	9f 7e       	andi	r25, 0xEF	; 239
    26d6:	9c 87       	std	Y+12, r25	; 0x0c
    26d8:	b7 01       	movw	r22, r14
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    26e0:	11 11       	cpse	r17, r1
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <vfprintf+0x362>
    26e4:	94 fc       	sbrc	r9, 4
    26e6:	18 c0       	rjmp	.+48     	; 0x2718 <vfprintf+0x38c>
    26e8:	85 e6       	ldi	r24, 0x65	; 101
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	17 c0       	rjmp	.+46     	; 0x271c <vfprintf+0x390>
    26ee:	b7 01       	movw	r22, r14
    26f0:	8e e2       	ldi	r24, 0x2E	; 46
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    26f8:	1e 5f       	subi	r17, 0xFE	; 254
    26fa:	82 e0       	ldi	r24, 0x02	; 2
    26fc:	01 e0       	ldi	r16, 0x01	; 1
    26fe:	08 0f       	add	r16, r24
    2700:	f3 01       	movw	r30, r6
    2702:	e8 0f       	add	r30, r24
    2704:	f1 1d       	adc	r31, r1
    2706:	80 81       	ld	r24, Z
    2708:	b7 01       	movw	r22, r14
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2710:	80 2f       	mov	r24, r16
    2712:	01 13       	cpse	r16, r17
    2714:	f3 cf       	rjmp	.-26     	; 0x26fc <vfprintf+0x370>
    2716:	e6 cf       	rjmp	.-52     	; 0x26e4 <vfprintf+0x358>
    2718:	85 e4       	ldi	r24, 0x45	; 69
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	b7 01       	movw	r22, r14
    271e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2722:	d7 fc       	sbrc	r13, 7
    2724:	06 c0       	rjmp	.+12     	; 0x2732 <vfprintf+0x3a6>
    2726:	c1 14       	cp	r12, r1
    2728:	d1 04       	cpc	r13, r1
    272a:	41 f4       	brne	.+16     	; 0x273c <vfprintf+0x3b0>
    272c:	ec 85       	ldd	r30, Y+12	; 0x0c
    272e:	e4 ff       	sbrs	r30, 4
    2730:	05 c0       	rjmp	.+10     	; 0x273c <vfprintf+0x3b0>
    2732:	d1 94       	neg	r13
    2734:	c1 94       	neg	r12
    2736:	d1 08       	sbc	r13, r1
    2738:	8d e2       	ldi	r24, 0x2D	; 45
    273a:	01 c0       	rjmp	.+2      	; 0x273e <vfprintf+0x3b2>
    273c:	8b e2       	ldi	r24, 0x2B	; 43
    273e:	b7 01       	movw	r22, r14
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2746:	80 e3       	ldi	r24, 0x30	; 48
    2748:	2a e0       	ldi	r18, 0x0A	; 10
    274a:	c2 16       	cp	r12, r18
    274c:	d1 04       	cpc	r13, r1
    274e:	2c f0       	brlt	.+10     	; 0x275a <vfprintf+0x3ce>
    2750:	8f 5f       	subi	r24, 0xFF	; 255
    2752:	fa e0       	ldi	r31, 0x0A	; 10
    2754:	cf 1a       	sub	r12, r31
    2756:	d1 08       	sbc	r13, r1
    2758:	f7 cf       	rjmp	.-18     	; 0x2748 <vfprintf+0x3bc>
    275a:	b7 01       	movw	r22, r14
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2762:	b7 01       	movw	r22, r14
    2764:	c6 01       	movw	r24, r12
    2766:	c0 96       	adiw	r24, 0x30	; 48
    2768:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    276c:	54 c1       	rjmp	.+680    	; 0x2a16 <vfprintf+0x68a>
    276e:	83 36       	cpi	r24, 0x63	; 99
    2770:	31 f0       	breq	.+12     	; 0x277e <vfprintf+0x3f2>
    2772:	83 37       	cpi	r24, 0x73	; 115
    2774:	79 f0       	breq	.+30     	; 0x2794 <vfprintf+0x408>
    2776:	83 35       	cpi	r24, 0x53	; 83
    2778:	09 f0       	breq	.+2      	; 0x277c <vfprintf+0x3f0>
    277a:	56 c0       	rjmp	.+172    	; 0x2828 <vfprintf+0x49c>
    277c:	20 c0       	rjmp	.+64     	; 0x27be <vfprintf+0x432>
    277e:	56 01       	movw	r10, r12
    2780:	32 e0       	ldi	r19, 0x02	; 2
    2782:	a3 0e       	add	r10, r19
    2784:	b1 1c       	adc	r11, r1
    2786:	f6 01       	movw	r30, r12
    2788:	80 81       	ld	r24, Z
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	01 e0       	ldi	r16, 0x01	; 1
    278e:	10 e0       	ldi	r17, 0x00	; 0
    2790:	63 01       	movw	r12, r6
    2792:	12 c0       	rjmp	.+36     	; 0x27b8 <vfprintf+0x42c>
    2794:	56 01       	movw	r10, r12
    2796:	f2 e0       	ldi	r31, 0x02	; 2
    2798:	af 0e       	add	r10, r31
    279a:	b1 1c       	adc	r11, r1
    279c:	f6 01       	movw	r30, r12
    279e:	c0 80       	ld	r12, Z
    27a0:	d1 80       	ldd	r13, Z+1	; 0x01
    27a2:	96 fe       	sbrs	r9, 6
    27a4:	03 c0       	rjmp	.+6      	; 0x27ac <vfprintf+0x420>
    27a6:	61 2f       	mov	r22, r17
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <vfprintf+0x424>
    27ac:	6f ef       	ldi	r22, 0xFF	; 255
    27ae:	7f ef       	ldi	r23, 0xFF	; 255
    27b0:	c6 01       	movw	r24, r12
    27b2:	0e 94 94 16 	call	0x2d28	; 0x2d28 <strnlen>
    27b6:	8c 01       	movw	r16, r24
    27b8:	f9 2d       	mov	r31, r9
    27ba:	ff 77       	andi	r31, 0x7F	; 127
    27bc:	14 c0       	rjmp	.+40     	; 0x27e6 <vfprintf+0x45a>
    27be:	56 01       	movw	r10, r12
    27c0:	22 e0       	ldi	r18, 0x02	; 2
    27c2:	a2 0e       	add	r10, r18
    27c4:	b1 1c       	adc	r11, r1
    27c6:	f6 01       	movw	r30, r12
    27c8:	c0 80       	ld	r12, Z
    27ca:	d1 80       	ldd	r13, Z+1	; 0x01
    27cc:	96 fe       	sbrs	r9, 6
    27ce:	03 c0       	rjmp	.+6      	; 0x27d6 <vfprintf+0x44a>
    27d0:	61 2f       	mov	r22, r17
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <vfprintf+0x44e>
    27d6:	6f ef       	ldi	r22, 0xFF	; 255
    27d8:	7f ef       	ldi	r23, 0xFF	; 255
    27da:	c6 01       	movw	r24, r12
    27dc:	0e 94 89 16 	call	0x2d12	; 0x2d12 <strnlen_P>
    27e0:	8c 01       	movw	r16, r24
    27e2:	f9 2d       	mov	r31, r9
    27e4:	f0 68       	ori	r31, 0x80	; 128
    27e6:	9f 2e       	mov	r9, r31
    27e8:	f3 fd       	sbrc	r31, 3
    27ea:	1a c0       	rjmp	.+52     	; 0x2820 <vfprintf+0x494>
    27ec:	85 2d       	mov	r24, r5
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	08 17       	cp	r16, r24
    27f2:	19 07       	cpc	r17, r25
    27f4:	a8 f4       	brcc	.+42     	; 0x2820 <vfprintf+0x494>
    27f6:	b7 01       	movw	r22, r14
    27f8:	80 e2       	ldi	r24, 0x20	; 32
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2800:	5a 94       	dec	r5
    2802:	f4 cf       	rjmp	.-24     	; 0x27ec <vfprintf+0x460>
    2804:	f6 01       	movw	r30, r12
    2806:	97 fc       	sbrc	r9, 7
    2808:	85 91       	lpm	r24, Z+
    280a:	97 fe       	sbrs	r9, 7
    280c:	81 91       	ld	r24, Z+
    280e:	6f 01       	movw	r12, r30
    2810:	b7 01       	movw	r22, r14
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2818:	51 10       	cpse	r5, r1
    281a:	5a 94       	dec	r5
    281c:	01 50       	subi	r16, 0x01	; 1
    281e:	11 09       	sbc	r17, r1
    2820:	01 15       	cp	r16, r1
    2822:	11 05       	cpc	r17, r1
    2824:	79 f7       	brne	.-34     	; 0x2804 <vfprintf+0x478>
    2826:	f7 c0       	rjmp	.+494    	; 0x2a16 <vfprintf+0x68a>
    2828:	84 36       	cpi	r24, 0x64	; 100
    282a:	11 f0       	breq	.+4      	; 0x2830 <vfprintf+0x4a4>
    282c:	89 36       	cpi	r24, 0x69	; 105
    282e:	61 f5       	brne	.+88     	; 0x2888 <vfprintf+0x4fc>
    2830:	56 01       	movw	r10, r12
    2832:	97 fe       	sbrs	r9, 7
    2834:	09 c0       	rjmp	.+18     	; 0x2848 <vfprintf+0x4bc>
    2836:	24 e0       	ldi	r18, 0x04	; 4
    2838:	a2 0e       	add	r10, r18
    283a:	b1 1c       	adc	r11, r1
    283c:	f6 01       	movw	r30, r12
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	0a c0       	rjmp	.+20     	; 0x285c <vfprintf+0x4d0>
    2848:	f2 e0       	ldi	r31, 0x02	; 2
    284a:	af 0e       	add	r10, r31
    284c:	b1 1c       	adc	r11, r1
    284e:	f6 01       	movw	r30, r12
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	07 2e       	mov	r0, r23
    2856:	00 0c       	add	r0, r0
    2858:	88 0b       	sbc	r24, r24
    285a:	99 0b       	sbc	r25, r25
    285c:	f9 2d       	mov	r31, r9
    285e:	ff 76       	andi	r31, 0x6F	; 111
    2860:	9f 2e       	mov	r9, r31
    2862:	97 ff       	sbrs	r25, 7
    2864:	09 c0       	rjmp	.+18     	; 0x2878 <vfprintf+0x4ec>
    2866:	90 95       	com	r25
    2868:	80 95       	com	r24
    286a:	70 95       	com	r23
    286c:	61 95       	neg	r22
    286e:	7f 4f       	sbci	r23, 0xFF	; 255
    2870:	8f 4f       	sbci	r24, 0xFF	; 255
    2872:	9f 4f       	sbci	r25, 0xFF	; 255
    2874:	f0 68       	ori	r31, 0x80	; 128
    2876:	9f 2e       	mov	r9, r31
    2878:	2a e0       	ldi	r18, 0x0A	; 10
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	a3 01       	movw	r20, r6
    287e:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__ultoa_invert>
    2882:	c8 2e       	mov	r12, r24
    2884:	c6 18       	sub	r12, r6
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <vfprintf+0x57a>
    2888:	09 2d       	mov	r16, r9
    288a:	85 37       	cpi	r24, 0x75	; 117
    288c:	21 f4       	brne	.+8      	; 0x2896 <vfprintf+0x50a>
    288e:	0f 7e       	andi	r16, 0xEF	; 239
    2890:	2a e0       	ldi	r18, 0x0A	; 10
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	1d c0       	rjmp	.+58     	; 0x28d0 <vfprintf+0x544>
    2896:	09 7f       	andi	r16, 0xF9	; 249
    2898:	8f 36       	cpi	r24, 0x6F	; 111
    289a:	91 f0       	breq	.+36     	; 0x28c0 <vfprintf+0x534>
    289c:	18 f4       	brcc	.+6      	; 0x28a4 <vfprintf+0x518>
    289e:	88 35       	cpi	r24, 0x58	; 88
    28a0:	59 f0       	breq	.+22     	; 0x28b8 <vfprintf+0x52c>
    28a2:	c3 c0       	rjmp	.+390    	; 0x2a2a <vfprintf+0x69e>
    28a4:	80 37       	cpi	r24, 0x70	; 112
    28a6:	19 f0       	breq	.+6      	; 0x28ae <vfprintf+0x522>
    28a8:	88 37       	cpi	r24, 0x78	; 120
    28aa:	11 f0       	breq	.+4      	; 0x28b0 <vfprintf+0x524>
    28ac:	be c0       	rjmp	.+380    	; 0x2a2a <vfprintf+0x69e>
    28ae:	00 61       	ori	r16, 0x10	; 16
    28b0:	04 ff       	sbrs	r16, 4
    28b2:	09 c0       	rjmp	.+18     	; 0x28c6 <vfprintf+0x53a>
    28b4:	04 60       	ori	r16, 0x04	; 4
    28b6:	07 c0       	rjmp	.+14     	; 0x28c6 <vfprintf+0x53a>
    28b8:	94 fe       	sbrs	r9, 4
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <vfprintf+0x540>
    28bc:	06 60       	ori	r16, 0x06	; 6
    28be:	06 c0       	rjmp	.+12     	; 0x28cc <vfprintf+0x540>
    28c0:	28 e0       	ldi	r18, 0x08	; 8
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	05 c0       	rjmp	.+10     	; 0x28d0 <vfprintf+0x544>
    28c6:	20 e1       	ldi	r18, 0x10	; 16
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <vfprintf+0x544>
    28cc:	20 e1       	ldi	r18, 0x10	; 16
    28ce:	32 e0       	ldi	r19, 0x02	; 2
    28d0:	56 01       	movw	r10, r12
    28d2:	07 ff       	sbrs	r16, 7
    28d4:	09 c0       	rjmp	.+18     	; 0x28e8 <vfprintf+0x55c>
    28d6:	84 e0       	ldi	r24, 0x04	; 4
    28d8:	a8 0e       	add	r10, r24
    28da:	b1 1c       	adc	r11, r1
    28dc:	f6 01       	movw	r30, r12
    28de:	60 81       	ld	r22, Z
    28e0:	71 81       	ldd	r23, Z+1	; 0x01
    28e2:	82 81       	ldd	r24, Z+2	; 0x02
    28e4:	93 81       	ldd	r25, Z+3	; 0x03
    28e6:	08 c0       	rjmp	.+16     	; 0x28f8 <vfprintf+0x56c>
    28e8:	f2 e0       	ldi	r31, 0x02	; 2
    28ea:	af 0e       	add	r10, r31
    28ec:	b1 1c       	adc	r11, r1
    28ee:	f6 01       	movw	r30, r12
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a3 01       	movw	r20, r6
    28fa:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__ultoa_invert>
    28fe:	c8 2e       	mov	r12, r24
    2900:	c6 18       	sub	r12, r6
    2902:	0f 77       	andi	r16, 0x7F	; 127
    2904:	90 2e       	mov	r9, r16
    2906:	96 fe       	sbrs	r9, 6
    2908:	0b c0       	rjmp	.+22     	; 0x2920 <vfprintf+0x594>
    290a:	09 2d       	mov	r16, r9
    290c:	0e 7f       	andi	r16, 0xFE	; 254
    290e:	c1 16       	cp	r12, r17
    2910:	50 f4       	brcc	.+20     	; 0x2926 <vfprintf+0x59a>
    2912:	94 fe       	sbrs	r9, 4
    2914:	0a c0       	rjmp	.+20     	; 0x292a <vfprintf+0x59e>
    2916:	92 fc       	sbrc	r9, 2
    2918:	08 c0       	rjmp	.+16     	; 0x292a <vfprintf+0x59e>
    291a:	09 2d       	mov	r16, r9
    291c:	0e 7e       	andi	r16, 0xEE	; 238
    291e:	05 c0       	rjmp	.+10     	; 0x292a <vfprintf+0x59e>
    2920:	dc 2c       	mov	r13, r12
    2922:	09 2d       	mov	r16, r9
    2924:	03 c0       	rjmp	.+6      	; 0x292c <vfprintf+0x5a0>
    2926:	dc 2c       	mov	r13, r12
    2928:	01 c0       	rjmp	.+2      	; 0x292c <vfprintf+0x5a0>
    292a:	d1 2e       	mov	r13, r17
    292c:	04 ff       	sbrs	r16, 4
    292e:	0d c0       	rjmp	.+26     	; 0x294a <vfprintf+0x5be>
    2930:	fe 01       	movw	r30, r28
    2932:	ec 0d       	add	r30, r12
    2934:	f1 1d       	adc	r31, r1
    2936:	80 81       	ld	r24, Z
    2938:	80 33       	cpi	r24, 0x30	; 48
    293a:	11 f4       	brne	.+4      	; 0x2940 <vfprintf+0x5b4>
    293c:	09 7e       	andi	r16, 0xE9	; 233
    293e:	09 c0       	rjmp	.+18     	; 0x2952 <vfprintf+0x5c6>
    2940:	02 ff       	sbrs	r16, 2
    2942:	06 c0       	rjmp	.+12     	; 0x2950 <vfprintf+0x5c4>
    2944:	d3 94       	inc	r13
    2946:	d3 94       	inc	r13
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <vfprintf+0x5c6>
    294a:	80 2f       	mov	r24, r16
    294c:	86 78       	andi	r24, 0x86	; 134
    294e:	09 f0       	breq	.+2      	; 0x2952 <vfprintf+0x5c6>
    2950:	d3 94       	inc	r13
    2952:	03 fd       	sbrc	r16, 3
    2954:	11 c0       	rjmp	.+34     	; 0x2978 <vfprintf+0x5ec>
    2956:	00 ff       	sbrs	r16, 0
    2958:	06 c0       	rjmp	.+12     	; 0x2966 <vfprintf+0x5da>
    295a:	1c 2d       	mov	r17, r12
    295c:	d5 14       	cp	r13, r5
    295e:	80 f4       	brcc	.+32     	; 0x2980 <vfprintf+0x5f4>
    2960:	15 0d       	add	r17, r5
    2962:	1d 19       	sub	r17, r13
    2964:	0d c0       	rjmp	.+26     	; 0x2980 <vfprintf+0x5f4>
    2966:	d5 14       	cp	r13, r5
    2968:	58 f4       	brcc	.+22     	; 0x2980 <vfprintf+0x5f4>
    296a:	b7 01       	movw	r22, r14
    296c:	80 e2       	ldi	r24, 0x20	; 32
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2974:	d3 94       	inc	r13
    2976:	f7 cf       	rjmp	.-18     	; 0x2966 <vfprintf+0x5da>
    2978:	d5 14       	cp	r13, r5
    297a:	10 f4       	brcc	.+4      	; 0x2980 <vfprintf+0x5f4>
    297c:	5d 18       	sub	r5, r13
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <vfprintf+0x5f6>
    2980:	51 2c       	mov	r5, r1
    2982:	04 ff       	sbrs	r16, 4
    2984:	10 c0       	rjmp	.+32     	; 0x29a6 <vfprintf+0x61a>
    2986:	b7 01       	movw	r22, r14
    2988:	80 e3       	ldi	r24, 0x30	; 48
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2990:	02 ff       	sbrs	r16, 2
    2992:	17 c0       	rjmp	.+46     	; 0x29c2 <vfprintf+0x636>
    2994:	01 fd       	sbrc	r16, 1
    2996:	03 c0       	rjmp	.+6      	; 0x299e <vfprintf+0x612>
    2998:	88 e7       	ldi	r24, 0x78	; 120
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <vfprintf+0x616>
    299e:	88 e5       	ldi	r24, 0x58	; 88
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	b7 01       	movw	r22, r14
    29a4:	0c c0       	rjmp	.+24     	; 0x29be <vfprintf+0x632>
    29a6:	80 2f       	mov	r24, r16
    29a8:	86 78       	andi	r24, 0x86	; 134
    29aa:	59 f0       	breq	.+22     	; 0x29c2 <vfprintf+0x636>
    29ac:	01 ff       	sbrs	r16, 1
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <vfprintf+0x628>
    29b0:	8b e2       	ldi	r24, 0x2B	; 43
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <vfprintf+0x62a>
    29b4:	80 e2       	ldi	r24, 0x20	; 32
    29b6:	07 fd       	sbrc	r16, 7
    29b8:	8d e2       	ldi	r24, 0x2D	; 45
    29ba:	b7 01       	movw	r22, r14
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    29c2:	c1 16       	cp	r12, r17
    29c4:	38 f4       	brcc	.+14     	; 0x29d4 <vfprintf+0x648>
    29c6:	b7 01       	movw	r22, r14
    29c8:	80 e3       	ldi	r24, 0x30	; 48
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    29d0:	11 50       	subi	r17, 0x01	; 1
    29d2:	f7 cf       	rjmp	.-18     	; 0x29c2 <vfprintf+0x636>
    29d4:	ca 94       	dec	r12
    29d6:	f3 01       	movw	r30, r6
    29d8:	ec 0d       	add	r30, r12
    29da:	f1 1d       	adc	r31, r1
    29dc:	80 81       	ld	r24, Z
    29de:	b7 01       	movw	r22, r14
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    29e6:	c1 10       	cpse	r12, r1
    29e8:	f5 cf       	rjmp	.-22     	; 0x29d4 <vfprintf+0x648>
    29ea:	15 c0       	rjmp	.+42     	; 0x2a16 <vfprintf+0x68a>
    29ec:	f4 e0       	ldi	r31, 0x04	; 4
    29ee:	f5 15       	cp	r31, r5
    29f0:	60 f5       	brcc	.+88     	; 0x2a4a <vfprintf+0x6be>
    29f2:	84 e0       	ldi	r24, 0x04	; 4
    29f4:	58 1a       	sub	r5, r24
    29f6:	93 fe       	sbrs	r9, 3
    29f8:	1f c0       	rjmp	.+62     	; 0x2a38 <vfprintf+0x6ac>
    29fa:	01 11       	cpse	r16, r1
    29fc:	27 c0       	rjmp	.+78     	; 0x2a4c <vfprintf+0x6c0>
    29fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a00:	23 ff       	sbrs	r18, 3
    2a02:	2a c0       	rjmp	.+84     	; 0x2a58 <vfprintf+0x6cc>
    2a04:	0c e1       	ldi	r16, 0x1C	; 28
    2a06:	11 e0       	ldi	r17, 0x01	; 1
    2a08:	39 2d       	mov	r19, r9
    2a0a:	30 71       	andi	r19, 0x10	; 16
    2a0c:	93 2e       	mov	r9, r19
    2a0e:	f8 01       	movw	r30, r16
    2a10:	84 91       	lpm	r24, Z
    2a12:	81 11       	cpse	r24, r1
    2a14:	24 c0       	rjmp	.+72     	; 0x2a5e <vfprintf+0x6d2>
    2a16:	55 20       	and	r5, r5
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <vfprintf+0x690>
    2a1a:	e4 cc       	rjmp	.-1592   	; 0x23e4 <vfprintf+0x58>
    2a1c:	b7 01       	movw	r22, r14
    2a1e:	80 e2       	ldi	r24, 0x20	; 32
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2a26:	5a 94       	dec	r5
    2a28:	f6 cf       	rjmp	.-20     	; 0x2a16 <vfprintf+0x68a>
    2a2a:	f7 01       	movw	r30, r14
    2a2c:	86 81       	ldd	r24, Z+6	; 0x06
    2a2e:	97 81       	ldd	r25, Z+7	; 0x07
    2a30:	26 c0       	rjmp	.+76     	; 0x2a7e <vfprintf+0x6f2>
    2a32:	8f ef       	ldi	r24, 0xFF	; 255
    2a34:	9f ef       	ldi	r25, 0xFF	; 255
    2a36:	23 c0       	rjmp	.+70     	; 0x2a7e <vfprintf+0x6f2>
    2a38:	b7 01       	movw	r22, r14
    2a3a:	80 e2       	ldi	r24, 0x20	; 32
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2a42:	5a 94       	dec	r5
    2a44:	51 10       	cpse	r5, r1
    2a46:	f8 cf       	rjmp	.-16     	; 0x2a38 <vfprintf+0x6ac>
    2a48:	d8 cf       	rjmp	.-80     	; 0x29fa <vfprintf+0x66e>
    2a4a:	51 2c       	mov	r5, r1
    2a4c:	b7 01       	movw	r22, r14
    2a4e:	80 2f       	mov	r24, r16
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2a56:	d3 cf       	rjmp	.-90     	; 0x29fe <vfprintf+0x672>
    2a58:	00 e2       	ldi	r16, 0x20	; 32
    2a5a:	11 e0       	ldi	r17, 0x01	; 1
    2a5c:	d5 cf       	rjmp	.-86     	; 0x2a08 <vfprintf+0x67c>
    2a5e:	91 10       	cpse	r9, r1
    2a60:	80 52       	subi	r24, 0x20	; 32
    2a62:	b7 01       	movw	r22, r14
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <fputc>
    2a6a:	0f 5f       	subi	r16, 0xFF	; 255
    2a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6e:	cf cf       	rjmp	.-98     	; 0x2a0e <vfprintf+0x682>
    2a70:	23 e0       	ldi	r18, 0x03	; 3
    2a72:	25 15       	cp	r18, r5
    2a74:	10 f4       	brcc	.+4      	; 0x2a7a <vfprintf+0x6ee>
    2a76:	83 e0       	ldi	r24, 0x03	; 3
    2a78:	bd cf       	rjmp	.-134    	; 0x29f4 <vfprintf+0x668>
    2a7a:	51 2c       	mov	r5, r1
    2a7c:	c0 cf       	rjmp	.-128    	; 0x29fe <vfprintf+0x672>
    2a7e:	60 96       	adiw	r28, 0x10	; 16
    2a80:	e2 e1       	ldi	r30, 0x12	; 18
    2a82:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__epilogue_restores__>

00002a86 <__udivmodsi4>:
    2a86:	a1 e2       	ldi	r26, 0x21	; 33
    2a88:	1a 2e       	mov	r1, r26
    2a8a:	aa 1b       	sub	r26, r26
    2a8c:	bb 1b       	sub	r27, r27
    2a8e:	fd 01       	movw	r30, r26
    2a90:	0d c0       	rjmp	.+26     	; 0x2aac <__udivmodsi4_ep>

00002a92 <__udivmodsi4_loop>:
    2a92:	aa 1f       	adc	r26, r26
    2a94:	bb 1f       	adc	r27, r27
    2a96:	ee 1f       	adc	r30, r30
    2a98:	ff 1f       	adc	r31, r31
    2a9a:	a2 17       	cp	r26, r18
    2a9c:	b3 07       	cpc	r27, r19
    2a9e:	e4 07       	cpc	r30, r20
    2aa0:	f5 07       	cpc	r31, r21
    2aa2:	20 f0       	brcs	.+8      	; 0x2aac <__udivmodsi4_ep>
    2aa4:	a2 1b       	sub	r26, r18
    2aa6:	b3 0b       	sbc	r27, r19
    2aa8:	e4 0b       	sbc	r30, r20
    2aaa:	f5 0b       	sbc	r31, r21

00002aac <__udivmodsi4_ep>:
    2aac:	66 1f       	adc	r22, r22
    2aae:	77 1f       	adc	r23, r23
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	1a 94       	dec	r1
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <__udivmodsi4_loop>
    2ab8:	60 95       	com	r22
    2aba:	70 95       	com	r23
    2abc:	80 95       	com	r24
    2abe:	90 95       	com	r25
    2ac0:	9b 01       	movw	r18, r22
    2ac2:	ac 01       	movw	r20, r24
    2ac4:	bd 01       	movw	r22, r26
    2ac6:	cf 01       	movw	r24, r30
    2ac8:	08 95       	ret

00002aca <__tablejump2__>:
    2aca:	ee 0f       	add	r30, r30
    2acc:	ff 1f       	adc	r31, r31
    2ace:	05 90       	lpm	r0, Z+
    2ad0:	f4 91       	lpm	r31, Z
    2ad2:	e0 2d       	mov	r30, r0
    2ad4:	09 94       	ijmp

00002ad6 <__umulhisi3>:
    2ad6:	a2 9f       	mul	r26, r18
    2ad8:	b0 01       	movw	r22, r0
    2ada:	b3 9f       	mul	r27, r19
    2adc:	c0 01       	movw	r24, r0
    2ade:	a3 9f       	mul	r26, r19
    2ae0:	70 0d       	add	r23, r0
    2ae2:	81 1d       	adc	r24, r1
    2ae4:	11 24       	eor	r1, r1
    2ae6:	91 1d       	adc	r25, r1
    2ae8:	b2 9f       	mul	r27, r18
    2aea:	70 0d       	add	r23, r0
    2aec:	81 1d       	adc	r24, r1
    2aee:	11 24       	eor	r1, r1
    2af0:	91 1d       	adc	r25, r1
    2af2:	08 95       	ret

00002af4 <__prologue_saves__>:
    2af4:	2f 92       	push	r2
    2af6:	3f 92       	push	r3
    2af8:	4f 92       	push	r4
    2afa:	5f 92       	push	r5
    2afc:	6f 92       	push	r6
    2afe:	7f 92       	push	r7
    2b00:	8f 92       	push	r8
    2b02:	9f 92       	push	r9
    2b04:	af 92       	push	r10
    2b06:	bf 92       	push	r11
    2b08:	cf 92       	push	r12
    2b0a:	df 92       	push	r13
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	ca 1b       	sub	r28, r26
    2b1e:	db 0b       	sbc	r29, r27
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	09 94       	ijmp

00002b2c <__epilogue_restores__>:
    2b2c:	2a 88       	ldd	r2, Y+18	; 0x12
    2b2e:	39 88       	ldd	r3, Y+17	; 0x11
    2b30:	48 88       	ldd	r4, Y+16	; 0x10
    2b32:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b34:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b36:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b38:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b3e:	b9 84       	ldd	r11, Y+9	; 0x09
    2b40:	c8 84       	ldd	r12, Y+8	; 0x08
    2b42:	df 80       	ldd	r13, Y+7	; 0x07
    2b44:	ee 80       	ldd	r14, Y+6	; 0x06
    2b46:	fd 80       	ldd	r15, Y+5	; 0x05
    2b48:	0c 81       	ldd	r16, Y+4	; 0x04
    2b4a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b4c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b4e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b50:	ce 0f       	add	r28, r30
    2b52:	d1 1d       	adc	r29, r1
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	ed 01       	movw	r28, r26
    2b60:	08 95       	ret

00002b62 <__ftoa_engine>:
    2b62:	28 30       	cpi	r18, 0x08	; 8
    2b64:	08 f0       	brcs	.+2      	; 0x2b68 <__ftoa_engine+0x6>
    2b66:	27 e0       	ldi	r18, 0x07	; 7
    2b68:	33 27       	eor	r19, r19
    2b6a:	da 01       	movw	r26, r20
    2b6c:	99 0f       	add	r25, r25
    2b6e:	31 1d       	adc	r19, r1
    2b70:	87 fd       	sbrc	r24, 7
    2b72:	91 60       	ori	r25, 0x01	; 1
    2b74:	00 96       	adiw	r24, 0x00	; 0
    2b76:	61 05       	cpc	r22, r1
    2b78:	71 05       	cpc	r23, r1
    2b7a:	39 f4       	brne	.+14     	; 0x2b8a <__ftoa_engine+0x28>
    2b7c:	32 60       	ori	r19, 0x02	; 2
    2b7e:	2e 5f       	subi	r18, 0xFE	; 254
    2b80:	3d 93       	st	X+, r19
    2b82:	30 e3       	ldi	r19, 0x30	; 48
    2b84:	2a 95       	dec	r18
    2b86:	e1 f7       	brne	.-8      	; 0x2b80 <__ftoa_engine+0x1e>
    2b88:	08 95       	ret
    2b8a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b8c:	30 f0       	brcs	.+12     	; 0x2b9a <__ftoa_engine+0x38>
    2b8e:	80 38       	cpi	r24, 0x80	; 128
    2b90:	71 05       	cpc	r23, r1
    2b92:	61 05       	cpc	r22, r1
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <__ftoa_engine+0x36>
    2b96:	3c 5f       	subi	r19, 0xFC	; 252
    2b98:	3c 5f       	subi	r19, 0xFC	; 252
    2b9a:	3d 93       	st	X+, r19
    2b9c:	91 30       	cpi	r25, 0x01	; 1
    2b9e:	08 f0       	brcs	.+2      	; 0x2ba2 <__ftoa_engine+0x40>
    2ba0:	80 68       	ori	r24, 0x80	; 128
    2ba2:	91 1d       	adc	r25, r1
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	1f 93       	push	r17
    2baa:	0f 93       	push	r16
    2bac:	ff 92       	push	r15
    2bae:	ef 92       	push	r14
    2bb0:	19 2f       	mov	r17, r25
    2bb2:	98 7f       	andi	r25, 0xF8	; 248
    2bb4:	96 95       	lsr	r25
    2bb6:	e9 2f       	mov	r30, r25
    2bb8:	96 95       	lsr	r25
    2bba:	96 95       	lsr	r25
    2bbc:	e9 0f       	add	r30, r25
    2bbe:	ff 27       	eor	r31, r31
    2bc0:	e2 58       	subi	r30, 0x82	; 130
    2bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc4:	99 27       	eor	r25, r25
    2bc6:	33 27       	eor	r19, r19
    2bc8:	ee 24       	eor	r14, r14
    2bca:	ff 24       	eor	r15, r15
    2bcc:	a7 01       	movw	r20, r14
    2bce:	e7 01       	movw	r28, r14
    2bd0:	05 90       	lpm	r0, Z+
    2bd2:	08 94       	sec
    2bd4:	07 94       	ror	r0
    2bd6:	28 f4       	brcc	.+10     	; 0x2be2 <__ftoa_engine+0x80>
    2bd8:	36 0f       	add	r19, r22
    2bda:	e7 1e       	adc	r14, r23
    2bdc:	f8 1e       	adc	r15, r24
    2bde:	49 1f       	adc	r20, r25
    2be0:	51 1d       	adc	r21, r1
    2be2:	66 0f       	add	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	88 1f       	adc	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	06 94       	lsr	r0
    2bec:	a1 f7       	brne	.-24     	; 0x2bd6 <__ftoa_engine+0x74>
    2bee:	05 90       	lpm	r0, Z+
    2bf0:	07 94       	ror	r0
    2bf2:	28 f4       	brcc	.+10     	; 0x2bfe <__ftoa_engine+0x9c>
    2bf4:	e7 0e       	add	r14, r23
    2bf6:	f8 1e       	adc	r15, r24
    2bf8:	49 1f       	adc	r20, r25
    2bfa:	56 1f       	adc	r21, r22
    2bfc:	c1 1d       	adc	r28, r1
    2bfe:	77 0f       	add	r23, r23
    2c00:	88 1f       	adc	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	66 1f       	adc	r22, r22
    2c06:	06 94       	lsr	r0
    2c08:	a1 f7       	brne	.-24     	; 0x2bf2 <__ftoa_engine+0x90>
    2c0a:	05 90       	lpm	r0, Z+
    2c0c:	07 94       	ror	r0
    2c0e:	28 f4       	brcc	.+10     	; 0x2c1a <__ftoa_engine+0xb8>
    2c10:	f8 0e       	add	r15, r24
    2c12:	49 1f       	adc	r20, r25
    2c14:	56 1f       	adc	r21, r22
    2c16:	c7 1f       	adc	r28, r23
    2c18:	d1 1d       	adc	r29, r1
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	66 1f       	adc	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	06 94       	lsr	r0
    2c24:	a1 f7       	brne	.-24     	; 0x2c0e <__ftoa_engine+0xac>
    2c26:	05 90       	lpm	r0, Z+
    2c28:	07 94       	ror	r0
    2c2a:	20 f4       	brcc	.+8      	; 0x2c34 <__ftoa_engine+0xd2>
    2c2c:	49 0f       	add	r20, r25
    2c2e:	56 1f       	adc	r21, r22
    2c30:	c7 1f       	adc	r28, r23
    2c32:	d8 1f       	adc	r29, r24
    2c34:	99 0f       	add	r25, r25
    2c36:	66 1f       	adc	r22, r22
    2c38:	77 1f       	adc	r23, r23
    2c3a:	88 1f       	adc	r24, r24
    2c3c:	06 94       	lsr	r0
    2c3e:	a9 f7       	brne	.-22     	; 0x2c2a <__ftoa_engine+0xc8>
    2c40:	84 91       	lpm	r24, Z
    2c42:	10 95       	com	r17
    2c44:	17 70       	andi	r17, 0x07	; 7
    2c46:	41 f0       	breq	.+16     	; 0x2c58 <__ftoa_engine+0xf6>
    2c48:	d6 95       	lsr	r29
    2c4a:	c7 95       	ror	r28
    2c4c:	57 95       	ror	r21
    2c4e:	47 95       	ror	r20
    2c50:	f7 94       	ror	r15
    2c52:	e7 94       	ror	r14
    2c54:	1a 95       	dec	r17
    2c56:	c1 f7       	brne	.-16     	; 0x2c48 <__ftoa_engine+0xe6>
    2c58:	e4 e2       	ldi	r30, 0x24	; 36
    2c5a:	f1 e0       	ldi	r31, 0x01	; 1
    2c5c:	68 94       	set
    2c5e:	15 90       	lpm	r1, Z+
    2c60:	15 91       	lpm	r17, Z+
    2c62:	35 91       	lpm	r19, Z+
    2c64:	65 91       	lpm	r22, Z+
    2c66:	95 91       	lpm	r25, Z+
    2c68:	05 90       	lpm	r0, Z+
    2c6a:	7f e2       	ldi	r23, 0x2F	; 47
    2c6c:	73 95       	inc	r23
    2c6e:	e1 18       	sub	r14, r1
    2c70:	f1 0a       	sbc	r15, r17
    2c72:	43 0b       	sbc	r20, r19
    2c74:	56 0b       	sbc	r21, r22
    2c76:	c9 0b       	sbc	r28, r25
    2c78:	d0 09       	sbc	r29, r0
    2c7a:	c0 f7       	brcc	.-16     	; 0x2c6c <__ftoa_engine+0x10a>
    2c7c:	e1 0c       	add	r14, r1
    2c7e:	f1 1e       	adc	r15, r17
    2c80:	43 1f       	adc	r20, r19
    2c82:	56 1f       	adc	r21, r22
    2c84:	c9 1f       	adc	r28, r25
    2c86:	d0 1d       	adc	r29, r0
    2c88:	7e f4       	brtc	.+30     	; 0x2ca8 <__ftoa_engine+0x146>
    2c8a:	70 33       	cpi	r23, 0x30	; 48
    2c8c:	11 f4       	brne	.+4      	; 0x2c92 <__ftoa_engine+0x130>
    2c8e:	8a 95       	dec	r24
    2c90:	e6 cf       	rjmp	.-52     	; 0x2c5e <__ftoa_engine+0xfc>
    2c92:	e8 94       	clt
    2c94:	01 50       	subi	r16, 0x01	; 1
    2c96:	30 f0       	brcs	.+12     	; 0x2ca4 <__ftoa_engine+0x142>
    2c98:	08 0f       	add	r16, r24
    2c9a:	0a f4       	brpl	.+2      	; 0x2c9e <__ftoa_engine+0x13c>
    2c9c:	00 27       	eor	r16, r16
    2c9e:	02 17       	cp	r16, r18
    2ca0:	08 f4       	brcc	.+2      	; 0x2ca4 <__ftoa_engine+0x142>
    2ca2:	20 2f       	mov	r18, r16
    2ca4:	23 95       	inc	r18
    2ca6:	02 2f       	mov	r16, r18
    2ca8:	7a 33       	cpi	r23, 0x3A	; 58
    2caa:	28 f0       	brcs	.+10     	; 0x2cb6 <__ftoa_engine+0x154>
    2cac:	79 e3       	ldi	r23, 0x39	; 57
    2cae:	7d 93       	st	X+, r23
    2cb0:	2a 95       	dec	r18
    2cb2:	e9 f7       	brne	.-6      	; 0x2cae <__ftoa_engine+0x14c>
    2cb4:	10 c0       	rjmp	.+32     	; 0x2cd6 <__ftoa_engine+0x174>
    2cb6:	7d 93       	st	X+, r23
    2cb8:	2a 95       	dec	r18
    2cba:	89 f6       	brne	.-94     	; 0x2c5e <__ftoa_engine+0xfc>
    2cbc:	06 94       	lsr	r0
    2cbe:	97 95       	ror	r25
    2cc0:	67 95       	ror	r22
    2cc2:	37 95       	ror	r19
    2cc4:	17 95       	ror	r17
    2cc6:	17 94       	ror	r1
    2cc8:	e1 18       	sub	r14, r1
    2cca:	f1 0a       	sbc	r15, r17
    2ccc:	43 0b       	sbc	r20, r19
    2cce:	56 0b       	sbc	r21, r22
    2cd0:	c9 0b       	sbc	r28, r25
    2cd2:	d0 09       	sbc	r29, r0
    2cd4:	98 f0       	brcs	.+38     	; 0x2cfc <__ftoa_engine+0x19a>
    2cd6:	23 95       	inc	r18
    2cd8:	7e 91       	ld	r23, -X
    2cda:	73 95       	inc	r23
    2cdc:	7a 33       	cpi	r23, 0x3A	; 58
    2cde:	08 f0       	brcs	.+2      	; 0x2ce2 <__ftoa_engine+0x180>
    2ce0:	70 e3       	ldi	r23, 0x30	; 48
    2ce2:	7c 93       	st	X, r23
    2ce4:	20 13       	cpse	r18, r16
    2ce6:	b8 f7       	brcc	.-18     	; 0x2cd6 <__ftoa_engine+0x174>
    2ce8:	7e 91       	ld	r23, -X
    2cea:	70 61       	ori	r23, 0x10	; 16
    2cec:	7d 93       	st	X+, r23
    2cee:	30 f0       	brcs	.+12     	; 0x2cfc <__ftoa_engine+0x19a>
    2cf0:	83 95       	inc	r24
    2cf2:	71 e3       	ldi	r23, 0x31	; 49
    2cf4:	7d 93       	st	X+, r23
    2cf6:	70 e3       	ldi	r23, 0x30	; 48
    2cf8:	2a 95       	dec	r18
    2cfa:	e1 f7       	brne	.-8      	; 0x2cf4 <__ftoa_engine+0x192>
    2cfc:	11 24       	eor	r1, r1
    2cfe:	ef 90       	pop	r14
    2d00:	ff 90       	pop	r15
    2d02:	0f 91       	pop	r16
    2d04:	1f 91       	pop	r17
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	99 27       	eor	r25, r25
    2d0c:	87 fd       	sbrc	r24, 7
    2d0e:	90 95       	com	r25
    2d10:	08 95       	ret

00002d12 <strnlen_P>:
    2d12:	fc 01       	movw	r30, r24
    2d14:	05 90       	lpm	r0, Z+
    2d16:	61 50       	subi	r22, 0x01	; 1
    2d18:	70 40       	sbci	r23, 0x00	; 0
    2d1a:	01 10       	cpse	r0, r1
    2d1c:	d8 f7       	brcc	.-10     	; 0x2d14 <strnlen_P+0x2>
    2d1e:	80 95       	com	r24
    2d20:	90 95       	com	r25
    2d22:	8e 0f       	add	r24, r30
    2d24:	9f 1f       	adc	r25, r31
    2d26:	08 95       	ret

00002d28 <strnlen>:
    2d28:	fc 01       	movw	r30, r24
    2d2a:	61 50       	subi	r22, 0x01	; 1
    2d2c:	70 40       	sbci	r23, 0x00	; 0
    2d2e:	01 90       	ld	r0, Z+
    2d30:	01 10       	cpse	r0, r1
    2d32:	d8 f7       	brcc	.-10     	; 0x2d2a <strnlen+0x2>
    2d34:	80 95       	com	r24
    2d36:	90 95       	com	r25
    2d38:	8e 0f       	add	r24, r30
    2d3a:	9f 1f       	adc	r25, r31
    2d3c:	08 95       	ret

00002d3e <fputc>:
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	fb 01       	movw	r30, r22
    2d48:	23 81       	ldd	r18, Z+3	; 0x03
    2d4a:	21 fd       	sbrc	r18, 1
    2d4c:	03 c0       	rjmp	.+6      	; 0x2d54 <fputc+0x16>
    2d4e:	8f ef       	ldi	r24, 0xFF	; 255
    2d50:	9f ef       	ldi	r25, 0xFF	; 255
    2d52:	2c c0       	rjmp	.+88     	; 0x2dac <fputc+0x6e>
    2d54:	22 ff       	sbrs	r18, 2
    2d56:	16 c0       	rjmp	.+44     	; 0x2d84 <fputc+0x46>
    2d58:	46 81       	ldd	r20, Z+6	; 0x06
    2d5a:	57 81       	ldd	r21, Z+7	; 0x07
    2d5c:	24 81       	ldd	r18, Z+4	; 0x04
    2d5e:	35 81       	ldd	r19, Z+5	; 0x05
    2d60:	42 17       	cp	r20, r18
    2d62:	53 07       	cpc	r21, r19
    2d64:	44 f4       	brge	.+16     	; 0x2d76 <fputc+0x38>
    2d66:	a0 81       	ld	r26, Z
    2d68:	b1 81       	ldd	r27, Z+1	; 0x01
    2d6a:	9d 01       	movw	r18, r26
    2d6c:	2f 5f       	subi	r18, 0xFF	; 255
    2d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d70:	31 83       	std	Z+1, r19	; 0x01
    2d72:	20 83       	st	Z, r18
    2d74:	8c 93       	st	X, r24
    2d76:	26 81       	ldd	r18, Z+6	; 0x06
    2d78:	37 81       	ldd	r19, Z+7	; 0x07
    2d7a:	2f 5f       	subi	r18, 0xFF	; 255
    2d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7e:	37 83       	std	Z+7, r19	; 0x07
    2d80:	26 83       	std	Z+6, r18	; 0x06
    2d82:	14 c0       	rjmp	.+40     	; 0x2dac <fputc+0x6e>
    2d84:	8b 01       	movw	r16, r22
    2d86:	ec 01       	movw	r28, r24
    2d88:	fb 01       	movw	r30, r22
    2d8a:	00 84       	ldd	r0, Z+8	; 0x08
    2d8c:	f1 85       	ldd	r31, Z+9	; 0x09
    2d8e:	e0 2d       	mov	r30, r0
    2d90:	09 95       	icall
    2d92:	89 2b       	or	r24, r25
    2d94:	e1 f6       	brne	.-72     	; 0x2d4e <fputc+0x10>
    2d96:	d8 01       	movw	r26, r16
    2d98:	16 96       	adiw	r26, 0x06	; 6
    2d9a:	8d 91       	ld	r24, X+
    2d9c:	9c 91       	ld	r25, X
    2d9e:	17 97       	sbiw	r26, 0x07	; 7
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	17 96       	adiw	r26, 0x07	; 7
    2da4:	9c 93       	st	X, r25
    2da6:	8e 93       	st	-X, r24
    2da8:	16 97       	sbiw	r26, 0x06	; 6
    2daa:	ce 01       	movw	r24, r28
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	08 95       	ret

00002db6 <snprintf>:
    2db6:	ae e0       	ldi	r26, 0x0E	; 14
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	e1 ee       	ldi	r30, 0xE1	; 225
    2dbc:	f6 e1       	ldi	r31, 0x16	; 22
    2dbe:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x1c>
    2dc2:	0d 89       	ldd	r16, Y+21	; 0x15
    2dc4:	1e 89       	ldd	r17, Y+22	; 0x16
    2dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dca:	26 e0       	ldi	r18, 0x06	; 6
    2dcc:	2c 83       	std	Y+4, r18	; 0x04
    2dce:	1a 83       	std	Y+2, r17	; 0x02
    2dd0:	09 83       	std	Y+1, r16	; 0x01
    2dd2:	97 ff       	sbrs	r25, 7
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <snprintf+0x24>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e8       	ldi	r25, 0x80	; 128
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	9e 83       	std	Y+6, r25	; 0x06
    2dde:	8d 83       	std	Y+5, r24	; 0x05
    2de0:	ae 01       	movw	r20, r28
    2de2:	45 5e       	subi	r20, 0xE5	; 229
    2de4:	5f 4f       	sbci	r21, 0xFF	; 255
    2de6:	69 8d       	ldd	r22, Y+25	; 0x19
    2de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dea:	ce 01       	movw	r24, r28
    2dec:	01 96       	adiw	r24, 0x01	; 1
    2dee:	0e 94 c6 11 	call	0x238c	; 0x238c <vfprintf>
    2df2:	4d 81       	ldd	r20, Y+5	; 0x05
    2df4:	5e 81       	ldd	r21, Y+6	; 0x06
    2df6:	57 fd       	sbrc	r21, 7
    2df8:	0a c0       	rjmp	.+20     	; 0x2e0e <snprintf+0x58>
    2dfa:	2f 81       	ldd	r18, Y+7	; 0x07
    2dfc:	38 85       	ldd	r19, Y+8	; 0x08
    2dfe:	42 17       	cp	r20, r18
    2e00:	53 07       	cpc	r21, r19
    2e02:	0c f4       	brge	.+2      	; 0x2e06 <snprintf+0x50>
    2e04:	9a 01       	movw	r18, r20
    2e06:	f8 01       	movw	r30, r16
    2e08:	e2 0f       	add	r30, r18
    2e0a:	f3 1f       	adc	r31, r19
    2e0c:	10 82       	st	Z, r1
    2e0e:	2e 96       	adiw	r28, 0x0e	; 14
    2e10:	e4 e0       	ldi	r30, 0x04	; 4
    2e12:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x1c>

00002e16 <sscanf>:
    2e16:	ae e0       	ldi	r26, 0x0E	; 14
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	e1 e1       	ldi	r30, 0x11	; 17
    2e1c:	f7 e1       	ldi	r31, 0x17	; 23
    2e1e:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__prologue_saves__+0x20>
    2e22:	85 e0       	ldi	r24, 0x05	; 5
    2e24:	8c 83       	std	Y+4, r24	; 0x04
    2e26:	8b 89       	ldd	r24, Y+19	; 0x13
    2e28:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	ae 01       	movw	r20, r28
    2e30:	49 5e       	subi	r20, 0xE9	; 233
    2e32:	5f 4f       	sbci	r21, 0xFF	; 255
    2e34:	6d 89       	ldd	r22, Y+21	; 0x15
    2e36:	7e 89       	ldd	r23, Y+22	; 0x16
    2e38:	ce 01       	movw	r24, r28
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	0e 94 1e 19 	call	0x323c	; 0x323c <vfscanf>
    2e40:	2e 96       	adiw	r28, 0x0e	; 14
    2e42:	e2 e0       	ldi	r30, 0x02	; 2
    2e44:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__+0x20>

00002e48 <__ultoa_invert>:
    2e48:	fa 01       	movw	r30, r20
    2e4a:	aa 27       	eor	r26, r26
    2e4c:	28 30       	cpi	r18, 0x08	; 8
    2e4e:	51 f1       	breq	.+84     	; 0x2ea4 <__ultoa_invert+0x5c>
    2e50:	20 31       	cpi	r18, 0x10	; 16
    2e52:	81 f1       	breq	.+96     	; 0x2eb4 <__ultoa_invert+0x6c>
    2e54:	e8 94       	clt
    2e56:	6f 93       	push	r22
    2e58:	6e 7f       	andi	r22, 0xFE	; 254
    2e5a:	6e 5f       	subi	r22, 0xFE	; 254
    2e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e60:	9f 4f       	sbci	r25, 0xFF	; 255
    2e62:	af 4f       	sbci	r26, 0xFF	; 255
    2e64:	b1 e0       	ldi	r27, 0x01	; 1
    2e66:	3e d0       	rcall	.+124    	; 0x2ee4 <__ultoa_invert+0x9c>
    2e68:	b4 e0       	ldi	r27, 0x04	; 4
    2e6a:	3c d0       	rcall	.+120    	; 0x2ee4 <__ultoa_invert+0x9c>
    2e6c:	67 0f       	add	r22, r23
    2e6e:	78 1f       	adc	r23, r24
    2e70:	89 1f       	adc	r24, r25
    2e72:	9a 1f       	adc	r25, r26
    2e74:	a1 1d       	adc	r26, r1
    2e76:	68 0f       	add	r22, r24
    2e78:	79 1f       	adc	r23, r25
    2e7a:	8a 1f       	adc	r24, r26
    2e7c:	91 1d       	adc	r25, r1
    2e7e:	a1 1d       	adc	r26, r1
    2e80:	6a 0f       	add	r22, r26
    2e82:	71 1d       	adc	r23, r1
    2e84:	81 1d       	adc	r24, r1
    2e86:	91 1d       	adc	r25, r1
    2e88:	a1 1d       	adc	r26, r1
    2e8a:	20 d0       	rcall	.+64     	; 0x2ecc <__ultoa_invert+0x84>
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <__ultoa_invert+0x48>
    2e8e:	68 94       	set
    2e90:	3f 91       	pop	r19
    2e92:	2a e0       	ldi	r18, 0x0A	; 10
    2e94:	26 9f       	mul	r18, r22
    2e96:	11 24       	eor	r1, r1
    2e98:	30 19       	sub	r19, r0
    2e9a:	30 5d       	subi	r19, 0xD0	; 208
    2e9c:	31 93       	st	Z+, r19
    2e9e:	de f6       	brtc	.-74     	; 0x2e56 <__ultoa_invert+0xe>
    2ea0:	cf 01       	movw	r24, r30
    2ea2:	08 95       	ret
    2ea4:	46 2f       	mov	r20, r22
    2ea6:	47 70       	andi	r20, 0x07	; 7
    2ea8:	40 5d       	subi	r20, 0xD0	; 208
    2eaa:	41 93       	st	Z+, r20
    2eac:	b3 e0       	ldi	r27, 0x03	; 3
    2eae:	0f d0       	rcall	.+30     	; 0x2ece <__ultoa_invert+0x86>
    2eb0:	c9 f7       	brne	.-14     	; 0x2ea4 <__ultoa_invert+0x5c>
    2eb2:	f6 cf       	rjmp	.-20     	; 0x2ea0 <__ultoa_invert+0x58>
    2eb4:	46 2f       	mov	r20, r22
    2eb6:	4f 70       	andi	r20, 0x0F	; 15
    2eb8:	40 5d       	subi	r20, 0xD0	; 208
    2eba:	4a 33       	cpi	r20, 0x3A	; 58
    2ebc:	18 f0       	brcs	.+6      	; 0x2ec4 <__ultoa_invert+0x7c>
    2ebe:	49 5d       	subi	r20, 0xD9	; 217
    2ec0:	31 fd       	sbrc	r19, 1
    2ec2:	40 52       	subi	r20, 0x20	; 32
    2ec4:	41 93       	st	Z+, r20
    2ec6:	02 d0       	rcall	.+4      	; 0x2ecc <__ultoa_invert+0x84>
    2ec8:	a9 f7       	brne	.-22     	; 0x2eb4 <__ultoa_invert+0x6c>
    2eca:	ea cf       	rjmp	.-44     	; 0x2ea0 <__ultoa_invert+0x58>
    2ecc:	b4 e0       	ldi	r27, 0x04	; 4
    2ece:	a6 95       	lsr	r26
    2ed0:	97 95       	ror	r25
    2ed2:	87 95       	ror	r24
    2ed4:	77 95       	ror	r23
    2ed6:	67 95       	ror	r22
    2ed8:	ba 95       	dec	r27
    2eda:	c9 f7       	brne	.-14     	; 0x2ece <__ultoa_invert+0x86>
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	61 05       	cpc	r22, r1
    2ee0:	71 05       	cpc	r23, r1
    2ee2:	08 95       	ret
    2ee4:	9b 01       	movw	r18, r22
    2ee6:	ac 01       	movw	r20, r24
    2ee8:	0a 2e       	mov	r0, r26
    2eea:	06 94       	lsr	r0
    2eec:	57 95       	ror	r21
    2eee:	47 95       	ror	r20
    2ef0:	37 95       	ror	r19
    2ef2:	27 95       	ror	r18
    2ef4:	ba 95       	dec	r27
    2ef6:	c9 f7       	brne	.-14     	; 0x2eea <__ultoa_invert+0xa2>
    2ef8:	62 0f       	add	r22, r18
    2efa:	73 1f       	adc	r23, r19
    2efc:	84 1f       	adc	r24, r20
    2efe:	95 1f       	adc	r25, r21
    2f00:	a0 1d       	adc	r26, r0
    2f02:	08 95       	ret

00002f04 <putval>:
    2f04:	20 fd       	sbrc	r18, 0
    2f06:	09 c0       	rjmp	.+18     	; 0x2f1a <putval+0x16>
    2f08:	fc 01       	movw	r30, r24
    2f0a:	23 fd       	sbrc	r18, 3
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <putval+0x14>
    2f0e:	22 ff       	sbrs	r18, 2
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <putval+0x12>
    2f12:	73 83       	std	Z+3, r23	; 0x03
    2f14:	62 83       	std	Z+2, r22	; 0x02
    2f16:	51 83       	std	Z+1, r21	; 0x01
    2f18:	40 83       	st	Z, r20
    2f1a:	08 95       	ret

00002f1c <mulacc>:
    2f1c:	44 fd       	sbrc	r20, 4
    2f1e:	17 c0       	rjmp	.+46     	; 0x2f4e <mulacc+0x32>
    2f20:	46 fd       	sbrc	r20, 6
    2f22:	17 c0       	rjmp	.+46     	; 0x2f52 <mulacc+0x36>
    2f24:	ab 01       	movw	r20, r22
    2f26:	bc 01       	movw	r22, r24
    2f28:	da 01       	movw	r26, r20
    2f2a:	fb 01       	movw	r30, r22
    2f2c:	aa 0f       	add	r26, r26
    2f2e:	bb 1f       	adc	r27, r27
    2f30:	ee 1f       	adc	r30, r30
    2f32:	ff 1f       	adc	r31, r31
    2f34:	10 94       	com	r1
    2f36:	d1 f7       	brne	.-12     	; 0x2f2c <mulacc+0x10>
    2f38:	4a 0f       	add	r20, r26
    2f3a:	5b 1f       	adc	r21, r27
    2f3c:	6e 1f       	adc	r22, r30
    2f3e:	7f 1f       	adc	r23, r31
    2f40:	cb 01       	movw	r24, r22
    2f42:	ba 01       	movw	r22, r20
    2f44:	66 0f       	add	r22, r22
    2f46:	77 1f       	adc	r23, r23
    2f48:	88 1f       	adc	r24, r24
    2f4a:	99 1f       	adc	r25, r25
    2f4c:	09 c0       	rjmp	.+18     	; 0x2f60 <mulacc+0x44>
    2f4e:	33 e0       	ldi	r19, 0x03	; 3
    2f50:	01 c0       	rjmp	.+2      	; 0x2f54 <mulacc+0x38>
    2f52:	34 e0       	ldi	r19, 0x04	; 4
    2f54:	66 0f       	add	r22, r22
    2f56:	77 1f       	adc	r23, r23
    2f58:	88 1f       	adc	r24, r24
    2f5a:	99 1f       	adc	r25, r25
    2f5c:	31 50       	subi	r19, 0x01	; 1
    2f5e:	d1 f7       	brne	.-12     	; 0x2f54 <mulacc+0x38>
    2f60:	62 0f       	add	r22, r18
    2f62:	71 1d       	adc	r23, r1
    2f64:	81 1d       	adc	r24, r1
    2f66:	91 1d       	adc	r25, r1
    2f68:	08 95       	ret

00002f6a <skip_spaces>:
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	cf 93       	push	r28
    2f70:	df 93       	push	r29
    2f72:	8c 01       	movw	r16, r24
    2f74:	c8 01       	movw	r24, r16
    2f76:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    2f7a:	ec 01       	movw	r28, r24
    2f7c:	97 fd       	sbrc	r25, 7
    2f7e:	08 c0       	rjmp	.+16     	; 0x2f90 <skip_spaces+0x26>
    2f80:	0e 94 2f 1a 	call	0x345e	; 0x345e <isspace>
    2f84:	89 2b       	or	r24, r25
    2f86:	b1 f7       	brne	.-20     	; 0x2f74 <skip_spaces+0xa>
    2f88:	b8 01       	movw	r22, r16
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	0e 94 81 1a 	call	0x3502	; 0x3502 <ungetc>
    2f90:	ce 01       	movw	r24, r28
    2f92:	df 91       	pop	r29
    2f94:	cf 91       	pop	r28
    2f96:	1f 91       	pop	r17
    2f98:	0f 91       	pop	r16
    2f9a:	08 95       	ret

00002f9c <conv_int>:
    2f9c:	8f 92       	push	r8
    2f9e:	9f 92       	push	r9
    2fa0:	af 92       	push	r10
    2fa2:	bf 92       	push	r11
    2fa4:	ef 92       	push	r14
    2fa6:	ff 92       	push	r15
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	8c 01       	movw	r16, r24
    2fb2:	d6 2f       	mov	r29, r22
    2fb4:	7a 01       	movw	r14, r20
    2fb6:	b2 2e       	mov	r11, r18
    2fb8:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    2fbc:	9c 01       	movw	r18, r24
    2fbe:	33 27       	eor	r19, r19
    2fc0:	2b 32       	cpi	r18, 0x2B	; 43
    2fc2:	31 05       	cpc	r19, r1
    2fc4:	31 f0       	breq	.+12     	; 0x2fd2 <conv_int+0x36>
    2fc6:	2d 32       	cpi	r18, 0x2D	; 45
    2fc8:	31 05       	cpc	r19, r1
    2fca:	61 f4       	brne	.+24     	; 0x2fe4 <conv_int+0x48>
    2fcc:	8b 2d       	mov	r24, r11
    2fce:	80 68       	ori	r24, 0x80	; 128
    2fd0:	b8 2e       	mov	r11, r24
    2fd2:	d1 50       	subi	r29, 0x01	; 1
    2fd4:	11 f4       	brne	.+4      	; 0x2fda <conv_int+0x3e>
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	68 c0       	rjmp	.+208    	; 0x30aa <conv_int+0x10e>
    2fda:	c8 01       	movw	r24, r16
    2fdc:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    2fe0:	97 fd       	sbrc	r25, 7
    2fe2:	f9 cf       	rjmp	.-14     	; 0x2fd6 <conv_int+0x3a>
    2fe4:	cb 2d       	mov	r28, r11
    2fe6:	cd 7f       	andi	r28, 0xFD	; 253
    2fe8:	2b 2d       	mov	r18, r11
    2fea:	20 73       	andi	r18, 0x30	; 48
    2fec:	09 f5       	brne	.+66     	; 0x3030 <conv_int+0x94>
    2fee:	80 33       	cpi	r24, 0x30	; 48
    2ff0:	f9 f4       	brne	.+62     	; 0x3030 <conv_int+0x94>
    2ff2:	aa 24       	eor	r10, r10
    2ff4:	aa 94       	dec	r10
    2ff6:	ad 0e       	add	r10, r29
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <conv_int+0x60>
    2ffa:	43 c0       	rjmp	.+134    	; 0x3082 <conv_int+0xe6>
    2ffc:	c8 01       	movw	r24, r16
    2ffe:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    3002:	97 fd       	sbrc	r25, 7
    3004:	3e c0       	rjmp	.+124    	; 0x3082 <conv_int+0xe6>
    3006:	9c 01       	movw	r18, r24
    3008:	2f 7d       	andi	r18, 0xDF	; 223
    300a:	33 27       	eor	r19, r19
    300c:	28 35       	cpi	r18, 0x58	; 88
    300e:	31 05       	cpc	r19, r1
    3010:	49 f4       	brne	.+18     	; 0x3024 <conv_int+0x88>
    3012:	c2 64       	ori	r28, 0x42	; 66
    3014:	d2 50       	subi	r29, 0x02	; 2
    3016:	a9 f1       	breq	.+106    	; 0x3082 <conv_int+0xe6>
    3018:	c8 01       	movw	r24, r16
    301a:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    301e:	97 ff       	sbrs	r25, 7
    3020:	07 c0       	rjmp	.+14     	; 0x3030 <conv_int+0x94>
    3022:	2f c0       	rjmp	.+94     	; 0x3082 <conv_int+0xe6>
    3024:	b6 fe       	sbrs	r11, 6
    3026:	02 c0       	rjmp	.+4      	; 0x302c <conv_int+0x90>
    3028:	c2 60       	ori	r28, 0x02	; 2
    302a:	01 c0       	rjmp	.+2      	; 0x302e <conv_int+0x92>
    302c:	c2 61       	ori	r28, 0x12	; 18
    302e:	da 2d       	mov	r29, r10
    3030:	81 2c       	mov	r8, r1
    3032:	91 2c       	mov	r9, r1
    3034:	54 01       	movw	r10, r8
    3036:	20 ed       	ldi	r18, 0xD0	; 208
    3038:	28 0f       	add	r18, r24
    303a:	28 30       	cpi	r18, 0x08	; 8
    303c:	80 f0       	brcs	.+32     	; 0x305e <conv_int+0xc2>
    303e:	c4 ff       	sbrs	r28, 4
    3040:	04 c0       	rjmp	.+8      	; 0x304a <conv_int+0xae>
    3042:	b8 01       	movw	r22, r16
    3044:	0e 94 81 1a 	call	0x3502	; 0x3502 <ungetc>
    3048:	19 c0       	rjmp	.+50     	; 0x307c <conv_int+0xe0>
    304a:	2a 30       	cpi	r18, 0x0A	; 10
    304c:	40 f0       	brcs	.+16     	; 0x305e <conv_int+0xc2>
    304e:	c6 ff       	sbrs	r28, 6
    3050:	f8 cf       	rjmp	.-16     	; 0x3042 <conv_int+0xa6>
    3052:	2f 7d       	andi	r18, 0xDF	; 223
    3054:	3f ee       	ldi	r19, 0xEF	; 239
    3056:	32 0f       	add	r19, r18
    3058:	36 30       	cpi	r19, 0x06	; 6
    305a:	98 f7       	brcc	.-26     	; 0x3042 <conv_int+0xa6>
    305c:	27 50       	subi	r18, 0x07	; 7
    305e:	4c 2f       	mov	r20, r28
    3060:	c5 01       	movw	r24, r10
    3062:	b4 01       	movw	r22, r8
    3064:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <mulacc>
    3068:	4b 01       	movw	r8, r22
    306a:	5c 01       	movw	r10, r24
    306c:	c2 60       	ori	r28, 0x02	; 2
    306e:	d1 50       	subi	r29, 0x01	; 1
    3070:	59 f0       	breq	.+22     	; 0x3088 <conv_int+0xec>
    3072:	c8 01       	movw	r24, r16
    3074:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    3078:	97 ff       	sbrs	r25, 7
    307a:	dd cf       	rjmp	.-70     	; 0x3036 <conv_int+0x9a>
    307c:	c1 fd       	sbrc	r28, 1
    307e:	04 c0       	rjmp	.+8      	; 0x3088 <conv_int+0xec>
    3080:	aa cf       	rjmp	.-172    	; 0x2fd6 <conv_int+0x3a>
    3082:	81 2c       	mov	r8, r1
    3084:	91 2c       	mov	r9, r1
    3086:	54 01       	movw	r10, r8
    3088:	c7 ff       	sbrs	r28, 7
    308a:	08 c0       	rjmp	.+16     	; 0x309c <conv_int+0x100>
    308c:	b0 94       	com	r11
    308e:	a0 94       	com	r10
    3090:	90 94       	com	r9
    3092:	80 94       	com	r8
    3094:	81 1c       	adc	r8, r1
    3096:	91 1c       	adc	r9, r1
    3098:	a1 1c       	adc	r10, r1
    309a:	b1 1c       	adc	r11, r1
    309c:	2c 2f       	mov	r18, r28
    309e:	b5 01       	movw	r22, r10
    30a0:	a4 01       	movw	r20, r8
    30a2:	c7 01       	movw	r24, r14
    30a4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <putval>
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	ff 90       	pop	r15
    30b4:	ef 90       	pop	r14
    30b6:	bf 90       	pop	r11
    30b8:	af 90       	pop	r10
    30ba:	9f 90       	pop	r9
    30bc:	8f 90       	pop	r8
    30be:	08 95       	ret

000030c0 <conv_brk>:
    30c0:	a0 e2       	ldi	r26, 0x20	; 32
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e6 e6       	ldi	r30, 0x66	; 102
    30c6:	f8 e1       	ldi	r31, 0x18	; 24
    30c8:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__prologue_saves__+0x6>
    30cc:	5c 01       	movw	r10, r24
    30ce:	96 2e       	mov	r9, r22
    30d0:	7a 01       	movw	r14, r20
    30d2:	f9 01       	movw	r30, r18
    30d4:	8e 01       	movw	r16, r28
    30d6:	0f 5f       	subi	r16, 0xFF	; 255
    30d8:	1f 4f       	sbci	r17, 0xFF	; 255
    30da:	68 01       	movw	r12, r16
    30dc:	80 e2       	ldi	r24, 0x20	; 32
    30de:	d8 01       	movw	r26, r16
    30e0:	1d 92       	st	X+, r1
    30e2:	8a 95       	dec	r24
    30e4:	e9 f7       	brne	.-6      	; 0x30e0 <conv_brk+0x20>
    30e6:	d5 01       	movw	r26, r10
    30e8:	13 96       	adiw	r26, 0x03	; 3
    30ea:	8c 90       	ld	r8, X
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	61 2c       	mov	r6, r1
    30f2:	71 2c       	mov	r7, r1
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	70 e0       	ldi	r23, 0x00	; 0
    30fa:	83 fc       	sbrc	r8, 3
    30fc:	25 91       	lpm	r18, Z+
    30fe:	83 fe       	sbrs	r8, 3
    3100:	21 91       	ld	r18, Z+
    3102:	8f 01       	movw	r16, r30
    3104:	52 2e       	mov	r5, r18
    3106:	21 11       	cpse	r18, r1
    3108:	03 c0       	rjmp	.+6      	; 0x3110 <conv_brk+0x50>
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	92 c0       	rjmp	.+292    	; 0x3234 <conv_brk+0x174>
    3110:	2e 35       	cpi	r18, 0x5E	; 94
    3112:	11 f4       	brne	.+4      	; 0x3118 <conv_brk+0x58>
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	51 f1       	breq	.+84     	; 0x316c <conv_brk+0xac>
    3118:	43 2f       	mov	r20, r19
    311a:	50 e0       	ldi	r21, 0x00	; 0
    311c:	48 17       	cp	r20, r24
    311e:	59 07       	cpc	r21, r25
    3120:	3c f4       	brge	.+14     	; 0x3130 <conv_brk+0x70>
    3122:	2d 35       	cpi	r18, 0x5D	; 93
    3124:	59 f1       	breq	.+86     	; 0x317c <conv_brk+0xbc>
    3126:	2d 32       	cpi	r18, 0x2D	; 45
    3128:	19 f4       	brne	.+6      	; 0x3130 <conv_brk+0x70>
    312a:	77 20       	and	r7, r7
    312c:	09 f1       	breq	.+66     	; 0x3170 <conv_brk+0xb0>
    312e:	03 c0       	rjmp	.+6      	; 0x3136 <conv_brk+0x76>
    3130:	77 20       	and	r7, r7
    3132:	09 f4       	brne	.+2      	; 0x3136 <conv_brk+0x76>
    3134:	6a c0       	rjmp	.+212    	; 0x320a <conv_brk+0x14a>
    3136:	45 2d       	mov	r20, r5
    3138:	46 95       	lsr	r20
    313a:	46 95       	lsr	r20
    313c:	46 95       	lsr	r20
    313e:	d6 01       	movw	r26, r12
    3140:	a4 0f       	add	r26, r20
    3142:	b1 1d       	adc	r27, r1
    3144:	45 2d       	mov	r20, r5
    3146:	47 70       	andi	r20, 0x07	; 7
    3148:	8b 01       	movw	r16, r22
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <conv_brk+0x90>
    314c:	00 0f       	add	r16, r16
    314e:	11 1f       	adc	r17, r17
    3150:	4a 95       	dec	r20
    3152:	e2 f7       	brpl	.-8      	; 0x314c <conv_brk+0x8c>
    3154:	a8 01       	movw	r20, r16
    3156:	5c 91       	ld	r21, X
    3158:	45 2b       	or	r20, r21
    315a:	4c 93       	st	X, r20
    315c:	65 14       	cp	r6, r5
    315e:	59 f0       	breq	.+22     	; 0x3176 <conv_brk+0xb6>
    3160:	56 14       	cp	r5, r6
    3162:	10 f4       	brcc	.+4      	; 0x3168 <conv_brk+0xa8>
    3164:	53 94       	inc	r5
    3166:	e7 cf       	rjmp	.-50     	; 0x3136 <conv_brk+0x76>
    3168:	5a 94       	dec	r5
    316a:	e5 cf       	rjmp	.-54     	; 0x3136 <conv_brk+0x76>
    316c:	31 e0       	ldi	r19, 0x01	; 1
    316e:	04 c0       	rjmp	.+8      	; 0x3178 <conv_brk+0xb8>
    3170:	77 24       	eor	r7, r7
    3172:	73 94       	inc	r7
    3174:	01 c0       	rjmp	.+2      	; 0x3178 <conv_brk+0xb8>
    3176:	71 2c       	mov	r7, r1
    3178:	01 96       	adiw	r24, 0x01	; 1
    317a:	bf cf       	rjmp	.-130    	; 0x30fa <conv_brk+0x3a>
    317c:	77 20       	and	r7, r7
    317e:	19 f0       	breq	.+6      	; 0x3186 <conv_brk+0xc6>
    3180:	8e 81       	ldd	r24, Y+6	; 0x06
    3182:	80 62       	ori	r24, 0x20	; 32
    3184:	8e 83       	std	Y+6, r24	; 0x06
    3186:	31 11       	cpse	r19, r1
    3188:	03 c0       	rjmp	.+6      	; 0x3190 <conv_brk+0xd0>
    318a:	88 24       	eor	r8, r8
    318c:	83 94       	inc	r8
    318e:	17 c0       	rjmp	.+46     	; 0x31be <conv_brk+0xfe>
    3190:	f6 01       	movw	r30, r12
    3192:	9e 01       	movw	r18, r28
    3194:	2f 5d       	subi	r18, 0xDF	; 223
    3196:	3f 4f       	sbci	r19, 0xFF	; 255
    3198:	80 81       	ld	r24, Z
    319a:	80 95       	com	r24
    319c:	81 93       	st	Z+, r24
    319e:	2e 17       	cp	r18, r30
    31a0:	3f 07       	cpc	r19, r31
    31a2:	d1 f7       	brne	.-12     	; 0x3198 <conv_brk+0xd8>
    31a4:	f2 cf       	rjmp	.-28     	; 0x318a <conv_brk+0xca>
    31a6:	e1 14       	cp	r14, r1
    31a8:	f1 04       	cpc	r15, r1
    31aa:	29 f0       	breq	.+10     	; 0x31b6 <conv_brk+0xf6>
    31ac:	d7 01       	movw	r26, r14
    31ae:	8c 93       	st	X, r24
    31b0:	f7 01       	movw	r30, r14
    31b2:	31 96       	adiw	r30, 0x01	; 1
    31b4:	7f 01       	movw	r14, r30
    31b6:	9a 94       	dec	r9
    31b8:	81 2c       	mov	r8, r1
    31ba:	99 20       	and	r9, r9
    31bc:	f9 f0       	breq	.+62     	; 0x31fc <conv_brk+0x13c>
    31be:	c5 01       	movw	r24, r10
    31c0:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    31c4:	97 fd       	sbrc	r25, 7
    31c6:	18 c0       	rjmp	.+48     	; 0x31f8 <conv_brk+0x138>
    31c8:	fc 01       	movw	r30, r24
    31ca:	ff 27       	eor	r31, r31
    31cc:	23 e0       	ldi	r18, 0x03	; 3
    31ce:	f5 95       	asr	r31
    31d0:	e7 95       	ror	r30
    31d2:	2a 95       	dec	r18
    31d4:	e1 f7       	brne	.-8      	; 0x31ce <conv_brk+0x10e>
    31d6:	ec 0d       	add	r30, r12
    31d8:	fd 1d       	adc	r31, r13
    31da:	20 81       	ld	r18, Z
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	ac 01       	movw	r20, r24
    31e0:	47 70       	andi	r20, 0x07	; 7
    31e2:	55 27       	eor	r21, r21
    31e4:	02 c0       	rjmp	.+4      	; 0x31ea <conv_brk+0x12a>
    31e6:	35 95       	asr	r19
    31e8:	27 95       	ror	r18
    31ea:	4a 95       	dec	r20
    31ec:	e2 f7       	brpl	.-8      	; 0x31e6 <conv_brk+0x126>
    31ee:	20 fd       	sbrc	r18, 0
    31f0:	da cf       	rjmp	.-76     	; 0x31a6 <conv_brk+0xe6>
    31f2:	b5 01       	movw	r22, r10
    31f4:	0e 94 81 1a 	call	0x3502	; 0x3502 <ungetc>
    31f8:	81 10       	cpse	r8, r1
    31fa:	87 cf       	rjmp	.-242    	; 0x310a <conv_brk+0x4a>
    31fc:	e1 14       	cp	r14, r1
    31fe:	f1 04       	cpc	r15, r1
    3200:	11 f0       	breq	.+4      	; 0x3206 <conv_brk+0x146>
    3202:	d7 01       	movw	r26, r14
    3204:	1c 92       	st	X, r1
    3206:	c8 01       	movw	r24, r16
    3208:	15 c0       	rjmp	.+42     	; 0x3234 <conv_brk+0x174>
    320a:	42 2f       	mov	r20, r18
    320c:	46 95       	lsr	r20
    320e:	46 95       	lsr	r20
    3210:	46 95       	lsr	r20
    3212:	d6 01       	movw	r26, r12
    3214:	a4 0f       	add	r26, r20
    3216:	b1 1d       	adc	r27, r1
    3218:	42 2f       	mov	r20, r18
    321a:	47 70       	andi	r20, 0x07	; 7
    321c:	8b 01       	movw	r16, r22
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <conv_brk+0x164>
    3220:	00 0f       	add	r16, r16
    3222:	11 1f       	adc	r17, r17
    3224:	4a 95       	dec	r20
    3226:	e2 f7       	brpl	.-8      	; 0x3220 <conv_brk+0x160>
    3228:	a8 01       	movw	r20, r16
    322a:	5c 91       	ld	r21, X
    322c:	45 2b       	or	r20, r21
    322e:	4c 93       	st	X, r20
    3230:	62 2e       	mov	r6, r18
    3232:	a2 cf       	rjmp	.-188    	; 0x3178 <conv_brk+0xb8>
    3234:	a0 96       	adiw	r28, 0x20	; 32
    3236:	ef e0       	ldi	r30, 0x0F	; 15
    3238:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__epilogue_restores__+0x6>

0000323c <vfscanf>:
    323c:	a0 e0       	ldi	r26, 0x00	; 0
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e4 e2       	ldi	r30, 0x24	; 36
    3242:	f9 e1       	ldi	r31, 0x19	; 25
    3244:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__prologue_saves__+0x6>
    3248:	6c 01       	movw	r12, r24
    324a:	eb 01       	movw	r28, r22
    324c:	5a 01       	movw	r10, r20
    324e:	fc 01       	movw	r30, r24
    3250:	17 82       	std	Z+7, r1	; 0x07
    3252:	16 82       	std	Z+6, r1	; 0x06
    3254:	51 2c       	mov	r5, r1
    3256:	f6 01       	movw	r30, r12
    3258:	e3 80       	ldd	r14, Z+3	; 0x03
    325a:	fe 01       	movw	r30, r28
    325c:	e3 fc       	sbrc	r14, 3
    325e:	85 91       	lpm	r24, Z+
    3260:	e3 fe       	sbrs	r14, 3
    3262:	81 91       	ld	r24, Z+
    3264:	18 2f       	mov	r17, r24
    3266:	ef 01       	movw	r28, r30
    3268:	88 23       	and	r24, r24
    326a:	09 f4       	brne	.+2      	; 0x326e <vfscanf+0x32>
    326c:	ee c0       	rjmp	.+476    	; 0x344a <vfscanf+0x20e>
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 2f 1a 	call	0x345e	; 0x345e <isspace>
    3274:	89 2b       	or	r24, r25
    3276:	21 f0       	breq	.+8      	; 0x3280 <vfscanf+0x44>
    3278:	c6 01       	movw	r24, r12
    327a:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <skip_spaces>
    327e:	eb cf       	rjmp	.-42     	; 0x3256 <vfscanf+0x1a>
    3280:	15 32       	cpi	r17, 0x25	; 37
    3282:	41 f4       	brne	.+16     	; 0x3294 <vfscanf+0x58>
    3284:	fe 01       	movw	r30, r28
    3286:	e3 fc       	sbrc	r14, 3
    3288:	15 91       	lpm	r17, Z+
    328a:	e3 fe       	sbrs	r14, 3
    328c:	11 91       	ld	r17, Z+
    328e:	ef 01       	movw	r28, r30
    3290:	15 32       	cpi	r17, 0x25	; 37
    3292:	81 f4       	brne	.+32     	; 0x32b4 <vfscanf+0x78>
    3294:	c6 01       	movw	r24, r12
    3296:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    329a:	97 fd       	sbrc	r25, 7
    329c:	d4 c0       	rjmp	.+424    	; 0x3446 <vfscanf+0x20a>
    329e:	41 2f       	mov	r20, r17
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	9c 01       	movw	r18, r24
    32a4:	33 27       	eor	r19, r19
    32a6:	24 17       	cp	r18, r20
    32a8:	35 07       	cpc	r19, r21
    32aa:	a9 f2       	breq	.-86     	; 0x3256 <vfscanf+0x1a>
    32ac:	b6 01       	movw	r22, r12
    32ae:	0e 94 81 1a 	call	0x3502	; 0x3502 <ungetc>
    32b2:	cb c0       	rjmp	.+406    	; 0x344a <vfscanf+0x20e>
    32b4:	1a 32       	cpi	r17, 0x2A	; 42
    32b6:	39 f4       	brne	.+14     	; 0x32c6 <vfscanf+0x8a>
    32b8:	e3 fc       	sbrc	r14, 3
    32ba:	15 91       	lpm	r17, Z+
    32bc:	e3 fe       	sbrs	r14, 3
    32be:	11 91       	ld	r17, Z+
    32c0:	ef 01       	movw	r28, r30
    32c2:	01 e0       	ldi	r16, 0x01	; 1
    32c4:	01 c0       	rjmp	.+2      	; 0x32c8 <vfscanf+0x8c>
    32c6:	00 e0       	ldi	r16, 0x00	; 0
    32c8:	f1 2c       	mov	r15, r1
    32ca:	20 ed       	ldi	r18, 0xD0	; 208
    32cc:	21 0f       	add	r18, r17
    32ce:	2a 30       	cpi	r18, 0x0A	; 10
    32d0:	80 f4       	brcc	.+32     	; 0x32f2 <vfscanf+0xb6>
    32d2:	02 60       	ori	r16, 0x02	; 2
    32d4:	6f 2d       	mov	r22, r15
    32d6:	70 e0       	ldi	r23, 0x00	; 0
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	40 e2       	ldi	r20, 0x20	; 32
    32de:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <mulacc>
    32e2:	f6 2e       	mov	r15, r22
    32e4:	fe 01       	movw	r30, r28
    32e6:	e3 fc       	sbrc	r14, 3
    32e8:	15 91       	lpm	r17, Z+
    32ea:	e3 fe       	sbrs	r14, 3
    32ec:	11 91       	ld	r17, Z+
    32ee:	ef 01       	movw	r28, r30
    32f0:	ec cf       	rjmp	.-40     	; 0x32ca <vfscanf+0x8e>
    32f2:	01 ff       	sbrs	r16, 1
    32f4:	03 c0       	rjmp	.+6      	; 0x32fc <vfscanf+0xc0>
    32f6:	f1 10       	cpse	r15, r1
    32f8:	03 c0       	rjmp	.+6      	; 0x3300 <vfscanf+0xc4>
    32fa:	a7 c0       	rjmp	.+334    	; 0x344a <vfscanf+0x20e>
    32fc:	ff 24       	eor	r15, r15
    32fe:	fa 94       	dec	r15
    3300:	18 36       	cpi	r17, 0x68	; 104
    3302:	19 f0       	breq	.+6      	; 0x330a <vfscanf+0xce>
    3304:	1c 36       	cpi	r17, 0x6C	; 108
    3306:	51 f0       	breq	.+20     	; 0x331c <vfscanf+0xe0>
    3308:	10 c0       	rjmp	.+32     	; 0x332a <vfscanf+0xee>
    330a:	fe 01       	movw	r30, r28
    330c:	e3 fc       	sbrc	r14, 3
    330e:	15 91       	lpm	r17, Z+
    3310:	e3 fe       	sbrs	r14, 3
    3312:	11 91       	ld	r17, Z+
    3314:	ef 01       	movw	r28, r30
    3316:	18 36       	cpi	r17, 0x68	; 104
    3318:	41 f4       	brne	.+16     	; 0x332a <vfscanf+0xee>
    331a:	08 60       	ori	r16, 0x08	; 8
    331c:	04 60       	ori	r16, 0x04	; 4
    331e:	fe 01       	movw	r30, r28
    3320:	e3 fc       	sbrc	r14, 3
    3322:	15 91       	lpm	r17, Z+
    3324:	e3 fe       	sbrs	r14, 3
    3326:	11 91       	ld	r17, Z+
    3328:	ef 01       	movw	r28, r30
    332a:	11 23       	and	r17, r17
    332c:	09 f4       	brne	.+2      	; 0x3330 <vfscanf+0xf4>
    332e:	8d c0       	rjmp	.+282    	; 0x344a <vfscanf+0x20e>
    3330:	61 2f       	mov	r22, r17
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	8e e1       	ldi	r24, 0x1E	; 30
    3336:	92 e0       	ldi	r25, 0x02	; 2
    3338:	0e 94 38 1a 	call	0x3470	; 0x3470 <strchr_P>
    333c:	89 2b       	or	r24, r25
    333e:	09 f4       	brne	.+2      	; 0x3342 <vfscanf+0x106>
    3340:	84 c0       	rjmp	.+264    	; 0x344a <vfscanf+0x20e>
    3342:	00 fd       	sbrc	r16, 0
    3344:	07 c0       	rjmp	.+14     	; 0x3354 <vfscanf+0x118>
    3346:	f5 01       	movw	r30, r10
    3348:	80 80       	ld	r8, Z
    334a:	91 80       	ldd	r9, Z+1	; 0x01
    334c:	c5 01       	movw	r24, r10
    334e:	02 96       	adiw	r24, 0x02	; 2
    3350:	5c 01       	movw	r10, r24
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <vfscanf+0x11c>
    3354:	81 2c       	mov	r8, r1
    3356:	91 2c       	mov	r9, r1
    3358:	1e 36       	cpi	r17, 0x6E	; 110
    335a:	51 f4       	brne	.+20     	; 0x3370 <vfscanf+0x134>
    335c:	f6 01       	movw	r30, r12
    335e:	46 81       	ldd	r20, Z+6	; 0x06
    3360:	57 81       	ldd	r21, Z+7	; 0x07
    3362:	60 e0       	ldi	r22, 0x00	; 0
    3364:	70 e0       	ldi	r23, 0x00	; 0
    3366:	20 2f       	mov	r18, r16
    3368:	c4 01       	movw	r24, r8
    336a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <putval>
    336e:	73 cf       	rjmp	.-282    	; 0x3256 <vfscanf+0x1a>
    3370:	13 36       	cpi	r17, 0x63	; 99
    3372:	a9 f4       	brne	.+42     	; 0x339e <vfscanf+0x162>
    3374:	01 fd       	sbrc	r16, 1
    3376:	02 c0       	rjmp	.+4      	; 0x337c <vfscanf+0x140>
    3378:	ff 24       	eor	r15, r15
    337a:	f3 94       	inc	r15
    337c:	c6 01       	movw	r24, r12
    337e:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    3382:	97 fd       	sbrc	r25, 7
    3384:	60 c0       	rjmp	.+192    	; 0x3446 <vfscanf+0x20a>
    3386:	81 14       	cp	r8, r1
    3388:	91 04       	cpc	r9, r1
    338a:	29 f0       	breq	.+10     	; 0x3396 <vfscanf+0x15a>
    338c:	f4 01       	movw	r30, r8
    338e:	80 83       	st	Z, r24
    3390:	c4 01       	movw	r24, r8
    3392:	01 96       	adiw	r24, 0x01	; 1
    3394:	4c 01       	movw	r8, r24
    3396:	fa 94       	dec	r15
    3398:	f1 10       	cpse	r15, r1
    339a:	f0 cf       	rjmp	.-32     	; 0x337c <vfscanf+0x140>
    339c:	50 c0       	rjmp	.+160    	; 0x343e <vfscanf+0x202>
    339e:	1b 35       	cpi	r17, 0x5B	; 91
    33a0:	59 f4       	brne	.+22     	; 0x33b8 <vfscanf+0x17c>
    33a2:	9e 01       	movw	r18, r28
    33a4:	a4 01       	movw	r20, r8
    33a6:	6f 2d       	mov	r22, r15
    33a8:	c6 01       	movw	r24, r12
    33aa:	0e 94 60 18 	call	0x30c0	; 0x30c0 <conv_brk>
    33ae:	ec 01       	movw	r28, r24
    33b0:	89 2b       	or	r24, r25
    33b2:	09 f0       	breq	.+2      	; 0x33b6 <vfscanf+0x17a>
    33b4:	44 c0       	rjmp	.+136    	; 0x343e <vfscanf+0x202>
    33b6:	3e c0       	rjmp	.+124    	; 0x3434 <vfscanf+0x1f8>
    33b8:	c6 01       	movw	r24, r12
    33ba:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <skip_spaces>
    33be:	97 fd       	sbrc	r25, 7
    33c0:	42 c0       	rjmp	.+132    	; 0x3446 <vfscanf+0x20a>
    33c2:	1f 36       	cpi	r17, 0x6F	; 111
    33c4:	61 f1       	breq	.+88     	; 0x341e <vfscanf+0x1e2>
    33c6:	28 f4       	brcc	.+10     	; 0x33d2 <vfscanf+0x196>
    33c8:	14 36       	cpi	r17, 0x64	; 100
    33ca:	39 f1       	breq	.+78     	; 0x341a <vfscanf+0x1de>
    33cc:	19 36       	cpi	r17, 0x69	; 105
    33ce:	51 f1       	breq	.+84     	; 0x3424 <vfscanf+0x1e8>
    33d0:	28 c0       	rjmp	.+80     	; 0x3422 <vfscanf+0x1e6>
    33d2:	13 37       	cpi	r17, 0x73	; 115
    33d4:	71 f0       	breq	.+28     	; 0x33f2 <vfscanf+0x1b6>
    33d6:	15 37       	cpi	r17, 0x75	; 117
    33d8:	01 f1       	breq	.+64     	; 0x341a <vfscanf+0x1de>
    33da:	23 c0       	rjmp	.+70     	; 0x3422 <vfscanf+0x1e6>
    33dc:	81 14       	cp	r8, r1
    33de:	91 04       	cpc	r9, r1
    33e0:	29 f0       	breq	.+10     	; 0x33ec <vfscanf+0x1b0>
    33e2:	f4 01       	movw	r30, r8
    33e4:	60 82       	st	Z, r6
    33e6:	c4 01       	movw	r24, r8
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	4c 01       	movw	r8, r24
    33ec:	fa 94       	dec	r15
    33ee:	ff 20       	and	r15, r15
    33f0:	71 f0       	breq	.+28     	; 0x340e <vfscanf+0x1d2>
    33f2:	c6 01       	movw	r24, r12
    33f4:	0e 94 43 1a 	call	0x3486	; 0x3486 <fgetc>
    33f8:	3c 01       	movw	r6, r24
    33fa:	97 fd       	sbrc	r25, 7
    33fc:	08 c0       	rjmp	.+16     	; 0x340e <vfscanf+0x1d2>
    33fe:	0e 94 2f 1a 	call	0x345e	; 0x345e <isspace>
    3402:	89 2b       	or	r24, r25
    3404:	59 f3       	breq	.-42     	; 0x33dc <vfscanf+0x1a0>
    3406:	b6 01       	movw	r22, r12
    3408:	c3 01       	movw	r24, r6
    340a:	0e 94 81 1a 	call	0x3502	; 0x3502 <ungetc>
    340e:	81 14       	cp	r8, r1
    3410:	91 04       	cpc	r9, r1
    3412:	a9 f0       	breq	.+42     	; 0x343e <vfscanf+0x202>
    3414:	f4 01       	movw	r30, r8
    3416:	10 82       	st	Z, r1
    3418:	12 c0       	rjmp	.+36     	; 0x343e <vfscanf+0x202>
    341a:	00 62       	ori	r16, 0x20	; 32
    341c:	03 c0       	rjmp	.+6      	; 0x3424 <vfscanf+0x1e8>
    341e:	00 61       	ori	r16, 0x10	; 16
    3420:	01 c0       	rjmp	.+2      	; 0x3424 <vfscanf+0x1e8>
    3422:	00 64       	ori	r16, 0x40	; 64
    3424:	20 2f       	mov	r18, r16
    3426:	a4 01       	movw	r20, r8
    3428:	6f 2d       	mov	r22, r15
    342a:	c6 01       	movw	r24, r12
    342c:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <conv_int>
    3430:	81 11       	cpse	r24, r1
    3432:	05 c0       	rjmp	.+10     	; 0x343e <vfscanf+0x202>
    3434:	f6 01       	movw	r30, r12
    3436:	83 81       	ldd	r24, Z+3	; 0x03
    3438:	80 73       	andi	r24, 0x30	; 48
    343a:	29 f4       	brne	.+10     	; 0x3446 <vfscanf+0x20a>
    343c:	06 c0       	rjmp	.+12     	; 0x344a <vfscanf+0x20e>
    343e:	00 fd       	sbrc	r16, 0
    3440:	0a cf       	rjmp	.-492    	; 0x3256 <vfscanf+0x1a>
    3442:	53 94       	inc	r5
    3444:	08 cf       	rjmp	.-496    	; 0x3256 <vfscanf+0x1a>
    3446:	55 20       	and	r5, r5
    3448:	19 f0       	breq	.+6      	; 0x3450 <vfscanf+0x214>
    344a:	85 2d       	mov	r24, r5
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	02 c0       	rjmp	.+4      	; 0x3454 <vfscanf+0x218>
    3450:	8f ef       	ldi	r24, 0xFF	; 255
    3452:	9f ef       	ldi	r25, 0xFF	; 255
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	ef e0       	ldi	r30, 0x0F	; 15
    345a:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__epilogue_restores__+0x6>

0000345e <isspace>:
    345e:	91 11       	cpse	r25, r1
    3460:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__ctype_isfalse>
    3464:	80 32       	cpi	r24, 0x20	; 32
    3466:	19 f0       	breq	.+6      	; 0x346e <isspace+0x10>
    3468:	89 50       	subi	r24, 0x09	; 9
    346a:	85 50       	subi	r24, 0x05	; 5
    346c:	c8 f7       	brcc	.-14     	; 0x3460 <isspace+0x2>
    346e:	08 95       	ret

00003470 <strchr_P>:
    3470:	fc 01       	movw	r30, r24
    3472:	05 90       	lpm	r0, Z+
    3474:	06 16       	cp	r0, r22
    3476:	21 f0       	breq	.+8      	; 0x3480 <strchr_P+0x10>
    3478:	00 20       	and	r0, r0
    347a:	d9 f7       	brne	.-10     	; 0x3472 <strchr_P+0x2>
    347c:	c0 01       	movw	r24, r0
    347e:	08 95       	ret
    3480:	31 97       	sbiw	r30, 0x01	; 1
    3482:	cf 01       	movw	r24, r30
    3484:	08 95       	ret

00003486 <fgetc>:
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	ec 01       	movw	r28, r24
    348c:	2b 81       	ldd	r18, Y+3	; 0x03
    348e:	20 ff       	sbrs	r18, 0
    3490:	33 c0       	rjmp	.+102    	; 0x34f8 <fgetc+0x72>
    3492:	26 ff       	sbrs	r18, 6
    3494:	0a c0       	rjmp	.+20     	; 0x34aa <fgetc+0x24>
    3496:	2f 7b       	andi	r18, 0xBF	; 191
    3498:	2b 83       	std	Y+3, r18	; 0x03
    349a:	8e 81       	ldd	r24, Y+6	; 0x06
    349c:	9f 81       	ldd	r25, Y+7	; 0x07
    349e:	01 96       	adiw	r24, 0x01	; 1
    34a0:	9f 83       	std	Y+7, r25	; 0x07
    34a2:	8e 83       	std	Y+6, r24	; 0x06
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	29 c0       	rjmp	.+82     	; 0x34fc <fgetc+0x76>
    34aa:	22 ff       	sbrs	r18, 2
    34ac:	0f c0       	rjmp	.+30     	; 0x34cc <fgetc+0x46>
    34ae:	e8 81       	ld	r30, Y
    34b0:	f9 81       	ldd	r31, Y+1	; 0x01
    34b2:	80 81       	ld	r24, Z
    34b4:	08 2e       	mov	r0, r24
    34b6:	00 0c       	add	r0, r0
    34b8:	99 0b       	sbc	r25, r25
    34ba:	00 97       	sbiw	r24, 0x00	; 0
    34bc:	19 f4       	brne	.+6      	; 0x34c4 <fgetc+0x3e>
    34be:	20 62       	ori	r18, 0x20	; 32
    34c0:	2b 83       	std	Y+3, r18	; 0x03
    34c2:	1a c0       	rjmp	.+52     	; 0x34f8 <fgetc+0x72>
    34c4:	31 96       	adiw	r30, 0x01	; 1
    34c6:	f9 83       	std	Y+1, r31	; 0x01
    34c8:	e8 83       	st	Y, r30
    34ca:	0e c0       	rjmp	.+28     	; 0x34e8 <fgetc+0x62>
    34cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    34ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    34d0:	09 95       	icall
    34d2:	97 ff       	sbrs	r25, 7
    34d4:	09 c0       	rjmp	.+18     	; 0x34e8 <fgetc+0x62>
    34d6:	2b 81       	ldd	r18, Y+3	; 0x03
    34d8:	01 96       	adiw	r24, 0x01	; 1
    34da:	11 f0       	breq	.+4      	; 0x34e0 <fgetc+0x5a>
    34dc:	80 e2       	ldi	r24, 0x20	; 32
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <fgetc+0x5c>
    34e0:	80 e1       	ldi	r24, 0x10	; 16
    34e2:	82 2b       	or	r24, r18
    34e4:	8b 83       	std	Y+3, r24	; 0x03
    34e6:	08 c0       	rjmp	.+16     	; 0x34f8 <fgetc+0x72>
    34e8:	2e 81       	ldd	r18, Y+6	; 0x06
    34ea:	3f 81       	ldd	r19, Y+7	; 0x07
    34ec:	2f 5f       	subi	r18, 0xFF	; 255
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	3f 83       	std	Y+7, r19	; 0x07
    34f2:	2e 83       	std	Y+6, r18	; 0x06
    34f4:	99 27       	eor	r25, r25
    34f6:	02 c0       	rjmp	.+4      	; 0x34fc <fgetc+0x76>
    34f8:	8f ef       	ldi	r24, 0xFF	; 255
    34fa:	9f ef       	ldi	r25, 0xFF	; 255
    34fc:	df 91       	pop	r29
    34fe:	cf 91       	pop	r28
    3500:	08 95       	ret

00003502 <ungetc>:
    3502:	fb 01       	movw	r30, r22
    3504:	23 81       	ldd	r18, Z+3	; 0x03
    3506:	20 ff       	sbrs	r18, 0
    3508:	12 c0       	rjmp	.+36     	; 0x352e <ungetc+0x2c>
    350a:	26 fd       	sbrc	r18, 6
    350c:	10 c0       	rjmp	.+32     	; 0x352e <ungetc+0x2c>
    350e:	8f 3f       	cpi	r24, 0xFF	; 255
    3510:	3f ef       	ldi	r19, 0xFF	; 255
    3512:	93 07       	cpc	r25, r19
    3514:	61 f0       	breq	.+24     	; 0x352e <ungetc+0x2c>
    3516:	82 83       	std	Z+2, r24	; 0x02
    3518:	2f 7d       	andi	r18, 0xDF	; 223
    351a:	20 64       	ori	r18, 0x40	; 64
    351c:	23 83       	std	Z+3, r18	; 0x03
    351e:	26 81       	ldd	r18, Z+6	; 0x06
    3520:	37 81       	ldd	r19, Z+7	; 0x07
    3522:	21 50       	subi	r18, 0x01	; 1
    3524:	31 09       	sbc	r19, r1
    3526:	37 83       	std	Z+7, r19	; 0x07
    3528:	26 83       	std	Z+6, r18	; 0x06
    352a:	99 27       	eor	r25, r25
    352c:	08 95       	ret
    352e:	8f ef       	ldi	r24, 0xFF	; 255
    3530:	9f ef       	ldi	r25, 0xFF	; 255
    3532:	08 95       	ret

00003534 <__ctype_isfalse>:
    3534:	99 27       	eor	r25, r25
    3536:	88 27       	eor	r24, r24

00003538 <__ctype_istrue>:
    3538:	08 95       	ret

0000353a <_exit>:
    353a:	f8 94       	cli

0000353c <__stop_program>:
    353c:	ff cf       	rjmp	.-2      	; 0x353c <__stop_program>
