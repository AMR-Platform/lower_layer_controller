
avr_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001a8e  00001b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800128  00800128  00001b4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002834  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000110b  00000000  00000000  00004604  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018dc  00000000  00000000  0000570f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000058c  00000000  00000000  00006fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae5  00000000  00000000  00007578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002611  00000000  00000000  0000805d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000a66e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 01 	jmp	0x26c	; 0x26c <__ctors_end>
       4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
       8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
       c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      10:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      14:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      18:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      1c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      20:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      24:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      28:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_10>
      2c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__vector_11>
      30:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      34:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      38:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      3c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      40:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      44:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      48:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      4c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      50:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      54:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      58:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      5c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      60:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      64:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      68:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      6c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      70:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      74:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      78:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      7c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      80:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      84:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      88:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      8c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      90:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      94:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      98:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      9c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	6e 61       	ori	r22, 0x1E	; 30
      ae:	6e 00       	.word	0x006e	; ????

000000b0 <__c.2332>:
      b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     100:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     110:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     120:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     130:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     140:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     150:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     160:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     170:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     180:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     190:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ae <__c.2360>:
     1ae:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

000001b9 <descriptor_list>:
     1b9:	00 01 00 00 50 02 12 00 02 00 00 0d 02 43 00 03     ....P........C..
     1c9:	00 00 09 02 04 01 03 09 04 f5 01 12 02 03 09 04     ................
     1d9:	ed 01 06 03 03 09 04 e3 01 08                       ..........

000001e3 <string3>:
     1e3:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001ed <string2>:
     1ed:	06 03 4d 00 32 00 00 00                             ..M.2...

000001f5 <string1>:
     1f5:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     205:	65 00 00 00                                         e...

00000209 <string0>:
     209:	04 03 09 04                                         ....

0000020d <config1_descriptor>:
     20d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     21d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     22d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     23d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     24d:	40 00 00                                            @..

00000250 <device_descriptor>:
     250:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     260:	03 01                                               ..

00000262 <endpoint_config_table>:
     262:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	da e0       	ldi	r29, 0x0A	; 10
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	11 e0       	ldi	r17, 0x01	; 1
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	ee e8       	ldi	r30, 0x8E	; 142
     280:	fa e1       	ldi	r31, 0x1A	; 26
     282:	02 c0       	rjmp	.+4      	; 0x288 <__do_copy_data+0x10>
     284:	05 90       	lpm	r0, Z+
     286:	0d 92       	st	X+, r0
     288:	a8 32       	cpi	r26, 0x28	; 40
     28a:	b1 07       	cpc	r27, r17
     28c:	d9 f7       	brne	.-10     	; 0x284 <__do_copy_data+0xc>

0000028e <__do_clear_bss>:
     28e:	21 e0       	ldi	r18, 0x01	; 1
     290:	a8 e2       	ldi	r26, 0x28	; 40
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	01 c0       	rjmp	.+2      	; 0x298 <.do_clear_bss_start>

00000296 <.do_clear_bss_loop>:
     296:	1d 92       	st	X+, r1

00000298 <.do_clear_bss_start>:
     298:	ae 32       	cpi	r26, 0x2E	; 46
     29a:	b2 07       	cpc	r27, r18
     29c:	e1 f7       	brne	.-8      	; 0x296 <.do_clear_bss_loop>
     29e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
     2a2:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <_exit>

000002a6 <__bad_interrupt>:
     2a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002aa <usb_send_ram>:
#include "motors.h"
#include "m_usb.h"
#include "bno055_ll.h"

static void usb_send_ram(const char *s)
{
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	ec 01       	movw	r28, r24
	while (*s) {
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <usb_send_ram+0xe>
		m_usb_tx_char(*s++);
     2b2:	21 96       	adiw	r28, 0x01	; 1
     2b4:	0e 94 92 04 	call	0x924	; 0x924 <m_usb_tx_char>
#include "m_usb.h"
#include "bno055_ll.h"

static void usb_send_ram(const char *s)
{
	while (*s) {
     2b8:	88 81       	ld	r24, Y
     2ba:	81 11       	cpse	r24, r1
     2bc:	fa cf       	rjmp	.-12     	; 0x2b2 <usb_send_ram+0x8>
		m_usb_tx_char(*s++);
	}
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <main>:

int main(void) {
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	c6 54       	subi	r28, 0x46	; 70
     2ce:	d1 09       	sbc	r29, r1
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
	// — initialize everything —
	motors_init();
     2da:	0e 94 bc 03 	call	0x778	; 0x778 <motors_init>

	// — quick test sequence —
	motors_enable_left (true);
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motors_enable_left>
	motors_enable_right(true);
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <motors_enable_right>
	motors_set_speed_left (2);
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 05 04 	call	0x80a	; 0x80a <motors_set_speed_left>
	motors_set_speed_right(2);
     2f2:	82 e0       	ldi	r24, 0x02	; 2
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 3f 04 	call	0x87e	; 0x87e <motors_set_speed_right>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	2f ef       	ldi	r18, 0xFF	; 255
     2fc:	83 ed       	ldi	r24, 0xD3	; 211
     2fe:	90 e3       	ldi	r25, 0x30	; 48
     300:	21 50       	subi	r18, 0x01	; 1
     302:	80 40       	sbci	r24, 0x00	; 0
     304:	90 40       	sbci	r25, 0x00	; 0
     306:	e1 f7       	brne	.-8      	; 0x300 <main+0x3c>
     308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x46>
     30a:	00 00       	nop
	_delay_ms(1000);

	motors_stop_all();
     30c:	0e 94 65 04 	call	0x8ca	; 0x8ca <motors_stop_all>
	
	m_usb_init();                      /* start PLL, attach to bus    */
     310:	0e 94 76 04 	call	0x8ec	; 0x8ec <m_usb_init>
	while (!m_usb_isconnected()) { }   /* wait until host opens port  */
     314:	0e 94 8f 04 	call	0x91e	; 0x91e <m_usb_isconnected>
     318:	88 23       	and	r24, r24
     31a:	e1 f3       	breq	.-8      	; 0x314 <main+0x50>

	m_usb_tx_string("M2 ready\r\n");   /* greeting so you know it’s alive */
     31c:	8e ea       	ldi	r24, 0xAE	; 174
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 95 06 	call	0xd2a	; 0xd2a <print_P>
	
	twi_init();            /* called inside bno055_init() too — harmless    */
     324:	0e 94 43 02 	call	0x486	; 0x486 <twi_init>

	if (!bno055_init()) {
     328:	0e 94 1d 03 	call	0x63a	; 0x63a <bno055_init>
     32c:	81 11       	cpse	r24, r1
     32e:	01 c0       	rjmp	.+2      	; 0x332 <main+0x6e>
     330:	ff cf       	rjmp	.-2      	; 0x330 <main+0x6c>
	char line[64];

	/* ----------  main telemetry loop  ---------- */
	while (1) {
		int16_t h16, r16, p16;
		bno055_get_euler(&h16, &r16, &p16);   /* raw = deg·16              */
     332:	ae 01       	movw	r20, r28
     334:	4f 5b       	subi	r20, 0xBF	; 191
     336:	5f 4f       	sbci	r21, 0xFF	; 255
     338:	be 01       	movw	r22, r28
     33a:	6d 5b       	subi	r22, 0xBD	; 189
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
     33e:	ce 01       	movw	r24, r28
     340:	8b 5b       	subi	r24, 0xBB	; 187
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	0e 94 5f 03 	call	0x6be	; 0x6be <bno055_get_euler>

		/* convert to float degrees for nicer printing */
		float h = h16 / 16.0f;
     348:	27 96       	adiw	r28, 0x07	; 7
     34a:	6e ad       	ldd	r22, Y+62	; 0x3e
     34c:	7f ad       	ldd	r23, Y+63	; 0x3f
     34e:	27 97       	sbiw	r28, 0x07	; 7
     350:	07 2e       	mov	r0, r23
     352:	00 0c       	add	r0, r0
     354:	88 0b       	sbc	r24, r24
     356:	99 0b       	sbc	r25, r25
     358:	0e 94 af 06 	call	0xd5e	; 0xd5e <__floatsisf>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	40 e8       	ldi	r20, 0x80	; 128
     362:	5d e3       	ldi	r21, 0x3D	; 61
     364:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__mulsf3>
     368:	16 2f       	mov	r17, r22
     36a:	07 2f       	mov	r16, r23
     36c:	f8 2e       	mov	r15, r24
     36e:	e9 2e       	mov	r14, r25
		float r = r16 / 16.0f;
     370:	25 96       	adiw	r28, 0x05	; 5
     372:	6e ad       	ldd	r22, Y+62	; 0x3e
     374:	7f ad       	ldd	r23, Y+63	; 0x3f
     376:	25 97       	sbiw	r28, 0x05	; 5
     378:	07 2e       	mov	r0, r23
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 af 06 	call	0xd5e	; 0xd5e <__floatsisf>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	40 e8       	ldi	r20, 0x80	; 128
     38a:	5d e3       	ldi	r21, 0x3D	; 61
     38c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__mulsf3>
     390:	d6 2e       	mov	r13, r22
     392:	c7 2e       	mov	r12, r23
     394:	b8 2e       	mov	r11, r24
     396:	a9 2e       	mov	r10, r25
		float p = p16 / 16.0f;
     398:	23 96       	adiw	r28, 0x03	; 3
     39a:	6e ad       	ldd	r22, Y+62	; 0x3e
     39c:	7f ad       	ldd	r23, Y+63	; 0x3f
     39e:	23 97       	sbiw	r28, 0x03	; 3
     3a0:	07 2e       	mov	r0, r23
     3a2:	00 0c       	add	r0, r0
     3a4:	88 0b       	sbc	r24, r24
     3a6:	99 0b       	sbc	r25, r25
     3a8:	0e 94 af 06 	call	0xd5e	; 0xd5e <__floatsisf>
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e8       	ldi	r20, 0x80	; 128
     3b2:	5d e3       	ldi	r21, 0x3D	; 61
     3b4:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__mulsf3>
     3b8:	96 2e       	mov	r9, r22
     3ba:	87 2e       	mov	r8, r23
     3bc:	78 2e       	mov	r7, r24
     3be:	69 2e       	mov	r6, r25

		uint8_t cal_ok = bno055_is_fully_calibrated() ? 1u : 0u;
     3c0:	0e 94 a2 03 	call	0x744	; 0x744 <bno055_is_fully_calibrated>
     3c4:	88 23       	and	r24, r24
     3c6:	11 f0       	breq	.+4      	; 0x3cc <main+0x108>
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <main+0x10a>
     3cc:	80 e0       	ldi	r24, 0x00	; 0

		/* craft one ASCII line */
		snprintf(line, sizeof(line),
     3ce:	1f 92       	push	r1
     3d0:	8f 93       	push	r24
     3d2:	6f 92       	push	r6
     3d4:	7f 92       	push	r7
     3d6:	8f 92       	push	r8
     3d8:	9f 92       	push	r9
     3da:	af 92       	push	r10
     3dc:	bf 92       	push	r11
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	87 e0       	ldi	r24, 0x07	; 7
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	1f 92       	push	r1
     3f4:	80 e4       	ldi	r24, 0x40	; 64
     3f6:	8f 93       	push	r24
     3f8:	8e 01       	movw	r16, r28
     3fa:	0f 5f       	subi	r16, 0xFF	; 255
     3fc:	1f 4f       	sbci	r17, 0xFF	; 255
     3fe:	1f 93       	push	r17
     400:	0f 93       	push	r16
     402:	0e 94 b7 0c 	call	0x196e	; 0x196e <snprintf>
		"H:%6.1f R:%6.1f P:%6.1f CAL:%u\r\n", h, r, p, cal_ok);

		usb_send_ram(line);
     406:	c8 01       	movw	r24, r16
     408:	0e 94 55 01 	call	0x2aa	; 0x2aa <usb_send_ram>
		m_usb_tx_push();                 /* flush buffer immediately      */
     40c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <m_usb_tx_push>
     410:	2f ef       	ldi	r18, 0xFF	; 255
     412:	89 ef       	ldi	r24, 0xF9	; 249
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	21 50       	subi	r18, 0x01	; 1
     418:	80 40       	sbci	r24, 0x00	; 0
     41a:	90 40       	sbci	r25, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     420:	00 00       	nop

		_delay_ms(20);                   /* 50 Hz output                  */
	}
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
     42c:	82 cf       	rjmp	.-252    	; 0x332 <main+0x6e>

0000042e <twi_start>:
    while (!(TWCR & TW_INT_FLAG)) { /* wait for TWINT set */ }
}

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
     42e:	94 ea       	ldi	r25, 0xA4	; 164
     430:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS         (TWSR & 0xF8u)

/* ???????????????????????????  INTERNAL UTILITIES ?????????????????????????? */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG)) { /* wait for TWINT set */ }
     434:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     438:	99 23       	and	r25, r25
     43a:	e4 f7       	brge	.-8      	; 0x434 <twi_start+0x6>

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
     43c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     440:	98 7f       	andi	r25, 0xF8	; 248
    if (st != 0x08 && st != 0x10) return false;       /* START / REP START */
     442:	98 30       	cpi	r25, 0x08	; 8
     444:	11 f0       	breq	.+4      	; 0x44a <twi_start+0x1c>
     446:	90 31       	cpi	r25, 0x10	; 16
     448:	c1 f4       	brne	.+48     	; 0x47a <twi_start+0x4c>

    /* load SLA+R/W */
    TWDR = addr_rw;
     44a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = TW_INT_FLAG | TW_ENABLE;
     44e:	84 e8       	ldi	r24, 0x84	; 132
     450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS         (TWSR & 0xF8u)

/* ???????????????????????????  INTERNAL UTILITIES ?????????????????????????? */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG)) { /* wait for TWINT set */ }
     454:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     458:	88 23       	and	r24, r24
     45a:	e4 f7       	brge	.-8      	; 0x454 <twi_start+0x26>

    /* load SLA+R/W */
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
     45c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     460:	88 7f       	andi	r24, 0xF8	; 248
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
     462:	88 31       	cpi	r24, 0x18	; 24
     464:	21 f0       	breq	.+8      	; 0x46e <twi_start+0x40>
     466:	80 34       	cpi	r24, 0x40	; 64
     468:	21 f4       	brne	.+8      	; 0x472 <twi_start+0x44>
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	03 c0       	rjmp	.+6      	; 0x474 <twi_start+0x46>
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	01 c0       	rjmp	.+2      	; 0x474 <twi_start+0x46>
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	89 2f       	mov	r24, r25
     476:	81 70       	andi	r24, 0x01	; 1
     478:	08 95       	ret
static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
    if (st != 0x08 && st != 0x10) return false;       /* START / REP START */
     47a:	80 e0       	ldi	r24, 0x00	; 0
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
}
     47c:	08 95       	ret

0000047e <twi_stop>:

static void twi_stop(void)
{
    TWCR = TW_INT_FLAG | TW_STOP | TW_ENABLE;
     47e:	84 e9       	ldi	r24, 0x94	; 148
     480:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     484:	08 95       	ret

00000486 <twi_init>:

/* ???????????????????????????  PUBLIC TWI ROUTINES ????????????????????????? */
void twi_init(void)
{
    /* prescaler bits (TWPS1:0) = 0 ? prescaler = 1 */
    TWSR &= ~((1u << TWPS0) | (1u << TWPS1));
     486:	e9 eb       	ldi	r30, 0xB9	; 185
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8c 7f       	andi	r24, 0xFC	; 252
     48e:	80 83       	st	Z, r24

    /* choose TWBR such that SCL ? TWI_SCL_HZ                   *
     * TWBR = (F_CPU / SCL - 16) / (2·4^TWPS)                  */
    TWBR = (uint8_t)((F_CPU / TWI_SCL_HZ - 16UL) / 2UL);
     490:	8c e0       	ldi	r24, 0x0C	; 12
     492:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

    TWCR = TW_ENABLE; /* enable module, no interrupt yet */
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     49c:	08 95       	ret

0000049e <twi_write>:
}

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	eb 01       	movw	r28, r22
     4a8:	14 2f       	mov	r17, r20
    if (!twi_start((sla << 1) | 0)) return false;
     4aa:	88 0f       	add	r24, r24
     4ac:	0e 94 17 02 	call	0x42e	; 0x42e <twi_start>
     4b0:	08 2f       	mov	r16, r24
     4b2:	81 11       	cpse	r24, r1
     4b4:	19 c0       	rjmp	.+50     	; 0x4e8 <twi_write+0x4a>
     4b6:	1d c0       	rjmp	.+58     	; 0x4f2 <twi_write+0x54>
    for (uint8_t i = 0; i < len; ++i) {
        TWDR = buf[i];
     4b8:	fe 01       	movw	r30, r28
     4ba:	e9 0f       	add	r30, r25
     4bc:	f1 1d       	adc	r31, r1
     4be:	80 81       	ld	r24, Z
     4c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        TWCR = TW_INT_FLAG | TW_ENABLE;
     4c4:	84 e8       	ldi	r24, 0x84	; 132
     4c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS         (TWSR & 0xF8u)

/* ???????????????????????????  INTERNAL UTILITIES ?????????????????????????? */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG)) { /* wait for TWINT set */ }
     4ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4ce:	88 23       	and	r24, r24
     4d0:	e4 f7       	brge	.-8      	; 0x4ca <twi_write+0x2c>
    if (!twi_start((sla << 1) | 0)) return false;
    for (uint8_t i = 0; i < len; ++i) {
        TWDR = buf[i];
        TWCR = TW_INT_FLAG | TW_ENABLE;
        twi_wait();
        if (TW_STATUS != 0x28) { twi_stop(); return false; } /* data ACK */
     4d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4d6:	88 7f       	andi	r24, 0xF8	; 248
     4d8:	88 32       	cpi	r24, 0x28	; 40
     4da:	21 f0       	breq	.+8      	; 0x4e4 <twi_write+0x46>
     4dc:	0e 94 3f 02 	call	0x47e	; 0x47e <twi_stop>
     4e0:	00 e0       	ldi	r16, 0x00	; 0
     4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <twi_write+0x54>
}

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 0)) return false;
    for (uint8_t i = 0; i < len; ++i) {
     4e4:	9f 5f       	subi	r25, 0xFF	; 255
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <twi_write+0x4c>
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	91 17       	cp	r25, r17
     4ec:	28 f3       	brcs	.-54     	; 0x4b8 <twi_write+0x1a>
        TWDR = buf[i];
        TWCR = TW_INT_FLAG | TW_ENABLE;
        twi_wait();
        if (TW_STATUS != 0x28) { twi_stop(); return false; } /* data ACK */
    }
    twi_stop();
     4ee:	0e 94 3f 02 	call	0x47e	; 0x47e <twi_stop>
    return true;
}
     4f2:	80 2f       	mov	r24, r16
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	08 95       	ret

000004fe <twi_read>:

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	8b 01       	movw	r16, r22
     508:	c4 2f       	mov	r28, r20
    if (!twi_start((sla << 1) | 1)) return false;
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	81 60       	ori	r24, 0x01	; 1
     512:	0e 94 17 02 	call	0x42e	; 0x42e <twi_start>
     516:	d8 2f       	mov	r29, r24
     518:	81 11       	cpse	r24, r1
     51a:	2f c0       	rjmp	.+94     	; 0x57a <twi_read+0x7c>
     51c:	33 c0       	rjmp	.+102    	; 0x584 <twi_read+0x86>
    for (uint8_t i = 0; i < len; ++i) {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
     51e:	49 2f       	mov	r20, r25
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	2c 2f       	mov	r18, r28
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	21 50       	subi	r18, 0x01	; 1
     528:	31 09       	sbc	r19, r1
     52a:	42 17       	cp	r20, r18
     52c:	53 07       	cpc	r21, r19
     52e:	11 f4       	brne	.+4      	; 0x534 <twi_read+0x36>
     530:	84 e8       	ldi	r24, 0x84	; 132
     532:	01 c0       	rjmp	.+2      	; 0x536 <twi_read+0x38>
     534:	84 ec       	ldi	r24, 0xC4	; 196
     536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS         (TWSR & 0xF8u)

/* ???????????????????????????  INTERNAL UTILITIES ?????????????????????????? */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG)) { /* wait for TWINT set */ }
     53a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53e:	88 23       	and	r24, r24
     540:	e4 f7       	brge	.-8      	; 0x53a <twi_read+0x3c>
    if (!twi_start((sla << 1) | 1)) return false;
    for (uint8_t i = 0; i < len; ++i) {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
        twi_wait();
        if ((i < len - 1 && TW_STATUS != 0x50) || /* data with ACK */
     542:	42 17       	cp	r20, r18
     544:	53 07       	cpc	r21, r19
     546:	2c f4       	brge	.+10     	; 0x552 <twi_read+0x54>
     548:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     54c:	88 7f       	andi	r24, 0xF8	; 248
     54e:	80 35       	cpi	r24, 0x50	; 80
     550:	41 f4       	brne	.+16     	; 0x562 <twi_read+0x64>
     552:	42 17       	cp	r20, r18
     554:	53 07       	cpc	r21, r19
     556:	49 f4       	brne	.+18     	; 0x56a <twi_read+0x6c>
            (i == len - 1 && TW_STATUS != 0x58))   /* data with NACK */
     558:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     55c:	88 7f       	andi	r24, 0xF8	; 248
     55e:	88 35       	cpi	r24, 0x58	; 88
     560:	21 f0       	breq	.+8      	; 0x56a <twi_read+0x6c>
        { twi_stop(); return false; }
     562:	0e 94 3f 02 	call	0x47e	; 0x47e <twi_stop>
     566:	d0 e0       	ldi	r29, 0x00	; 0
     568:	0d c0       	rjmp	.+26     	; 0x584 <twi_read+0x86>
        buf[i] = TWDR;
     56a:	f8 01       	movw	r30, r16
     56c:	e9 0f       	add	r30, r25
     56e:	f1 1d       	adc	r31, r1
     570:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     574:	80 83       	st	Z, r24
}

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 1)) return false;
    for (uint8_t i = 0; i < len; ++i) {
     576:	9f 5f       	subi	r25, 0xFF	; 255
     578:	01 c0       	rjmp	.+2      	; 0x57c <twi_read+0x7e>
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	9c 17       	cp	r25, r28
     57e:	78 f2       	brcs	.-98     	; 0x51e <twi_read+0x20>
        if ((i < len - 1 && TW_STATUS != 0x50) || /* data with ACK */
            (i == len - 1 && TW_STATUS != 0x58))   /* data with NACK */
        { twi_stop(); return false; }
        buf[i] = TWDR;
    }
    twi_stop();
     580:	0e 94 3f 02 	call	0x47e	; 0x47e <twi_stop>
    return true;
}
     584:	8d 2f       	mov	r24, r29
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <bno055_write8>:

/* ???????????????????????????  BNO055 BASIC ACCESS ????????????????????????? */
bool bno055_write8(uint8_t reg, uint8_t val)
{
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	00 d0       	rcall	.+0      	; 0x596 <bno055_write8+0x6>
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
    uint8_t pkt[2] = { reg, val };
     59a:	89 83       	std	Y+1, r24	; 0x01
     59c:	6a 83       	std	Y+2, r22	; 0x02
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
     59e:	42 e0       	ldi	r20, 0x02	; 2
     5a0:	be 01       	movw	r22, r28
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	88 e2       	ldi	r24, 0x28	; 40
     5a8:	0e 94 4f 02 	call	0x49e	; 0x49e <twi_write>
}
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <bno055_set_mode>:
}

/* ???????????????????????????  HIGH-LEVEL HELPERS ?????????????????????????? */
static bool bno055_set_mode(uint8_t mode)
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
     5b6:	68 2f       	mov	r22, r24
     5b8:	8d e3       	ldi	r24, 0x3D	; 61
     5ba:	0e 94 c8 02 	call	0x590	; 0x590 <bno055_write8>
}
     5be:	08 95       	ret

000005c0 <bno055_read8>:
    uint8_t pkt[2] = { reg, val };
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
}

bool bno055_read8(uint8_t reg, uint8_t *val)
{
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	1f 92       	push	r1
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	89 83       	std	Y+1, r24	; 0x01
     5d0:	8b 01       	movw	r16, r22
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1)) return false;
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	be 01       	movw	r22, r28
     5d6:	6f 5f       	subi	r22, 0xFF	; 255
     5d8:	7f 4f       	sbci	r23, 0xFF	; 255
     5da:	88 e2       	ldi	r24, 0x28	; 40
     5dc:	0e 94 4f 02 	call	0x49e	; 0x49e <twi_write>
     5e0:	88 23       	and	r24, r24
     5e2:	29 f0       	breq	.+10     	; 0x5ee <bno055_read8+0x2e>
    return twi_read(BNO055_I2C_ADDR, val, 1);
     5e4:	41 e0       	ldi	r20, 0x01	; 1
     5e6:	b8 01       	movw	r22, r16
     5e8:	88 e2       	ldi	r24, 0x28	; 40
     5ea:	0e 94 7f 02 	call	0x4fe	; 0x4fe <twi_read>
}
     5ee:	0f 90       	pop	r0
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <bno055_read>:

bool bno055_read(uint8_t reg, uint8_t *buf, uint8_t len)
{
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	1f 92       	push	r1
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	8b 01       	movw	r16, r22
     60e:	f4 2e       	mov	r15, r20
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1)) return false;
     610:	41 e0       	ldi	r20, 0x01	; 1
     612:	be 01       	movw	r22, r28
     614:	6f 5f       	subi	r22, 0xFF	; 255
     616:	7f 4f       	sbci	r23, 0xFF	; 255
     618:	88 e2       	ldi	r24, 0x28	; 40
     61a:	0e 94 4f 02 	call	0x49e	; 0x49e <twi_write>
     61e:	88 23       	and	r24, r24
     620:	29 f0       	breq	.+10     	; 0x62c <bno055_read+0x32>
    return twi_read(BNO055_I2C_ADDR, buf, len);
     622:	4f 2d       	mov	r20, r15
     624:	b8 01       	movw	r22, r16
     626:	88 e2       	ldi	r24, 0x28	; 40
     628:	0e 94 7f 02 	call	0x4fe	; 0x4fe <twi_read>
}
     62c:	0f 90       	pop	r0
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	08 95       	ret

0000063a <bno055_init>:
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
}

bool bno055_init(void)
{
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	1f 92       	push	r1
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
    twi_init();
     646:	0e 94 43 02 	call	0x486	; 0x486 <twi_init>

    /* Ensure sensor is present */
    uint8_t id = 0;
     64a:	19 82       	std	Y+1, r1	; 0x01
    if (!bno055_read8(0x00, &id) || id != 0xA0) return false; /* CHIP_ID */
     64c:	be 01       	movw	r22, r28
     64e:	6f 5f       	subi	r22, 0xFF	; 255
     650:	7f 4f       	sbci	r23, 0xFF	; 255
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <bno055_read8>
     658:	18 2f       	mov	r17, r24
     65a:	88 23       	and	r24, r24
     65c:	51 f1       	breq	.+84     	; 0x6b2 <bno055_init+0x78>
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	80 3a       	cpi	r24, 0xA0	; 160
     662:	31 f5       	brne	.+76     	; 0x6b0 <bno055_init+0x76>

    /* Switch to CONFIG, reset, then NDOF */
    bno055_set_mode(0x00);              /* CONFIG      */
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 db 02 	call	0x5b6	; 0x5b6 <bno055_set_mode>
     66a:	2f e7       	ldi	r18, 0x7F	; 127
     66c:	88 e3       	ldi	r24, 0x38	; 56
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	21 50       	subi	r18, 0x01	; 1
     672:	80 40       	sbci	r24, 0x00	; 0
     674:	90 40       	sbci	r25, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <bno055_init+0x36>
     678:	00 c0       	rjmp	.+0      	; 0x67a <bno055_init+0x40>
     67a:	00 00       	nop
    _delay_ms(25);

    bno055_write8(0x3F, 0x20);          /* SYS_TRIGGER, reset */
     67c:	60 e2       	ldi	r22, 0x20	; 32
     67e:	8f e3       	ldi	r24, 0x3F	; 63
     680:	0e 94 c8 02 	call	0x590	; 0x590 <bno055_write8>
     684:	2f ef       	ldi	r18, 0xFF	; 255
     686:	8c eb       	ldi	r24, 0xBC	; 188
     688:	9f e1       	ldi	r25, 0x1F	; 31
     68a:	21 50       	subi	r18, 0x01	; 1
     68c:	80 40       	sbci	r24, 0x00	; 0
     68e:	90 40       	sbci	r25, 0x00	; 0
     690:	e1 f7       	brne	.-8      	; 0x68a <bno055_init+0x50>
     692:	00 c0       	rjmp	.+0      	; 0x694 <bno055_init+0x5a>
     694:	00 00       	nop
    _delay_ms(650);                     /* ~650 ms boot time */

    bno055_set_mode(0x0C);              /* NDOF fusion */
     696:	8c e0       	ldi	r24, 0x0C	; 12
     698:	0e 94 db 02 	call	0x5b6	; 0x5b6 <bno055_set_mode>
     69c:	2f ef       	ldi	r18, 0xFF	; 255
     69e:	89 ef       	ldi	r24, 0xF9	; 249
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	21 50       	subi	r18, 0x01	; 1
     6a4:	80 40       	sbci	r24, 0x00	; 0
     6a6:	90 40       	sbci	r25, 0x00	; 0
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <bno055_init+0x68>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <bno055_init+0x72>
     6ac:	00 00       	nop
    _delay_ms(20);
    return true;
     6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <bno055_init+0x78>
{
    twi_init();

    /* Ensure sensor is present */
    uint8_t id = 0;
    if (!bno055_read8(0x00, &id) || id != 0xA0) return false; /* CHIP_ID */
     6b0:	10 e0       	ldi	r17, 0x00	; 0
    _delay_ms(650);                     /* ~650 ms boot time */

    bno055_set_mode(0x0C);              /* NDOF fusion */
    _delay_ms(20);
    return true;
}
     6b2:	81 2f       	mov	r24, r17
     6b4:	0f 90       	pop	r0
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	08 95       	ret

000006be <bno055_get_euler>:

void bno055_get_euler(int16_t *h, int16_t *r, int16_t *p)
{
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <bno055_get_euler+0x12>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <bno055_get_euler+0x14>
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <bno055_get_euler+0x16>
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	6c 01       	movw	r12, r24
     6da:	7b 01       	movw	r14, r22
     6dc:	8a 01       	movw	r16, r20
    uint8_t buf[6];
    if (bno055_read(0x1A, buf, 6)) {    /* EULER_H_LSB */
     6de:	46 e0       	ldi	r20, 0x06	; 6
     6e0:	be 01       	movw	r22, r28
     6e2:	6f 5f       	subi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	8a e1       	ldi	r24, 0x1A	; 26
     6e8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <bno055_read>
     6ec:	88 23       	and	r24, r24
     6ee:	d9 f0       	breq	.+54     	; 0x726 <bno055_get_euler+0x68>
        *h = (int16_t)(buf[0] | ((uint16_t)buf[1] << 8));
     6f0:	29 81       	ldd	r18, Y+1	; 0x01
     6f2:	8a 81       	ldd	r24, Y+2	; 0x02
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	98 2f       	mov	r25, r24
     6f8:	88 27       	eor	r24, r24
     6fa:	82 2b       	or	r24, r18
     6fc:	f6 01       	movw	r30, r12
     6fe:	91 83       	std	Z+1, r25	; 0x01
     700:	80 83       	st	Z, r24
        *r = (int16_t)(buf[2] | ((uint16_t)buf[3] << 8));
     702:	2b 81       	ldd	r18, Y+3	; 0x03
     704:	8c 81       	ldd	r24, Y+4	; 0x04
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	98 2f       	mov	r25, r24
     70a:	88 27       	eor	r24, r24
     70c:	82 2b       	or	r24, r18
     70e:	f7 01       	movw	r30, r14
     710:	91 83       	std	Z+1, r25	; 0x01
     712:	80 83       	st	Z, r24
        *p = (int16_t)(buf[4] | ((uint16_t)buf[5] << 8));
     714:	2d 81       	ldd	r18, Y+5	; 0x05
     716:	8e 81       	ldd	r24, Y+6	; 0x06
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	98 2f       	mov	r25, r24
     71c:	88 27       	eor	r24, r24
     71e:	82 2b       	or	r24, r18
     720:	f8 01       	movw	r30, r16
     722:	91 83       	std	Z+1, r25	; 0x01
     724:	80 83       	st	Z, r24
    }
}
     726:	26 96       	adiw	r28, 0x06	; 6
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	08 95       	ret

00000744 <bno055_is_fully_calibrated>:

bool bno055_is_fully_calibrated(void)
{
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	1f 92       	push	r1
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
    uint8_t cal;
    if (!bno055_read8(0x35, &cal)) return false;   /* CALIB_STAT */
     74e:	be 01       	movw	r22, r28
     750:	6f 5f       	subi	r22, 0xFF	; 255
     752:	7f 4f       	sbci	r23, 0xFF	; 255
     754:	85 e3       	ldi	r24, 0x35	; 53
     756:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <bno055_read8>
     75a:	88 23       	and	r24, r24
     75c:	49 f0       	breq	.+18     	; 0x770 <bno055_is_fully_calibrated+0x2c>
    return ((cal >> 6) & 0x03) == 3;               /* SYS == 3   */
     75e:	99 81       	ldd	r25, Y+1	; 0x01
     760:	92 95       	swap	r25
     762:	96 95       	lsr	r25
     764:	96 95       	lsr	r25
     766:	93 70       	andi	r25, 0x03	; 3
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	93 30       	cpi	r25, 0x03	; 3
     76c:	09 f0       	breq	.+2      	; 0x770 <bno055_is_fully_calibrated+0x2c>
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <motors_init>:
        RIGHT_PUL_PORT |= _BV(RIGHT_PUL_BIT);  
        _delay_us(5);                        
        RIGHT_PUL_PORT &= ~_BV(RIGHT_PUL_BIT);
        _delay_us(5);                        
    }
}
     778:	8a b1       	in	r24, 0x0a	; 10
     77a:	80 68       	ori	r24, 0x80	; 128
     77c:	8a b9       	out	0x0a, r24	; 10
     77e:	8a b1       	in	r24, 0x0a	; 10
     780:	80 64       	ori	r24, 0x40	; 64
     782:	8a b9       	out	0x0a, r24	; 10
     784:	87 b1       	in	r24, 0x07	; 7
     786:	80 64       	ori	r24, 0x40	; 64
     788:	87 b9       	out	0x07, r24	; 7
     78a:	84 b1       	in	r24, 0x04	; 4
     78c:	80 62       	ori	r24, 0x20	; 32
     78e:	84 b9       	out	0x04, r24	; 4
     790:	84 b1       	in	r24, 0x04	; 4
     792:	80 61       	ori	r24, 0x10	; 16
     794:	84 b9       	out	0x04, r24	; 4
     796:	80 b3       	in	r24, 0x10	; 16
     798:	80 68       	ori	r24, 0x80	; 128
     79a:	80 bb       	out	0x10, r24	; 16
     79c:	8b b1       	in	r24, 0x0b	; 11
     79e:	80 68       	ori	r24, 0x80	; 128
     7a0:	8b b9       	out	0x0b, r24	; 11
     7a2:	8b b1       	in	r24, 0x0b	; 11
     7a4:	80 64       	ori	r24, 0x40	; 64
     7a6:	8b b9       	out	0x0b, r24	; 11
     7a8:	88 b1       	in	r24, 0x08	; 8
     7aa:	8f 7b       	andi	r24, 0xBF	; 191
     7ac:	88 b9       	out	0x08, r24	; 8
     7ae:	85 b1       	in	r24, 0x05	; 5
     7b0:	80 62       	ori	r24, 0x20	; 32
     7b2:	85 b9       	out	0x05, r24	; 5
     7b4:	85 b1       	in	r24, 0x05	; 5
     7b6:	80 61       	ori	r24, 0x10	; 16
     7b8:	85 b9       	out	0x05, r24	; 5
     7ba:	81 b3       	in	r24, 0x11	; 17
     7bc:	8f 77       	andi	r24, 0x7F	; 127
     7be:	81 bb       	out	0x11, r24	; 17
     7c0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7f80c3>
     7d0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     7d4:	80 e4       	ldi	r24, 0x40	; 64
     7d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     7da:	88 e0       	ldi	r24, 0x08	; 8
     7dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     7e0:	08 95       	ret

000007e2 <motors_enable_left>:
     7e2:	88 23       	and	r24, r24
     7e4:	21 f0       	breq	.+8      	; 0x7ee <motors_enable_left+0xc>
     7e6:	88 b1       	in	r24, 0x08	; 8
     7e8:	80 64       	ori	r24, 0x40	; 64
     7ea:	88 b9       	out	0x08, r24	; 8
     7ec:	08 95       	ret
     7ee:	88 b1       	in	r24, 0x08	; 8
     7f0:	8f 7b       	andi	r24, 0xBF	; 191
     7f2:	88 b9       	out	0x08, r24	; 8
     7f4:	08 95       	ret

000007f6 <motors_enable_right>:
     7f6:	88 23       	and	r24, r24
     7f8:	21 f0       	breq	.+8      	; 0x802 <motors_enable_right+0xc>
     7fa:	81 b3       	in	r24, 0x11	; 17
     7fc:	80 68       	ori	r24, 0x80	; 128
     7fe:	81 bb       	out	0x11, r24	; 17
     800:	08 95       	ret
     802:	81 b3       	in	r24, 0x11	; 17
     804:	8f 77       	andi	r24, 0x7F	; 127
     806:	81 bb       	out	0x11, r24	; 17
     808:	08 95       	ret

0000080a <motors_set_speed_left>:
     80a:	9c 01       	movw	r18, r24
     80c:	a8 ec       	ldi	r26, 0xC8	; 200
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	0e 94 47 0b 	call	0x168e	; 0x168e <__umulhisi3>
     814:	2c e3       	ldi	r18, 0x3C	; 60
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	0e 94 25 0b 	call	0x164a	; 0x164a <__udivmodsi4>
     820:	01 2e       	mov	r0, r17
     822:	1b e0       	ldi	r17, 0x0B	; 11
     824:	22 0f       	add	r18, r18
     826:	33 1f       	adc	r19, r19
     828:	44 1f       	adc	r20, r20
     82a:	55 1f       	adc	r21, r21
     82c:	1a 95       	dec	r17
     82e:	d1 f7       	brne	.-12     	; 0x824 <motors_set_speed_left+0x1a>
     830:	10 2d       	mov	r17, r0
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	74 e2       	ldi	r23, 0x24	; 36
     836:	84 ef       	ldi	r24, 0xF4	; 244
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 25 0b 	call	0x164a	; 0x164a <__udivmodsi4>
     83e:	21 50       	subi	r18, 0x01	; 1
     840:	31 09       	sbc	r19, r1
     842:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__data_end+0x1>
     846:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__data_end>
     84a:	2f 3f       	cpi	r18, 0xFF	; 255
     84c:	31 05       	cpc	r19, r1
     84e:	39 f0       	breq	.+14     	; 0x85e <motors_set_speed_left+0x54>
     850:	30 f0       	brcs	.+12     	; 0x85e <motors_set_speed_left+0x54>
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
     85a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
     85e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     862:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
     866:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     86a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
     86e:	96 95       	lsr	r25
     870:	87 95       	ror	r24
     872:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f80d2>
     876:	8b e0       	ldi	r24, 0x0B	; 11
     878:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     87c:	08 95       	ret

0000087e <motors_set_speed_right>:
     87e:	9c 01       	movw	r18, r24
     880:	a8 ec       	ldi	r26, 0xC8	; 200
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	0e 94 47 0b 	call	0x168e	; 0x168e <__umulhisi3>
     888:	2c e3       	ldi	r18, 0x3C	; 60
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	0e 94 25 0b 	call	0x164a	; 0x164a <__udivmodsi4>
     894:	01 2e       	mov	r0, r17
     896:	1b e0       	ldi	r17, 0x0B	; 11
     898:	22 0f       	add	r18, r18
     89a:	33 1f       	adc	r19, r19
     89c:	44 1f       	adc	r20, r20
     89e:	55 1f       	adc	r21, r21
     8a0:	1a 95       	dec	r17
     8a2:	d1 f7       	brne	.-12     	; 0x898 <motors_set_speed_right+0x1a>
     8a4:	10 2d       	mov	r17, r0
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	74 e2       	ldi	r23, 0x24	; 36
     8aa:	84 ef       	ldi	r24, 0xF4	; 244
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 25 0b 	call	0x164a	; 0x164a <__udivmodsi4>
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	31 09       	sbc	r19, r1
     8b6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     8ba:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     8be:	e1 e8       	ldi	r30, 0x81	; 129
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	85 60       	ori	r24, 0x05	; 5
     8c6:	80 83       	st	Z, r24
     8c8:	08 95       	ret

000008ca <motors_stop_all>:

void motors_stop_all(void) {
    // disable outputs
    motors_enable_left(false);
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motors_enable_left>
    motors_enable_right(false);
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <motors_enable_right>
    // stop timers
    TCCR1B &= ~(_BV(CS12)|_BV(CS11)|_BV(CS10));
     8d6:	e1 e8       	ldi	r30, 0x81	; 129
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	88 7f       	andi	r24, 0xF8	; 248
     8de:	80 83       	st	Z, r24
    TCCR4B &= ~(_BV(CS43)|_BV(CS42)|_BV(CS41)|_BV(CS40));
     8e0:	e1 ec       	ldi	r30, 0xC1	; 193
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	80 7f       	andi	r24, 0xF0	; 240
     8e8:	80 83       	st	Z, r24
     8ea:	08 95       	ret

000008ec <m_usb_init>:
	UEDATX = signals;
	UEDATX = 0;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     8f2:	80 ea       	ldi	r24, 0xA0	; 160
     8f4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     8f8:	82 e1       	ldi	r24, 0x12	; 18
     8fa:	89 bd       	out	0x29, r24	; 41
     8fc:	09 b4       	in	r0, 0x29	; 41
     8fe:	00 fe       	sbrs	r0, 0
     900:	fd cf       	rjmp	.-6      	; 0x8fc <m_usb_init+0x10>
     902:	80 e9       	ldi	r24, 0x90	; 144
     904:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     908:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     90c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <usb_configuration>
     910:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <cdc_line_rtsdtr>
     914:	8c e0       	ldi	r24, 0x0C	; 12
     916:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     91a:	78 94       	sei
     91c:	08 95       	ret

0000091e <m_usb_isconnected>:
     91e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <usb_configuration>
     922:	08 95       	ret

00000924 <m_usb_tx_char>:
     924:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <usb_configuration>
     928:	99 23       	and	r25, r25
     92a:	e1 f1       	breq	.+120    	; 0x9a4 <m_usb_tx_char+0x80>
     92c:	9f b7       	in	r25, 0x3f	; 63
     92e:	f8 94       	cli
     930:	24 e0       	ldi	r18, 0x04	; 4
     932:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     936:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <transmit_previous_timeout>
     93a:	22 23       	and	r18, r18
     93c:	49 f0       	breq	.+18     	; 0x950 <m_usb_tx_char+0x2c>
     93e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     942:	25 fd       	sbrc	r18, 5
     944:	03 c0       	rjmp	.+6      	; 0x94c <m_usb_tx_char+0x28>
     946:	9f bf       	out	0x3f, r25	; 63
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	08 95       	ret
     94c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <transmit_previous_timeout>
     950:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     954:	37 5e       	subi	r19, 0xE7	; 231
     956:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     95a:	25 fd       	sbrc	r18, 5
     95c:	14 c0       	rjmp	.+40     	; 0x986 <m_usb_tx_char+0x62>
     95e:	9f bf       	out	0x3f, r25	; 63
     960:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     964:	39 13       	cpse	r19, r25
     966:	05 c0       	rjmp	.+10     	; 0x972 <m_usb_tx_char+0x4e>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <transmit_previous_timeout>
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	08 95       	ret
     972:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <usb_configuration>
     976:	99 23       	and	r25, r25
     978:	b9 f0       	breq	.+46     	; 0x9a8 <m_usb_tx_char+0x84>
     97a:	9f b7       	in	r25, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	24 e0       	ldi	r18, 0x04	; 4
     980:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     984:	e8 cf       	rjmp	.-48     	; 0x956 <m_usb_tx_char+0x32>
     986:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     98a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     98e:	85 fd       	sbrc	r24, 5
     990:	03 c0       	rjmp	.+6      	; 0x998 <m_usb_tx_char+0x74>
     992:	8a e3       	ldi	r24, 0x3A	; 58
     994:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     998:	85 e0       	ldi	r24, 0x05	; 5
     99a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <transmit_flush_timer>
     99e:	9f bf       	out	0x3f, r25	; 63
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	08 95       	ret
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	08 95       	ret
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	08 95       	ret

000009ac <m_usb_tx_push>:
     9ac:	8f b7       	in	r24, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <transmit_flush_timer>
     9b4:	99 23       	and	r25, r25
     9b6:	41 f0       	breq	.+16     	; 0x9c8 <m_usb_tx_push+0x1c>
     9b8:	94 e0       	ldi	r25, 0x04	; 4
     9ba:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     9be:	9a e3       	ldi	r25, 0x3A	; 58
     9c0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     9c4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <transmit_flush_timer>
     9c8:	8f bf       	out	0x3f, r24	; 63
     9ca:	08 95       	ret

000009cc <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
     9d6:	8f 93       	push	r24
     9d8:	9f 93       	push	r25
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     9de:	e1 ee       	ldi	r30, 0xE1	; 225
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
        UDINT = 0;
     9e4:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     9e6:	83 ff       	sbrs	r24, 3
     9e8:	11 c0       	rjmp	.+34     	; 0xa0c <__DATA_REGION_LENGTH__+0xc>
		UENUM = 0;
     9ea:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
		UECONX = 1;
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		UECFG0X = EP_TYPE_CONTROL;
     9f4:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     9f8:	92 e1       	ldi	r25, 0x12	; 18
     9fa:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
		UEIENX = (1<<RXSTPE);
     9fe:	98 e0       	ldi	r25, 0x08	; 8
     a00:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
		usb_configuration = 0;
     a04:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <usb_configuration>
		cdc_line_rtsdtr = 0;
     a08:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <cdc_line_rtsdtr>
        }
	if (intbits & (1<<SOFI)) {
     a0c:	82 ff       	sbrs	r24, 2
     a0e:	13 c0       	rjmp	.+38     	; 0xa36 <__DATA_REGION_LENGTH__+0x36>
		if (usb_configuration) {
     a10:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <usb_configuration>
     a14:	88 23       	and	r24, r24
     a16:	79 f0       	breq	.+30     	; 0xa36 <__DATA_REGION_LENGTH__+0x36>
			t = transmit_flush_timer;
     a18:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <transmit_flush_timer>
			if (t) {
     a1c:	88 23       	and	r24, r24
     a1e:	59 f0       	breq	.+22     	; 0xa36 <__DATA_REGION_LENGTH__+0x36>
				transmit_flush_timer = --t;
     a20:	81 50       	subi	r24, 0x01	; 1
     a22:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <transmit_flush_timer>
				if (!t) {
     a26:	81 11       	cpse	r24, r1
     a28:	06 c0       	rjmp	.+12     	; 0xa36 <__DATA_REGION_LENGTH__+0x36>
					UENUM = CDC_TX_ENDPOINT;
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
					UEINTX = 0x3A;
     a30:	8a e3       	ldi	r24, 0x3A	; 58
     a32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				}
			}
		}
	}
}
     a36:	ff 91       	pop	r31
     a38:	ef 91       	pop	r30
     a3a:	9f 91       	pop	r25
     a3c:	8f 91       	pop	r24
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	1f 90       	pop	r1
     a46:	18 95       	reti

00000a48 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     a6e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
        intbits = UEINTX;
     a72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
        if (intbits & (1<<RXSTPI)) {
     a76:	83 ff       	sbrs	r24, 3
     a78:	42 c1       	rjmp	.+644    	; 0xcfe <__stack+0x1ff>
                bmRequestType = UEDATX;
     a7a:	e1 ef       	ldi	r30, 0xF1	; 241
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	b0 81       	ld	r27, Z
                bRequest = UEDATX;
     a80:	a0 81       	ld	r26, Z
                wValue = UEDATX;
     a82:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     a84:	80 81       	ld	r24, Z
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	98 2f       	mov	r25, r24
     a8a:	88 27       	eor	r24, r24
     a8c:	82 2b       	or	r24, r18
                wIndex = UEDATX;
     a8e:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
     a90:	20 81       	ld	r18, Z
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	32 2f       	mov	r19, r18
     a96:	22 27       	eor	r18, r18
     a98:	b9 01       	movw	r22, r18
     a9a:	64 2b       	or	r22, r20
                wLength = UEDATX;
     a9c:	40 81       	ld	r20, Z
                wLength |= (UEDATX << 8);
     a9e:	20 81       	ld	r18, Z
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	32 2f       	mov	r19, r18
     aa4:	22 27       	eor	r18, r18
     aa6:	f9 01       	movw	r30, r18
     aa8:	e4 2b       	or	r30, r20
     aaa:	af 01       	movw	r20, r30
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     aac:	22 ef       	ldi	r18, 0xF2	; 242
     aae:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
                if (bRequest == GET_DESCRIPTOR) {
     ab2:	a6 30       	cpi	r26, 0x06	; 6
     ab4:	09 f0       	breq	.+2      	; 0xab8 <__vector_11+0x70>
     ab6:	51 c0       	rjmp	.+162    	; 0xb5a <__stack+0x5b>
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	29 eb       	ldi	r18, 0xB9	; 185
     abc:	31 e0       	ldi	r19, 0x01	; 1
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     abe:	a6 30       	cpi	r26, 0x06	; 6
     ac0:	20 f0       	brcs	.+8      	; 0xaca <__vector_11+0x82>
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     ac2:	81 e2       	ldi	r24, 0x21	; 33
     ac4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					return;
     ac8:	1d c1       	rjmp	.+570    	; 0xd04 <__stack+0x205>
				}
				desc_val = pgm_read_word(list);
     aca:	f9 01       	movw	r30, r18
     acc:	c5 91       	lpm	r28, Z+
     ace:	d4 91       	lpm	r29, Z
				if (desc_val != wValue) {
     ad0:	8c 17       	cp	r24, r28
     ad2:	9d 07       	cpc	r25, r29
     ad4:	19 f0       	breq	.+6      	; 0xadc <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct);
     ad6:	29 5f       	subi	r18, 0xF9	; 249
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
     ada:	1c c0       	rjmp	.+56     	; 0xb14 <__stack+0x15>
				}
				list += 2;
     adc:	f9 01       	movw	r30, r18
     ade:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     ae0:	c5 91       	lpm	r28, Z+
     ae2:	d4 91       	lpm	r29, Z
				if (desc_val != wIndex) {
     ae4:	6c 17       	cp	r22, r28
     ae6:	7d 07       	cpc	r23, r29
     ae8:	19 f0       	breq	.+6      	; 0xaf0 <__vector_11+0xa8>
					list += sizeof(struct descriptor_list_struct)-2;
     aea:	29 5f       	subi	r18, 0xF9	; 249
     aec:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
     aee:	12 c0       	rjmp	.+36     	; 0xb14 <__stack+0x15>
				}
				list += 2;
     af0:	f9 01       	movw	r30, r18
     af2:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     af4:	85 91       	lpm	r24, Z+
     af6:	94 91       	lpm	r25, Z
				list += 2;
     af8:	f9 01       	movw	r30, r18
     afa:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     afc:	64 91       	lpm	r22, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     afe:	9a 01       	movw	r18, r20
     b00:	4f 3f       	cpi	r20, 0xFF	; 255
     b02:	51 05       	cpc	r21, r1
     b04:	19 f0       	breq	.+6      	; 0xb0c <__stack+0xd>
     b06:	10 f0       	brcs	.+4      	; 0xb0c <__stack+0xd>
     b08:	2f ef       	ldi	r18, 0xFF	; 255
     b0a:	30 e0       	ldi	r19, 0x00	; 0
			if (len > desc_length) len = desc_length;
     b0c:	62 17       	cp	r22, r18
     b0e:	20 f0       	brcs	.+8      	; 0xb18 <__stack+0x19>
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     b10:	62 2f       	mov	r22, r18
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <__stack+0x19>
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
     b14:	af 5f       	subi	r26, 0xFF	; 255
				list += 2;
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
     b16:	d3 cf       	rjmp	.-90     	; 0xabe <__vector_11+0x76>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     b18:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     b1c:	32 2f       	mov	r19, r18
     b1e:	35 70       	andi	r19, 0x05	; 5
     b20:	d9 f3       	breq	.-10     	; 0xb18 <__stack+0x19>
				if (i & (1<<RXOUTI)) return;	// abort
     b22:	22 fd       	sbrc	r18, 2
     b24:	ef c0       	rjmp	.+478    	; 0xd04 <__stack+0x205>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     b26:	36 2f       	mov	r19, r22
     b28:	61 31       	cpi	r22, 0x11	; 17
     b2a:	08 f0       	brcs	.+2      	; 0xb2e <__stack+0x2f>
     b2c:	30 e1       	ldi	r19, 0x10	; 16
				for (i = n; i; i--) {
     b2e:	23 2f       	mov	r18, r19
     b30:	09 c0       	rjmp	.+18     	; 0xb44 <__stack+0x45>
					UEDATX = pgm_read_byte(desc_addr++);
     b32:	ac 01       	movw	r20, r24
     b34:	4f 5f       	subi	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	fc 01       	movw	r30, r24
     b3a:	84 91       	lpm	r24, Z
     b3c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     b40:	21 50       	subi	r18, 0x01	; 1
					UEDATX = pgm_read_byte(desc_addr++);
     b42:	ca 01       	movw	r24, r20
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     b44:	21 11       	cpse	r18, r1
     b46:	f5 cf       	rjmp	.-22     	; 0xb32 <__stack+0x33>
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     b48:	63 1b       	sub	r22, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     b4a:	2e ef       	ldi	r18, 0xFE	; 254
     b4c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     b50:	61 11       	cpse	r22, r1
     b52:	e2 cf       	rjmp	.-60     	; 0xb18 <__stack+0x19>
     b54:	30 31       	cpi	r19, 0x10	; 16
     b56:	01 f3       	breq	.-64     	; 0xb18 <__stack+0x19>
     b58:	d5 c0       	rjmp	.+426    	; 0xd04 <__stack+0x205>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     b5a:	a5 30       	cpi	r26, 0x05	; 5
     b5c:	59 f4       	brne	.+22     	; 0xb74 <__stack+0x75>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     b5e:	2e ef       	ldi	r18, 0xFE	; 254
     b60:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     b64:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b68:	20 ff       	sbrs	r18, 0
     b6a:	fc cf       	rjmp	.-8      	; 0xb64 <__stack+0x65>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
			return;
     b72:	c8 c0       	rjmp	.+400    	; 0xd04 <__stack+0x205>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     b74:	a9 30       	cpi	r26, 0x09	; 9
     b76:	79 f5       	brne	.+94     	; 0xbd6 <__stack+0xd7>
     b78:	b1 11       	cpse	r27, r1
     b7a:	2d c0       	rjmp	.+90     	; 0xbd6 <__stack+0xd7>
			usb_configuration = wValue;
     b7c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <usb_configuration>
			cdc_line_rtsdtr = 0;
     b80:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <cdc_line_rtsdtr>
			transmit_flush_timer = 0;
     b84:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     b88:	8e ef       	ldi	r24, 0xFE	; 254
     b8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     b8e:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     b90:	22 e6       	ldi	r18, 0x62	; 98
     b92:	32 e0       	ldi	r19, 0x02	; 2
			for (i=1; i<5; i++) {
     b94:	18 c0       	rjmp	.+48     	; 0xbc6 <__stack+0xc7>
				UENUM = i;
     b96:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				en = pgm_read_byte(cfg++);
     b9a:	a9 01       	movw	r20, r18
     b9c:	4f 5f       	subi	r20, 0xFF	; 255
     b9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ba0:	f9 01       	movw	r30, r18
     ba2:	94 91       	lpm	r25, Z
				UECONX = en;
     ba4:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				if (en) {
     ba8:	99 23       	and	r25, r25
     baa:	59 f0       	breq	.+22     	; 0xbc2 <__stack+0xc3>
					UECFG0X = pgm_read_byte(cfg++);
     bac:	fa 01       	movw	r30, r20
     bae:	44 91       	lpm	r20, Z
     bb0:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
					UECFG1X = pgm_read_byte(cfg++);
     bb4:	31 96       	adiw	r30, 0x01	; 1
     bb6:	e4 91       	lpm	r30, Z
     bb8:	2d 5f       	subi	r18, 0xFD	; 253
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
     bbc:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <__stack+0xc5>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
     bc2:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     bc4:	8f 5f       	subi	r24, 0xFF	; 255
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	30 f3       	brcs	.-52     	; 0xb96 <__stack+0x97>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     bca:	ea ee       	ldi	r30, 0xEA	; 234
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	8e e1       	ldi	r24, 0x1E	; 30
     bd0:	80 83       	st	Z, r24
        		UERST = 0;
     bd2:	10 82       	st	Z, r1
			return;
     bd4:	97 c0       	rjmp	.+302    	; 0xd04 <__stack+0x205>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     bd6:	a8 30       	cpi	r26, 0x08	; 8
     bd8:	71 f4       	brne	.+28     	; 0xbf6 <__stack+0xf7>
     bda:	b0 38       	cpi	r27, 0x80	; 128
     bdc:	61 f4       	brne	.+24     	; 0xbf6 <__stack+0xf7>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     bde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     be2:	80 ff       	sbrs	r24, 0
     be4:	fc cf       	rjmp	.-8      	; 0xbde <__stack+0xdf>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     be6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <usb_configuration>
     bea:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     bee:	8e ef       	ldi	r24, 0xFE	; 254
     bf0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bf4:	87 c0       	rjmp	.+270    	; 0xd04 <__stack+0x205>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     bf6:	a1 32       	cpi	r26, 0x21	; 33
     bf8:	a9 f4       	brne	.+42     	; 0xc24 <__stack+0x125>
     bfa:	b1 3a       	cpi	r27, 0xA1	; 161
     bfc:	99 f4       	brne	.+38     	; 0xc24 <__stack+0x125>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     bfe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c02:	80 ff       	sbrs	r24, 0
     c04:	fc cf       	rjmp	.-8      	; 0xbfe <__stack+0xff>
     c06:	e0 e0       	ldi	r30, 0x00	; 0
     c08:	f1 e0       	ldi	r31, 0x01	; 1
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__stack+0x119>
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     c0e:	90 81       	ld	r25, Z
     c10:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     c14:	8f 5f       	subi	r24, 0xFF	; 255
				UEDATX = *p++;
     c16:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     c18:	87 30       	cpi	r24, 0x07	; 7
     c1a:	c8 f3       	brcs	.-14     	; 0xc0e <__stack+0x10f>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c1c:	8e ef       	ldi	r24, 0xFE	; 254
     c1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c22:	70 c0       	rjmp	.+224    	; 0xd04 <__stack+0x205>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     c24:	a0 32       	cpi	r26, 0x20	; 32
     c26:	c1 f4       	brne	.+48     	; 0xc58 <__stack+0x159>
     c28:	b1 32       	cpi	r27, 0x21	; 33
     c2a:	b1 f4       	brne	.+44     	; 0xc58 <__stack+0x159>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     c2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c30:	82 ff       	sbrs	r24, 2
     c32:	fc cf       	rjmp	.-8      	; 0xc2c <__stack+0x12d>
     c34:	e0 e0       	ldi	r30, 0x00	; 0
     c36:	f1 e0       	ldi	r31, 0x01	; 1
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	05 c0       	rjmp	.+10     	; 0xc46 <__stack+0x147>
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     c3c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     c40:	90 83       	st	Z, r25
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     c42:	8f 5f       	subi	r24, 0xFF	; 255
				*p++ = UEDATX;
     c44:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     c46:	87 30       	cpi	r24, 0x07	; 7
     c48:	c8 f3       	brcs	.-14     	; 0xc3c <__stack+0x13d>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     c4a:	e8 ee       	ldi	r30, 0xE8	; 232
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	8b ef       	ldi	r24, 0xFB	; 251
     c50:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c52:	8e ef       	ldi	r24, 0xFE	; 254
     c54:	80 83       	st	Z, r24
     c56:	56 c0       	rjmp	.+172    	; 0xd04 <__stack+0x205>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     c58:	a2 32       	cpi	r26, 0x22	; 34
     c5a:	61 f4       	brne	.+24     	; 0xc74 <__stack+0x175>
     c5c:	b1 32       	cpi	r27, 0x21	; 33
     c5e:	51 f4       	brne	.+20     	; 0xc74 <__stack+0x175>
			cdc_line_rtsdtr = wValue;
     c60:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <cdc_line_rtsdtr>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     c64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c68:	80 ff       	sbrs	r24, 0
     c6a:	fc cf       	rjmp	.-8      	; 0xc64 <__stack+0x165>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c6c:	8e ef       	ldi	r24, 0xFE	; 254
     c6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c72:	48 c0       	rjmp	.+144    	; 0xd04 <__stack+0x205>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     c74:	a1 11       	cpse	r26, r1
     c76:	1b c0       	rjmp	.+54     	; 0xcae <__stack+0x1af>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     c78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c7c:	80 ff       	sbrs	r24, 0
     c7e:	fc cf       	rjmp	.-8      	; 0xc78 <__stack+0x179>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     c80:	b2 38       	cpi	r27, 0x82	; 130
     c82:	61 f4       	brne	.+24     	; 0xc9c <__stack+0x19d>
				UENUM = wIndex;
     c84:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
     c88:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     c8c:	85 fd       	sbrc	r24, 5
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <__stack+0x195>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <__stack+0x197>
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
				UENUM = 0;
     c96:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <__stack+0x19f>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     c9c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     c9e:	e1 ef       	ldi	r30, 0xF1	; 241
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 83       	st	Z, r24
			UEDATX = 0;
     ca4:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ca6:	8e ef       	ldi	r24, 0xFE	; 254
     ca8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     cac:	2b c0       	rjmp	.+86     	; 0xd04 <__stack+0x205>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     cae:	a1 30       	cpi	r26, 0x01	; 1
     cb0:	11 f0       	breq	.+4      	; 0xcb6 <__stack+0x1b7>
     cb2:	a3 30       	cpi	r26, 0x03	; 3
     cb4:	21 f5       	brne	.+72     	; 0xcfe <__stack+0x1ff>
		  && bmRequestType == 0x02 && wValue == 0) {
     cb6:	b2 30       	cpi	r27, 0x02	; 2
     cb8:	11 f5       	brne	.+68     	; 0xcfe <__stack+0x1ff>
     cba:	89 2b       	or	r24, r25
     cbc:	01 f5       	brne	.+64     	; 0xcfe <__stack+0x1ff>
			i = wIndex & 0x7F;
     cbe:	26 2f       	mov	r18, r22
     cc0:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	82 0f       	add	r24, r18
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	d0 f4       	brcc	.+52     	; 0xcfe <__stack+0x1ff>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     cca:	8e ef       	ldi	r24, 0xFE	; 254
     ccc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     cd0:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (bRequest == SET_FEATURE) {
     cd4:	a3 30       	cpi	r26, 0x03	; 3
     cd6:	21 f4       	brne	.+8      	; 0xce0 <__stack+0x1e1>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     cd8:	81 e2       	ldi	r24, 0x21	; 33
     cda:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     cde:	12 c0       	rjmp	.+36     	; 0xd04 <__stack+0x205>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     ce0:	89 e1       	ldi	r24, 0x19	; 25
     ce2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					UERST = (1 << i);
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <__stack+0x1f1>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	2a 95       	dec	r18
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <__stack+0x1ed>
     cf4:	ea ee       	ldi	r30, 0xEA	; 234
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 83       	st	Z, r24
					UERST = 0;
     cfa:	10 82       	st	Z, r1
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__stack+0x205>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     cfe:	81 e2       	ldi	r24, 0x21	; 33
     d00:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
}
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	fc 01       	movw	r30, r24
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     d32:	8f 01       	movw	r16, r30
     d34:	0f 5f       	subi	r16, 0xFF	; 255
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	c4 91       	lpm	r28, Z
		if (!c) break;
     d3a:	cc 23       	and	r28, r28
     d3c:	51 f0       	breq	.+20     	; 0xd52 <print_P+0x28>
		if (c == '\n') usb_tx_char('\r');
     d3e:	ca 30       	cpi	r28, 0x0A	; 10
     d40:	19 f4       	brne	.+6      	; 0xd48 <print_P+0x1e>
     d42:	8d e0       	ldi	r24, 0x0D	; 13
     d44:	0e 94 92 04 	call	0x924	; 0x924 <m_usb_tx_char>
		usb_tx_char(c);
     d48:	8c 2f       	mov	r24, r28
     d4a:	0e 94 92 04 	call	0x924	; 0x924 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     d4e:	f8 01       	movw	r30, r16
		if (!c) break;
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
     d50:	f0 cf       	rjmp	.-32     	; 0xd32 <print_P+0x8>
}
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret

00000d5a <__floatunsisf>:
     d5a:	e8 94       	clt
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <__floatsisf+0x12>

00000d5e <__floatsisf>:
     d5e:	97 fb       	bst	r25, 7
     d60:	3e f4       	brtc	.+14     	; 0xd70 <__floatsisf+0x12>
     d62:	90 95       	com	r25
     d64:	80 95       	com	r24
     d66:	70 95       	com	r23
     d68:	61 95       	neg	r22
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	8f 4f       	sbci	r24, 0xFF	; 255
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	99 23       	and	r25, r25
     d72:	a9 f0       	breq	.+42     	; 0xd9e <__floatsisf+0x40>
     d74:	f9 2f       	mov	r31, r25
     d76:	96 e9       	ldi	r25, 0x96	; 150
     d78:	bb 27       	eor	r27, r27
     d7a:	93 95       	inc	r25
     d7c:	f6 95       	lsr	r31
     d7e:	87 95       	ror	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b7 95       	ror	r27
     d86:	f1 11       	cpse	r31, r1
     d88:	f8 cf       	rjmp	.-16     	; 0xd7a <__floatsisf+0x1c>
     d8a:	fa f4       	brpl	.+62     	; 0xdca <__floatsisf+0x6c>
     d8c:	bb 0f       	add	r27, r27
     d8e:	11 f4       	brne	.+4      	; 0xd94 <__floatsisf+0x36>
     d90:	60 ff       	sbrs	r22, 0
     d92:	1b c0       	rjmp	.+54     	; 0xdca <__floatsisf+0x6c>
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	8f 4f       	sbci	r24, 0xFF	; 255
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <__floatsisf+0x6c>
     d9e:	88 23       	and	r24, r24
     da0:	11 f0       	breq	.+4      	; 0xda6 <__floatsisf+0x48>
     da2:	96 e9       	ldi	r25, 0x96	; 150
     da4:	11 c0       	rjmp	.+34     	; 0xdc8 <__floatsisf+0x6a>
     da6:	77 23       	and	r23, r23
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__floatsisf+0x54>
     daa:	9e e8       	ldi	r25, 0x8E	; 142
     dac:	87 2f       	mov	r24, r23
     dae:	76 2f       	mov	r23, r22
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <__floatsisf+0x5e>
     db2:	66 23       	and	r22, r22
     db4:	71 f0       	breq	.+28     	; 0xdd2 <__floatsisf+0x74>
     db6:	96 e8       	ldi	r25, 0x86	; 134
     db8:	86 2f       	mov	r24, r22
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	2a f0       	brmi	.+10     	; 0xdca <__floatsisf+0x6c>
     dc0:	9a 95       	dec	r25
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	da f7       	brpl	.-10     	; 0xdc0 <__floatsisf+0x62>
     dca:	88 0f       	add	r24, r24
     dcc:	96 95       	lsr	r25
     dce:	87 95       	ror	r24
     dd0:	97 f9       	bld	r25, 7
     dd2:	08 95       	ret

00000dd4 <__mulsf3>:
     dd4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__mulsf3x>
     dd8:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_round>
     ddc:	0e 94 60 07 	call	0xec0	; 0xec0 <__fp_pscA>
     de0:	38 f0       	brcs	.+14     	; 0xdf0 <__mulsf3+0x1c>
     de2:	0e 94 67 07 	call	0xece	; 0xece <__fp_pscB>
     de6:	20 f0       	brcs	.+8      	; 0xdf0 <__mulsf3+0x1c>
     de8:	95 23       	and	r25, r21
     dea:	11 f0       	breq	.+4      	; 0xdf0 <__mulsf3+0x1c>
     dec:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
     df0:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_nan>
     df4:	11 24       	eor	r1, r1
     df6:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>

00000dfa <__mulsf3x>:
     dfa:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_split3>
     dfe:	70 f3       	brcs	.-36     	; 0xddc <__mulsf3+0x8>

00000e00 <__mulsf3_pse>:
     e00:	95 9f       	mul	r25, r21
     e02:	c1 f3       	breq	.-16     	; 0xdf4 <__mulsf3+0x20>
     e04:	95 0f       	add	r25, r21
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	55 1f       	adc	r21, r21
     e0a:	62 9f       	mul	r22, r18
     e0c:	f0 01       	movw	r30, r0
     e0e:	72 9f       	mul	r23, r18
     e10:	bb 27       	eor	r27, r27
     e12:	f0 0d       	add	r31, r0
     e14:	b1 1d       	adc	r27, r1
     e16:	63 9f       	mul	r22, r19
     e18:	aa 27       	eor	r26, r26
     e1a:	f0 0d       	add	r31, r0
     e1c:	b1 1d       	adc	r27, r1
     e1e:	aa 1f       	adc	r26, r26
     e20:	64 9f       	mul	r22, r20
     e22:	66 27       	eor	r22, r22
     e24:	b0 0d       	add	r27, r0
     e26:	a1 1d       	adc	r26, r1
     e28:	66 1f       	adc	r22, r22
     e2a:	82 9f       	mul	r24, r18
     e2c:	22 27       	eor	r18, r18
     e2e:	b0 0d       	add	r27, r0
     e30:	a1 1d       	adc	r26, r1
     e32:	62 1f       	adc	r22, r18
     e34:	73 9f       	mul	r23, r19
     e36:	b0 0d       	add	r27, r0
     e38:	a1 1d       	adc	r26, r1
     e3a:	62 1f       	adc	r22, r18
     e3c:	83 9f       	mul	r24, r19
     e3e:	a0 0d       	add	r26, r0
     e40:	61 1d       	adc	r22, r1
     e42:	22 1f       	adc	r18, r18
     e44:	74 9f       	mul	r23, r20
     e46:	33 27       	eor	r19, r19
     e48:	a0 0d       	add	r26, r0
     e4a:	61 1d       	adc	r22, r1
     e4c:	23 1f       	adc	r18, r19
     e4e:	84 9f       	mul	r24, r20
     e50:	60 0d       	add	r22, r0
     e52:	21 1d       	adc	r18, r1
     e54:	82 2f       	mov	r24, r18
     e56:	76 2f       	mov	r23, r22
     e58:	6a 2f       	mov	r22, r26
     e5a:	11 24       	eor	r1, r1
     e5c:	9f 57       	subi	r25, 0x7F	; 127
     e5e:	50 40       	sbci	r21, 0x00	; 0
     e60:	9a f0       	brmi	.+38     	; 0xe88 <__mulsf3_pse+0x88>
     e62:	f1 f0       	breq	.+60     	; 0xea0 <__mulsf3_pse+0xa0>
     e64:	88 23       	and	r24, r24
     e66:	4a f0       	brmi	.+18     	; 0xe7a <__mulsf3_pse+0x7a>
     e68:	ee 0f       	add	r30, r30
     e6a:	ff 1f       	adc	r31, r31
     e6c:	bb 1f       	adc	r27, r27
     e6e:	66 1f       	adc	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	91 50       	subi	r25, 0x01	; 1
     e76:	50 40       	sbci	r21, 0x00	; 0
     e78:	a9 f7       	brne	.-22     	; 0xe64 <__mulsf3_pse+0x64>
     e7a:	9e 3f       	cpi	r25, 0xFE	; 254
     e7c:	51 05       	cpc	r21, r1
     e7e:	80 f0       	brcs	.+32     	; 0xea0 <__mulsf3_pse+0xa0>
     e80:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
     e84:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>
     e88:	5f 3f       	cpi	r21, 0xFF	; 255
     e8a:	e4 f3       	brlt	.-8      	; 0xe84 <__mulsf3_pse+0x84>
     e8c:	98 3e       	cpi	r25, 0xE8	; 232
     e8e:	d4 f3       	brlt	.-12     	; 0xe84 <__mulsf3_pse+0x84>
     e90:	86 95       	lsr	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	b7 95       	ror	r27
     e98:	f7 95       	ror	r31
     e9a:	e7 95       	ror	r30
     e9c:	9f 5f       	subi	r25, 0xFF	; 255
     e9e:	c1 f7       	brne	.-16     	; 0xe90 <__mulsf3_pse+0x90>
     ea0:	fe 2b       	or	r31, r30
     ea2:	88 0f       	add	r24, r24
     ea4:	91 1d       	adc	r25, r1
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	97 f9       	bld	r25, 7
     eac:	08 95       	ret

00000eae <__fp_inf>:
     eae:	97 f9       	bld	r25, 7
     eb0:	9f 67       	ori	r25, 0x7F	; 127
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	08 95       	ret

00000eba <__fp_nan>:
     eba:	9f ef       	ldi	r25, 0xFF	; 255
     ebc:	80 ec       	ldi	r24, 0xC0	; 192
     ebe:	08 95       	ret

00000ec0 <__fp_pscA>:
     ec0:	00 24       	eor	r0, r0
     ec2:	0a 94       	dec	r0
     ec4:	16 16       	cp	r1, r22
     ec6:	17 06       	cpc	r1, r23
     ec8:	18 06       	cpc	r1, r24
     eca:	09 06       	cpc	r0, r25
     ecc:	08 95       	ret

00000ece <__fp_pscB>:
     ece:	00 24       	eor	r0, r0
     ed0:	0a 94       	dec	r0
     ed2:	12 16       	cp	r1, r18
     ed4:	13 06       	cpc	r1, r19
     ed6:	14 06       	cpc	r1, r20
     ed8:	05 06       	cpc	r0, r21
     eda:	08 95       	ret

00000edc <__fp_round>:
     edc:	09 2e       	mov	r0, r25
     ede:	03 94       	inc	r0
     ee0:	00 0c       	add	r0, r0
     ee2:	11 f4       	brne	.+4      	; 0xee8 <__fp_round+0xc>
     ee4:	88 23       	and	r24, r24
     ee6:	52 f0       	brmi	.+20     	; 0xefc <__fp_round+0x20>
     ee8:	bb 0f       	add	r27, r27
     eea:	40 f4       	brcc	.+16     	; 0xefc <__fp_round+0x20>
     eec:	bf 2b       	or	r27, r31
     eee:	11 f4       	brne	.+4      	; 0xef4 <__fp_round+0x18>
     ef0:	60 ff       	sbrs	r22, 0
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__fp_round+0x20>
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	08 95       	ret

00000efe <__fp_split3>:
     efe:	57 fd       	sbrc	r21, 7
     f00:	90 58       	subi	r25, 0x80	; 128
     f02:	44 0f       	add	r20, r20
     f04:	55 1f       	adc	r21, r21
     f06:	59 f0       	breq	.+22     	; 0xf1e <__fp_splitA+0x10>
     f08:	5f 3f       	cpi	r21, 0xFF	; 255
     f0a:	71 f0       	breq	.+28     	; 0xf28 <__fp_splitA+0x1a>
     f0c:	47 95       	ror	r20

00000f0e <__fp_splitA>:
     f0e:	88 0f       	add	r24, r24
     f10:	97 fb       	bst	r25, 7
     f12:	99 1f       	adc	r25, r25
     f14:	61 f0       	breq	.+24     	; 0xf2e <__fp_splitA+0x20>
     f16:	9f 3f       	cpi	r25, 0xFF	; 255
     f18:	79 f0       	breq	.+30     	; 0xf38 <__fp_splitA+0x2a>
     f1a:	87 95       	ror	r24
     f1c:	08 95       	ret
     f1e:	12 16       	cp	r1, r18
     f20:	13 06       	cpc	r1, r19
     f22:	14 06       	cpc	r1, r20
     f24:	55 1f       	adc	r21, r21
     f26:	f2 cf       	rjmp	.-28     	; 0xf0c <__fp_split3+0xe>
     f28:	46 95       	lsr	r20
     f2a:	f1 df       	rcall	.-30     	; 0xf0e <__fp_splitA>
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <__fp_splitA+0x30>
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	18 06       	cpc	r1, r24
     f34:	99 1f       	adc	r25, r25
     f36:	f1 cf       	rjmp	.-30     	; 0xf1a <__fp_splitA+0xc>
     f38:	86 95       	lsr	r24
     f3a:	71 05       	cpc	r23, r1
     f3c:	61 05       	cpc	r22, r1
     f3e:	08 94       	sec
     f40:	08 95       	ret

00000f42 <__fp_zero>:
     f42:	e8 94       	clt

00000f44 <__fp_szero>:
     f44:	bb 27       	eor	r27, r27
     f46:	66 27       	eor	r22, r22
     f48:	77 27       	eor	r23, r23
     f4a:	cb 01       	movw	r24, r22
     f4c:	97 f9       	bld	r25, 7
     f4e:	08 95       	ret

00000f50 <vfprintf>:
     f50:	a0 e1       	ldi	r26, 0x10	; 16
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee ea       	ldi	r30, 0xAE	; 174
     f56:	f7 e0       	ldi	r31, 0x07	; 7
     f58:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__prologue_saves__>
     f5c:	7c 01       	movw	r14, r24
     f5e:	1b 01       	movw	r2, r22
     f60:	6a 01       	movw	r12, r20
     f62:	fc 01       	movw	r30, r24
     f64:	17 82       	std	Z+7, r1	; 0x07
     f66:	16 82       	std	Z+6, r1	; 0x06
     f68:	83 81       	ldd	r24, Z+3	; 0x03
     f6a:	81 ff       	sbrs	r24, 1
     f6c:	44 c3       	rjmp	.+1672   	; 0x15f6 <vfprintf+0x6a6>
     f6e:	9e 01       	movw	r18, r28
     f70:	2f 5f       	subi	r18, 0xFF	; 255
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	39 01       	movw	r6, r18
     f76:	f7 01       	movw	r30, r14
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	f1 01       	movw	r30, r2
     f7c:	93 fd       	sbrc	r25, 3
     f7e:	85 91       	lpm	r24, Z+
     f80:	93 ff       	sbrs	r25, 3
     f82:	81 91       	ld	r24, Z+
     f84:	1f 01       	movw	r2, r30
     f86:	88 23       	and	r24, r24
     f88:	09 f4       	brne	.+2      	; 0xf8c <vfprintf+0x3c>
     f8a:	31 c3       	rjmp	.+1634   	; 0x15ee <vfprintf+0x69e>
     f8c:	85 32       	cpi	r24, 0x25	; 37
     f8e:	39 f4       	brne	.+14     	; 0xf9e <vfprintf+0x4e>
     f90:	93 fd       	sbrc	r25, 3
     f92:	85 91       	lpm	r24, Z+
     f94:	93 ff       	sbrs	r25, 3
     f96:	81 91       	ld	r24, Z+
     f98:	1f 01       	movw	r2, r30
     f9a:	85 32       	cpi	r24, 0x25	; 37
     f9c:	39 f4       	brne	.+14     	; 0xfac <vfprintf+0x5c>
     f9e:	b7 01       	movw	r22, r14
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
     fa6:	56 01       	movw	r10, r12
     fa8:	65 01       	movw	r12, r10
     faa:	e5 cf       	rjmp	.-54     	; 0xf76 <vfprintf+0x26>
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	51 2c       	mov	r5, r1
     fb0:	91 2c       	mov	r9, r1
     fb2:	ff e1       	ldi	r31, 0x1F	; 31
     fb4:	f9 15       	cp	r31, r9
     fb6:	d8 f0       	brcs	.+54     	; 0xfee <vfprintf+0x9e>
     fb8:	8b 32       	cpi	r24, 0x2B	; 43
     fba:	79 f0       	breq	.+30     	; 0xfda <vfprintf+0x8a>
     fbc:	38 f4       	brcc	.+14     	; 0xfcc <vfprintf+0x7c>
     fbe:	80 32       	cpi	r24, 0x20	; 32
     fc0:	79 f0       	breq	.+30     	; 0xfe0 <vfprintf+0x90>
     fc2:	83 32       	cpi	r24, 0x23	; 35
     fc4:	a1 f4       	brne	.+40     	; 0xfee <vfprintf+0x9e>
     fc6:	f9 2d       	mov	r31, r9
     fc8:	f0 61       	ori	r31, 0x10	; 16
     fca:	2e c0       	rjmp	.+92     	; 0x1028 <vfprintf+0xd8>
     fcc:	8d 32       	cpi	r24, 0x2D	; 45
     fce:	61 f0       	breq	.+24     	; 0xfe8 <vfprintf+0x98>
     fd0:	80 33       	cpi	r24, 0x30	; 48
     fd2:	69 f4       	brne	.+26     	; 0xfee <vfprintf+0x9e>
     fd4:	29 2d       	mov	r18, r9
     fd6:	21 60       	ori	r18, 0x01	; 1
     fd8:	2d c0       	rjmp	.+90     	; 0x1034 <vfprintf+0xe4>
     fda:	39 2d       	mov	r19, r9
     fdc:	32 60       	ori	r19, 0x02	; 2
     fde:	93 2e       	mov	r9, r19
     fe0:	89 2d       	mov	r24, r9
     fe2:	84 60       	ori	r24, 0x04	; 4
     fe4:	98 2e       	mov	r9, r24
     fe6:	2a c0       	rjmp	.+84     	; 0x103c <vfprintf+0xec>
     fe8:	e9 2d       	mov	r30, r9
     fea:	e8 60       	ori	r30, 0x08	; 8
     fec:	15 c0       	rjmp	.+42     	; 0x1018 <vfprintf+0xc8>
     fee:	97 fc       	sbrc	r9, 7
     ff0:	2d c0       	rjmp	.+90     	; 0x104c <vfprintf+0xfc>
     ff2:	20 ed       	ldi	r18, 0xD0	; 208
     ff4:	28 0f       	add	r18, r24
     ff6:	2a 30       	cpi	r18, 0x0A	; 10
     ff8:	88 f4       	brcc	.+34     	; 0x101c <vfprintf+0xcc>
     ffa:	96 fe       	sbrs	r9, 6
     ffc:	06 c0       	rjmp	.+12     	; 0x100a <vfprintf+0xba>
     ffe:	3a e0       	ldi	r19, 0x0A	; 10
    1000:	13 9f       	mul	r17, r19
    1002:	20 0d       	add	r18, r0
    1004:	11 24       	eor	r1, r1
    1006:	12 2f       	mov	r17, r18
    1008:	19 c0       	rjmp	.+50     	; 0x103c <vfprintf+0xec>
    100a:	8a e0       	ldi	r24, 0x0A	; 10
    100c:	58 9e       	mul	r5, r24
    100e:	20 0d       	add	r18, r0
    1010:	11 24       	eor	r1, r1
    1012:	52 2e       	mov	r5, r18
    1014:	e9 2d       	mov	r30, r9
    1016:	e0 62       	ori	r30, 0x20	; 32
    1018:	9e 2e       	mov	r9, r30
    101a:	10 c0       	rjmp	.+32     	; 0x103c <vfprintf+0xec>
    101c:	8e 32       	cpi	r24, 0x2E	; 46
    101e:	31 f4       	brne	.+12     	; 0x102c <vfprintf+0xdc>
    1020:	96 fc       	sbrc	r9, 6
    1022:	e5 c2       	rjmp	.+1482   	; 0x15ee <vfprintf+0x69e>
    1024:	f9 2d       	mov	r31, r9
    1026:	f0 64       	ori	r31, 0x40	; 64
    1028:	9f 2e       	mov	r9, r31
    102a:	08 c0       	rjmp	.+16     	; 0x103c <vfprintf+0xec>
    102c:	8c 36       	cpi	r24, 0x6C	; 108
    102e:	21 f4       	brne	.+8      	; 0x1038 <vfprintf+0xe8>
    1030:	29 2d       	mov	r18, r9
    1032:	20 68       	ori	r18, 0x80	; 128
    1034:	92 2e       	mov	r9, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <vfprintf+0xec>
    1038:	88 36       	cpi	r24, 0x68	; 104
    103a:	41 f4       	brne	.+16     	; 0x104c <vfprintf+0xfc>
    103c:	f1 01       	movw	r30, r2
    103e:	93 fd       	sbrc	r25, 3
    1040:	85 91       	lpm	r24, Z+
    1042:	93 ff       	sbrs	r25, 3
    1044:	81 91       	ld	r24, Z+
    1046:	1f 01       	movw	r2, r30
    1048:	81 11       	cpse	r24, r1
    104a:	b3 cf       	rjmp	.-154    	; 0xfb2 <vfprintf+0x62>
    104c:	9b eb       	ldi	r25, 0xBB	; 187
    104e:	98 0f       	add	r25, r24
    1050:	93 30       	cpi	r25, 0x03	; 3
    1052:	20 f4       	brcc	.+8      	; 0x105c <vfprintf+0x10c>
    1054:	99 2d       	mov	r25, r9
    1056:	90 61       	ori	r25, 0x10	; 16
    1058:	80 5e       	subi	r24, 0xE0	; 224
    105a:	07 c0       	rjmp	.+14     	; 0x106a <vfprintf+0x11a>
    105c:	9b e9       	ldi	r25, 0x9B	; 155
    105e:	98 0f       	add	r25, r24
    1060:	93 30       	cpi	r25, 0x03	; 3
    1062:	08 f0       	brcs	.+2      	; 0x1066 <vfprintf+0x116>
    1064:	66 c1       	rjmp	.+716    	; 0x1332 <vfprintf+0x3e2>
    1066:	99 2d       	mov	r25, r9
    1068:	9f 7e       	andi	r25, 0xEF	; 239
    106a:	96 ff       	sbrs	r25, 6
    106c:	16 e0       	ldi	r17, 0x06	; 6
    106e:	9f 73       	andi	r25, 0x3F	; 63
    1070:	99 2e       	mov	r9, r25
    1072:	85 36       	cpi	r24, 0x65	; 101
    1074:	19 f4       	brne	.+6      	; 0x107c <vfprintf+0x12c>
    1076:	90 64       	ori	r25, 0x40	; 64
    1078:	99 2e       	mov	r9, r25
    107a:	08 c0       	rjmp	.+16     	; 0x108c <vfprintf+0x13c>
    107c:	86 36       	cpi	r24, 0x66	; 102
    107e:	21 f4       	brne	.+8      	; 0x1088 <vfprintf+0x138>
    1080:	39 2f       	mov	r19, r25
    1082:	30 68       	ori	r19, 0x80	; 128
    1084:	93 2e       	mov	r9, r19
    1086:	02 c0       	rjmp	.+4      	; 0x108c <vfprintf+0x13c>
    1088:	11 11       	cpse	r17, r1
    108a:	11 50       	subi	r17, 0x01	; 1
    108c:	97 fe       	sbrs	r9, 7
    108e:	07 c0       	rjmp	.+14     	; 0x109e <vfprintf+0x14e>
    1090:	1c 33       	cpi	r17, 0x3C	; 60
    1092:	50 f4       	brcc	.+20     	; 0x10a8 <vfprintf+0x158>
    1094:	44 24       	eor	r4, r4
    1096:	43 94       	inc	r4
    1098:	41 0e       	add	r4, r17
    109a:	27 e0       	ldi	r18, 0x07	; 7
    109c:	0b c0       	rjmp	.+22     	; 0x10b4 <vfprintf+0x164>
    109e:	18 30       	cpi	r17, 0x08	; 8
    10a0:	38 f0       	brcs	.+14     	; 0x10b0 <vfprintf+0x160>
    10a2:	27 e0       	ldi	r18, 0x07	; 7
    10a4:	17 e0       	ldi	r17, 0x07	; 7
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <vfprintf+0x162>
    10a8:	27 e0       	ldi	r18, 0x07	; 7
    10aa:	9c e3       	ldi	r25, 0x3C	; 60
    10ac:	49 2e       	mov	r4, r25
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <vfprintf+0x164>
    10b0:	21 2f       	mov	r18, r17
    10b2:	41 2c       	mov	r4, r1
    10b4:	56 01       	movw	r10, r12
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	a8 0e       	add	r10, r24
    10ba:	b1 1c       	adc	r11, r1
    10bc:	f6 01       	movw	r30, r12
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	04 2d       	mov	r16, r4
    10c8:	a3 01       	movw	r20, r6
    10ca:	0e 94 8d 0b 	call	0x171a	; 0x171a <__ftoa_engine>
    10ce:	6c 01       	movw	r12, r24
    10d0:	f9 81       	ldd	r31, Y+1	; 0x01
    10d2:	fc 87       	std	Y+12, r31	; 0x0c
    10d4:	f0 ff       	sbrs	r31, 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vfprintf+0x18c>
    10d8:	f3 ff       	sbrs	r31, 3
    10da:	06 c0       	rjmp	.+12     	; 0x10e8 <vfprintf+0x198>
    10dc:	91 fc       	sbrc	r9, 1
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <vfprintf+0x19c>
    10e0:	92 fe       	sbrs	r9, 2
    10e2:	06 c0       	rjmp	.+12     	; 0x10f0 <vfprintf+0x1a0>
    10e4:	00 e2       	ldi	r16, 0x20	; 32
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <vfprintf+0x1a2>
    10e8:	0d e2       	ldi	r16, 0x2D	; 45
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <vfprintf+0x1a2>
    10ec:	0b e2       	ldi	r16, 0x2B	; 43
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <vfprintf+0x1a2>
    10f0:	00 e0       	ldi	r16, 0x00	; 0
    10f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10f4:	8c 70       	andi	r24, 0x0C	; 12
    10f6:	19 f0       	breq	.+6      	; 0x10fe <vfprintf+0x1ae>
    10f8:	01 11       	cpse	r16, r1
    10fa:	5a c2       	rjmp	.+1204   	; 0x15b0 <vfprintf+0x660>
    10fc:	9b c2       	rjmp	.+1334   	; 0x1634 <vfprintf+0x6e4>
    10fe:	97 fe       	sbrs	r9, 7
    1100:	10 c0       	rjmp	.+32     	; 0x1122 <vfprintf+0x1d2>
    1102:	4c 0c       	add	r4, r12
    1104:	fc 85       	ldd	r31, Y+12	; 0x0c
    1106:	f4 ff       	sbrs	r31, 4
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <vfprintf+0x1c2>
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	81 33       	cpi	r24, 0x31	; 49
    110e:	09 f4       	brne	.+2      	; 0x1112 <vfprintf+0x1c2>
    1110:	4a 94       	dec	r4
    1112:	14 14       	cp	r1, r4
    1114:	74 f5       	brge	.+92     	; 0x1172 <vfprintf+0x222>
    1116:	28 e0       	ldi	r18, 0x08	; 8
    1118:	24 15       	cp	r18, r4
    111a:	78 f5       	brcc	.+94     	; 0x117a <vfprintf+0x22a>
    111c:	88 e0       	ldi	r24, 0x08	; 8
    111e:	48 2e       	mov	r4, r24
    1120:	2c c0       	rjmp	.+88     	; 0x117a <vfprintf+0x22a>
    1122:	96 fc       	sbrc	r9, 6
    1124:	2a c0       	rjmp	.+84     	; 0x117a <vfprintf+0x22a>
    1126:	81 2f       	mov	r24, r17
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	8c 15       	cp	r24, r12
    112c:	9d 05       	cpc	r25, r13
    112e:	9c f0       	brlt	.+38     	; 0x1156 <vfprintf+0x206>
    1130:	3c ef       	ldi	r19, 0xFC	; 252
    1132:	c3 16       	cp	r12, r19
    1134:	3f ef       	ldi	r19, 0xFF	; 255
    1136:	d3 06       	cpc	r13, r19
    1138:	74 f0       	brlt	.+28     	; 0x1156 <vfprintf+0x206>
    113a:	89 2d       	mov	r24, r9
    113c:	80 68       	ori	r24, 0x80	; 128
    113e:	98 2e       	mov	r9, r24
    1140:	0a c0       	rjmp	.+20     	; 0x1156 <vfprintf+0x206>
    1142:	e2 e0       	ldi	r30, 0x02	; 2
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	ec 0f       	add	r30, r28
    1148:	fd 1f       	adc	r31, r29
    114a:	e1 0f       	add	r30, r17
    114c:	f1 1d       	adc	r31, r1
    114e:	80 81       	ld	r24, Z
    1150:	80 33       	cpi	r24, 0x30	; 48
    1152:	19 f4       	brne	.+6      	; 0x115a <vfprintf+0x20a>
    1154:	11 50       	subi	r17, 0x01	; 1
    1156:	11 11       	cpse	r17, r1
    1158:	f4 cf       	rjmp	.-24     	; 0x1142 <vfprintf+0x1f2>
    115a:	97 fe       	sbrs	r9, 7
    115c:	0e c0       	rjmp	.+28     	; 0x117a <vfprintf+0x22a>
    115e:	44 24       	eor	r4, r4
    1160:	43 94       	inc	r4
    1162:	41 0e       	add	r4, r17
    1164:	81 2f       	mov	r24, r17
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	c8 16       	cp	r12, r24
    116a:	d9 06       	cpc	r13, r25
    116c:	2c f4       	brge	.+10     	; 0x1178 <vfprintf+0x228>
    116e:	1c 19       	sub	r17, r12
    1170:	04 c0       	rjmp	.+8      	; 0x117a <vfprintf+0x22a>
    1172:	44 24       	eor	r4, r4
    1174:	43 94       	inc	r4
    1176:	01 c0       	rjmp	.+2      	; 0x117a <vfprintf+0x22a>
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	97 fe       	sbrs	r9, 7
    117c:	06 c0       	rjmp	.+12     	; 0x118a <vfprintf+0x23a>
    117e:	1c 14       	cp	r1, r12
    1180:	1d 04       	cpc	r1, r13
    1182:	34 f4       	brge	.+12     	; 0x1190 <vfprintf+0x240>
    1184:	c6 01       	movw	r24, r12
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <vfprintf+0x244>
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <vfprintf+0x244>
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	01 11       	cpse	r16, r1
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	11 23       	and	r17, r17
    119a:	31 f0       	breq	.+12     	; 0x11a8 <vfprintf+0x258>
    119c:	21 2f       	mov	r18, r17
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	2f 5f       	subi	r18, 0xFF	; 255
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	82 0f       	add	r24, r18
    11a6:	93 1f       	adc	r25, r19
    11a8:	25 2d       	mov	r18, r5
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	82 17       	cp	r24, r18
    11ae:	93 07       	cpc	r25, r19
    11b0:	14 f4       	brge	.+4      	; 0x11b6 <vfprintf+0x266>
    11b2:	58 1a       	sub	r5, r24
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <vfprintf+0x268>
    11b6:	51 2c       	mov	r5, r1
    11b8:	89 2d       	mov	r24, r9
    11ba:	89 70       	andi	r24, 0x09	; 9
    11bc:	49 f4       	brne	.+18     	; 0x11d0 <vfprintf+0x280>
    11be:	55 20       	and	r5, r5
    11c0:	39 f0       	breq	.+14     	; 0x11d0 <vfprintf+0x280>
    11c2:	b7 01       	movw	r22, r14
    11c4:	80 e2       	ldi	r24, 0x20	; 32
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    11cc:	5a 94       	dec	r5
    11ce:	f7 cf       	rjmp	.-18     	; 0x11be <vfprintf+0x26e>
    11d0:	00 23       	and	r16, r16
    11d2:	29 f0       	breq	.+10     	; 0x11de <vfprintf+0x28e>
    11d4:	b7 01       	movw	r22, r14
    11d6:	80 2f       	mov	r24, r16
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    11de:	93 fc       	sbrc	r9, 3
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <vfprintf+0x2a4>
    11e2:	55 20       	and	r5, r5
    11e4:	39 f0       	breq	.+14     	; 0x11f4 <vfprintf+0x2a4>
    11e6:	b7 01       	movw	r22, r14
    11e8:	80 e3       	ldi	r24, 0x30	; 48
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    11f0:	5a 94       	dec	r5
    11f2:	f7 cf       	rjmp	.-18     	; 0x11e2 <vfprintf+0x292>
    11f4:	97 fe       	sbrs	r9, 7
    11f6:	4c c0       	rjmp	.+152    	; 0x1290 <vfprintf+0x340>
    11f8:	46 01       	movw	r8, r12
    11fa:	d7 fe       	sbrs	r13, 7
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <vfprintf+0x2b2>
    11fe:	81 2c       	mov	r8, r1
    1200:	91 2c       	mov	r9, r1
    1202:	c6 01       	movw	r24, r12
    1204:	88 19       	sub	r24, r8
    1206:	99 09       	sbc	r25, r9
    1208:	f3 01       	movw	r30, r6
    120a:	e8 0f       	add	r30, r24
    120c:	f9 1f       	adc	r31, r25
    120e:	fe 87       	std	Y+14, r31	; 0x0e
    1210:	ed 87       	std	Y+13, r30	; 0x0d
    1212:	96 01       	movw	r18, r12
    1214:	24 19       	sub	r18, r4
    1216:	31 09       	sbc	r19, r1
    1218:	38 8b       	std	Y+16, r19	; 0x10
    121a:	2f 87       	std	Y+15, r18	; 0x0f
    121c:	01 2f       	mov	r16, r17
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	11 95       	neg	r17
    1222:	01 95       	neg	r16
    1224:	11 09       	sbc	r17, r1
    1226:	3f ef       	ldi	r19, 0xFF	; 255
    1228:	83 16       	cp	r8, r19
    122a:	93 06       	cpc	r9, r19
    122c:	29 f4       	brne	.+10     	; 0x1238 <vfprintf+0x2e8>
    122e:	b7 01       	movw	r22, r14
    1230:	8e e2       	ldi	r24, 0x2E	; 46
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    1238:	c8 14       	cp	r12, r8
    123a:	d9 04       	cpc	r13, r9
    123c:	4c f0       	brlt	.+18     	; 0x1250 <vfprintf+0x300>
    123e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1240:	98 89       	ldd	r25, Y+16	; 0x10
    1242:	88 15       	cp	r24, r8
    1244:	99 05       	cpc	r25, r9
    1246:	24 f4       	brge	.+8      	; 0x1250 <vfprintf+0x300>
    1248:	ed 85       	ldd	r30, Y+13	; 0x0d
    124a:	fe 85       	ldd	r31, Y+14	; 0x0e
    124c:	81 81       	ldd	r24, Z+1	; 0x01
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <vfprintf+0x302>
    1250:	80 e3       	ldi	r24, 0x30	; 48
    1252:	f1 e0       	ldi	r31, 0x01	; 1
    1254:	8f 1a       	sub	r8, r31
    1256:	91 08       	sbc	r9, r1
    1258:	2d 85       	ldd	r18, Y+13	; 0x0d
    125a:	3e 85       	ldd	r19, Y+14	; 0x0e
    125c:	2f 5f       	subi	r18, 0xFF	; 255
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	3e 87       	std	Y+14, r19	; 0x0e
    1262:	2d 87       	std	Y+13, r18	; 0x0d
    1264:	80 16       	cp	r8, r16
    1266:	91 06       	cpc	r9, r17
    1268:	2c f0       	brlt	.+10     	; 0x1274 <vfprintf+0x324>
    126a:	b7 01       	movw	r22, r14
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    1272:	d9 cf       	rjmp	.-78     	; 0x1226 <vfprintf+0x2d6>
    1274:	c8 14       	cp	r12, r8
    1276:	d9 04       	cpc	r13, r9
    1278:	41 f4       	brne	.+16     	; 0x128a <vfprintf+0x33a>
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	96 33       	cpi	r25, 0x36	; 54
    127e:	20 f4       	brcc	.+8      	; 0x1288 <vfprintf+0x338>
    1280:	95 33       	cpi	r25, 0x35	; 53
    1282:	19 f4       	brne	.+6      	; 0x128a <vfprintf+0x33a>
    1284:	3c 85       	ldd	r19, Y+12	; 0x0c
    1286:	34 ff       	sbrs	r19, 4
    1288:	81 e3       	ldi	r24, 0x31	; 49
    128a:	b7 01       	movw	r22, r14
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	4e c0       	rjmp	.+156    	; 0x132c <vfprintf+0x3dc>
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	81 33       	cpi	r24, 0x31	; 49
    1294:	19 f0       	breq	.+6      	; 0x129c <vfprintf+0x34c>
    1296:	9c 85       	ldd	r25, Y+12	; 0x0c
    1298:	9f 7e       	andi	r25, 0xEF	; 239
    129a:	9c 87       	std	Y+12, r25	; 0x0c
    129c:	b7 01       	movw	r22, r14
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    12a4:	11 11       	cpse	r17, r1
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <vfprintf+0x362>
    12a8:	94 fc       	sbrc	r9, 4
    12aa:	18 c0       	rjmp	.+48     	; 0x12dc <vfprintf+0x38c>
    12ac:	85 e6       	ldi	r24, 0x65	; 101
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	17 c0       	rjmp	.+46     	; 0x12e0 <vfprintf+0x390>
    12b2:	b7 01       	movw	r22, r14
    12b4:	8e e2       	ldi	r24, 0x2E	; 46
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    12bc:	1e 5f       	subi	r17, 0xFE	; 254
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	01 e0       	ldi	r16, 0x01	; 1
    12c2:	08 0f       	add	r16, r24
    12c4:	f3 01       	movw	r30, r6
    12c6:	e8 0f       	add	r30, r24
    12c8:	f1 1d       	adc	r31, r1
    12ca:	80 81       	ld	r24, Z
    12cc:	b7 01       	movw	r22, r14
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    12d4:	80 2f       	mov	r24, r16
    12d6:	01 13       	cpse	r16, r17
    12d8:	f3 cf       	rjmp	.-26     	; 0x12c0 <vfprintf+0x370>
    12da:	e6 cf       	rjmp	.-52     	; 0x12a8 <vfprintf+0x358>
    12dc:	85 e4       	ldi	r24, 0x45	; 69
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	b7 01       	movw	r22, r14
    12e2:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    12e6:	d7 fc       	sbrc	r13, 7
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <vfprintf+0x3a6>
    12ea:	c1 14       	cp	r12, r1
    12ec:	d1 04       	cpc	r13, r1
    12ee:	41 f4       	brne	.+16     	; 0x1300 <vfprintf+0x3b0>
    12f0:	ec 85       	ldd	r30, Y+12	; 0x0c
    12f2:	e4 ff       	sbrs	r30, 4
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <vfprintf+0x3b0>
    12f6:	d1 94       	neg	r13
    12f8:	c1 94       	neg	r12
    12fa:	d1 08       	sbc	r13, r1
    12fc:	8d e2       	ldi	r24, 0x2D	; 45
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <vfprintf+0x3b2>
    1300:	8b e2       	ldi	r24, 0x2B	; 43
    1302:	b7 01       	movw	r22, r14
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    130a:	80 e3       	ldi	r24, 0x30	; 48
    130c:	2a e0       	ldi	r18, 0x0A	; 10
    130e:	c2 16       	cp	r12, r18
    1310:	d1 04       	cpc	r13, r1
    1312:	2c f0       	brlt	.+10     	; 0x131e <vfprintf+0x3ce>
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	fa e0       	ldi	r31, 0x0A	; 10
    1318:	cf 1a       	sub	r12, r31
    131a:	d1 08       	sbc	r13, r1
    131c:	f7 cf       	rjmp	.-18     	; 0x130c <vfprintf+0x3bc>
    131e:	b7 01       	movw	r22, r14
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    1326:	b7 01       	movw	r22, r14
    1328:	c6 01       	movw	r24, r12
    132a:	c0 96       	adiw	r24, 0x30	; 48
    132c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    1330:	54 c1       	rjmp	.+680    	; 0x15da <vfprintf+0x68a>
    1332:	83 36       	cpi	r24, 0x63	; 99
    1334:	31 f0       	breq	.+12     	; 0x1342 <vfprintf+0x3f2>
    1336:	83 37       	cpi	r24, 0x73	; 115
    1338:	79 f0       	breq	.+30     	; 0x1358 <vfprintf+0x408>
    133a:	83 35       	cpi	r24, 0x53	; 83
    133c:	09 f0       	breq	.+2      	; 0x1340 <vfprintf+0x3f0>
    133e:	56 c0       	rjmp	.+172    	; 0x13ec <vfprintf+0x49c>
    1340:	20 c0       	rjmp	.+64     	; 0x1382 <vfprintf+0x432>
    1342:	56 01       	movw	r10, r12
    1344:	32 e0       	ldi	r19, 0x02	; 2
    1346:	a3 0e       	add	r10, r19
    1348:	b1 1c       	adc	r11, r1
    134a:	f6 01       	movw	r30, r12
    134c:	80 81       	ld	r24, Z
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	01 e0       	ldi	r16, 0x01	; 1
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	63 01       	movw	r12, r6
    1356:	12 c0       	rjmp	.+36     	; 0x137c <vfprintf+0x42c>
    1358:	56 01       	movw	r10, r12
    135a:	f2 e0       	ldi	r31, 0x02	; 2
    135c:	af 0e       	add	r10, r31
    135e:	b1 1c       	adc	r11, r1
    1360:	f6 01       	movw	r30, r12
    1362:	c0 80       	ld	r12, Z
    1364:	d1 80       	ldd	r13, Z+1	; 0x01
    1366:	96 fe       	sbrs	r9, 6
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <vfprintf+0x420>
    136a:	61 2f       	mov	r22, r17
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <vfprintf+0x424>
    1370:	6f ef       	ldi	r22, 0xFF	; 255
    1372:	7f ef       	ldi	r23, 0xFF	; 255
    1374:	c6 01       	movw	r24, r12
    1376:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <strnlen>
    137a:	8c 01       	movw	r16, r24
    137c:	f9 2d       	mov	r31, r9
    137e:	ff 77       	andi	r31, 0x7F	; 127
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <vfprintf+0x45a>
    1382:	56 01       	movw	r10, r12
    1384:	22 e0       	ldi	r18, 0x02	; 2
    1386:	a2 0e       	add	r10, r18
    1388:	b1 1c       	adc	r11, r1
    138a:	f6 01       	movw	r30, r12
    138c:	c0 80       	ld	r12, Z
    138e:	d1 80       	ldd	r13, Z+1	; 0x01
    1390:	96 fe       	sbrs	r9, 6
    1392:	03 c0       	rjmp	.+6      	; 0x139a <vfprintf+0x44a>
    1394:	61 2f       	mov	r22, r17
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfprintf+0x44e>
    139a:	6f ef       	ldi	r22, 0xFF	; 255
    139c:	7f ef       	ldi	r23, 0xFF	; 255
    139e:	c6 01       	movw	r24, r12
    13a0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <strnlen_P>
    13a4:	8c 01       	movw	r16, r24
    13a6:	f9 2d       	mov	r31, r9
    13a8:	f0 68       	ori	r31, 0x80	; 128
    13aa:	9f 2e       	mov	r9, r31
    13ac:	f3 fd       	sbrc	r31, 3
    13ae:	1a c0       	rjmp	.+52     	; 0x13e4 <vfprintf+0x494>
    13b0:	85 2d       	mov	r24, r5
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	08 17       	cp	r16, r24
    13b6:	19 07       	cpc	r17, r25
    13b8:	a8 f4       	brcc	.+42     	; 0x13e4 <vfprintf+0x494>
    13ba:	b7 01       	movw	r22, r14
    13bc:	80 e2       	ldi	r24, 0x20	; 32
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    13c4:	5a 94       	dec	r5
    13c6:	f4 cf       	rjmp	.-24     	; 0x13b0 <vfprintf+0x460>
    13c8:	f6 01       	movw	r30, r12
    13ca:	97 fc       	sbrc	r9, 7
    13cc:	85 91       	lpm	r24, Z+
    13ce:	97 fe       	sbrs	r9, 7
    13d0:	81 91       	ld	r24, Z+
    13d2:	6f 01       	movw	r12, r30
    13d4:	b7 01       	movw	r22, r14
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    13dc:	51 10       	cpse	r5, r1
    13de:	5a 94       	dec	r5
    13e0:	01 50       	subi	r16, 0x01	; 1
    13e2:	11 09       	sbc	r17, r1
    13e4:	01 15       	cp	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	79 f7       	brne	.-34     	; 0x13c8 <vfprintf+0x478>
    13ea:	f7 c0       	rjmp	.+494    	; 0x15da <vfprintf+0x68a>
    13ec:	84 36       	cpi	r24, 0x64	; 100
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <vfprintf+0x4a4>
    13f0:	89 36       	cpi	r24, 0x69	; 105
    13f2:	61 f5       	brne	.+88     	; 0x144c <vfprintf+0x4fc>
    13f4:	56 01       	movw	r10, r12
    13f6:	97 fe       	sbrs	r9, 7
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <vfprintf+0x4bc>
    13fa:	24 e0       	ldi	r18, 0x04	; 4
    13fc:	a2 0e       	add	r10, r18
    13fe:	b1 1c       	adc	r11, r1
    1400:	f6 01       	movw	r30, r12
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	0a c0       	rjmp	.+20     	; 0x1420 <vfprintf+0x4d0>
    140c:	f2 e0       	ldi	r31, 0x02	; 2
    140e:	af 0e       	add	r10, r31
    1410:	b1 1c       	adc	r11, r1
    1412:	f6 01       	movw	r30, r12
    1414:	60 81       	ld	r22, Z
    1416:	71 81       	ldd	r23, Z+1	; 0x01
    1418:	07 2e       	mov	r0, r23
    141a:	00 0c       	add	r0, r0
    141c:	88 0b       	sbc	r24, r24
    141e:	99 0b       	sbc	r25, r25
    1420:	f9 2d       	mov	r31, r9
    1422:	ff 76       	andi	r31, 0x6F	; 111
    1424:	9f 2e       	mov	r9, r31
    1426:	97 ff       	sbrs	r25, 7
    1428:	09 c0       	rjmp	.+18     	; 0x143c <vfprintf+0x4ec>
    142a:	90 95       	com	r25
    142c:	80 95       	com	r24
    142e:	70 95       	com	r23
    1430:	61 95       	neg	r22
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	f0 68       	ori	r31, 0x80	; 128
    143a:	9f 2e       	mov	r9, r31
    143c:	2a e0       	ldi	r18, 0x0A	; 10
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	a3 01       	movw	r20, r6
    1442:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__ultoa_invert>
    1446:	c8 2e       	mov	r12, r24
    1448:	c6 18       	sub	r12, r6
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <vfprintf+0x57a>
    144c:	09 2d       	mov	r16, r9
    144e:	85 37       	cpi	r24, 0x75	; 117
    1450:	21 f4       	brne	.+8      	; 0x145a <vfprintf+0x50a>
    1452:	0f 7e       	andi	r16, 0xEF	; 239
    1454:	2a e0       	ldi	r18, 0x0A	; 10
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	1d c0       	rjmp	.+58     	; 0x1494 <vfprintf+0x544>
    145a:	09 7f       	andi	r16, 0xF9	; 249
    145c:	8f 36       	cpi	r24, 0x6F	; 111
    145e:	91 f0       	breq	.+36     	; 0x1484 <vfprintf+0x534>
    1460:	18 f4       	brcc	.+6      	; 0x1468 <vfprintf+0x518>
    1462:	88 35       	cpi	r24, 0x58	; 88
    1464:	59 f0       	breq	.+22     	; 0x147c <vfprintf+0x52c>
    1466:	c3 c0       	rjmp	.+390    	; 0x15ee <vfprintf+0x69e>
    1468:	80 37       	cpi	r24, 0x70	; 112
    146a:	19 f0       	breq	.+6      	; 0x1472 <vfprintf+0x522>
    146c:	88 37       	cpi	r24, 0x78	; 120
    146e:	11 f0       	breq	.+4      	; 0x1474 <vfprintf+0x524>
    1470:	be c0       	rjmp	.+380    	; 0x15ee <vfprintf+0x69e>
    1472:	00 61       	ori	r16, 0x10	; 16
    1474:	04 ff       	sbrs	r16, 4
    1476:	09 c0       	rjmp	.+18     	; 0x148a <vfprintf+0x53a>
    1478:	04 60       	ori	r16, 0x04	; 4
    147a:	07 c0       	rjmp	.+14     	; 0x148a <vfprintf+0x53a>
    147c:	94 fe       	sbrs	r9, 4
    147e:	08 c0       	rjmp	.+16     	; 0x1490 <vfprintf+0x540>
    1480:	06 60       	ori	r16, 0x06	; 6
    1482:	06 c0       	rjmp	.+12     	; 0x1490 <vfprintf+0x540>
    1484:	28 e0       	ldi	r18, 0x08	; 8
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <vfprintf+0x544>
    148a:	20 e1       	ldi	r18, 0x10	; 16
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <vfprintf+0x544>
    1490:	20 e1       	ldi	r18, 0x10	; 16
    1492:	32 e0       	ldi	r19, 0x02	; 2
    1494:	56 01       	movw	r10, r12
    1496:	07 ff       	sbrs	r16, 7
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <vfprintf+0x55c>
    149a:	84 e0       	ldi	r24, 0x04	; 4
    149c:	a8 0e       	add	r10, r24
    149e:	b1 1c       	adc	r11, r1
    14a0:	f6 01       	movw	r30, r12
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	08 c0       	rjmp	.+16     	; 0x14bc <vfprintf+0x56c>
    14ac:	f2 e0       	ldi	r31, 0x02	; 2
    14ae:	af 0e       	add	r10, r31
    14b0:	b1 1c       	adc	r11, r1
    14b2:	f6 01       	movw	r30, r12
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a3 01       	movw	r20, r6
    14be:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__ultoa_invert>
    14c2:	c8 2e       	mov	r12, r24
    14c4:	c6 18       	sub	r12, r6
    14c6:	0f 77       	andi	r16, 0x7F	; 127
    14c8:	90 2e       	mov	r9, r16
    14ca:	96 fe       	sbrs	r9, 6
    14cc:	0b c0       	rjmp	.+22     	; 0x14e4 <vfprintf+0x594>
    14ce:	09 2d       	mov	r16, r9
    14d0:	0e 7f       	andi	r16, 0xFE	; 254
    14d2:	c1 16       	cp	r12, r17
    14d4:	50 f4       	brcc	.+20     	; 0x14ea <vfprintf+0x59a>
    14d6:	94 fe       	sbrs	r9, 4
    14d8:	0a c0       	rjmp	.+20     	; 0x14ee <vfprintf+0x59e>
    14da:	92 fc       	sbrc	r9, 2
    14dc:	08 c0       	rjmp	.+16     	; 0x14ee <vfprintf+0x59e>
    14de:	09 2d       	mov	r16, r9
    14e0:	0e 7e       	andi	r16, 0xEE	; 238
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <vfprintf+0x59e>
    14e4:	dc 2c       	mov	r13, r12
    14e6:	09 2d       	mov	r16, r9
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <vfprintf+0x5a0>
    14ea:	dc 2c       	mov	r13, r12
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <vfprintf+0x5a0>
    14ee:	d1 2e       	mov	r13, r17
    14f0:	04 ff       	sbrs	r16, 4
    14f2:	0d c0       	rjmp	.+26     	; 0x150e <vfprintf+0x5be>
    14f4:	fe 01       	movw	r30, r28
    14f6:	ec 0d       	add	r30, r12
    14f8:	f1 1d       	adc	r31, r1
    14fa:	80 81       	ld	r24, Z
    14fc:	80 33       	cpi	r24, 0x30	; 48
    14fe:	11 f4       	brne	.+4      	; 0x1504 <vfprintf+0x5b4>
    1500:	09 7e       	andi	r16, 0xE9	; 233
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <vfprintf+0x5c6>
    1504:	02 ff       	sbrs	r16, 2
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <vfprintf+0x5c4>
    1508:	d3 94       	inc	r13
    150a:	d3 94       	inc	r13
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <vfprintf+0x5c6>
    150e:	80 2f       	mov	r24, r16
    1510:	86 78       	andi	r24, 0x86	; 134
    1512:	09 f0       	breq	.+2      	; 0x1516 <vfprintf+0x5c6>
    1514:	d3 94       	inc	r13
    1516:	03 fd       	sbrc	r16, 3
    1518:	11 c0       	rjmp	.+34     	; 0x153c <vfprintf+0x5ec>
    151a:	00 ff       	sbrs	r16, 0
    151c:	06 c0       	rjmp	.+12     	; 0x152a <vfprintf+0x5da>
    151e:	1c 2d       	mov	r17, r12
    1520:	d5 14       	cp	r13, r5
    1522:	80 f4       	brcc	.+32     	; 0x1544 <vfprintf+0x5f4>
    1524:	15 0d       	add	r17, r5
    1526:	1d 19       	sub	r17, r13
    1528:	0d c0       	rjmp	.+26     	; 0x1544 <vfprintf+0x5f4>
    152a:	d5 14       	cp	r13, r5
    152c:	58 f4       	brcc	.+22     	; 0x1544 <vfprintf+0x5f4>
    152e:	b7 01       	movw	r22, r14
    1530:	80 e2       	ldi	r24, 0x20	; 32
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    1538:	d3 94       	inc	r13
    153a:	f7 cf       	rjmp	.-18     	; 0x152a <vfprintf+0x5da>
    153c:	d5 14       	cp	r13, r5
    153e:	10 f4       	brcc	.+4      	; 0x1544 <vfprintf+0x5f4>
    1540:	5d 18       	sub	r5, r13
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <vfprintf+0x5f6>
    1544:	51 2c       	mov	r5, r1
    1546:	04 ff       	sbrs	r16, 4
    1548:	10 c0       	rjmp	.+32     	; 0x156a <vfprintf+0x61a>
    154a:	b7 01       	movw	r22, r14
    154c:	80 e3       	ldi	r24, 0x30	; 48
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    1554:	02 ff       	sbrs	r16, 2
    1556:	17 c0       	rjmp	.+46     	; 0x1586 <vfprintf+0x636>
    1558:	01 fd       	sbrc	r16, 1
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <vfprintf+0x612>
    155c:	88 e7       	ldi	r24, 0x78	; 120
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <vfprintf+0x616>
    1562:	88 e5       	ldi	r24, 0x58	; 88
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	b7 01       	movw	r22, r14
    1568:	0c c0       	rjmp	.+24     	; 0x1582 <vfprintf+0x632>
    156a:	80 2f       	mov	r24, r16
    156c:	86 78       	andi	r24, 0x86	; 134
    156e:	59 f0       	breq	.+22     	; 0x1586 <vfprintf+0x636>
    1570:	01 ff       	sbrs	r16, 1
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <vfprintf+0x628>
    1574:	8b e2       	ldi	r24, 0x2B	; 43
    1576:	01 c0       	rjmp	.+2      	; 0x157a <vfprintf+0x62a>
    1578:	80 e2       	ldi	r24, 0x20	; 32
    157a:	07 fd       	sbrc	r16, 7
    157c:	8d e2       	ldi	r24, 0x2D	; 45
    157e:	b7 01       	movw	r22, r14
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    1586:	c1 16       	cp	r12, r17
    1588:	38 f4       	brcc	.+14     	; 0x1598 <vfprintf+0x648>
    158a:	b7 01       	movw	r22, r14
    158c:	80 e3       	ldi	r24, 0x30	; 48
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    1594:	11 50       	subi	r17, 0x01	; 1
    1596:	f7 cf       	rjmp	.-18     	; 0x1586 <vfprintf+0x636>
    1598:	ca 94       	dec	r12
    159a:	f3 01       	movw	r30, r6
    159c:	ec 0d       	add	r30, r12
    159e:	f1 1d       	adc	r31, r1
    15a0:	80 81       	ld	r24, Z
    15a2:	b7 01       	movw	r22, r14
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    15aa:	c1 10       	cpse	r12, r1
    15ac:	f5 cf       	rjmp	.-22     	; 0x1598 <vfprintf+0x648>
    15ae:	15 c0       	rjmp	.+42     	; 0x15da <vfprintf+0x68a>
    15b0:	f4 e0       	ldi	r31, 0x04	; 4
    15b2:	f5 15       	cp	r31, r5
    15b4:	60 f5       	brcc	.+88     	; 0x160e <vfprintf+0x6be>
    15b6:	84 e0       	ldi	r24, 0x04	; 4
    15b8:	58 1a       	sub	r5, r24
    15ba:	93 fe       	sbrs	r9, 3
    15bc:	1f c0       	rjmp	.+62     	; 0x15fc <vfprintf+0x6ac>
    15be:	01 11       	cpse	r16, r1
    15c0:	27 c0       	rjmp	.+78     	; 0x1610 <vfprintf+0x6c0>
    15c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15c4:	23 ff       	sbrs	r18, 3
    15c6:	2a c0       	rjmp	.+84     	; 0x161c <vfprintf+0x6cc>
    15c8:	0c ea       	ldi	r16, 0xAC	; 172
    15ca:	10 e0       	ldi	r17, 0x00	; 0
    15cc:	39 2d       	mov	r19, r9
    15ce:	30 71       	andi	r19, 0x10	; 16
    15d0:	93 2e       	mov	r9, r19
    15d2:	f8 01       	movw	r30, r16
    15d4:	84 91       	lpm	r24, Z
    15d6:	81 11       	cpse	r24, r1
    15d8:	24 c0       	rjmp	.+72     	; 0x1622 <vfprintf+0x6d2>
    15da:	55 20       	and	r5, r5
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <vfprintf+0x690>
    15de:	e4 cc       	rjmp	.-1592   	; 0xfa8 <vfprintf+0x58>
    15e0:	b7 01       	movw	r22, r14
    15e2:	80 e2       	ldi	r24, 0x20	; 32
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    15ea:	5a 94       	dec	r5
    15ec:	f6 cf       	rjmp	.-20     	; 0x15da <vfprintf+0x68a>
    15ee:	f7 01       	movw	r30, r14
    15f0:	86 81       	ldd	r24, Z+6	; 0x06
    15f2:	97 81       	ldd	r25, Z+7	; 0x07
    15f4:	26 c0       	rjmp	.+76     	; 0x1642 <vfprintf+0x6f2>
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	9f ef       	ldi	r25, 0xFF	; 255
    15fa:	23 c0       	rjmp	.+70     	; 0x1642 <vfprintf+0x6f2>
    15fc:	b7 01       	movw	r22, r14
    15fe:	80 e2       	ldi	r24, 0x20	; 32
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    1606:	5a 94       	dec	r5
    1608:	51 10       	cpse	r5, r1
    160a:	f8 cf       	rjmp	.-16     	; 0x15fc <vfprintf+0x6ac>
    160c:	d8 cf       	rjmp	.-80     	; 0x15be <vfprintf+0x66e>
    160e:	51 2c       	mov	r5, r1
    1610:	b7 01       	movw	r22, r14
    1612:	80 2f       	mov	r24, r16
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    161a:	d3 cf       	rjmp	.-90     	; 0x15c2 <vfprintf+0x672>
    161c:	00 eb       	ldi	r16, 0xB0	; 176
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	d5 cf       	rjmp	.-86     	; 0x15cc <vfprintf+0x67c>
    1622:	91 10       	cpse	r9, r1
    1624:	80 52       	subi	r24, 0x20	; 32
    1626:	b7 01       	movw	r22, r14
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputc>
    162e:	0f 5f       	subi	r16, 0xFF	; 255
    1630:	1f 4f       	sbci	r17, 0xFF	; 255
    1632:	cf cf       	rjmp	.-98     	; 0x15d2 <vfprintf+0x682>
    1634:	23 e0       	ldi	r18, 0x03	; 3
    1636:	25 15       	cp	r18, r5
    1638:	10 f4       	brcc	.+4      	; 0x163e <vfprintf+0x6ee>
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	bd cf       	rjmp	.-134    	; 0x15b8 <vfprintf+0x668>
    163e:	51 2c       	mov	r5, r1
    1640:	c0 cf       	rjmp	.-128    	; 0x15c2 <vfprintf+0x672>
    1642:	60 96       	adiw	r28, 0x10	; 16
    1644:	e2 e1       	ldi	r30, 0x12	; 18
    1646:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__epilogue_restores__>

0000164a <__udivmodsi4>:
    164a:	a1 e2       	ldi	r26, 0x21	; 33
    164c:	1a 2e       	mov	r1, r26
    164e:	aa 1b       	sub	r26, r26
    1650:	bb 1b       	sub	r27, r27
    1652:	fd 01       	movw	r30, r26
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <__udivmodsi4_ep>

00001656 <__udivmodsi4_loop>:
    1656:	aa 1f       	adc	r26, r26
    1658:	bb 1f       	adc	r27, r27
    165a:	ee 1f       	adc	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	a2 17       	cp	r26, r18
    1660:	b3 07       	cpc	r27, r19
    1662:	e4 07       	cpc	r30, r20
    1664:	f5 07       	cpc	r31, r21
    1666:	20 f0       	brcs	.+8      	; 0x1670 <__udivmodsi4_ep>
    1668:	a2 1b       	sub	r26, r18
    166a:	b3 0b       	sbc	r27, r19
    166c:	e4 0b       	sbc	r30, r20
    166e:	f5 0b       	sbc	r31, r21

00001670 <__udivmodsi4_ep>:
    1670:	66 1f       	adc	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	1a 94       	dec	r1
    167a:	69 f7       	brne	.-38     	; 0x1656 <__udivmodsi4_loop>
    167c:	60 95       	com	r22
    167e:	70 95       	com	r23
    1680:	80 95       	com	r24
    1682:	90 95       	com	r25
    1684:	9b 01       	movw	r18, r22
    1686:	ac 01       	movw	r20, r24
    1688:	bd 01       	movw	r22, r26
    168a:	cf 01       	movw	r24, r30
    168c:	08 95       	ret

0000168e <__umulhisi3>:
    168e:	a2 9f       	mul	r26, r18
    1690:	b0 01       	movw	r22, r0
    1692:	b3 9f       	mul	r27, r19
    1694:	c0 01       	movw	r24, r0
    1696:	a3 9f       	mul	r26, r19
    1698:	70 0d       	add	r23, r0
    169a:	81 1d       	adc	r24, r1
    169c:	11 24       	eor	r1, r1
    169e:	91 1d       	adc	r25, r1
    16a0:	b2 9f       	mul	r27, r18
    16a2:	70 0d       	add	r23, r0
    16a4:	81 1d       	adc	r24, r1
    16a6:	11 24       	eor	r1, r1
    16a8:	91 1d       	adc	r25, r1
    16aa:	08 95       	ret

000016ac <__prologue_saves__>:
    16ac:	2f 92       	push	r2
    16ae:	3f 92       	push	r3
    16b0:	4f 92       	push	r4
    16b2:	5f 92       	push	r5
    16b4:	6f 92       	push	r6
    16b6:	7f 92       	push	r7
    16b8:	8f 92       	push	r8
    16ba:	9f 92       	push	r9
    16bc:	af 92       	push	r10
    16be:	bf 92       	push	r11
    16c0:	cf 92       	push	r12
    16c2:	df 92       	push	r13
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	ca 1b       	sub	r28, r26
    16d6:	db 0b       	sbc	r29, r27
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	09 94       	ijmp

000016e4 <__epilogue_restores__>:
    16e4:	2a 88       	ldd	r2, Y+18	; 0x12
    16e6:	39 88       	ldd	r3, Y+17	; 0x11
    16e8:	48 88       	ldd	r4, Y+16	; 0x10
    16ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    16ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    16ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    16f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    16f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    16f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    16f6:	b9 84       	ldd	r11, Y+9	; 0x09
    16f8:	c8 84       	ldd	r12, Y+8	; 0x08
    16fa:	df 80       	ldd	r13, Y+7	; 0x07
    16fc:	ee 80       	ldd	r14, Y+6	; 0x06
    16fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1700:	0c 81       	ldd	r16, Y+4	; 0x04
    1702:	1b 81       	ldd	r17, Y+3	; 0x03
    1704:	aa 81       	ldd	r26, Y+2	; 0x02
    1706:	b9 81       	ldd	r27, Y+1	; 0x01
    1708:	ce 0f       	add	r28, r30
    170a:	d1 1d       	adc	r29, r1
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	ed 01       	movw	r28, r26
    1718:	08 95       	ret

0000171a <__ftoa_engine>:
    171a:	28 30       	cpi	r18, 0x08	; 8
    171c:	08 f0       	brcs	.+2      	; 0x1720 <__ftoa_engine+0x6>
    171e:	27 e0       	ldi	r18, 0x07	; 7
    1720:	33 27       	eor	r19, r19
    1722:	da 01       	movw	r26, r20
    1724:	99 0f       	add	r25, r25
    1726:	31 1d       	adc	r19, r1
    1728:	87 fd       	sbrc	r24, 7
    172a:	91 60       	ori	r25, 0x01	; 1
    172c:	00 96       	adiw	r24, 0x00	; 0
    172e:	61 05       	cpc	r22, r1
    1730:	71 05       	cpc	r23, r1
    1732:	39 f4       	brne	.+14     	; 0x1742 <__ftoa_engine+0x28>
    1734:	32 60       	ori	r19, 0x02	; 2
    1736:	2e 5f       	subi	r18, 0xFE	; 254
    1738:	3d 93       	st	X+, r19
    173a:	30 e3       	ldi	r19, 0x30	; 48
    173c:	2a 95       	dec	r18
    173e:	e1 f7       	brne	.-8      	; 0x1738 <__ftoa_engine+0x1e>
    1740:	08 95       	ret
    1742:	9f 3f       	cpi	r25, 0xFF	; 255
    1744:	30 f0       	brcs	.+12     	; 0x1752 <__ftoa_engine+0x38>
    1746:	80 38       	cpi	r24, 0x80	; 128
    1748:	71 05       	cpc	r23, r1
    174a:	61 05       	cpc	r22, r1
    174c:	09 f0       	breq	.+2      	; 0x1750 <__ftoa_engine+0x36>
    174e:	3c 5f       	subi	r19, 0xFC	; 252
    1750:	3c 5f       	subi	r19, 0xFC	; 252
    1752:	3d 93       	st	X+, r19
    1754:	91 30       	cpi	r25, 0x01	; 1
    1756:	08 f0       	brcs	.+2      	; 0x175a <__ftoa_engine+0x40>
    1758:	80 68       	ori	r24, 0x80	; 128
    175a:	91 1d       	adc	r25, r1
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	1f 93       	push	r17
    1762:	0f 93       	push	r16
    1764:	ff 92       	push	r15
    1766:	ef 92       	push	r14
    1768:	19 2f       	mov	r17, r25
    176a:	98 7f       	andi	r25, 0xF8	; 248
    176c:	96 95       	lsr	r25
    176e:	e9 2f       	mov	r30, r25
    1770:	96 95       	lsr	r25
    1772:	96 95       	lsr	r25
    1774:	e9 0f       	add	r30, r25
    1776:	ff 27       	eor	r31, r31
    1778:	e2 5f       	subi	r30, 0xF2	; 242
    177a:	fe 4f       	sbci	r31, 0xFE	; 254
    177c:	99 27       	eor	r25, r25
    177e:	33 27       	eor	r19, r19
    1780:	ee 24       	eor	r14, r14
    1782:	ff 24       	eor	r15, r15
    1784:	a7 01       	movw	r20, r14
    1786:	e7 01       	movw	r28, r14
    1788:	05 90       	lpm	r0, Z+
    178a:	08 94       	sec
    178c:	07 94       	ror	r0
    178e:	28 f4       	brcc	.+10     	; 0x179a <__ftoa_engine+0x80>
    1790:	36 0f       	add	r19, r22
    1792:	e7 1e       	adc	r14, r23
    1794:	f8 1e       	adc	r15, r24
    1796:	49 1f       	adc	r20, r25
    1798:	51 1d       	adc	r21, r1
    179a:	66 0f       	add	r22, r22
    179c:	77 1f       	adc	r23, r23
    179e:	88 1f       	adc	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	06 94       	lsr	r0
    17a4:	a1 f7       	brne	.-24     	; 0x178e <__ftoa_engine+0x74>
    17a6:	05 90       	lpm	r0, Z+
    17a8:	07 94       	ror	r0
    17aa:	28 f4       	brcc	.+10     	; 0x17b6 <__ftoa_engine+0x9c>
    17ac:	e7 0e       	add	r14, r23
    17ae:	f8 1e       	adc	r15, r24
    17b0:	49 1f       	adc	r20, r25
    17b2:	56 1f       	adc	r21, r22
    17b4:	c1 1d       	adc	r28, r1
    17b6:	77 0f       	add	r23, r23
    17b8:	88 1f       	adc	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	66 1f       	adc	r22, r22
    17be:	06 94       	lsr	r0
    17c0:	a1 f7       	brne	.-24     	; 0x17aa <__ftoa_engine+0x90>
    17c2:	05 90       	lpm	r0, Z+
    17c4:	07 94       	ror	r0
    17c6:	28 f4       	brcc	.+10     	; 0x17d2 <__ftoa_engine+0xb8>
    17c8:	f8 0e       	add	r15, r24
    17ca:	49 1f       	adc	r20, r25
    17cc:	56 1f       	adc	r21, r22
    17ce:	c7 1f       	adc	r28, r23
    17d0:	d1 1d       	adc	r29, r1
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	66 1f       	adc	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	06 94       	lsr	r0
    17dc:	a1 f7       	brne	.-24     	; 0x17c6 <__ftoa_engine+0xac>
    17de:	05 90       	lpm	r0, Z+
    17e0:	07 94       	ror	r0
    17e2:	20 f4       	brcc	.+8      	; 0x17ec <__ftoa_engine+0xd2>
    17e4:	49 0f       	add	r20, r25
    17e6:	56 1f       	adc	r21, r22
    17e8:	c7 1f       	adc	r28, r23
    17ea:	d8 1f       	adc	r29, r24
    17ec:	99 0f       	add	r25, r25
    17ee:	66 1f       	adc	r22, r22
    17f0:	77 1f       	adc	r23, r23
    17f2:	88 1f       	adc	r24, r24
    17f4:	06 94       	lsr	r0
    17f6:	a9 f7       	brne	.-22     	; 0x17e2 <__ftoa_engine+0xc8>
    17f8:	84 91       	lpm	r24, Z
    17fa:	10 95       	com	r17
    17fc:	17 70       	andi	r17, 0x07	; 7
    17fe:	41 f0       	breq	.+16     	; 0x1810 <__ftoa_engine+0xf6>
    1800:	d6 95       	lsr	r29
    1802:	c7 95       	ror	r28
    1804:	57 95       	ror	r21
    1806:	47 95       	ror	r20
    1808:	f7 94       	ror	r15
    180a:	e7 94       	ror	r14
    180c:	1a 95       	dec	r17
    180e:	c1 f7       	brne	.-16     	; 0x1800 <__ftoa_engine+0xe6>
    1810:	e4 eb       	ldi	r30, 0xB4	; 180
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	68 94       	set
    1816:	15 90       	lpm	r1, Z+
    1818:	15 91       	lpm	r17, Z+
    181a:	35 91       	lpm	r19, Z+
    181c:	65 91       	lpm	r22, Z+
    181e:	95 91       	lpm	r25, Z+
    1820:	05 90       	lpm	r0, Z+
    1822:	7f e2       	ldi	r23, 0x2F	; 47
    1824:	73 95       	inc	r23
    1826:	e1 18       	sub	r14, r1
    1828:	f1 0a       	sbc	r15, r17
    182a:	43 0b       	sbc	r20, r19
    182c:	56 0b       	sbc	r21, r22
    182e:	c9 0b       	sbc	r28, r25
    1830:	d0 09       	sbc	r29, r0
    1832:	c0 f7       	brcc	.-16     	; 0x1824 <__ftoa_engine+0x10a>
    1834:	e1 0c       	add	r14, r1
    1836:	f1 1e       	adc	r15, r17
    1838:	43 1f       	adc	r20, r19
    183a:	56 1f       	adc	r21, r22
    183c:	c9 1f       	adc	r28, r25
    183e:	d0 1d       	adc	r29, r0
    1840:	7e f4       	brtc	.+30     	; 0x1860 <__ftoa_engine+0x146>
    1842:	70 33       	cpi	r23, 0x30	; 48
    1844:	11 f4       	brne	.+4      	; 0x184a <__ftoa_engine+0x130>
    1846:	8a 95       	dec	r24
    1848:	e6 cf       	rjmp	.-52     	; 0x1816 <__ftoa_engine+0xfc>
    184a:	e8 94       	clt
    184c:	01 50       	subi	r16, 0x01	; 1
    184e:	30 f0       	brcs	.+12     	; 0x185c <__ftoa_engine+0x142>
    1850:	08 0f       	add	r16, r24
    1852:	0a f4       	brpl	.+2      	; 0x1856 <__ftoa_engine+0x13c>
    1854:	00 27       	eor	r16, r16
    1856:	02 17       	cp	r16, r18
    1858:	08 f4       	brcc	.+2      	; 0x185c <__ftoa_engine+0x142>
    185a:	20 2f       	mov	r18, r16
    185c:	23 95       	inc	r18
    185e:	02 2f       	mov	r16, r18
    1860:	7a 33       	cpi	r23, 0x3A	; 58
    1862:	28 f0       	brcs	.+10     	; 0x186e <__ftoa_engine+0x154>
    1864:	79 e3       	ldi	r23, 0x39	; 57
    1866:	7d 93       	st	X+, r23
    1868:	2a 95       	dec	r18
    186a:	e9 f7       	brne	.-6      	; 0x1866 <__ftoa_engine+0x14c>
    186c:	10 c0       	rjmp	.+32     	; 0x188e <__ftoa_engine+0x174>
    186e:	7d 93       	st	X+, r23
    1870:	2a 95       	dec	r18
    1872:	89 f6       	brne	.-94     	; 0x1816 <__ftoa_engine+0xfc>
    1874:	06 94       	lsr	r0
    1876:	97 95       	ror	r25
    1878:	67 95       	ror	r22
    187a:	37 95       	ror	r19
    187c:	17 95       	ror	r17
    187e:	17 94       	ror	r1
    1880:	e1 18       	sub	r14, r1
    1882:	f1 0a       	sbc	r15, r17
    1884:	43 0b       	sbc	r20, r19
    1886:	56 0b       	sbc	r21, r22
    1888:	c9 0b       	sbc	r28, r25
    188a:	d0 09       	sbc	r29, r0
    188c:	98 f0       	brcs	.+38     	; 0x18b4 <__ftoa_engine+0x19a>
    188e:	23 95       	inc	r18
    1890:	7e 91       	ld	r23, -X
    1892:	73 95       	inc	r23
    1894:	7a 33       	cpi	r23, 0x3A	; 58
    1896:	08 f0       	brcs	.+2      	; 0x189a <__ftoa_engine+0x180>
    1898:	70 e3       	ldi	r23, 0x30	; 48
    189a:	7c 93       	st	X, r23
    189c:	20 13       	cpse	r18, r16
    189e:	b8 f7       	brcc	.-18     	; 0x188e <__ftoa_engine+0x174>
    18a0:	7e 91       	ld	r23, -X
    18a2:	70 61       	ori	r23, 0x10	; 16
    18a4:	7d 93       	st	X+, r23
    18a6:	30 f0       	brcs	.+12     	; 0x18b4 <__ftoa_engine+0x19a>
    18a8:	83 95       	inc	r24
    18aa:	71 e3       	ldi	r23, 0x31	; 49
    18ac:	7d 93       	st	X+, r23
    18ae:	70 e3       	ldi	r23, 0x30	; 48
    18b0:	2a 95       	dec	r18
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <__ftoa_engine+0x192>
    18b4:	11 24       	eor	r1, r1
    18b6:	ef 90       	pop	r14
    18b8:	ff 90       	pop	r15
    18ba:	0f 91       	pop	r16
    18bc:	1f 91       	pop	r17
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	99 27       	eor	r25, r25
    18c4:	87 fd       	sbrc	r24, 7
    18c6:	90 95       	com	r25
    18c8:	08 95       	ret

000018ca <strnlen_P>:
    18ca:	fc 01       	movw	r30, r24
    18cc:	05 90       	lpm	r0, Z+
    18ce:	61 50       	subi	r22, 0x01	; 1
    18d0:	70 40       	sbci	r23, 0x00	; 0
    18d2:	01 10       	cpse	r0, r1
    18d4:	d8 f7       	brcc	.-10     	; 0x18cc <strnlen_P+0x2>
    18d6:	80 95       	com	r24
    18d8:	90 95       	com	r25
    18da:	8e 0f       	add	r24, r30
    18dc:	9f 1f       	adc	r25, r31
    18de:	08 95       	ret

000018e0 <strnlen>:
    18e0:	fc 01       	movw	r30, r24
    18e2:	61 50       	subi	r22, 0x01	; 1
    18e4:	70 40       	sbci	r23, 0x00	; 0
    18e6:	01 90       	ld	r0, Z+
    18e8:	01 10       	cpse	r0, r1
    18ea:	d8 f7       	brcc	.-10     	; 0x18e2 <strnlen+0x2>
    18ec:	80 95       	com	r24
    18ee:	90 95       	com	r25
    18f0:	8e 0f       	add	r24, r30
    18f2:	9f 1f       	adc	r25, r31
    18f4:	08 95       	ret

000018f6 <fputc>:
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	fb 01       	movw	r30, r22
    1900:	23 81       	ldd	r18, Z+3	; 0x03
    1902:	21 fd       	sbrc	r18, 1
    1904:	03 c0       	rjmp	.+6      	; 0x190c <fputc+0x16>
    1906:	8f ef       	ldi	r24, 0xFF	; 255
    1908:	9f ef       	ldi	r25, 0xFF	; 255
    190a:	2c c0       	rjmp	.+88     	; 0x1964 <fputc+0x6e>
    190c:	22 ff       	sbrs	r18, 2
    190e:	16 c0       	rjmp	.+44     	; 0x193c <fputc+0x46>
    1910:	46 81       	ldd	r20, Z+6	; 0x06
    1912:	57 81       	ldd	r21, Z+7	; 0x07
    1914:	24 81       	ldd	r18, Z+4	; 0x04
    1916:	35 81       	ldd	r19, Z+5	; 0x05
    1918:	42 17       	cp	r20, r18
    191a:	53 07       	cpc	r21, r19
    191c:	44 f4       	brge	.+16     	; 0x192e <fputc+0x38>
    191e:	a0 81       	ld	r26, Z
    1920:	b1 81       	ldd	r27, Z+1	; 0x01
    1922:	9d 01       	movw	r18, r26
    1924:	2f 5f       	subi	r18, 0xFF	; 255
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
    1928:	31 83       	std	Z+1, r19	; 0x01
    192a:	20 83       	st	Z, r18
    192c:	8c 93       	st	X, r24
    192e:	26 81       	ldd	r18, Z+6	; 0x06
    1930:	37 81       	ldd	r19, Z+7	; 0x07
    1932:	2f 5f       	subi	r18, 0xFF	; 255
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	37 83       	std	Z+7, r19	; 0x07
    1938:	26 83       	std	Z+6, r18	; 0x06
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <fputc+0x6e>
    193c:	8b 01       	movw	r16, r22
    193e:	ec 01       	movw	r28, r24
    1940:	fb 01       	movw	r30, r22
    1942:	00 84       	ldd	r0, Z+8	; 0x08
    1944:	f1 85       	ldd	r31, Z+9	; 0x09
    1946:	e0 2d       	mov	r30, r0
    1948:	09 95       	icall
    194a:	89 2b       	or	r24, r25
    194c:	e1 f6       	brne	.-72     	; 0x1906 <fputc+0x10>
    194e:	d8 01       	movw	r26, r16
    1950:	16 96       	adiw	r26, 0x06	; 6
    1952:	8d 91       	ld	r24, X+
    1954:	9c 91       	ld	r25, X
    1956:	17 97       	sbiw	r26, 0x07	; 7
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	17 96       	adiw	r26, 0x07	; 7
    195c:	9c 93       	st	X, r25
    195e:	8e 93       	st	-X, r24
    1960:	16 97       	sbiw	r26, 0x06	; 6
    1962:	ce 01       	movw	r24, r28
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	08 95       	ret

0000196e <snprintf>:
    196e:	ae e0       	ldi	r26, 0x0E	; 14
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ed eb       	ldi	r30, 0xBD	; 189
    1974:	fc e0       	ldi	r31, 0x0C	; 12
    1976:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__prologue_saves__+0x1c>
    197a:	0d 89       	ldd	r16, Y+21	; 0x15
    197c:	1e 89       	ldd	r17, Y+22	; 0x16
    197e:	8f 89       	ldd	r24, Y+23	; 0x17
    1980:	98 8d       	ldd	r25, Y+24	; 0x18
    1982:	26 e0       	ldi	r18, 0x06	; 6
    1984:	2c 83       	std	Y+4, r18	; 0x04
    1986:	1a 83       	std	Y+2, r17	; 0x02
    1988:	09 83       	std	Y+1, r16	; 0x01
    198a:	97 ff       	sbrs	r25, 7
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <snprintf+0x24>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e8       	ldi	r25, 0x80	; 128
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
    1998:	ae 01       	movw	r20, r28
    199a:	45 5e       	subi	r20, 0xE5	; 229
    199c:	5f 4f       	sbci	r21, 0xFF	; 255
    199e:	69 8d       	ldd	r22, Y+25	; 0x19
    19a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	0e 94 a8 07 	call	0xf50	; 0xf50 <vfprintf>
    19aa:	4d 81       	ldd	r20, Y+5	; 0x05
    19ac:	5e 81       	ldd	r21, Y+6	; 0x06
    19ae:	57 fd       	sbrc	r21, 7
    19b0:	0a c0       	rjmp	.+20     	; 0x19c6 <snprintf+0x58>
    19b2:	2f 81       	ldd	r18, Y+7	; 0x07
    19b4:	38 85       	ldd	r19, Y+8	; 0x08
    19b6:	42 17       	cp	r20, r18
    19b8:	53 07       	cpc	r21, r19
    19ba:	0c f4       	brge	.+2      	; 0x19be <snprintf+0x50>
    19bc:	9a 01       	movw	r18, r20
    19be:	f8 01       	movw	r30, r16
    19c0:	e2 0f       	add	r30, r18
    19c2:	f3 1f       	adc	r31, r19
    19c4:	10 82       	st	Z, r1
    19c6:	2e 96       	adiw	r28, 0x0e	; 14
    19c8:	e4 e0       	ldi	r30, 0x04	; 4
    19ca:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__epilogue_restores__+0x1c>

000019ce <__ultoa_invert>:
    19ce:	fa 01       	movw	r30, r20
    19d0:	aa 27       	eor	r26, r26
    19d2:	28 30       	cpi	r18, 0x08	; 8
    19d4:	51 f1       	breq	.+84     	; 0x1a2a <__ultoa_invert+0x5c>
    19d6:	20 31       	cpi	r18, 0x10	; 16
    19d8:	81 f1       	breq	.+96     	; 0x1a3a <__ultoa_invert+0x6c>
    19da:	e8 94       	clt
    19dc:	6f 93       	push	r22
    19de:	6e 7f       	andi	r22, 0xFE	; 254
    19e0:	6e 5f       	subi	r22, 0xFE	; 254
    19e2:	7f 4f       	sbci	r23, 0xFF	; 255
    19e4:	8f 4f       	sbci	r24, 0xFF	; 255
    19e6:	9f 4f       	sbci	r25, 0xFF	; 255
    19e8:	af 4f       	sbci	r26, 0xFF	; 255
    19ea:	b1 e0       	ldi	r27, 0x01	; 1
    19ec:	3e d0       	rcall	.+124    	; 0x1a6a <__ultoa_invert+0x9c>
    19ee:	b4 e0       	ldi	r27, 0x04	; 4
    19f0:	3c d0       	rcall	.+120    	; 0x1a6a <__ultoa_invert+0x9c>
    19f2:	67 0f       	add	r22, r23
    19f4:	78 1f       	adc	r23, r24
    19f6:	89 1f       	adc	r24, r25
    19f8:	9a 1f       	adc	r25, r26
    19fa:	a1 1d       	adc	r26, r1
    19fc:	68 0f       	add	r22, r24
    19fe:	79 1f       	adc	r23, r25
    1a00:	8a 1f       	adc	r24, r26
    1a02:	91 1d       	adc	r25, r1
    1a04:	a1 1d       	adc	r26, r1
    1a06:	6a 0f       	add	r22, r26
    1a08:	71 1d       	adc	r23, r1
    1a0a:	81 1d       	adc	r24, r1
    1a0c:	91 1d       	adc	r25, r1
    1a0e:	a1 1d       	adc	r26, r1
    1a10:	20 d0       	rcall	.+64     	; 0x1a52 <__ultoa_invert+0x84>
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <__ultoa_invert+0x48>
    1a14:	68 94       	set
    1a16:	3f 91       	pop	r19
    1a18:	2a e0       	ldi	r18, 0x0A	; 10
    1a1a:	26 9f       	mul	r18, r22
    1a1c:	11 24       	eor	r1, r1
    1a1e:	30 19       	sub	r19, r0
    1a20:	30 5d       	subi	r19, 0xD0	; 208
    1a22:	31 93       	st	Z+, r19
    1a24:	de f6       	brtc	.-74     	; 0x19dc <__ultoa_invert+0xe>
    1a26:	cf 01       	movw	r24, r30
    1a28:	08 95       	ret
    1a2a:	46 2f       	mov	r20, r22
    1a2c:	47 70       	andi	r20, 0x07	; 7
    1a2e:	40 5d       	subi	r20, 0xD0	; 208
    1a30:	41 93       	st	Z+, r20
    1a32:	b3 e0       	ldi	r27, 0x03	; 3
    1a34:	0f d0       	rcall	.+30     	; 0x1a54 <__ultoa_invert+0x86>
    1a36:	c9 f7       	brne	.-14     	; 0x1a2a <__ultoa_invert+0x5c>
    1a38:	f6 cf       	rjmp	.-20     	; 0x1a26 <__ultoa_invert+0x58>
    1a3a:	46 2f       	mov	r20, r22
    1a3c:	4f 70       	andi	r20, 0x0F	; 15
    1a3e:	40 5d       	subi	r20, 0xD0	; 208
    1a40:	4a 33       	cpi	r20, 0x3A	; 58
    1a42:	18 f0       	brcs	.+6      	; 0x1a4a <__ultoa_invert+0x7c>
    1a44:	49 5d       	subi	r20, 0xD9	; 217
    1a46:	31 fd       	sbrc	r19, 1
    1a48:	40 52       	subi	r20, 0x20	; 32
    1a4a:	41 93       	st	Z+, r20
    1a4c:	02 d0       	rcall	.+4      	; 0x1a52 <__ultoa_invert+0x84>
    1a4e:	a9 f7       	brne	.-22     	; 0x1a3a <__ultoa_invert+0x6c>
    1a50:	ea cf       	rjmp	.-44     	; 0x1a26 <__ultoa_invert+0x58>
    1a52:	b4 e0       	ldi	r27, 0x04	; 4
    1a54:	a6 95       	lsr	r26
    1a56:	97 95       	ror	r25
    1a58:	87 95       	ror	r24
    1a5a:	77 95       	ror	r23
    1a5c:	67 95       	ror	r22
    1a5e:	ba 95       	dec	r27
    1a60:	c9 f7       	brne	.-14     	; 0x1a54 <__ultoa_invert+0x86>
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	61 05       	cpc	r22, r1
    1a66:	71 05       	cpc	r23, r1
    1a68:	08 95       	ret
    1a6a:	9b 01       	movw	r18, r22
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	0a 2e       	mov	r0, r26
    1a70:	06 94       	lsr	r0
    1a72:	57 95       	ror	r21
    1a74:	47 95       	ror	r20
    1a76:	37 95       	ror	r19
    1a78:	27 95       	ror	r18
    1a7a:	ba 95       	dec	r27
    1a7c:	c9 f7       	brne	.-14     	; 0x1a70 <__ultoa_invert+0xa2>
    1a7e:	62 0f       	add	r22, r18
    1a80:	73 1f       	adc	r23, r19
    1a82:	84 1f       	adc	r24, r20
    1a84:	95 1f       	adc	r25, r21
    1a86:	a0 1d       	adc	r26, r0
    1a88:	08 95       	ret

00001a8a <_exit>:
    1a8a:	f8 94       	cli

00001a8c <__stop_program>:
    1a8c:	ff cf       	rjmp	.-2      	; 0x1a8c <__stop_program>
