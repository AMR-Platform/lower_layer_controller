
avr_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001a86  00001b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800128  00800128  00001b42  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000293e  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111c  00000000  00000000  00004716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001922  00000000  00000000  00005832  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00007154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b27  00000000  00000000  00007714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002686  00000000  00000000  0000823b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000a8c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 01 	jmp	0x26c	; 0x26c <__ctors_end>
       4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
       8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
       c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      10:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      14:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      18:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      1c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      20:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      24:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      28:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_10>
      2c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__vector_11>
      30:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      34:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      38:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      3c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      40:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      44:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      48:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      4c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      50:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      54:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      58:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      5c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      60:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      64:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      68:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      6c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      70:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      74:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      78:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      7c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      80:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      84:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      88:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      8c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      90:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      94:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      98:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      9c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	6e 61       	ori	r22, 0x1E	; 30
      ae:	6e 00       	.word	0x006e	; ????

000000b0 <__c.2332>:
      b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     100:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     110:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     120:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     130:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     140:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     150:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     160:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     170:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     180:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     190:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ae <__c.2365>:
     1ae:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

000001b9 <descriptor_list>:
     1b9:	00 01 00 00 50 02 12 00 02 00 00 0d 02 43 00 03     ....P........C..
     1c9:	00 00 09 02 04 01 03 09 04 f5 01 12 02 03 09 04     ................
     1d9:	ed 01 06 03 03 09 04 e3 01 08                       ..........

000001e3 <string3>:
     1e3:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001ed <string2>:
     1ed:	06 03 4d 00 32 00 00 00                             ..M.2...

000001f5 <string1>:
     1f5:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     205:	65 00 00 00                                         e...

00000209 <string0>:
     209:	04 03 09 04                                         ....

0000020d <config1_descriptor>:
     20d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     21d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     22d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     23d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     24d:	40 00 00                                            @..

00000250 <device_descriptor>:
     250:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     260:	03 01                                               ..

00000262 <endpoint_config_table>:
     262:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	da e0       	ldi	r29, 0x0A	; 10
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	11 e0       	ldi	r17, 0x01	; 1
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	e6 e8       	ldi	r30, 0x86	; 134
     280:	fa e1       	ldi	r31, 0x1A	; 26
     282:	02 c0       	rjmp	.+4      	; 0x288 <__do_copy_data+0x10>
     284:	05 90       	lpm	r0, Z+
     286:	0d 92       	st	X+, r0
     288:	a8 32       	cpi	r26, 0x28	; 40
     28a:	b1 07       	cpc	r27, r17
     28c:	d9 f7       	brne	.-10     	; 0x284 <__do_copy_data+0xc>

0000028e <__do_clear_bss>:
     28e:	21 e0       	ldi	r18, 0x01	; 1
     290:	a8 e2       	ldi	r26, 0x28	; 40
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	01 c0       	rjmp	.+2      	; 0x298 <.do_clear_bss_start>

00000296 <.do_clear_bss_loop>:
     296:	1d 92       	st	X+, r1

00000298 <.do_clear_bss_start>:
     298:	ac 32       	cpi	r26, 0x2C	; 44
     29a:	b2 07       	cpc	r27, r18
     29c:	e1 f7       	brne	.-8      	; 0x296 <.do_clear_bss_loop>
     29e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
     2a2:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <_exit>

000002a6 <__bad_interrupt>:
     2a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002aa <usb_send_ram>:
#include "motors.h"
#include "m_usb.h"
#include "bno055_ll.h"

static void usb_send_ram(const char *s)
{
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	ec 01       	movw	r28, r24
	while (*s) {
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <usb_send_ram+0xe>
		m_usb_tx_char(*s++);
     2b2:	21 96       	adiw	r28, 0x01	; 1
     2b4:	0e 94 8e 04 	call	0x91c	; 0x91c <m_usb_tx_char>
#include "m_usb.h"
#include "bno055_ll.h"

static void usb_send_ram(const char *s)
{
	while (*s) {
     2b8:	88 81       	ld	r24, Y
     2ba:	81 11       	cpse	r24, r1
     2bc:	fa cf       	rjmp	.-12     	; 0x2b2 <usb_send_ram+0x8>
		m_usb_tx_char(*s++);
	}
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <main>:

int main(void) {
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	c6 54       	subi	r28, 0x46	; 70
     2ce:	d1 09       	sbc	r29, r1
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
	// — initialize everything —
	motors_init();
     2da:	0e 94 bd 03 	call	0x77a	; 0x77a <motors_init>
	// — quick test sequence —
	motors_enable_left (true);
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <motors_enable_left>
	motors_enable_right(true);
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <motors_enable_right>
	motors_set_speed_left (12);
     2ea:	8c e0       	ldi	r24, 0x0C	; 12
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 0d 04 	call	0x81a	; 0x81a <motors_set_speed_left>
	motors_set_speed_right(12);
     2f2:	8c e0       	ldi	r24, 0x0C	; 12
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 3a 04 	call	0x874	; 0x874 <motors_set_speed_right>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	2a ea       	ldi	r18, 0xAA	; 170
     2fc:	36 ee       	ldi	r19, 0xE6	; 230
     2fe:	86 e9       	ldi	r24, 0x96	; 150
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	21 50       	subi	r18, 0x01	; 1
     304:	30 40       	sbci	r19, 0x00	; 0
     306:	80 40       	sbci	r24, 0x00	; 0
     308:	90 40       	sbci	r25, 0x00	; 0
     30a:	d9 f7       	brne	.-10     	; 0x302 <main+0x3e>
     30c:	00 00       	nop
	_delay_ms(10000);

	motors_stop_all();
     30e:	0e 94 66 04 	call	0x8cc	; 0x8cc <motors_stop_all>
	
	m_usb_init();                      /* start PLL, attach to bus    */
     312:	0e 94 72 04 	call	0x8e4	; 0x8e4 <m_usb_init>
	while (!m_usb_isconnected()) { }   /* wait until host opens port  */
     316:	0e 94 8b 04 	call	0x916	; 0x916 <m_usb_isconnected>
     31a:	88 23       	and	r24, r24
     31c:	e1 f3       	breq	.-8      	; 0x316 <main+0x52>

	m_usb_tx_string("M2 ready\r\n");  
     31e:	8e ea       	ldi	r24, 0xAE	; 174
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 91 06 	call	0xd22	; 0xd22 <print_P>
	
	twi_init();            /* called inside bno055_init() too — harmless    */
     326:	0e 94 44 02 	call	0x488	; 0x488 <twi_init>

	if (!bno055_init()) {
     32a:	0e 94 1e 03 	call	0x63c	; 0x63c <bno055_init>
     32e:	81 11       	cpse	r24, r1
     330:	01 c0       	rjmp	.+2      	; 0x334 <main+0x70>
     332:	ff cf       	rjmp	.-2      	; 0x332 <main+0x6e>
	char line[64];

	/* ----------  main telemetry loop  ---------- */
	while (1) {
		int16_t h16, r16, p16;
		bno055_get_euler(&h16, &r16, &p16);   /* raw = deg·16              */
     334:	ae 01       	movw	r20, r28
     336:	4f 5b       	subi	r20, 0xBF	; 191
     338:	5f 4f       	sbci	r21, 0xFF	; 255
     33a:	be 01       	movw	r22, r28
     33c:	6d 5b       	subi	r22, 0xBD	; 189
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	ce 01       	movw	r24, r28
     342:	8b 5b       	subi	r24, 0xBB	; 187
     344:	9f 4f       	sbci	r25, 0xFF	; 255
     346:	0e 94 60 03 	call	0x6c0	; 0x6c0 <bno055_get_euler>

		/* convert to float degrees for nicer printing */
		float h = h16 / 16.0f;
     34a:	27 96       	adiw	r28, 0x07	; 7
     34c:	6e ad       	ldd	r22, Y+62	; 0x3e
     34e:	7f ad       	ldd	r23, Y+63	; 0x3f
     350:	27 97       	sbiw	r28, 0x07	; 7
     352:	07 2e       	mov	r0, r23
     354:	00 0c       	add	r0, r0
     356:	88 0b       	sbc	r24, r24
     358:	99 0b       	sbc	r25, r25
     35a:	0e 94 ab 06 	call	0xd56	; 0xd56 <__floatsisf>
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	40 e8       	ldi	r20, 0x80	; 128
     364:	5d e3       	ldi	r21, 0x3D	; 61
     366:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__mulsf3>
     36a:	16 2f       	mov	r17, r22
     36c:	07 2f       	mov	r16, r23
     36e:	f8 2e       	mov	r15, r24
     370:	e9 2e       	mov	r14, r25
		float r = r16 / 16.0f;
     372:	25 96       	adiw	r28, 0x05	; 5
     374:	6e ad       	ldd	r22, Y+62	; 0x3e
     376:	7f ad       	ldd	r23, Y+63	; 0x3f
     378:	25 97       	sbiw	r28, 0x05	; 5
     37a:	07 2e       	mov	r0, r23
     37c:	00 0c       	add	r0, r0
     37e:	88 0b       	sbc	r24, r24
     380:	99 0b       	sbc	r25, r25
     382:	0e 94 ab 06 	call	0xd56	; 0xd56 <__floatsisf>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e8       	ldi	r20, 0x80	; 128
     38c:	5d e3       	ldi	r21, 0x3D	; 61
     38e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__mulsf3>
     392:	d6 2e       	mov	r13, r22
     394:	c7 2e       	mov	r12, r23
     396:	b8 2e       	mov	r11, r24
     398:	a9 2e       	mov	r10, r25
		float p = p16 / 16.0f;
     39a:	23 96       	adiw	r28, 0x03	; 3
     39c:	6e ad       	ldd	r22, Y+62	; 0x3e
     39e:	7f ad       	ldd	r23, Y+63	; 0x3f
     3a0:	23 97       	sbiw	r28, 0x03	; 3
     3a2:	07 2e       	mov	r0, r23
     3a4:	00 0c       	add	r0, r0
     3a6:	88 0b       	sbc	r24, r24
     3a8:	99 0b       	sbc	r25, r25
     3aa:	0e 94 ab 06 	call	0xd56	; 0xd56 <__floatsisf>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e8       	ldi	r20, 0x80	; 128
     3b4:	5d e3       	ldi	r21, 0x3D	; 61
     3b6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__mulsf3>
     3ba:	96 2e       	mov	r9, r22
     3bc:	87 2e       	mov	r8, r23
     3be:	78 2e       	mov	r7, r24
     3c0:	69 2e       	mov	r6, r25

		uint8_t cal_ok = bno055_is_fully_calibrated() ? 1u : 0u;
     3c2:	0e 94 a3 03 	call	0x746	; 0x746 <bno055_is_fully_calibrated>
     3c6:	88 23       	and	r24, r24
     3c8:	11 f0       	breq	.+4      	; 0x3ce <main+0x10a>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <main+0x10c>
     3ce:	80 e0       	ldi	r24, 0x00	; 0

		/* craft one ASCII line */
		snprintf(line, sizeof(line),
     3d0:	1f 92       	push	r1
     3d2:	8f 93       	push	r24
     3d4:	6f 92       	push	r6
     3d6:	7f 92       	push	r7
     3d8:	8f 92       	push	r8
     3da:	9f 92       	push	r9
     3dc:	af 92       	push	r10
     3de:	bf 92       	push	r11
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	87 e0       	ldi	r24, 0x07	; 7
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	9f 93       	push	r25
     3f2:	8f 93       	push	r24
     3f4:	1f 92       	push	r1
     3f6:	80 e4       	ldi	r24, 0x40	; 64
     3f8:	8f 93       	push	r24
     3fa:	8e 01       	movw	r16, r28
     3fc:	0f 5f       	subi	r16, 0xFF	; 255
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
     400:	1f 93       	push	r17
     402:	0f 93       	push	r16
     404:	0e 94 b3 0c 	call	0x1966	; 0x1966 <snprintf>
		"H:%6.1f R:%6.1f P:%6.1f CAL:%u\r\n", h, r, p, cal_ok);

		usb_send_ram(line);
     408:	c8 01       	movw	r24, r16
     40a:	0e 94 55 01 	call	0x2aa	; 0x2aa <usb_send_ram>
		m_usb_tx_push();                 /* flush buffer immediately      */
     40e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <m_usb_tx_push>
     412:	2f ef       	ldi	r18, 0xFF	; 255
     414:	39 ef       	ldi	r19, 0xF9	; 249
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	21 50       	subi	r18, 0x01	; 1
     41a:	30 40       	sbci	r19, 0x00	; 0
     41c:	80 40       	sbci	r24, 0x00	; 0
     41e:	e1 f7       	brne	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     422:	00 00       	nop

		_delay_ms(20);                   /* 50 Hz output                  */
	}
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	82 cf       	rjmp	.-252    	; 0x334 <main+0x70>

00000430 <twi_start>:
    }
}

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
     430:	94 ea       	ldi	r25, 0xA4	; 164
     432:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/* ???????????????????????????  INTERNAL UTILITIES ?????????????????????????? */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     436:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     43a:	99 23       	and	r25, r25
     43c:	e4 f7       	brge	.-8      	; 0x436 <twi_start+0x6>

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
     43e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     442:	98 7f       	andi	r25, 0xF8	; 248
    if (st != 0x08 && st != 0x10)
     444:	98 30       	cpi	r25, 0x08	; 8
     446:	11 f0       	breq	.+4      	; 0x44c <twi_start+0x1c>
     448:	90 31       	cpi	r25, 0x10	; 16
     44a:	c1 f4       	brne	.+48     	; 0x47c <twi_start+0x4c>
        return false; /* START / REP START */

    /* load SLA+R/W */
    TWDR = addr_rw;
     44c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = TW_INT_FLAG | TW_ENABLE;
     450:	84 e8       	ldi	r24, 0x84	; 132
     452:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/* ???????????????????????????  INTERNAL UTILITIES ?????????????????????????? */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     456:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     45a:	88 23       	and	r24, r24
     45c:	e4 f7       	brge	.-8      	; 0x456 <twi_start+0x26>

    /* load SLA+R/W */
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
     45e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     462:	88 7f       	andi	r24, 0xF8	; 248
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
     464:	88 31       	cpi	r24, 0x18	; 24
     466:	21 f0       	breq	.+8      	; 0x470 <twi_start+0x40>
     468:	80 34       	cpi	r24, 0x40	; 64
     46a:	21 f4       	brne	.+8      	; 0x474 <twi_start+0x44>
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	03 c0       	rjmp	.+6      	; 0x476 <twi_start+0x46>
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	01 c0       	rjmp	.+2      	; 0x476 <twi_start+0x46>
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	89 2f       	mov	r24, r25
     478:	81 70       	andi	r24, 0x01	; 1
     47a:	08 95       	ret
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
    if (st != 0x08 && st != 0x10)
        return false; /* START / REP START */
     47c:	80 e0       	ldi	r24, 0x00	; 0
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
}
     47e:	08 95       	ret

00000480 <twi_stop>:

static void twi_stop(void)
{
    TWCR = TW_INT_FLAG | TW_STOP | TW_ENABLE;
     480:	84 e9       	ldi	r24, 0x94	; 148
     482:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     486:	08 95       	ret

00000488 <twi_init>:

/* ???????????????????????????  PUBLIC TWI ROUTINES ????????????????????????? */
void twi_init(void)
{
    /* prescaler bits (TWPS1:0) = 0 ? prescaler = 1 */
    TWSR &= ~((1u << TWPS0) | (1u << TWPS1));
     488:	e9 eb       	ldi	r30, 0xB9	; 185
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	8c 7f       	andi	r24, 0xFC	; 252
     490:	80 83       	st	Z, r24

    /* choose TWBR such that SCL ? TWI_SCL_HZ                   *
     * TWBR = (F_CPU / SCL - 16) / (2ï¿½4^TWPS)                  */
    TWBR = (uint8_t)((F_CPU / TWI_SCL_HZ - 16UL) / 2UL);
     492:	8c e0       	ldi	r24, 0x0C	; 12
     494:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

    TWCR = TW_ENABLE; /* enable module, no interrupt yet */
     498:	84 e0       	ldi	r24, 0x04	; 4
     49a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     49e:	08 95       	ret

000004a0 <twi_write>:
}

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	eb 01       	movw	r28, r22
     4aa:	14 2f       	mov	r17, r20
    if (!twi_start((sla << 1) | 0))
     4ac:	88 0f       	add	r24, r24
     4ae:	0e 94 18 02 	call	0x430	; 0x430 <twi_start>
     4b2:	08 2f       	mov	r16, r24
     4b4:	81 11       	cpse	r24, r1
     4b6:	19 c0       	rjmp	.+50     	; 0x4ea <twi_write+0x4a>
     4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <twi_write+0x54>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
     4ba:	fe 01       	movw	r30, r28
     4bc:	e9 0f       	add	r30, r25
     4be:	f1 1d       	adc	r31, r1
     4c0:	80 81       	ld	r24, Z
     4c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        TWCR = TW_INT_FLAG | TW_ENABLE;
     4c6:	84 e8       	ldi	r24, 0x84	; 132
     4c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/* ???????????????????????????  INTERNAL UTILITIES ?????????????????????????? */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     4cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4d0:	88 23       	and	r24, r24
     4d2:	e4 f7       	brge	.-8      	; 0x4cc <twi_write+0x2c>
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
        TWCR = TW_INT_FLAG | TW_ENABLE;
        twi_wait();
        if (TW_STATUS != 0x28)
     4d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4d8:	88 7f       	andi	r24, 0xF8	; 248
     4da:	88 32       	cpi	r24, 0x28	; 40
     4dc:	21 f0       	breq	.+8      	; 0x4e6 <twi_write+0x46>
        {
            twi_stop();
     4de:	0e 94 40 02 	call	0x480	; 0x480 <twi_stop>
            return false;
     4e2:	00 e0       	ldi	r16, 0x00	; 0
     4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <twi_write+0x54>

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 0))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     4e6:	9f 5f       	subi	r25, 0xFF	; 255
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <twi_write+0x4c>
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	91 17       	cp	r25, r17
     4ee:	28 f3       	brcs	.-54     	; 0x4ba <twi_write+0x1a>
        {
            twi_stop();
            return false;
        } /* data ACK */
    }
    twi_stop();
     4f0:	0e 94 40 02 	call	0x480	; 0x480 <twi_stop>
    return true;
}
     4f4:	80 2f       	mov	r24, r16
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16
     4fe:	08 95       	ret

00000500 <twi_read>:

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	8b 01       	movw	r16, r22
     50a:	c4 2f       	mov	r28, r20
    if (!twi_start((sla << 1) | 1))
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	81 60       	ori	r24, 0x01	; 1
     514:	0e 94 18 02 	call	0x430	; 0x430 <twi_start>
     518:	d8 2f       	mov	r29, r24
     51a:	81 11       	cpse	r24, r1
     51c:	2f c0       	rjmp	.+94     	; 0x57c <twi_read+0x7c>
     51e:	33 c0       	rjmp	.+102    	; 0x586 <twi_read+0x86>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
     520:	49 2f       	mov	r20, r25
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	2c 2f       	mov	r18, r28
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	21 50       	subi	r18, 0x01	; 1
     52a:	31 09       	sbc	r19, r1
     52c:	42 17       	cp	r20, r18
     52e:	53 07       	cpc	r21, r19
     530:	11 f4       	brne	.+4      	; 0x536 <twi_read+0x36>
     532:	84 e8       	ldi	r24, 0x84	; 132
     534:	01 c0       	rjmp	.+2      	; 0x538 <twi_read+0x38>
     536:	84 ec       	ldi	r24, 0xC4	; 196
     538:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/* ???????????????????????????  INTERNAL UTILITIES ?????????????????????????? */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     53c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     540:	88 23       	and	r24, r24
     542:	e4 f7       	brge	.-8      	; 0x53c <twi_read+0x3c>
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
        twi_wait();
        if ((i < len - 1 && TW_STATUS != 0x50) || /* data with ACK */
     544:	42 17       	cp	r20, r18
     546:	53 07       	cpc	r21, r19
     548:	2c f4       	brge	.+10     	; 0x554 <twi_read+0x54>
     54a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     54e:	88 7f       	andi	r24, 0xF8	; 248
     550:	80 35       	cpi	r24, 0x50	; 80
     552:	41 f4       	brne	.+16     	; 0x564 <twi_read+0x64>
     554:	42 17       	cp	r20, r18
     556:	53 07       	cpc	r21, r19
     558:	49 f4       	brne	.+18     	; 0x56c <twi_read+0x6c>
            (i == len - 1 && TW_STATUS != 0x58))  /* data with NACK */
     55a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     55e:	88 7f       	andi	r24, 0xF8	; 248
     560:	88 35       	cpi	r24, 0x58	; 88
     562:	21 f0       	breq	.+8      	; 0x56c <twi_read+0x6c>
        {
            twi_stop();
     564:	0e 94 40 02 	call	0x480	; 0x480 <twi_stop>
            return false;
     568:	d0 e0       	ldi	r29, 0x00	; 0
     56a:	0d c0       	rjmp	.+26     	; 0x586 <twi_read+0x86>
        }
        buf[i] = TWDR;
     56c:	f8 01       	movw	r30, r16
     56e:	e9 0f       	add	r30, r25
     570:	f1 1d       	adc	r31, r1
     572:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     576:	80 83       	st	Z, r24

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 1))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     578:	9f 5f       	subi	r25, 0xFF	; 255
     57a:	01 c0       	rjmp	.+2      	; 0x57e <twi_read+0x7e>
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	9c 17       	cp	r25, r28
     580:	78 f2       	brcs	.-98     	; 0x520 <twi_read+0x20>
            twi_stop();
            return false;
        }
        buf[i] = TWDR;
    }
    twi_stop();
     582:	0e 94 40 02 	call	0x480	; 0x480 <twi_stop>
    return true;
}
     586:	8d 2f       	mov	r24, r29
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <bno055_write8>:

/* ???????????????????????????  BNO055 BASIC ACCESS ????????????????????????? */
bool bno055_write8(uint8_t reg, uint8_t val)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	00 d0       	rcall	.+0      	; 0x598 <bno055_write8+0x6>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
    uint8_t pkt[2] = {reg, val};
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	6a 83       	std	Y+2, r22	; 0x02
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
     5a0:	42 e0       	ldi	r20, 0x02	; 2
     5a2:	be 01       	movw	r22, r28
     5a4:	6f 5f       	subi	r22, 0xFF	; 255
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	88 e2       	ldi	r24, 0x28	; 40
     5aa:	0e 94 50 02 	call	0x4a0	; 0x4a0 <twi_write>
}
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <bno055_set_mode>:
}

/* ???????????????????????????  HIGH-LEVEL HELPERS ?????????????????????????? */
static bool bno055_set_mode(uint8_t mode)
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
     5b8:	68 2f       	mov	r22, r24
     5ba:	8d e3       	ldi	r24, 0x3D	; 61
     5bc:	0e 94 c9 02 	call	0x592	; 0x592 <bno055_write8>
}
     5c0:	08 95       	ret

000005c2 <bno055_read8>:
    uint8_t pkt[2] = {reg, val};
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
}

bool bno055_read8(uint8_t reg, uint8_t *val)
{
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	1f 92       	push	r1
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	89 83       	std	Y+1, r24	; 0x01
     5d2:	8b 01       	movw	r16, r22
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     5d4:	41 e0       	ldi	r20, 0x01	; 1
     5d6:	be 01       	movw	r22, r28
     5d8:	6f 5f       	subi	r22, 0xFF	; 255
     5da:	7f 4f       	sbci	r23, 0xFF	; 255
     5dc:	88 e2       	ldi	r24, 0x28	; 40
     5de:	0e 94 50 02 	call	0x4a0	; 0x4a0 <twi_write>
     5e2:	88 23       	and	r24, r24
     5e4:	29 f0       	breq	.+10     	; 0x5f0 <bno055_read8+0x2e>
        return false;
    return twi_read(BNO055_I2C_ADDR, val, 1);
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	b8 01       	movw	r22, r16
     5ea:	88 e2       	ldi	r24, 0x28	; 40
     5ec:	0e 94 80 02 	call	0x500	; 0x500 <twi_read>
}
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	08 95       	ret

000005fc <bno055_read>:

bool bno055_read(uint8_t reg, uint8_t *buf, uint8_t len)
{
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	1f 92       	push	r1
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	8b 01       	movw	r16, r22
     610:	f4 2e       	mov	r15, r20
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	88 e2       	ldi	r24, 0x28	; 40
     61c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <twi_write>
     620:	88 23       	and	r24, r24
     622:	29 f0       	breq	.+10     	; 0x62e <bno055_read+0x32>
        return false;
    return twi_read(BNO055_I2C_ADDR, buf, len);
     624:	4f 2d       	mov	r20, r15
     626:	b8 01       	movw	r22, r16
     628:	88 e2       	ldi	r24, 0x28	; 40
     62a:	0e 94 80 02 	call	0x500	; 0x500 <twi_read>
}
     62e:	0f 90       	pop	r0
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	ff 90       	pop	r15
     63a:	08 95       	ret

0000063c <bno055_init>:
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
}

bool bno055_init(void)
{
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	1f 92       	push	r1
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
    twi_init();
     648:	0e 94 44 02 	call	0x488	; 0x488 <twi_init>

    /* Ensure sensor is present */
    uint8_t id = 0;
     64c:	19 82       	std	Y+1, r1	; 0x01
    if (!bno055_read8(0x00, &id) || id != 0xA0)
     64e:	be 01       	movw	r22, r28
     650:	6f 5f       	subi	r22, 0xFF	; 255
     652:	7f 4f       	sbci	r23, 0xFF	; 255
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <bno055_read8>
     65a:	18 2f       	mov	r17, r24
     65c:	88 23       	and	r24, r24
     65e:	51 f1       	breq	.+84     	; 0x6b4 <bno055_init+0x78>
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	80 3a       	cpi	r24, 0xA0	; 160
     664:	31 f5       	brne	.+76     	; 0x6b2 <bno055_init+0x76>
        return false; /* CHIP_ID */

    /* Switch to CONFIG, reset, then NDOF */
    bno055_set_mode(0x00); /* CONFIG      */
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <bno055_set_mode>
     66c:	2f e7       	ldi	r18, 0x7F	; 127
     66e:	88 e3       	ldi	r24, 0x38	; 56
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	21 50       	subi	r18, 0x01	; 1
     674:	80 40       	sbci	r24, 0x00	; 0
     676:	90 40       	sbci	r25, 0x00	; 0
     678:	e1 f7       	brne	.-8      	; 0x672 <bno055_init+0x36>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <bno055_init+0x40>
     67c:	00 00       	nop
    _delay_ms(25);

    bno055_write8(0x3F, 0x20); /* SYS_TRIGGER, reset */
     67e:	60 e2       	ldi	r22, 0x20	; 32
     680:	8f e3       	ldi	r24, 0x3F	; 63
     682:	0e 94 c9 02 	call	0x592	; 0x592 <bno055_write8>
     686:	2f ef       	ldi	r18, 0xFF	; 255
     688:	8c eb       	ldi	r24, 0xBC	; 188
     68a:	9f e1       	ldi	r25, 0x1F	; 31
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	80 40       	sbci	r24, 0x00	; 0
     690:	90 40       	sbci	r25, 0x00	; 0
     692:	e1 f7       	brne	.-8      	; 0x68c <bno055_init+0x50>
     694:	00 c0       	rjmp	.+0      	; 0x696 <bno055_init+0x5a>
     696:	00 00       	nop
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
     698:	8c e0       	ldi	r24, 0x0C	; 12
     69a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <bno055_set_mode>
     69e:	2f ef       	ldi	r18, 0xFF	; 255
     6a0:	89 ef       	ldi	r24, 0xF9	; 249
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	21 50       	subi	r18, 0x01	; 1
     6a6:	80 40       	sbci	r24, 0x00	; 0
     6a8:	90 40       	sbci	r25, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <bno055_init+0x68>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <bno055_init+0x72>
     6ae:	00 00       	nop
    _delay_ms(20);
    return true;
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <bno055_init+0x78>
    twi_init();

    /* Ensure sensor is present */
    uint8_t id = 0;
    if (!bno055_read8(0x00, &id) || id != 0xA0)
        return false; /* CHIP_ID */
     6b2:	10 e0       	ldi	r17, 0x00	; 0
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
    _delay_ms(20);
    return true;
}
     6b4:	81 2f       	mov	r24, r17
     6b6:	0f 90       	pop	r0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	08 95       	ret

000006c0 <bno055_get_euler>:

void bno055_get_euler(int16_t *h, int16_t *r, int16_t *p)
{
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <bno055_get_euler+0x12>
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <bno055_get_euler+0x14>
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <bno055_get_euler+0x16>
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	6c 01       	movw	r12, r24
     6dc:	7b 01       	movw	r14, r22
     6de:	8a 01       	movw	r16, r20
    uint8_t buf[6];
    if (bno055_read(0x1A, buf, 6))
     6e0:	46 e0       	ldi	r20, 0x06	; 6
     6e2:	be 01       	movw	r22, r28
     6e4:	6f 5f       	subi	r22, 0xFF	; 255
     6e6:	7f 4f       	sbci	r23, 0xFF	; 255
     6e8:	8a e1       	ldi	r24, 0x1A	; 26
     6ea:	0e 94 fe 02 	call	0x5fc	; 0x5fc <bno055_read>
     6ee:	88 23       	and	r24, r24
     6f0:	d9 f0       	breq	.+54     	; 0x728 <bno055_get_euler+0x68>
    { /* EULER_H_LSB */
        *h = (int16_t)(buf[0] | ((uint16_t)buf[1] << 8));
     6f2:	29 81       	ldd	r18, Y+1	; 0x01
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	98 2f       	mov	r25, r24
     6fa:	88 27       	eor	r24, r24
     6fc:	82 2b       	or	r24, r18
     6fe:	f6 01       	movw	r30, r12
     700:	91 83       	std	Z+1, r25	; 0x01
     702:	80 83       	st	Z, r24
        *r = (int16_t)(buf[2] | ((uint16_t)buf[3] << 8));
     704:	2b 81       	ldd	r18, Y+3	; 0x03
     706:	8c 81       	ldd	r24, Y+4	; 0x04
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	98 2f       	mov	r25, r24
     70c:	88 27       	eor	r24, r24
     70e:	82 2b       	or	r24, r18
     710:	f7 01       	movw	r30, r14
     712:	91 83       	std	Z+1, r25	; 0x01
     714:	80 83       	st	Z, r24
        *p = (int16_t)(buf[4] | ((uint16_t)buf[5] << 8));
     716:	2d 81       	ldd	r18, Y+5	; 0x05
     718:	8e 81       	ldd	r24, Y+6	; 0x06
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	98 2f       	mov	r25, r24
     71e:	88 27       	eor	r24, r24
     720:	82 2b       	or	r24, r18
     722:	f8 01       	movw	r30, r16
     724:	91 83       	std	Z+1, r25	; 0x01
     726:	80 83       	st	Z, r24
    }
}
     728:	26 96       	adiw	r28, 0x06	; 6
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	08 95       	ret

00000746 <bno055_is_fully_calibrated>:

bool bno055_is_fully_calibrated(void)
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	1f 92       	push	r1
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
    uint8_t cal;
    if (!bno055_read8(0x35, &cal))
     750:	be 01       	movw	r22, r28
     752:	6f 5f       	subi	r22, 0xFF	; 255
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	85 e3       	ldi	r24, 0x35	; 53
     758:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <bno055_read8>
     75c:	88 23       	and	r24, r24
     75e:	49 f0       	breq	.+18     	; 0x772 <bno055_is_fully_calibrated+0x2c>
        return false;                /* CALIB_STAT */
    return ((cal >> 6) & 0x03) == 3; /* SYS == 3   */
     760:	99 81       	ldd	r25, Y+1	; 0x01
     762:	92 95       	swap	r25
     764:	96 95       	lsr	r25
     766:	96 95       	lsr	r25
     768:	93 70       	andi	r25, 0x03	; 3
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	93 30       	cpi	r25, 0x03	; 3
     76e:	09 f0       	breq	.+2      	; 0x772 <bno055_is_fully_calibrated+0x2c>
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <motors_init>:
		RIGHT_PUL_PORT |= _BV(RIGHT_PUL_BIT);
		_delay_us(5);
		RIGHT_PUL_PORT &= ~_BV(RIGHT_PUL_BIT);
		_delay_us(5);
	}
}
     77a:	84 b1       	in	r24, 0x04	; 4
     77c:	80 68       	ori	r24, 0x80	; 128
     77e:	84 b9       	out	0x04, r24	; 4
     780:	8a b1       	in	r24, 0x0a	; 10
     782:	80 64       	ori	r24, 0x40	; 64
     784:	8a b9       	out	0x0a, r24	; 10
     786:	87 b1       	in	r24, 0x07	; 7
     788:	80 64       	ori	r24, 0x40	; 64
     78a:	87 b9       	out	0x07, r24	; 7
     78c:	84 b1       	in	r24, 0x04	; 4
     78e:	80 62       	ori	r24, 0x20	; 32
     790:	84 b9       	out	0x04, r24	; 4
     792:	84 b1       	in	r24, 0x04	; 4
     794:	80 61       	ori	r24, 0x10	; 16
     796:	84 b9       	out	0x04, r24	; 4
     798:	80 b3       	in	r24, 0x10	; 16
     79a:	80 68       	ori	r24, 0x80	; 128
     79c:	80 bb       	out	0x10, r24	; 16
     79e:	85 b1       	in	r24, 0x05	; 5
     7a0:	80 68       	ori	r24, 0x80	; 128
     7a2:	85 b9       	out	0x05, r24	; 5
     7a4:	8b b1       	in	r24, 0x0b	; 11
     7a6:	80 64       	ori	r24, 0x40	; 64
     7a8:	8b b9       	out	0x0b, r24	; 11
     7aa:	88 b1       	in	r24, 0x08	; 8
     7ac:	8f 7b       	andi	r24, 0xBF	; 191
     7ae:	88 b9       	out	0x08, r24	; 8
     7b0:	85 b1       	in	r24, 0x05	; 5
     7b2:	80 62       	ori	r24, 0x20	; 32
     7b4:	85 b9       	out	0x05, r24	; 5
     7b6:	85 b1       	in	r24, 0x05	; 5
     7b8:	80 61       	ori	r24, 0x10	; 16
     7ba:	85 b9       	out	0x05, r24	; 5
     7bc:	81 b3       	in	r24, 0x11	; 17
     7be:	8f 77       	andi	r24, 0x7F	; 127
     7c0:	81 bb       	out	0x11, r24	; 17
     7c2:	82 e4       	ldi	r24, 0x42	; 66
     7c4:	84 bd       	out	0x24, r24	; 36
     7c6:	15 bc       	out	0x25, r1	; 37
     7c8:	17 bc       	out	0x27, r1	; 39
     7ca:	80 e4       	ldi	r24, 0x40	; 64
     7cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     7d6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     7da:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     7de:	08 95       	ret

000007e0 <motors_enable_left>:
     7e0:	88 23       	and	r24, r24
     7e2:	21 f0       	breq	.+8      	; 0x7ec <motors_enable_left+0xc>
     7e4:	88 b1       	in	r24, 0x08	; 8
     7e6:	80 64       	ori	r24, 0x40	; 64
     7e8:	88 b9       	out	0x08, r24	; 8
     7ea:	08 95       	ret
     7ec:	88 b1       	in	r24, 0x08	; 8
     7ee:	8f 7b       	andi	r24, 0xBF	; 191
     7f0:	88 b9       	out	0x08, r24	; 8
     7f2:	08 95       	ret

000007f4 <motors_enable_right>:
     7f4:	88 23       	and	r24, r24
     7f6:	21 f0       	breq	.+8      	; 0x800 <motors_enable_right+0xc>
     7f8:	81 b3       	in	r24, 0x11	; 17
     7fa:	80 68       	ori	r24, 0x80	; 128
     7fc:	81 bb       	out	0x11, r24	; 17
     7fe:	08 95       	ret
     800:	81 b3       	in	r24, 0x11	; 17
     802:	8f 77       	andi	r24, 0x7F	; 127
     804:	81 bb       	out	0x11, r24	; 17
     806:	08 95       	ret

00000808 <motors_enable_all>:
     808:	cf 93       	push	r28
     80a:	c8 2f       	mov	r28, r24
     80c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <motors_enable_left>
     810:	8c 2f       	mov	r24, r28
     812:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <motors_enable_right>
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <motors_set_speed_left>:
     81a:	9c 01       	movw	r18, r24
     81c:	a8 ec       	ldi	r26, 0xC8	; 200
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	0e 94 43 0b 	call	0x1686	; 0x1686 <__umulhisi3>
     824:	2c e3       	ldi	r18, 0x3C	; 60
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	0e 94 21 0b 	call	0x1642	; 0x1642 <__udivmodsi4>
     830:	01 2e       	mov	r0, r17
     832:	1b e0       	ldi	r17, 0x0B	; 11
     834:	22 0f       	add	r18, r18
     836:	33 1f       	adc	r19, r19
     838:	44 1f       	adc	r20, r20
     83a:	55 1f       	adc	r21, r21
     83c:	1a 95       	dec	r17
     83e:	d1 f7       	brne	.-12     	; 0x834 <motors_set_speed_left+0x1a>
     840:	10 2d       	mov	r17, r0
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	74 e2       	ldi	r23, 0x24	; 36
     846:	84 ef       	ldi	r24, 0xF4	; 244
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 21 0b 	call	0x1642	; 0x1642 <__udivmodsi4>
     84e:	da 01       	movw	r26, r20
     850:	c9 01       	movw	r24, r18
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	a1 09       	sbc	r26, r1
     856:	b1 09       	sbc	r27, r1
     858:	8f 3f       	cpi	r24, 0xFF	; 255
     85a:	91 05       	cpc	r25, r1
     85c:	a1 05       	cpc	r26, r1
     85e:	b1 05       	cpc	r27, r1
     860:	29 f0       	breq	.+10     	; 0x86c <motors_set_speed_left+0x52>
     862:	20 f0       	brcs	.+8      	; 0x86c <motors_set_speed_left+0x52>
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	87 bd       	out	0x27, r24	; 39
     86e:	85 e0       	ldi	r24, 0x05	; 5
     870:	85 bd       	out	0x25, r24	; 37
     872:	08 95       	ret

00000874 <motors_set_speed_right>:
     874:	9c 01       	movw	r18, r24
     876:	a8 ec       	ldi	r26, 0xC8	; 200
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	0e 94 43 0b 	call	0x1686	; 0x1686 <__umulhisi3>
     87e:	2c e3       	ldi	r18, 0x3C	; 60
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	0e 94 21 0b 	call	0x1642	; 0x1642 <__udivmodsi4>
     88a:	01 2e       	mov	r0, r17
     88c:	1b e0       	ldi	r17, 0x0B	; 11
     88e:	22 0f       	add	r18, r18
     890:	33 1f       	adc	r19, r19
     892:	44 1f       	adc	r20, r20
     894:	55 1f       	adc	r21, r21
     896:	1a 95       	dec	r17
     898:	d1 f7       	brne	.-12     	; 0x88e <motors_set_speed_right+0x1a>
     89a:	10 2d       	mov	r17, r0
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	74 e2       	ldi	r23, 0x24	; 36
     8a0:	84 ef       	ldi	r24, 0xF4	; 244
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 21 0b 	call	0x1642	; 0x1642 <__udivmodsi4>
     8a8:	da 01       	movw	r26, r20
     8aa:	c9 01       	movw	r24, r18
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	a1 09       	sbc	r26, r1
     8b0:	b1 09       	sbc	r27, r1
     8b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     8b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     8ba:	e1 e8       	ldi	r30, 0x81	; 129
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	88 7f       	andi	r24, 0xF8	; 248
     8c2:	80 83       	st	Z, r24
     8c4:	80 81       	ld	r24, Z
     8c6:	85 60       	ori	r24, 0x05	; 5
     8c8:	80 83       	st	Z, r24
     8ca:	08 95       	ret

000008cc <motors_stop_all>:

void motors_stop_all(void)
{
	/* disable drivers */
	motors_enable_all(false);
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 04 04 	call	0x808	; 0x808 <motors_enable_all>

	/* stop timers ï¿½ clear prescaler bits */
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00));
     8d2:	85 b5       	in	r24, 0x25	; 37
     8d4:	88 7f       	andi	r24, 0xF8	; 248
     8d6:	85 bd       	out	0x25, r24	; 37
	TCCR1B &= ~(_BV(CS12) | _BV(CS11) | _BV(CS10));
     8d8:	e1 e8       	ldi	r30, 0x81	; 129
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	88 7f       	andi	r24, 0xF8	; 248
     8e0:	80 83       	st	Z, r24
     8e2:	08 95       	ret

000008e4 <m_usb_init>:
	UEDATX = signals;
	UEDATX = 0;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     8ea:	80 ea       	ldi	r24, 0xA0	; 160
     8ec:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     8f0:	82 e1       	ldi	r24, 0x12	; 18
     8f2:	89 bd       	out	0x29, r24	; 41
     8f4:	09 b4       	in	r0, 0x29	; 41
     8f6:	00 fe       	sbrs	r0, 0
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <m_usb_init+0x10>
     8fa:	80 e9       	ldi	r24, 0x90	; 144
     8fc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     900:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     904:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <usb_configuration>
     908:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
     90c:	8c e0       	ldi	r24, 0x0C	; 12
     90e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     912:	78 94       	sei
     914:	08 95       	ret

00000916 <m_usb_isconnected>:
     916:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <usb_configuration>
     91a:	08 95       	ret

0000091c <m_usb_tx_char>:
     91c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <usb_configuration>
     920:	99 23       	and	r25, r25
     922:	e1 f1       	breq	.+120    	; 0x99c <m_usb_tx_char+0x80>
     924:	9f b7       	in	r25, 0x3f	; 63
     926:	f8 94       	cli
     928:	24 e0       	ldi	r18, 0x04	; 4
     92a:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     92e:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <transmit_previous_timeout>
     932:	22 23       	and	r18, r18
     934:	49 f0       	breq	.+18     	; 0x948 <m_usb_tx_char+0x2c>
     936:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     93a:	25 fd       	sbrc	r18, 5
     93c:	03 c0       	rjmp	.+6      	; 0x944 <m_usb_tx_char+0x28>
     93e:	9f bf       	out	0x3f, r25	; 63
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	08 95       	ret
     944:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <transmit_previous_timeout>
     948:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     94c:	37 5e       	subi	r19, 0xE7	; 231
     94e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     952:	25 fd       	sbrc	r18, 5
     954:	14 c0       	rjmp	.+40     	; 0x97e <m_usb_tx_char+0x62>
     956:	9f bf       	out	0x3f, r25	; 63
     958:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     95c:	39 13       	cpse	r19, r25
     95e:	05 c0       	rjmp	.+10     	; 0x96a <m_usb_tx_char+0x4e>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <transmit_previous_timeout>
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	08 95       	ret
     96a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <usb_configuration>
     96e:	99 23       	and	r25, r25
     970:	b9 f0       	breq	.+46     	; 0x9a0 <m_usb_tx_char+0x84>
     972:	9f b7       	in	r25, 0x3f	; 63
     974:	f8 94       	cli
     976:	24 e0       	ldi	r18, 0x04	; 4
     978:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     97c:	e8 cf       	rjmp	.-48     	; 0x94e <m_usb_tx_char+0x32>
     97e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     982:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     986:	85 fd       	sbrc	r24, 5
     988:	03 c0       	rjmp	.+6      	; 0x990 <m_usb_tx_char+0x74>
     98a:	8a e3       	ldi	r24, 0x3A	; 58
     98c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     990:	85 e0       	ldi	r24, 0x05	; 5
     992:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <transmit_flush_timer>
     996:	9f bf       	out	0x3f, r25	; 63
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	08 95       	ret
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	08 95       	ret
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	08 95       	ret

000009a4 <m_usb_tx_push>:
     9a4:	8f b7       	in	r24, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <transmit_flush_timer>
     9ac:	99 23       	and	r25, r25
     9ae:	41 f0       	breq	.+16     	; 0x9c0 <m_usb_tx_push+0x1c>
     9b0:	94 e0       	ldi	r25, 0x04	; 4
     9b2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     9b6:	9a e3       	ldi	r25, 0x3A	; 58
     9b8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     9bc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <transmit_flush_timer>
     9c0:	8f bf       	out	0x3f, r24	; 63
     9c2:	08 95       	ret

000009c4 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	8f 93       	push	r24
     9d0:	9f 93       	push	r25
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
	uint8_t intbits, t;

	intbits = UDINT;
     9d6:	e1 ee       	ldi	r30, 0xE1	; 225
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
	UDINT = 0;
     9dc:	10 82       	st	Z, r1
	if (intbits & (1 << EORSTI))
     9de:	83 ff       	sbrs	r24, 3
     9e0:	11 c0       	rjmp	.+34     	; 0xa04 <__DATA_REGION_LENGTH__+0x4>
	{
		UENUM = 0;
     9e2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
		UECONX = 1;
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		UECFG0X = EP_TYPE_CONTROL;
     9ec:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     9f0:	92 e1       	ldi	r25, 0x12	; 18
     9f2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
		UEIENX = (1 << RXSTPE);
     9f6:	98 e0       	ldi	r25, 0x08	; 8
     9f8:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
		usb_configuration = 0;
     9fc:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <usb_configuration>
		cdc_line_rtsdtr = 0;
     a00:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
	}
	if (intbits & (1 << SOFI))
     a04:	82 ff       	sbrs	r24, 2
     a06:	13 c0       	rjmp	.+38     	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
	{
		if (usb_configuration)
     a08:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <usb_configuration>
     a0c:	88 23       	and	r24, r24
     a0e:	79 f0       	breq	.+30     	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
		{
			t = transmit_flush_timer;
     a10:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <transmit_flush_timer>
			if (t)
     a14:	88 23       	and	r24, r24
     a16:	59 f0       	breq	.+22     	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
			{
				transmit_flush_timer = --t;
     a18:	81 50       	subi	r24, 0x01	; 1
     a1a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <transmit_flush_timer>
				if (!t)
     a1e:	81 11       	cpse	r24, r1
     a20:	06 c0       	rjmp	.+12     	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
				{
					UENUM = CDC_TX_ENDPOINT;
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
					UEINTX = 0x3A;
     a28:	8a e3       	ldi	r24, 0x3A	; 58
     a2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				}
			}
		}
	}
}
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	0f 90       	pop	r0
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	2f 93       	push	r18
     a4c:	3f 93       	push	r19
     a4e:	4f 93       	push	r20
     a50:	5f 93       	push	r21
     a52:	6f 93       	push	r22
     a54:	7f 93       	push	r23
     a56:	8f 93       	push	r24
     a58:	9f 93       	push	r25
     a5a:	af 93       	push	r26
     a5c:	bf 93       	push	r27
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t desc_length;

	UENUM = 0;
     a66:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	intbits = UEINTX;
     a6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	if (intbits & (1 << RXSTPI))
     a6e:	83 ff       	sbrs	r24, 3
     a70:	42 c1       	rjmp	.+644    	; 0xcf6 <__stack+0x1f7>
	{
		bmRequestType = UEDATX;
     a72:	e1 ef       	ldi	r30, 0xF1	; 241
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	b0 81       	ld	r27, Z
		bRequest = UEDATX;
     a78:	a0 81       	ld	r26, Z
		wValue = UEDATX;
     a7a:	20 81       	ld	r18, Z
		wValue |= (UEDATX << 8);
     a7c:	80 81       	ld	r24, Z
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	98 2f       	mov	r25, r24
     a82:	88 27       	eor	r24, r24
     a84:	82 2b       	or	r24, r18
		wIndex = UEDATX;
     a86:	40 81       	ld	r20, Z
		wIndex |= (UEDATX << 8);
     a88:	20 81       	ld	r18, Z
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	32 2f       	mov	r19, r18
     a8e:	22 27       	eor	r18, r18
     a90:	b9 01       	movw	r22, r18
     a92:	64 2b       	or	r22, r20
		wLength = UEDATX;
     a94:	40 81       	ld	r20, Z
		wLength |= (UEDATX << 8);
     a96:	20 81       	ld	r18, Z
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	32 2f       	mov	r19, r18
     a9c:	22 27       	eor	r18, r18
     a9e:	f9 01       	movw	r30, r18
     aa0:	e4 2b       	or	r30, r20
     aa2:	af 01       	movw	r20, r30
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
     aa4:	22 ef       	ldi	r18, 0xF2	; 242
     aa6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		if (bRequest == GET_DESCRIPTOR)
     aaa:	a6 30       	cpi	r26, 0x06	; 6
     aac:	09 f0       	breq	.+2      	; 0xab0 <__vector_11+0x70>
     aae:	51 c0       	rjmp	.+162    	; 0xb52 <__stack+0x53>
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	29 eb       	ldi	r18, 0xB9	; 185
     ab4:	31 e0       	ldi	r19, 0x01	; 1
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
			{
				if (i >= NUM_DESC_LIST)
     ab6:	a6 30       	cpi	r26, 0x06	; 6
     ab8:	20 f0       	brcs	.+8      	; 0xac2 <__vector_11+0x82>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
     aba:	81 e2       	ldi	r24, 0x21	; 33
     abc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					return;
     ac0:	1d c1       	rjmp	.+570    	; 0xcfc <__stack+0x1fd>
				}
				desc_val = pgm_read_word(list);
     ac2:	f9 01       	movw	r30, r18
     ac4:	c5 91       	lpm	r28, Z+
     ac6:	d4 91       	lpm	r29, Z
				if (desc_val != wValue)
     ac8:	8c 17       	cp	r24, r28
     aca:	9d 07       	cpc	r25, r29
     acc:	19 f0       	breq	.+6      	; 0xad4 <__vector_11+0x94>
				{
					list += sizeof(struct descriptor_list_struct);
     ace:	29 5f       	subi	r18, 0xF9	; 249
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
     ad2:	1c c0       	rjmp	.+56     	; 0xb0c <__stack+0xd>
				}
				list += 2;
     ad4:	f9 01       	movw	r30, r18
     ad6:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     ad8:	c5 91       	lpm	r28, Z+
     ada:	d4 91       	lpm	r29, Z
				if (desc_val != wIndex)
     adc:	6c 17       	cp	r22, r28
     ade:	7d 07       	cpc	r23, r29
     ae0:	19 f0       	breq	.+6      	; 0xae8 <__vector_11+0xa8>
				{
					list += sizeof(struct descriptor_list_struct) - 2;
     ae2:	29 5f       	subi	r18, 0xF9	; 249
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
     ae6:	12 c0       	rjmp	.+36     	; 0xb0c <__stack+0xd>
				}
				list += 2;
     ae8:	f9 01       	movw	r30, r18
     aea:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     aec:	85 91       	lpm	r24, Z+
     aee:	94 91       	lpm	r25, Z
				list += 2;
     af0:	f9 01       	movw	r30, r18
     af2:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     af4:	64 91       	lpm	r22, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     af6:	9a 01       	movw	r18, r20
     af8:	4f 3f       	cpi	r20, 0xFF	; 255
     afa:	51 05       	cpc	r21, r1
     afc:	19 f0       	breq	.+6      	; 0xb04 <__stack+0x5>
     afe:	10 f0       	brcs	.+4      	; 0xb04 <__stack+0x5>
     b00:	2f ef       	ldi	r18, 0xFF	; 255
     b02:	30 e0       	ldi	r19, 0x00	; 0
			if (len > desc_length)
     b04:	62 17       	cp	r22, r18
     b06:	20 f0       	brcs	.+8      	; 0xb10 <__stack+0x11>
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     b08:	62 2f       	mov	r22, r18
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <__stack+0x11>
		wLength |= (UEDATX << 8);
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
		if (bRequest == GET_DESCRIPTOR)
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
     b0c:	af 5f       	subi	r26, 0xFF	; 255
				list += 2;
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
     b0e:	d3 cf       	rjmp	.-90     	; 0xab6 <__vector_11+0x76>
			do
			{
				// wait for host ready for IN packet
				do
				{
					i = UEINTX;
     b10:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
     b14:	32 2f       	mov	r19, r18
     b16:	35 70       	andi	r19, 0x05	; 5
     b18:	d9 f3       	breq	.-10     	; 0xb10 <__stack+0x11>
				if (i & (1 << RXOUTI))
     b1a:	22 fd       	sbrc	r18, 2
     b1c:	ef c0       	rjmp	.+478    	; 0xcfc <__stack+0x1fd>
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     b1e:	36 2f       	mov	r19, r22
     b20:	61 31       	cpi	r22, 0x11	; 17
     b22:	08 f0       	brcs	.+2      	; 0xb26 <__stack+0x27>
     b24:	30 e1       	ldi	r19, 0x10	; 16
				for (i = n; i; i--)
     b26:	23 2f       	mov	r18, r19
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__stack+0x3d>
				{
					UEDATX = pgm_read_byte(desc_addr++);
     b2a:	ac 01       	movw	r20, r24
     b2c:	4f 5f       	subi	r20, 0xFF	; 255
     b2e:	5f 4f       	sbci	r21, 0xFF	; 255
     b30:	fc 01       	movw	r30, r24
     b32:	84 91       	lpm	r24, Z
     b34:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
     b38:	21 50       	subi	r18, 0x01	; 1
				{
					UEDATX = pgm_read_byte(desc_addr++);
     b3a:	ca 01       	movw	r24, r20
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
     b3c:	21 11       	cpse	r18, r1
     b3e:	f5 cf       	rjmp	.-22     	; 0xb2a <__stack+0x2b>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     b40:	63 1b       	sub	r22, r19
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
     b42:	2e ef       	ldi	r18, 0xFE	; 254
     b44:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     b48:	61 11       	cpse	r22, r1
     b4a:	e2 cf       	rjmp	.-60     	; 0xb10 <__stack+0x11>
     b4c:	30 31       	cpi	r19, 0x10	; 16
     b4e:	01 f3       	breq	.-64     	; 0xb10 <__stack+0x11>
     b50:	d5 c0       	rjmp	.+426    	; 0xcfc <__stack+0x1fd>
			return;
		}
		if (bRequest == SET_ADDRESS)
     b52:	a5 30       	cpi	r26, 0x05	; 5
     b54:	59 f4       	brne	.+22     	; 0xb6c <__stack+0x6d>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
     b56:	2e ef       	ldi	r18, 0xFE	; 254
     b58:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
     b5c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b60:	20 ff       	sbrs	r18, 0
     b62:	fc cf       	rjmp	.-8      	; 0xb5c <__stack+0x5d>
		}
		if (bRequest == SET_ADDRESS)
		{
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1 << ADDEN);
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
			return;
     b6a:	c8 c0       	rjmp	.+400    	; 0xcfc <__stack+0x1fd>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0)
     b6c:	a9 30       	cpi	r26, 0x09	; 9
     b6e:	79 f5       	brne	.+94     	; 0xbce <__stack+0xcf>
     b70:	b1 11       	cpse	r27, r1
     b72:	2d c0       	rjmp	.+90     	; 0xbce <__stack+0xcf>
		{
			usb_configuration = wValue;
     b74:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <usb_configuration>
			cdc_line_rtsdtr = 0;
     b78:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
			transmit_flush_timer = 0;
     b7c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <transmit_flush_timer>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
     b80:	8e ef       	ldi	r24, 0xFE	; 254
     b82:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
     b86:	81 e0       	ldi	r24, 0x01	; 1
		{
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     b88:	22 e6       	ldi	r18, 0x62	; 98
     b8a:	32 e0       	ldi	r19, 0x02	; 2
			for (i = 1; i < 5; i++)
     b8c:	18 c0       	rjmp	.+48     	; 0xbbe <__stack+0xbf>
			{
				UENUM = i;
     b8e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				en = pgm_read_byte(cfg++);
     b92:	a9 01       	movw	r20, r18
     b94:	4f 5f       	subi	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	f9 01       	movw	r30, r18
     b9a:	94 91       	lpm	r25, Z
				UECONX = en;
     b9c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				if (en)
     ba0:	99 23       	and	r25, r25
     ba2:	59 f0       	breq	.+22     	; 0xbba <__stack+0xbb>
				{
					UECFG0X = pgm_read_byte(cfg++);
     ba4:	fa 01       	movw	r30, r20
     ba6:	44 91       	lpm	r20, Z
     ba8:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
					UECFG1X = pgm_read_byte(cfg++);
     bac:	31 96       	adiw	r30, 0x01	; 1
     bae:	e4 91       	lpm	r30, Z
     bb0:	2d 5f       	subi	r18, 0xFD	; 253
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
     bb4:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <__stack+0xbd>
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
			{
				UENUM = i;
				en = pgm_read_byte(cfg++);
     bba:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	85 30       	cpi	r24, 0x05	; 5
     bc0:	30 f3       	brcs	.-52     	; 0xb8e <__stack+0x8f>
				{
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
			UERST = 0x1E;
     bc2:	ea ee       	ldi	r30, 0xEA	; 234
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	8e e1       	ldi	r24, 0x1E	; 30
     bc8:	80 83       	st	Z, r24
			UERST = 0;
     bca:	10 82       	st	Z, r1
			return;
     bcc:	97 c0       	rjmp	.+302    	; 0xcfc <__stack+0x1fd>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
     bce:	a8 30       	cpi	r26, 0x08	; 8
     bd0:	71 f4       	brne	.+28     	; 0xbee <__stack+0xef>
     bd2:	b0 38       	cpi	r27, 0x80	; 128
     bd4:	61 f4       	brne	.+24     	; 0xbee <__stack+0xef>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
     bd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bda:	80 ff       	sbrs	r24, 0
     bdc:	fc cf       	rjmp	.-8      	; 0xbd6 <__stack+0xd7>
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
		{
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     bde:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <usb_configuration>
     be2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
     be6:	8e ef       	ldi	r24, 0xFE	; 254
     be8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bec:	87 c0       	rjmp	.+270    	; 0xcfc <__stack+0x1fd>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
     bee:	a1 32       	cpi	r26, 0x21	; 33
     bf0:	a9 f4       	brne	.+42     	; 0xc1c <__stack+0x11d>
     bf2:	b1 3a       	cpi	r27, 0xA1	; 161
     bf4:	99 f4       	brne	.+38     	; 0xc1c <__stack+0x11d>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
     bf6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bfa:	80 ff       	sbrs	r24, 0
     bfc:	fc cf       	rjmp	.-8      	; 0xbf6 <__stack+0xf7>
     bfe:	e0 e0       	ldi	r30, 0x00	; 0
     c00:	f1 e0       	ldi	r31, 0x01	; 1
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <__stack+0x111>
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				UEDATX = *p++;
     c06:	90 81       	ld	r25, Z
     c08:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
			{
				UEDATX = *p++;
     c0e:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
     c10:	87 30       	cpi	r24, 0x07	; 7
     c12:	c8 f3       	brcs	.-14     	; 0xc06 <__stack+0x107>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
     c14:	8e ef       	ldi	r24, 0xFE	; 254
     c16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c1a:	70 c0       	rjmp	.+224    	; 0xcfc <__stack+0x1fd>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
     c1c:	a0 32       	cpi	r26, 0x20	; 32
     c1e:	c1 f4       	brne	.+48     	; 0xc50 <__stack+0x151>
     c20:	b1 32       	cpi	r27, 0x21	; 33
     c22:	b1 f4       	brne	.+44     	; 0xc50 <__stack+0x151>
{
	UEINTX = ~(1 << TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1 << RXOUTI)))
     c24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c28:	82 ff       	sbrs	r24, 2
     c2a:	fc cf       	rjmp	.-8      	; 0xc24 <__stack+0x125>
     c2c:	e0 e0       	ldi	r30, 0x00	; 0
     c2e:	f1 e0       	ldi	r31, 0x01	; 1
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	05 c0       	rjmp	.+10     	; 0xc3e <__stack+0x13f>
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				*p++ = UEDATX;
     c34:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     c38:	90 83       	st	Z, r25
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
			{
				*p++ = UEDATX;
     c3c:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
     c3e:	87 30       	cpi	r24, 0x07	; 7
     c40:	c8 f3       	brcs	.-14     	; 0xc34 <__stack+0x135>
	while (!(UEINTX & (1 << RXOUTI)))
		;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1 << RXOUTI);
     c42:	e8 ee       	ldi	r30, 0xE8	; 232
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	8b ef       	ldi	r24, 0xFB	; 251
     c48:	80 83       	st	Z, r24
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
     c4a:	8e ef       	ldi	r24, 0xFE	; 254
     c4c:	80 83       	st	Z, r24
     c4e:	56 c0       	rjmp	.+172    	; 0xcfc <__stack+0x1fd>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21)
     c50:	a2 32       	cpi	r26, 0x22	; 34
     c52:	61 f4       	brne	.+24     	; 0xc6c <__stack+0x16d>
     c54:	b1 32       	cpi	r27, 0x21	; 33
     c56:	51 f4       	brne	.+20     	; 0xc6c <__stack+0x16d>
		{
			cdc_line_rtsdtr = wValue;
     c58:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
     c5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c60:	80 ff       	sbrs	r24, 0
     c62:	fc cf       	rjmp	.-8      	; 0xc5c <__stack+0x15d>
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
     c64:	8e ef       	ldi	r24, 0xFE	; 254
     c66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c6a:	48 c0       	rjmp	.+144    	; 0xcfc <__stack+0x1fd>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS)
     c6c:	a1 11       	cpse	r26, r1
     c6e:	1b c0       	rjmp	.+54     	; 0xca6 <__stack+0x1a7>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
     c70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c74:	80 ff       	sbrs	r24, 0
     c76:	fc cf       	rjmp	.-8      	; 0xc70 <__stack+0x171>
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
     c78:	b2 38       	cpi	r27, 0x82	; 130
     c7a:	61 f4       	brne	.+24     	; 0xc94 <__stack+0x195>
			{
				UENUM = wIndex;
     c7c:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (UECONX & (1 << STALLRQ))
     c80:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     c84:	85 fd       	sbrc	r24, 5
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <__stack+0x18d>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <__stack+0x18f>
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
			{
				UENUM = wIndex;
				if (UECONX & (1 << STALLRQ))
					i = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
				UENUM = 0;
     c8e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <__stack+0x197>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
     c94:	80 e0       	ldi	r24, 0x00	; 0
				if (UECONX & (1 << STALLRQ))
					i = 1;
				UENUM = 0;
			}
#endif
			UEDATX = i;
     c96:	e1 ef       	ldi	r30, 0xF1	; 241
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 83       	st	Z, r24
			UEDATX = 0;
     c9c:	10 82       	st	Z, r1
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
     c9e:	8e ef       	ldi	r24, 0xFE	; 254
     ca0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <__stack+0x1fd>
			UEDATX = 0;
			usb_send_in();
			return;
		}
#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE) && bmRequestType == 0x02 && wValue == 0)
     ca6:	a1 30       	cpi	r26, 0x01	; 1
     ca8:	11 f0       	breq	.+4      	; 0xcae <__stack+0x1af>
     caa:	a3 30       	cpi	r26, 0x03	; 3
     cac:	21 f5       	brne	.+72     	; 0xcf6 <__stack+0x1f7>
     cae:	b2 30       	cpi	r27, 0x02	; 2
     cb0:	11 f5       	brne	.+68     	; 0xcf6 <__stack+0x1f7>
     cb2:	89 2b       	or	r24, r25
     cb4:	01 f5       	brne	.+64     	; 0xcf6 <__stack+0x1f7>
		{
			i = wIndex & 0x7F;
     cb6:	26 2f       	mov	r18, r22
     cb8:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT)
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	82 0f       	add	r24, r18
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	d0 f4       	brcc	.+52     	; 0xcf6 <__stack+0x1f7>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
     cc2:	8e ef       	ldi	r24, 0xFE	; 254
     cc4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		{
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT)
			{
				usb_send_in();
				UENUM = i;
     cc8:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (bRequest == SET_FEATURE)
     ccc:	a3 30       	cpi	r26, 0x03	; 3
     cce:	21 f4       	brne	.+8      	; 0xcd8 <__stack+0x1d9>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN);
     cd0:	81 e2       	ldi	r24, 0x21	; 33
     cd2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     cd6:	12 c0       	rjmp	.+36     	; 0xcfc <__stack+0x1fd>
				}
				else
				{
					UECONX = (1 << STALLRQC) | (1 << RSTDT) | (1 << EPEN);
     cd8:	89 e1       	ldi	r24, 0x19	; 25
     cda:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					UERST = (1 << i);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <__stack+0x1e9>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	2a 95       	dec	r18
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <__stack+0x1e5>
     cec:	ea ee       	ldi	r30, 0xEA	; 234
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 83       	st	Z, r24
					UERST = 0;
     cf2:	10 82       	st	Z, r1
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <__stack+0x1fd>
				return;
			}
		}
#endif
	}
	UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
     cf6:	81 e2       	ldi	r24, 0x21	; 33
     cf8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <print_P>:

// BELOW FROM PRINT.C

void print_P(const char *s)
{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	fc 01       	movw	r30, r24
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
     d2a:	8f 01       	movw	r16, r30
     d2c:	0f 5f       	subi	r16, 0xFF	; 255
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	c4 91       	lpm	r28, Z
		if (!c)
     d32:	cc 23       	and	r28, r28
     d34:	51 f0       	breq	.+20     	; 0xd4a <print_P+0x28>
			break;
		if (c == '\n')
     d36:	ca 30       	cpi	r28, 0x0A	; 10
     d38:	19 f4       	brne	.+6      	; 0xd40 <print_P+0x1e>
			usb_tx_char('\r');
     d3a:	8d e0       	ldi	r24, 0x0D	; 13
     d3c:	0e 94 8e 04 	call	0x91c	; 0x91c <m_usb_tx_char>
		usb_tx_char(c);
     d40:	8c 2f       	mov	r24, r28
     d42:	0e 94 8e 04 	call	0x91c	; 0x91c <m_usb_tx_char>
{
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
     d46:	f8 01       	movw	r30, r16
		if (!c)
			break;
		if (c == '\n')
			usb_tx_char('\r');
		usb_tx_char(c);
	}
     d48:	f0 cf       	rjmp	.-32     	; 0xd2a <print_P+0x8>
}
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	08 95       	ret

00000d52 <__floatunsisf>:
     d52:	e8 94       	clt
     d54:	09 c0       	rjmp	.+18     	; 0xd68 <__floatsisf+0x12>

00000d56 <__floatsisf>:
     d56:	97 fb       	bst	r25, 7
     d58:	3e f4       	brtc	.+14     	; 0xd68 <__floatsisf+0x12>
     d5a:	90 95       	com	r25
     d5c:	80 95       	com	r24
     d5e:	70 95       	com	r23
     d60:	61 95       	neg	r22
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	8f 4f       	sbci	r24, 0xFF	; 255
     d66:	9f 4f       	sbci	r25, 0xFF	; 255
     d68:	99 23       	and	r25, r25
     d6a:	a9 f0       	breq	.+42     	; 0xd96 <__floatsisf+0x40>
     d6c:	f9 2f       	mov	r31, r25
     d6e:	96 e9       	ldi	r25, 0x96	; 150
     d70:	bb 27       	eor	r27, r27
     d72:	93 95       	inc	r25
     d74:	f6 95       	lsr	r31
     d76:	87 95       	ror	r24
     d78:	77 95       	ror	r23
     d7a:	67 95       	ror	r22
     d7c:	b7 95       	ror	r27
     d7e:	f1 11       	cpse	r31, r1
     d80:	f8 cf       	rjmp	.-16     	; 0xd72 <__floatsisf+0x1c>
     d82:	fa f4       	brpl	.+62     	; 0xdc2 <__floatsisf+0x6c>
     d84:	bb 0f       	add	r27, r27
     d86:	11 f4       	brne	.+4      	; 0xd8c <__floatsisf+0x36>
     d88:	60 ff       	sbrs	r22, 0
     d8a:	1b c0       	rjmp	.+54     	; 0xdc2 <__floatsisf+0x6c>
     d8c:	6f 5f       	subi	r22, 0xFF	; 255
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	8f 4f       	sbci	r24, 0xFF	; 255
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	16 c0       	rjmp	.+44     	; 0xdc2 <__floatsisf+0x6c>
     d96:	88 23       	and	r24, r24
     d98:	11 f0       	breq	.+4      	; 0xd9e <__floatsisf+0x48>
     d9a:	96 e9       	ldi	r25, 0x96	; 150
     d9c:	11 c0       	rjmp	.+34     	; 0xdc0 <__floatsisf+0x6a>
     d9e:	77 23       	and	r23, r23
     da0:	21 f0       	breq	.+8      	; 0xdaa <__floatsisf+0x54>
     da2:	9e e8       	ldi	r25, 0x8E	; 142
     da4:	87 2f       	mov	r24, r23
     da6:	76 2f       	mov	r23, r22
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <__floatsisf+0x5e>
     daa:	66 23       	and	r22, r22
     dac:	71 f0       	breq	.+28     	; 0xdca <__floatsisf+0x74>
     dae:	96 e8       	ldi	r25, 0x86	; 134
     db0:	86 2f       	mov	r24, r22
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	2a f0       	brmi	.+10     	; 0xdc2 <__floatsisf+0x6c>
     db8:	9a 95       	dec	r25
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	88 1f       	adc	r24, r24
     dc0:	da f7       	brpl	.-10     	; 0xdb8 <__floatsisf+0x62>
     dc2:	88 0f       	add	r24, r24
     dc4:	96 95       	lsr	r25
     dc6:	87 95       	ror	r24
     dc8:	97 f9       	bld	r25, 7
     dca:	08 95       	ret

00000dcc <__mulsf3>:
     dcc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__mulsf3x>
     dd0:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_round>
     dd4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__fp_pscA>
     dd8:	38 f0       	brcs	.+14     	; 0xde8 <__mulsf3+0x1c>
     dda:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_pscB>
     dde:	20 f0       	brcs	.+8      	; 0xde8 <__mulsf3+0x1c>
     de0:	95 23       	and	r25, r21
     de2:	11 f0       	breq	.+4      	; 0xde8 <__mulsf3+0x1c>
     de4:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_inf>
     de8:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_nan>
     dec:	11 24       	eor	r1, r1
     dee:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_szero>

00000df2 <__mulsf3x>:
     df2:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_split3>
     df6:	70 f3       	brcs	.-36     	; 0xdd4 <__mulsf3+0x8>

00000df8 <__mulsf3_pse>:
     df8:	95 9f       	mul	r25, r21
     dfa:	c1 f3       	breq	.-16     	; 0xdec <__mulsf3+0x20>
     dfc:	95 0f       	add	r25, r21
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	55 1f       	adc	r21, r21
     e02:	62 9f       	mul	r22, r18
     e04:	f0 01       	movw	r30, r0
     e06:	72 9f       	mul	r23, r18
     e08:	bb 27       	eor	r27, r27
     e0a:	f0 0d       	add	r31, r0
     e0c:	b1 1d       	adc	r27, r1
     e0e:	63 9f       	mul	r22, r19
     e10:	aa 27       	eor	r26, r26
     e12:	f0 0d       	add	r31, r0
     e14:	b1 1d       	adc	r27, r1
     e16:	aa 1f       	adc	r26, r26
     e18:	64 9f       	mul	r22, r20
     e1a:	66 27       	eor	r22, r22
     e1c:	b0 0d       	add	r27, r0
     e1e:	a1 1d       	adc	r26, r1
     e20:	66 1f       	adc	r22, r22
     e22:	82 9f       	mul	r24, r18
     e24:	22 27       	eor	r18, r18
     e26:	b0 0d       	add	r27, r0
     e28:	a1 1d       	adc	r26, r1
     e2a:	62 1f       	adc	r22, r18
     e2c:	73 9f       	mul	r23, r19
     e2e:	b0 0d       	add	r27, r0
     e30:	a1 1d       	adc	r26, r1
     e32:	62 1f       	adc	r22, r18
     e34:	83 9f       	mul	r24, r19
     e36:	a0 0d       	add	r26, r0
     e38:	61 1d       	adc	r22, r1
     e3a:	22 1f       	adc	r18, r18
     e3c:	74 9f       	mul	r23, r20
     e3e:	33 27       	eor	r19, r19
     e40:	a0 0d       	add	r26, r0
     e42:	61 1d       	adc	r22, r1
     e44:	23 1f       	adc	r18, r19
     e46:	84 9f       	mul	r24, r20
     e48:	60 0d       	add	r22, r0
     e4a:	21 1d       	adc	r18, r1
     e4c:	82 2f       	mov	r24, r18
     e4e:	76 2f       	mov	r23, r22
     e50:	6a 2f       	mov	r22, r26
     e52:	11 24       	eor	r1, r1
     e54:	9f 57       	subi	r25, 0x7F	; 127
     e56:	50 40       	sbci	r21, 0x00	; 0
     e58:	9a f0       	brmi	.+38     	; 0xe80 <__mulsf3_pse+0x88>
     e5a:	f1 f0       	breq	.+60     	; 0xe98 <__mulsf3_pse+0xa0>
     e5c:	88 23       	and	r24, r24
     e5e:	4a f0       	brmi	.+18     	; 0xe72 <__mulsf3_pse+0x7a>
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	bb 1f       	adc	r27, r27
     e66:	66 1f       	adc	r22, r22
     e68:	77 1f       	adc	r23, r23
     e6a:	88 1f       	adc	r24, r24
     e6c:	91 50       	subi	r25, 0x01	; 1
     e6e:	50 40       	sbci	r21, 0x00	; 0
     e70:	a9 f7       	brne	.-22     	; 0xe5c <__mulsf3_pse+0x64>
     e72:	9e 3f       	cpi	r25, 0xFE	; 254
     e74:	51 05       	cpc	r21, r1
     e76:	80 f0       	brcs	.+32     	; 0xe98 <__mulsf3_pse+0xa0>
     e78:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_inf>
     e7c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_szero>
     e80:	5f 3f       	cpi	r21, 0xFF	; 255
     e82:	e4 f3       	brlt	.-8      	; 0xe7c <__mulsf3_pse+0x84>
     e84:	98 3e       	cpi	r25, 0xE8	; 232
     e86:	d4 f3       	brlt	.-12     	; 0xe7c <__mulsf3_pse+0x84>
     e88:	86 95       	lsr	r24
     e8a:	77 95       	ror	r23
     e8c:	67 95       	ror	r22
     e8e:	b7 95       	ror	r27
     e90:	f7 95       	ror	r31
     e92:	e7 95       	ror	r30
     e94:	9f 5f       	subi	r25, 0xFF	; 255
     e96:	c1 f7       	brne	.-16     	; 0xe88 <__mulsf3_pse+0x90>
     e98:	fe 2b       	or	r31, r30
     e9a:	88 0f       	add	r24, r24
     e9c:	91 1d       	adc	r25, r1
     e9e:	96 95       	lsr	r25
     ea0:	87 95       	ror	r24
     ea2:	97 f9       	bld	r25, 7
     ea4:	08 95       	ret

00000ea6 <__fp_inf>:
     ea6:	97 f9       	bld	r25, 7
     ea8:	9f 67       	ori	r25, 0x7F	; 127
     eaa:	80 e8       	ldi	r24, 0x80	; 128
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	08 95       	ret

00000eb2 <__fp_nan>:
     eb2:	9f ef       	ldi	r25, 0xFF	; 255
     eb4:	80 ec       	ldi	r24, 0xC0	; 192
     eb6:	08 95       	ret

00000eb8 <__fp_pscA>:
     eb8:	00 24       	eor	r0, r0
     eba:	0a 94       	dec	r0
     ebc:	16 16       	cp	r1, r22
     ebe:	17 06       	cpc	r1, r23
     ec0:	18 06       	cpc	r1, r24
     ec2:	09 06       	cpc	r0, r25
     ec4:	08 95       	ret

00000ec6 <__fp_pscB>:
     ec6:	00 24       	eor	r0, r0
     ec8:	0a 94       	dec	r0
     eca:	12 16       	cp	r1, r18
     ecc:	13 06       	cpc	r1, r19
     ece:	14 06       	cpc	r1, r20
     ed0:	05 06       	cpc	r0, r21
     ed2:	08 95       	ret

00000ed4 <__fp_round>:
     ed4:	09 2e       	mov	r0, r25
     ed6:	03 94       	inc	r0
     ed8:	00 0c       	add	r0, r0
     eda:	11 f4       	brne	.+4      	; 0xee0 <__fp_round+0xc>
     edc:	88 23       	and	r24, r24
     ede:	52 f0       	brmi	.+20     	; 0xef4 <__fp_round+0x20>
     ee0:	bb 0f       	add	r27, r27
     ee2:	40 f4       	brcc	.+16     	; 0xef4 <__fp_round+0x20>
     ee4:	bf 2b       	or	r27, r31
     ee6:	11 f4       	brne	.+4      	; 0xeec <__fp_round+0x18>
     ee8:	60 ff       	sbrs	r22, 0
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <__fp_round+0x20>
     eec:	6f 5f       	subi	r22, 0xFF	; 255
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	8f 4f       	sbci	r24, 0xFF	; 255
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	08 95       	ret

00000ef6 <__fp_split3>:
     ef6:	57 fd       	sbrc	r21, 7
     ef8:	90 58       	subi	r25, 0x80	; 128
     efa:	44 0f       	add	r20, r20
     efc:	55 1f       	adc	r21, r21
     efe:	59 f0       	breq	.+22     	; 0xf16 <__fp_splitA+0x10>
     f00:	5f 3f       	cpi	r21, 0xFF	; 255
     f02:	71 f0       	breq	.+28     	; 0xf20 <__fp_splitA+0x1a>
     f04:	47 95       	ror	r20

00000f06 <__fp_splitA>:
     f06:	88 0f       	add	r24, r24
     f08:	97 fb       	bst	r25, 7
     f0a:	99 1f       	adc	r25, r25
     f0c:	61 f0       	breq	.+24     	; 0xf26 <__fp_splitA+0x20>
     f0e:	9f 3f       	cpi	r25, 0xFF	; 255
     f10:	79 f0       	breq	.+30     	; 0xf30 <__fp_splitA+0x2a>
     f12:	87 95       	ror	r24
     f14:	08 95       	ret
     f16:	12 16       	cp	r1, r18
     f18:	13 06       	cpc	r1, r19
     f1a:	14 06       	cpc	r1, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	f2 cf       	rjmp	.-28     	; 0xf04 <__fp_split3+0xe>
     f20:	46 95       	lsr	r20
     f22:	f1 df       	rcall	.-30     	; 0xf06 <__fp_splitA>
     f24:	08 c0       	rjmp	.+16     	; 0xf36 <__fp_splitA+0x30>
     f26:	16 16       	cp	r1, r22
     f28:	17 06       	cpc	r1, r23
     f2a:	18 06       	cpc	r1, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	f1 cf       	rjmp	.-30     	; 0xf12 <__fp_splitA+0xc>
     f30:	86 95       	lsr	r24
     f32:	71 05       	cpc	r23, r1
     f34:	61 05       	cpc	r22, r1
     f36:	08 94       	sec
     f38:	08 95       	ret

00000f3a <__fp_zero>:
     f3a:	e8 94       	clt

00000f3c <__fp_szero>:
     f3c:	bb 27       	eor	r27, r27
     f3e:	66 27       	eor	r22, r22
     f40:	77 27       	eor	r23, r23
     f42:	cb 01       	movw	r24, r22
     f44:	97 f9       	bld	r25, 7
     f46:	08 95       	ret

00000f48 <vfprintf>:
     f48:	a0 e1       	ldi	r26, 0x10	; 16
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea ea       	ldi	r30, 0xAA	; 170
     f4e:	f7 e0       	ldi	r31, 0x07	; 7
     f50:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__prologue_saves__>
     f54:	7c 01       	movw	r14, r24
     f56:	1b 01       	movw	r2, r22
     f58:	6a 01       	movw	r12, r20
     f5a:	fc 01       	movw	r30, r24
     f5c:	17 82       	std	Z+7, r1	; 0x07
     f5e:	16 82       	std	Z+6, r1	; 0x06
     f60:	83 81       	ldd	r24, Z+3	; 0x03
     f62:	81 ff       	sbrs	r24, 1
     f64:	44 c3       	rjmp	.+1672   	; 0x15ee <vfprintf+0x6a6>
     f66:	9e 01       	movw	r18, r28
     f68:	2f 5f       	subi	r18, 0xFF	; 255
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	39 01       	movw	r6, r18
     f6e:	f7 01       	movw	r30, r14
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	f1 01       	movw	r30, r2
     f74:	93 fd       	sbrc	r25, 3
     f76:	85 91       	lpm	r24, Z+
     f78:	93 ff       	sbrs	r25, 3
     f7a:	81 91       	ld	r24, Z+
     f7c:	1f 01       	movw	r2, r30
     f7e:	88 23       	and	r24, r24
     f80:	09 f4       	brne	.+2      	; 0xf84 <vfprintf+0x3c>
     f82:	31 c3       	rjmp	.+1634   	; 0x15e6 <vfprintf+0x69e>
     f84:	85 32       	cpi	r24, 0x25	; 37
     f86:	39 f4       	brne	.+14     	; 0xf96 <vfprintf+0x4e>
     f88:	93 fd       	sbrc	r25, 3
     f8a:	85 91       	lpm	r24, Z+
     f8c:	93 ff       	sbrs	r25, 3
     f8e:	81 91       	ld	r24, Z+
     f90:	1f 01       	movw	r2, r30
     f92:	85 32       	cpi	r24, 0x25	; 37
     f94:	39 f4       	brne	.+14     	; 0xfa4 <vfprintf+0x5c>
     f96:	b7 01       	movw	r22, r14
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
     f9e:	56 01       	movw	r10, r12
     fa0:	65 01       	movw	r12, r10
     fa2:	e5 cf       	rjmp	.-54     	; 0xf6e <vfprintf+0x26>
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	51 2c       	mov	r5, r1
     fa8:	91 2c       	mov	r9, r1
     faa:	ff e1       	ldi	r31, 0x1F	; 31
     fac:	f9 15       	cp	r31, r9
     fae:	d8 f0       	brcs	.+54     	; 0xfe6 <vfprintf+0x9e>
     fb0:	8b 32       	cpi	r24, 0x2B	; 43
     fb2:	79 f0       	breq	.+30     	; 0xfd2 <vfprintf+0x8a>
     fb4:	38 f4       	brcc	.+14     	; 0xfc4 <vfprintf+0x7c>
     fb6:	80 32       	cpi	r24, 0x20	; 32
     fb8:	79 f0       	breq	.+30     	; 0xfd8 <vfprintf+0x90>
     fba:	83 32       	cpi	r24, 0x23	; 35
     fbc:	a1 f4       	brne	.+40     	; 0xfe6 <vfprintf+0x9e>
     fbe:	f9 2d       	mov	r31, r9
     fc0:	f0 61       	ori	r31, 0x10	; 16
     fc2:	2e c0       	rjmp	.+92     	; 0x1020 <vfprintf+0xd8>
     fc4:	8d 32       	cpi	r24, 0x2D	; 45
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <vfprintf+0x98>
     fc8:	80 33       	cpi	r24, 0x30	; 48
     fca:	69 f4       	brne	.+26     	; 0xfe6 <vfprintf+0x9e>
     fcc:	29 2d       	mov	r18, r9
     fce:	21 60       	ori	r18, 0x01	; 1
     fd0:	2d c0       	rjmp	.+90     	; 0x102c <vfprintf+0xe4>
     fd2:	39 2d       	mov	r19, r9
     fd4:	32 60       	ori	r19, 0x02	; 2
     fd6:	93 2e       	mov	r9, r19
     fd8:	89 2d       	mov	r24, r9
     fda:	84 60       	ori	r24, 0x04	; 4
     fdc:	98 2e       	mov	r9, r24
     fde:	2a c0       	rjmp	.+84     	; 0x1034 <vfprintf+0xec>
     fe0:	e9 2d       	mov	r30, r9
     fe2:	e8 60       	ori	r30, 0x08	; 8
     fe4:	15 c0       	rjmp	.+42     	; 0x1010 <vfprintf+0xc8>
     fe6:	97 fc       	sbrc	r9, 7
     fe8:	2d c0       	rjmp	.+90     	; 0x1044 <vfprintf+0xfc>
     fea:	20 ed       	ldi	r18, 0xD0	; 208
     fec:	28 0f       	add	r18, r24
     fee:	2a 30       	cpi	r18, 0x0A	; 10
     ff0:	88 f4       	brcc	.+34     	; 0x1014 <vfprintf+0xcc>
     ff2:	96 fe       	sbrs	r9, 6
     ff4:	06 c0       	rjmp	.+12     	; 0x1002 <vfprintf+0xba>
     ff6:	3a e0       	ldi	r19, 0x0A	; 10
     ff8:	13 9f       	mul	r17, r19
     ffa:	20 0d       	add	r18, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	12 2f       	mov	r17, r18
    1000:	19 c0       	rjmp	.+50     	; 0x1034 <vfprintf+0xec>
    1002:	8a e0       	ldi	r24, 0x0A	; 10
    1004:	58 9e       	mul	r5, r24
    1006:	20 0d       	add	r18, r0
    1008:	11 24       	eor	r1, r1
    100a:	52 2e       	mov	r5, r18
    100c:	e9 2d       	mov	r30, r9
    100e:	e0 62       	ori	r30, 0x20	; 32
    1010:	9e 2e       	mov	r9, r30
    1012:	10 c0       	rjmp	.+32     	; 0x1034 <vfprintf+0xec>
    1014:	8e 32       	cpi	r24, 0x2E	; 46
    1016:	31 f4       	brne	.+12     	; 0x1024 <vfprintf+0xdc>
    1018:	96 fc       	sbrc	r9, 6
    101a:	e5 c2       	rjmp	.+1482   	; 0x15e6 <vfprintf+0x69e>
    101c:	f9 2d       	mov	r31, r9
    101e:	f0 64       	ori	r31, 0x40	; 64
    1020:	9f 2e       	mov	r9, r31
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <vfprintf+0xec>
    1024:	8c 36       	cpi	r24, 0x6C	; 108
    1026:	21 f4       	brne	.+8      	; 0x1030 <vfprintf+0xe8>
    1028:	29 2d       	mov	r18, r9
    102a:	20 68       	ori	r18, 0x80	; 128
    102c:	92 2e       	mov	r9, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <vfprintf+0xec>
    1030:	88 36       	cpi	r24, 0x68	; 104
    1032:	41 f4       	brne	.+16     	; 0x1044 <vfprintf+0xfc>
    1034:	f1 01       	movw	r30, r2
    1036:	93 fd       	sbrc	r25, 3
    1038:	85 91       	lpm	r24, Z+
    103a:	93 ff       	sbrs	r25, 3
    103c:	81 91       	ld	r24, Z+
    103e:	1f 01       	movw	r2, r30
    1040:	81 11       	cpse	r24, r1
    1042:	b3 cf       	rjmp	.-154    	; 0xfaa <vfprintf+0x62>
    1044:	9b eb       	ldi	r25, 0xBB	; 187
    1046:	98 0f       	add	r25, r24
    1048:	93 30       	cpi	r25, 0x03	; 3
    104a:	20 f4       	brcc	.+8      	; 0x1054 <vfprintf+0x10c>
    104c:	99 2d       	mov	r25, r9
    104e:	90 61       	ori	r25, 0x10	; 16
    1050:	80 5e       	subi	r24, 0xE0	; 224
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <vfprintf+0x11a>
    1054:	9b e9       	ldi	r25, 0x9B	; 155
    1056:	98 0f       	add	r25, r24
    1058:	93 30       	cpi	r25, 0x03	; 3
    105a:	08 f0       	brcs	.+2      	; 0x105e <vfprintf+0x116>
    105c:	66 c1       	rjmp	.+716    	; 0x132a <vfprintf+0x3e2>
    105e:	99 2d       	mov	r25, r9
    1060:	9f 7e       	andi	r25, 0xEF	; 239
    1062:	96 ff       	sbrs	r25, 6
    1064:	16 e0       	ldi	r17, 0x06	; 6
    1066:	9f 73       	andi	r25, 0x3F	; 63
    1068:	99 2e       	mov	r9, r25
    106a:	85 36       	cpi	r24, 0x65	; 101
    106c:	19 f4       	brne	.+6      	; 0x1074 <vfprintf+0x12c>
    106e:	90 64       	ori	r25, 0x40	; 64
    1070:	99 2e       	mov	r9, r25
    1072:	08 c0       	rjmp	.+16     	; 0x1084 <vfprintf+0x13c>
    1074:	86 36       	cpi	r24, 0x66	; 102
    1076:	21 f4       	brne	.+8      	; 0x1080 <vfprintf+0x138>
    1078:	39 2f       	mov	r19, r25
    107a:	30 68       	ori	r19, 0x80	; 128
    107c:	93 2e       	mov	r9, r19
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <vfprintf+0x13c>
    1080:	11 11       	cpse	r17, r1
    1082:	11 50       	subi	r17, 0x01	; 1
    1084:	97 fe       	sbrs	r9, 7
    1086:	07 c0       	rjmp	.+14     	; 0x1096 <vfprintf+0x14e>
    1088:	1c 33       	cpi	r17, 0x3C	; 60
    108a:	50 f4       	brcc	.+20     	; 0x10a0 <vfprintf+0x158>
    108c:	44 24       	eor	r4, r4
    108e:	43 94       	inc	r4
    1090:	41 0e       	add	r4, r17
    1092:	27 e0       	ldi	r18, 0x07	; 7
    1094:	0b c0       	rjmp	.+22     	; 0x10ac <vfprintf+0x164>
    1096:	18 30       	cpi	r17, 0x08	; 8
    1098:	38 f0       	brcs	.+14     	; 0x10a8 <vfprintf+0x160>
    109a:	27 e0       	ldi	r18, 0x07	; 7
    109c:	17 e0       	ldi	r17, 0x07	; 7
    109e:	05 c0       	rjmp	.+10     	; 0x10aa <vfprintf+0x162>
    10a0:	27 e0       	ldi	r18, 0x07	; 7
    10a2:	9c e3       	ldi	r25, 0x3C	; 60
    10a4:	49 2e       	mov	r4, r25
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <vfprintf+0x164>
    10a8:	21 2f       	mov	r18, r17
    10aa:	41 2c       	mov	r4, r1
    10ac:	56 01       	movw	r10, r12
    10ae:	84 e0       	ldi	r24, 0x04	; 4
    10b0:	a8 0e       	add	r10, r24
    10b2:	b1 1c       	adc	r11, r1
    10b4:	f6 01       	movw	r30, r12
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	93 81       	ldd	r25, Z+3	; 0x03
    10be:	04 2d       	mov	r16, r4
    10c0:	a3 01       	movw	r20, r6
    10c2:	0e 94 89 0b 	call	0x1712	; 0x1712 <__ftoa_engine>
    10c6:	6c 01       	movw	r12, r24
    10c8:	f9 81       	ldd	r31, Y+1	; 0x01
    10ca:	fc 87       	std	Y+12, r31	; 0x0c
    10cc:	f0 ff       	sbrs	r31, 0
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfprintf+0x18c>
    10d0:	f3 ff       	sbrs	r31, 3
    10d2:	06 c0       	rjmp	.+12     	; 0x10e0 <vfprintf+0x198>
    10d4:	91 fc       	sbrc	r9, 1
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <vfprintf+0x19c>
    10d8:	92 fe       	sbrs	r9, 2
    10da:	06 c0       	rjmp	.+12     	; 0x10e8 <vfprintf+0x1a0>
    10dc:	00 e2       	ldi	r16, 0x20	; 32
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <vfprintf+0x1a2>
    10e0:	0d e2       	ldi	r16, 0x2D	; 45
    10e2:	03 c0       	rjmp	.+6      	; 0x10ea <vfprintf+0x1a2>
    10e4:	0b e2       	ldi	r16, 0x2B	; 43
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <vfprintf+0x1a2>
    10e8:	00 e0       	ldi	r16, 0x00	; 0
    10ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ec:	8c 70       	andi	r24, 0x0C	; 12
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <vfprintf+0x1ae>
    10f0:	01 11       	cpse	r16, r1
    10f2:	5a c2       	rjmp	.+1204   	; 0x15a8 <vfprintf+0x660>
    10f4:	9b c2       	rjmp	.+1334   	; 0x162c <vfprintf+0x6e4>
    10f6:	97 fe       	sbrs	r9, 7
    10f8:	10 c0       	rjmp	.+32     	; 0x111a <vfprintf+0x1d2>
    10fa:	4c 0c       	add	r4, r12
    10fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    10fe:	f4 ff       	sbrs	r31, 4
    1100:	04 c0       	rjmp	.+8      	; 0x110a <vfprintf+0x1c2>
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	81 33       	cpi	r24, 0x31	; 49
    1106:	09 f4       	brne	.+2      	; 0x110a <vfprintf+0x1c2>
    1108:	4a 94       	dec	r4
    110a:	14 14       	cp	r1, r4
    110c:	74 f5       	brge	.+92     	; 0x116a <vfprintf+0x222>
    110e:	28 e0       	ldi	r18, 0x08	; 8
    1110:	24 15       	cp	r18, r4
    1112:	78 f5       	brcc	.+94     	; 0x1172 <vfprintf+0x22a>
    1114:	88 e0       	ldi	r24, 0x08	; 8
    1116:	48 2e       	mov	r4, r24
    1118:	2c c0       	rjmp	.+88     	; 0x1172 <vfprintf+0x22a>
    111a:	96 fc       	sbrc	r9, 6
    111c:	2a c0       	rjmp	.+84     	; 0x1172 <vfprintf+0x22a>
    111e:	81 2f       	mov	r24, r17
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	8c 15       	cp	r24, r12
    1124:	9d 05       	cpc	r25, r13
    1126:	9c f0       	brlt	.+38     	; 0x114e <vfprintf+0x206>
    1128:	3c ef       	ldi	r19, 0xFC	; 252
    112a:	c3 16       	cp	r12, r19
    112c:	3f ef       	ldi	r19, 0xFF	; 255
    112e:	d3 06       	cpc	r13, r19
    1130:	74 f0       	brlt	.+28     	; 0x114e <vfprintf+0x206>
    1132:	89 2d       	mov	r24, r9
    1134:	80 68       	ori	r24, 0x80	; 128
    1136:	98 2e       	mov	r9, r24
    1138:	0a c0       	rjmp	.+20     	; 0x114e <vfprintf+0x206>
    113a:	e2 e0       	ldi	r30, 0x02	; 2
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	ec 0f       	add	r30, r28
    1140:	fd 1f       	adc	r31, r29
    1142:	e1 0f       	add	r30, r17
    1144:	f1 1d       	adc	r31, r1
    1146:	80 81       	ld	r24, Z
    1148:	80 33       	cpi	r24, 0x30	; 48
    114a:	19 f4       	brne	.+6      	; 0x1152 <vfprintf+0x20a>
    114c:	11 50       	subi	r17, 0x01	; 1
    114e:	11 11       	cpse	r17, r1
    1150:	f4 cf       	rjmp	.-24     	; 0x113a <vfprintf+0x1f2>
    1152:	97 fe       	sbrs	r9, 7
    1154:	0e c0       	rjmp	.+28     	; 0x1172 <vfprintf+0x22a>
    1156:	44 24       	eor	r4, r4
    1158:	43 94       	inc	r4
    115a:	41 0e       	add	r4, r17
    115c:	81 2f       	mov	r24, r17
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	c8 16       	cp	r12, r24
    1162:	d9 06       	cpc	r13, r25
    1164:	2c f4       	brge	.+10     	; 0x1170 <vfprintf+0x228>
    1166:	1c 19       	sub	r17, r12
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <vfprintf+0x22a>
    116a:	44 24       	eor	r4, r4
    116c:	43 94       	inc	r4
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <vfprintf+0x22a>
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	97 fe       	sbrs	r9, 7
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <vfprintf+0x23a>
    1176:	1c 14       	cp	r1, r12
    1178:	1d 04       	cpc	r1, r13
    117a:	34 f4       	brge	.+12     	; 0x1188 <vfprintf+0x240>
    117c:	c6 01       	movw	r24, r12
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	05 c0       	rjmp	.+10     	; 0x118c <vfprintf+0x244>
    1182:	85 e0       	ldi	r24, 0x05	; 5
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <vfprintf+0x244>
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	01 11       	cpse	r16, r1
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	11 23       	and	r17, r17
    1192:	31 f0       	breq	.+12     	; 0x11a0 <vfprintf+0x258>
    1194:	21 2f       	mov	r18, r17
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	2f 5f       	subi	r18, 0xFF	; 255
    119a:	3f 4f       	sbci	r19, 0xFF	; 255
    119c:	82 0f       	add	r24, r18
    119e:	93 1f       	adc	r25, r19
    11a0:	25 2d       	mov	r18, r5
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	82 17       	cp	r24, r18
    11a6:	93 07       	cpc	r25, r19
    11a8:	14 f4       	brge	.+4      	; 0x11ae <vfprintf+0x266>
    11aa:	58 1a       	sub	r5, r24
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <vfprintf+0x268>
    11ae:	51 2c       	mov	r5, r1
    11b0:	89 2d       	mov	r24, r9
    11b2:	89 70       	andi	r24, 0x09	; 9
    11b4:	49 f4       	brne	.+18     	; 0x11c8 <vfprintf+0x280>
    11b6:	55 20       	and	r5, r5
    11b8:	39 f0       	breq	.+14     	; 0x11c8 <vfprintf+0x280>
    11ba:	b7 01       	movw	r22, r14
    11bc:	80 e2       	ldi	r24, 0x20	; 32
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    11c4:	5a 94       	dec	r5
    11c6:	f7 cf       	rjmp	.-18     	; 0x11b6 <vfprintf+0x26e>
    11c8:	00 23       	and	r16, r16
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <vfprintf+0x28e>
    11cc:	b7 01       	movw	r22, r14
    11ce:	80 2f       	mov	r24, r16
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    11d6:	93 fc       	sbrc	r9, 3
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <vfprintf+0x2a4>
    11da:	55 20       	and	r5, r5
    11dc:	39 f0       	breq	.+14     	; 0x11ec <vfprintf+0x2a4>
    11de:	b7 01       	movw	r22, r14
    11e0:	80 e3       	ldi	r24, 0x30	; 48
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    11e8:	5a 94       	dec	r5
    11ea:	f7 cf       	rjmp	.-18     	; 0x11da <vfprintf+0x292>
    11ec:	97 fe       	sbrs	r9, 7
    11ee:	4c c0       	rjmp	.+152    	; 0x1288 <vfprintf+0x340>
    11f0:	46 01       	movw	r8, r12
    11f2:	d7 fe       	sbrs	r13, 7
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <vfprintf+0x2b2>
    11f6:	81 2c       	mov	r8, r1
    11f8:	91 2c       	mov	r9, r1
    11fa:	c6 01       	movw	r24, r12
    11fc:	88 19       	sub	r24, r8
    11fe:	99 09       	sbc	r25, r9
    1200:	f3 01       	movw	r30, r6
    1202:	e8 0f       	add	r30, r24
    1204:	f9 1f       	adc	r31, r25
    1206:	fe 87       	std	Y+14, r31	; 0x0e
    1208:	ed 87       	std	Y+13, r30	; 0x0d
    120a:	96 01       	movw	r18, r12
    120c:	24 19       	sub	r18, r4
    120e:	31 09       	sbc	r19, r1
    1210:	38 8b       	std	Y+16, r19	; 0x10
    1212:	2f 87       	std	Y+15, r18	; 0x0f
    1214:	01 2f       	mov	r16, r17
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	11 95       	neg	r17
    121a:	01 95       	neg	r16
    121c:	11 09       	sbc	r17, r1
    121e:	3f ef       	ldi	r19, 0xFF	; 255
    1220:	83 16       	cp	r8, r19
    1222:	93 06       	cpc	r9, r19
    1224:	29 f4       	brne	.+10     	; 0x1230 <vfprintf+0x2e8>
    1226:	b7 01       	movw	r22, r14
    1228:	8e e2       	ldi	r24, 0x2E	; 46
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    1230:	c8 14       	cp	r12, r8
    1232:	d9 04       	cpc	r13, r9
    1234:	4c f0       	brlt	.+18     	; 0x1248 <vfprintf+0x300>
    1236:	8f 85       	ldd	r24, Y+15	; 0x0f
    1238:	98 89       	ldd	r25, Y+16	; 0x10
    123a:	88 15       	cp	r24, r8
    123c:	99 05       	cpc	r25, r9
    123e:	24 f4       	brge	.+8      	; 0x1248 <vfprintf+0x300>
    1240:	ed 85       	ldd	r30, Y+13	; 0x0d
    1242:	fe 85       	ldd	r31, Y+14	; 0x0e
    1244:	81 81       	ldd	r24, Z+1	; 0x01
    1246:	01 c0       	rjmp	.+2      	; 0x124a <vfprintf+0x302>
    1248:	80 e3       	ldi	r24, 0x30	; 48
    124a:	f1 e0       	ldi	r31, 0x01	; 1
    124c:	8f 1a       	sub	r8, r31
    124e:	91 08       	sbc	r9, r1
    1250:	2d 85       	ldd	r18, Y+13	; 0x0d
    1252:	3e 85       	ldd	r19, Y+14	; 0x0e
    1254:	2f 5f       	subi	r18, 0xFF	; 255
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	3e 87       	std	Y+14, r19	; 0x0e
    125a:	2d 87       	std	Y+13, r18	; 0x0d
    125c:	80 16       	cp	r8, r16
    125e:	91 06       	cpc	r9, r17
    1260:	2c f0       	brlt	.+10     	; 0x126c <vfprintf+0x324>
    1262:	b7 01       	movw	r22, r14
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    126a:	d9 cf       	rjmp	.-78     	; 0x121e <vfprintf+0x2d6>
    126c:	c8 14       	cp	r12, r8
    126e:	d9 04       	cpc	r13, r9
    1270:	41 f4       	brne	.+16     	; 0x1282 <vfprintf+0x33a>
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	96 33       	cpi	r25, 0x36	; 54
    1276:	20 f4       	brcc	.+8      	; 0x1280 <vfprintf+0x338>
    1278:	95 33       	cpi	r25, 0x35	; 53
    127a:	19 f4       	brne	.+6      	; 0x1282 <vfprintf+0x33a>
    127c:	3c 85       	ldd	r19, Y+12	; 0x0c
    127e:	34 ff       	sbrs	r19, 4
    1280:	81 e3       	ldi	r24, 0x31	; 49
    1282:	b7 01       	movw	r22, r14
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	4e c0       	rjmp	.+156    	; 0x1324 <vfprintf+0x3dc>
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	81 33       	cpi	r24, 0x31	; 49
    128c:	19 f0       	breq	.+6      	; 0x1294 <vfprintf+0x34c>
    128e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1290:	9f 7e       	andi	r25, 0xEF	; 239
    1292:	9c 87       	std	Y+12, r25	; 0x0c
    1294:	b7 01       	movw	r22, r14
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    129c:	11 11       	cpse	r17, r1
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <vfprintf+0x362>
    12a0:	94 fc       	sbrc	r9, 4
    12a2:	18 c0       	rjmp	.+48     	; 0x12d4 <vfprintf+0x38c>
    12a4:	85 e6       	ldi	r24, 0x65	; 101
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	17 c0       	rjmp	.+46     	; 0x12d8 <vfprintf+0x390>
    12aa:	b7 01       	movw	r22, r14
    12ac:	8e e2       	ldi	r24, 0x2E	; 46
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    12b4:	1e 5f       	subi	r17, 0xFE	; 254
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	01 e0       	ldi	r16, 0x01	; 1
    12ba:	08 0f       	add	r16, r24
    12bc:	f3 01       	movw	r30, r6
    12be:	e8 0f       	add	r30, r24
    12c0:	f1 1d       	adc	r31, r1
    12c2:	80 81       	ld	r24, Z
    12c4:	b7 01       	movw	r22, r14
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    12cc:	80 2f       	mov	r24, r16
    12ce:	01 13       	cpse	r16, r17
    12d0:	f3 cf       	rjmp	.-26     	; 0x12b8 <vfprintf+0x370>
    12d2:	e6 cf       	rjmp	.-52     	; 0x12a0 <vfprintf+0x358>
    12d4:	85 e4       	ldi	r24, 0x45	; 69
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	b7 01       	movw	r22, r14
    12da:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    12de:	d7 fc       	sbrc	r13, 7
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <vfprintf+0x3a6>
    12e2:	c1 14       	cp	r12, r1
    12e4:	d1 04       	cpc	r13, r1
    12e6:	41 f4       	brne	.+16     	; 0x12f8 <vfprintf+0x3b0>
    12e8:	ec 85       	ldd	r30, Y+12	; 0x0c
    12ea:	e4 ff       	sbrs	r30, 4
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <vfprintf+0x3b0>
    12ee:	d1 94       	neg	r13
    12f0:	c1 94       	neg	r12
    12f2:	d1 08       	sbc	r13, r1
    12f4:	8d e2       	ldi	r24, 0x2D	; 45
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <vfprintf+0x3b2>
    12f8:	8b e2       	ldi	r24, 0x2B	; 43
    12fa:	b7 01       	movw	r22, r14
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    1302:	80 e3       	ldi	r24, 0x30	; 48
    1304:	2a e0       	ldi	r18, 0x0A	; 10
    1306:	c2 16       	cp	r12, r18
    1308:	d1 04       	cpc	r13, r1
    130a:	2c f0       	brlt	.+10     	; 0x1316 <vfprintf+0x3ce>
    130c:	8f 5f       	subi	r24, 0xFF	; 255
    130e:	fa e0       	ldi	r31, 0x0A	; 10
    1310:	cf 1a       	sub	r12, r31
    1312:	d1 08       	sbc	r13, r1
    1314:	f7 cf       	rjmp	.-18     	; 0x1304 <vfprintf+0x3bc>
    1316:	b7 01       	movw	r22, r14
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    131e:	b7 01       	movw	r22, r14
    1320:	c6 01       	movw	r24, r12
    1322:	c0 96       	adiw	r24, 0x30	; 48
    1324:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    1328:	54 c1       	rjmp	.+680    	; 0x15d2 <vfprintf+0x68a>
    132a:	83 36       	cpi	r24, 0x63	; 99
    132c:	31 f0       	breq	.+12     	; 0x133a <vfprintf+0x3f2>
    132e:	83 37       	cpi	r24, 0x73	; 115
    1330:	79 f0       	breq	.+30     	; 0x1350 <vfprintf+0x408>
    1332:	83 35       	cpi	r24, 0x53	; 83
    1334:	09 f0       	breq	.+2      	; 0x1338 <vfprintf+0x3f0>
    1336:	56 c0       	rjmp	.+172    	; 0x13e4 <vfprintf+0x49c>
    1338:	20 c0       	rjmp	.+64     	; 0x137a <vfprintf+0x432>
    133a:	56 01       	movw	r10, r12
    133c:	32 e0       	ldi	r19, 0x02	; 2
    133e:	a3 0e       	add	r10, r19
    1340:	b1 1c       	adc	r11, r1
    1342:	f6 01       	movw	r30, r12
    1344:	80 81       	ld	r24, Z
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	01 e0       	ldi	r16, 0x01	; 1
    134a:	10 e0       	ldi	r17, 0x00	; 0
    134c:	63 01       	movw	r12, r6
    134e:	12 c0       	rjmp	.+36     	; 0x1374 <vfprintf+0x42c>
    1350:	56 01       	movw	r10, r12
    1352:	f2 e0       	ldi	r31, 0x02	; 2
    1354:	af 0e       	add	r10, r31
    1356:	b1 1c       	adc	r11, r1
    1358:	f6 01       	movw	r30, r12
    135a:	c0 80       	ld	r12, Z
    135c:	d1 80       	ldd	r13, Z+1	; 0x01
    135e:	96 fe       	sbrs	r9, 6
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <vfprintf+0x420>
    1362:	61 2f       	mov	r22, r17
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	02 c0       	rjmp	.+4      	; 0x136c <vfprintf+0x424>
    1368:	6f ef       	ldi	r22, 0xFF	; 255
    136a:	7f ef       	ldi	r23, 0xFF	; 255
    136c:	c6 01       	movw	r24, r12
    136e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <strnlen>
    1372:	8c 01       	movw	r16, r24
    1374:	f9 2d       	mov	r31, r9
    1376:	ff 77       	andi	r31, 0x7F	; 127
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <vfprintf+0x45a>
    137a:	56 01       	movw	r10, r12
    137c:	22 e0       	ldi	r18, 0x02	; 2
    137e:	a2 0e       	add	r10, r18
    1380:	b1 1c       	adc	r11, r1
    1382:	f6 01       	movw	r30, r12
    1384:	c0 80       	ld	r12, Z
    1386:	d1 80       	ldd	r13, Z+1	; 0x01
    1388:	96 fe       	sbrs	r9, 6
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <vfprintf+0x44a>
    138c:	61 2f       	mov	r22, r17
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <vfprintf+0x44e>
    1392:	6f ef       	ldi	r22, 0xFF	; 255
    1394:	7f ef       	ldi	r23, 0xFF	; 255
    1396:	c6 01       	movw	r24, r12
    1398:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <strnlen_P>
    139c:	8c 01       	movw	r16, r24
    139e:	f9 2d       	mov	r31, r9
    13a0:	f0 68       	ori	r31, 0x80	; 128
    13a2:	9f 2e       	mov	r9, r31
    13a4:	f3 fd       	sbrc	r31, 3
    13a6:	1a c0       	rjmp	.+52     	; 0x13dc <vfprintf+0x494>
    13a8:	85 2d       	mov	r24, r5
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	08 17       	cp	r16, r24
    13ae:	19 07       	cpc	r17, r25
    13b0:	a8 f4       	brcc	.+42     	; 0x13dc <vfprintf+0x494>
    13b2:	b7 01       	movw	r22, r14
    13b4:	80 e2       	ldi	r24, 0x20	; 32
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    13bc:	5a 94       	dec	r5
    13be:	f4 cf       	rjmp	.-24     	; 0x13a8 <vfprintf+0x460>
    13c0:	f6 01       	movw	r30, r12
    13c2:	97 fc       	sbrc	r9, 7
    13c4:	85 91       	lpm	r24, Z+
    13c6:	97 fe       	sbrs	r9, 7
    13c8:	81 91       	ld	r24, Z+
    13ca:	6f 01       	movw	r12, r30
    13cc:	b7 01       	movw	r22, r14
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    13d4:	51 10       	cpse	r5, r1
    13d6:	5a 94       	dec	r5
    13d8:	01 50       	subi	r16, 0x01	; 1
    13da:	11 09       	sbc	r17, r1
    13dc:	01 15       	cp	r16, r1
    13de:	11 05       	cpc	r17, r1
    13e0:	79 f7       	brne	.-34     	; 0x13c0 <vfprintf+0x478>
    13e2:	f7 c0       	rjmp	.+494    	; 0x15d2 <vfprintf+0x68a>
    13e4:	84 36       	cpi	r24, 0x64	; 100
    13e6:	11 f0       	breq	.+4      	; 0x13ec <vfprintf+0x4a4>
    13e8:	89 36       	cpi	r24, 0x69	; 105
    13ea:	61 f5       	brne	.+88     	; 0x1444 <vfprintf+0x4fc>
    13ec:	56 01       	movw	r10, r12
    13ee:	97 fe       	sbrs	r9, 7
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <vfprintf+0x4bc>
    13f2:	24 e0       	ldi	r18, 0x04	; 4
    13f4:	a2 0e       	add	r10, r18
    13f6:	b1 1c       	adc	r11, r1
    13f8:	f6 01       	movw	r30, r12
    13fa:	60 81       	ld	r22, Z
    13fc:	71 81       	ldd	r23, Z+1	; 0x01
    13fe:	82 81       	ldd	r24, Z+2	; 0x02
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	0a c0       	rjmp	.+20     	; 0x1418 <vfprintf+0x4d0>
    1404:	f2 e0       	ldi	r31, 0x02	; 2
    1406:	af 0e       	add	r10, r31
    1408:	b1 1c       	adc	r11, r1
    140a:	f6 01       	movw	r30, r12
    140c:	60 81       	ld	r22, Z
    140e:	71 81       	ldd	r23, Z+1	; 0x01
    1410:	07 2e       	mov	r0, r23
    1412:	00 0c       	add	r0, r0
    1414:	88 0b       	sbc	r24, r24
    1416:	99 0b       	sbc	r25, r25
    1418:	f9 2d       	mov	r31, r9
    141a:	ff 76       	andi	r31, 0x6F	; 111
    141c:	9f 2e       	mov	r9, r31
    141e:	97 ff       	sbrs	r25, 7
    1420:	09 c0       	rjmp	.+18     	; 0x1434 <vfprintf+0x4ec>
    1422:	90 95       	com	r25
    1424:	80 95       	com	r24
    1426:	70 95       	com	r23
    1428:	61 95       	neg	r22
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	8f 4f       	sbci	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	f0 68       	ori	r31, 0x80	; 128
    1432:	9f 2e       	mov	r9, r31
    1434:	2a e0       	ldi	r18, 0x0A	; 10
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	a3 01       	movw	r20, r6
    143a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__ultoa_invert>
    143e:	c8 2e       	mov	r12, r24
    1440:	c6 18       	sub	r12, r6
    1442:	3f c0       	rjmp	.+126    	; 0x14c2 <vfprintf+0x57a>
    1444:	09 2d       	mov	r16, r9
    1446:	85 37       	cpi	r24, 0x75	; 117
    1448:	21 f4       	brne	.+8      	; 0x1452 <vfprintf+0x50a>
    144a:	0f 7e       	andi	r16, 0xEF	; 239
    144c:	2a e0       	ldi	r18, 0x0A	; 10
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	1d c0       	rjmp	.+58     	; 0x148c <vfprintf+0x544>
    1452:	09 7f       	andi	r16, 0xF9	; 249
    1454:	8f 36       	cpi	r24, 0x6F	; 111
    1456:	91 f0       	breq	.+36     	; 0x147c <vfprintf+0x534>
    1458:	18 f4       	brcc	.+6      	; 0x1460 <vfprintf+0x518>
    145a:	88 35       	cpi	r24, 0x58	; 88
    145c:	59 f0       	breq	.+22     	; 0x1474 <vfprintf+0x52c>
    145e:	c3 c0       	rjmp	.+390    	; 0x15e6 <vfprintf+0x69e>
    1460:	80 37       	cpi	r24, 0x70	; 112
    1462:	19 f0       	breq	.+6      	; 0x146a <vfprintf+0x522>
    1464:	88 37       	cpi	r24, 0x78	; 120
    1466:	11 f0       	breq	.+4      	; 0x146c <vfprintf+0x524>
    1468:	be c0       	rjmp	.+380    	; 0x15e6 <vfprintf+0x69e>
    146a:	00 61       	ori	r16, 0x10	; 16
    146c:	04 ff       	sbrs	r16, 4
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <vfprintf+0x53a>
    1470:	04 60       	ori	r16, 0x04	; 4
    1472:	07 c0       	rjmp	.+14     	; 0x1482 <vfprintf+0x53a>
    1474:	94 fe       	sbrs	r9, 4
    1476:	08 c0       	rjmp	.+16     	; 0x1488 <vfprintf+0x540>
    1478:	06 60       	ori	r16, 0x06	; 6
    147a:	06 c0       	rjmp	.+12     	; 0x1488 <vfprintf+0x540>
    147c:	28 e0       	ldi	r18, 0x08	; 8
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	05 c0       	rjmp	.+10     	; 0x148c <vfprintf+0x544>
    1482:	20 e1       	ldi	r18, 0x10	; 16
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	02 c0       	rjmp	.+4      	; 0x148c <vfprintf+0x544>
    1488:	20 e1       	ldi	r18, 0x10	; 16
    148a:	32 e0       	ldi	r19, 0x02	; 2
    148c:	56 01       	movw	r10, r12
    148e:	07 ff       	sbrs	r16, 7
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <vfprintf+0x55c>
    1492:	84 e0       	ldi	r24, 0x04	; 4
    1494:	a8 0e       	add	r10, r24
    1496:	b1 1c       	adc	r11, r1
    1498:	f6 01       	movw	r30, r12
    149a:	60 81       	ld	r22, Z
    149c:	71 81       	ldd	r23, Z+1	; 0x01
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	08 c0       	rjmp	.+16     	; 0x14b4 <vfprintf+0x56c>
    14a4:	f2 e0       	ldi	r31, 0x02	; 2
    14a6:	af 0e       	add	r10, r31
    14a8:	b1 1c       	adc	r11, r1
    14aa:	f6 01       	movw	r30, r12
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a3 01       	movw	r20, r6
    14b6:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__ultoa_invert>
    14ba:	c8 2e       	mov	r12, r24
    14bc:	c6 18       	sub	r12, r6
    14be:	0f 77       	andi	r16, 0x7F	; 127
    14c0:	90 2e       	mov	r9, r16
    14c2:	96 fe       	sbrs	r9, 6
    14c4:	0b c0       	rjmp	.+22     	; 0x14dc <vfprintf+0x594>
    14c6:	09 2d       	mov	r16, r9
    14c8:	0e 7f       	andi	r16, 0xFE	; 254
    14ca:	c1 16       	cp	r12, r17
    14cc:	50 f4       	brcc	.+20     	; 0x14e2 <vfprintf+0x59a>
    14ce:	94 fe       	sbrs	r9, 4
    14d0:	0a c0       	rjmp	.+20     	; 0x14e6 <vfprintf+0x59e>
    14d2:	92 fc       	sbrc	r9, 2
    14d4:	08 c0       	rjmp	.+16     	; 0x14e6 <vfprintf+0x59e>
    14d6:	09 2d       	mov	r16, r9
    14d8:	0e 7e       	andi	r16, 0xEE	; 238
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <vfprintf+0x59e>
    14dc:	dc 2c       	mov	r13, r12
    14de:	09 2d       	mov	r16, r9
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <vfprintf+0x5a0>
    14e2:	dc 2c       	mov	r13, r12
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <vfprintf+0x5a0>
    14e6:	d1 2e       	mov	r13, r17
    14e8:	04 ff       	sbrs	r16, 4
    14ea:	0d c0       	rjmp	.+26     	; 0x1506 <vfprintf+0x5be>
    14ec:	fe 01       	movw	r30, r28
    14ee:	ec 0d       	add	r30, r12
    14f0:	f1 1d       	adc	r31, r1
    14f2:	80 81       	ld	r24, Z
    14f4:	80 33       	cpi	r24, 0x30	; 48
    14f6:	11 f4       	brne	.+4      	; 0x14fc <vfprintf+0x5b4>
    14f8:	09 7e       	andi	r16, 0xE9	; 233
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <vfprintf+0x5c6>
    14fc:	02 ff       	sbrs	r16, 2
    14fe:	06 c0       	rjmp	.+12     	; 0x150c <vfprintf+0x5c4>
    1500:	d3 94       	inc	r13
    1502:	d3 94       	inc	r13
    1504:	04 c0       	rjmp	.+8      	; 0x150e <vfprintf+0x5c6>
    1506:	80 2f       	mov	r24, r16
    1508:	86 78       	andi	r24, 0x86	; 134
    150a:	09 f0       	breq	.+2      	; 0x150e <vfprintf+0x5c6>
    150c:	d3 94       	inc	r13
    150e:	03 fd       	sbrc	r16, 3
    1510:	11 c0       	rjmp	.+34     	; 0x1534 <vfprintf+0x5ec>
    1512:	00 ff       	sbrs	r16, 0
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <vfprintf+0x5da>
    1516:	1c 2d       	mov	r17, r12
    1518:	d5 14       	cp	r13, r5
    151a:	80 f4       	brcc	.+32     	; 0x153c <vfprintf+0x5f4>
    151c:	15 0d       	add	r17, r5
    151e:	1d 19       	sub	r17, r13
    1520:	0d c0       	rjmp	.+26     	; 0x153c <vfprintf+0x5f4>
    1522:	d5 14       	cp	r13, r5
    1524:	58 f4       	brcc	.+22     	; 0x153c <vfprintf+0x5f4>
    1526:	b7 01       	movw	r22, r14
    1528:	80 e2       	ldi	r24, 0x20	; 32
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    1530:	d3 94       	inc	r13
    1532:	f7 cf       	rjmp	.-18     	; 0x1522 <vfprintf+0x5da>
    1534:	d5 14       	cp	r13, r5
    1536:	10 f4       	brcc	.+4      	; 0x153c <vfprintf+0x5f4>
    1538:	5d 18       	sub	r5, r13
    153a:	01 c0       	rjmp	.+2      	; 0x153e <vfprintf+0x5f6>
    153c:	51 2c       	mov	r5, r1
    153e:	04 ff       	sbrs	r16, 4
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <vfprintf+0x61a>
    1542:	b7 01       	movw	r22, r14
    1544:	80 e3       	ldi	r24, 0x30	; 48
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    154c:	02 ff       	sbrs	r16, 2
    154e:	17 c0       	rjmp	.+46     	; 0x157e <vfprintf+0x636>
    1550:	01 fd       	sbrc	r16, 1
    1552:	03 c0       	rjmp	.+6      	; 0x155a <vfprintf+0x612>
    1554:	88 e7       	ldi	r24, 0x78	; 120
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <vfprintf+0x616>
    155a:	88 e5       	ldi	r24, 0x58	; 88
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	b7 01       	movw	r22, r14
    1560:	0c c0       	rjmp	.+24     	; 0x157a <vfprintf+0x632>
    1562:	80 2f       	mov	r24, r16
    1564:	86 78       	andi	r24, 0x86	; 134
    1566:	59 f0       	breq	.+22     	; 0x157e <vfprintf+0x636>
    1568:	01 ff       	sbrs	r16, 1
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <vfprintf+0x628>
    156c:	8b e2       	ldi	r24, 0x2B	; 43
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <vfprintf+0x62a>
    1570:	80 e2       	ldi	r24, 0x20	; 32
    1572:	07 fd       	sbrc	r16, 7
    1574:	8d e2       	ldi	r24, 0x2D	; 45
    1576:	b7 01       	movw	r22, r14
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    157e:	c1 16       	cp	r12, r17
    1580:	38 f4       	brcc	.+14     	; 0x1590 <vfprintf+0x648>
    1582:	b7 01       	movw	r22, r14
    1584:	80 e3       	ldi	r24, 0x30	; 48
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    158c:	11 50       	subi	r17, 0x01	; 1
    158e:	f7 cf       	rjmp	.-18     	; 0x157e <vfprintf+0x636>
    1590:	ca 94       	dec	r12
    1592:	f3 01       	movw	r30, r6
    1594:	ec 0d       	add	r30, r12
    1596:	f1 1d       	adc	r31, r1
    1598:	80 81       	ld	r24, Z
    159a:	b7 01       	movw	r22, r14
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    15a2:	c1 10       	cpse	r12, r1
    15a4:	f5 cf       	rjmp	.-22     	; 0x1590 <vfprintf+0x648>
    15a6:	15 c0       	rjmp	.+42     	; 0x15d2 <vfprintf+0x68a>
    15a8:	f4 e0       	ldi	r31, 0x04	; 4
    15aa:	f5 15       	cp	r31, r5
    15ac:	60 f5       	brcc	.+88     	; 0x1606 <vfprintf+0x6be>
    15ae:	84 e0       	ldi	r24, 0x04	; 4
    15b0:	58 1a       	sub	r5, r24
    15b2:	93 fe       	sbrs	r9, 3
    15b4:	1f c0       	rjmp	.+62     	; 0x15f4 <vfprintf+0x6ac>
    15b6:	01 11       	cpse	r16, r1
    15b8:	27 c0       	rjmp	.+78     	; 0x1608 <vfprintf+0x6c0>
    15ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    15bc:	23 ff       	sbrs	r18, 3
    15be:	2a c0       	rjmp	.+84     	; 0x1614 <vfprintf+0x6cc>
    15c0:	0c ea       	ldi	r16, 0xAC	; 172
    15c2:	10 e0       	ldi	r17, 0x00	; 0
    15c4:	39 2d       	mov	r19, r9
    15c6:	30 71       	andi	r19, 0x10	; 16
    15c8:	93 2e       	mov	r9, r19
    15ca:	f8 01       	movw	r30, r16
    15cc:	84 91       	lpm	r24, Z
    15ce:	81 11       	cpse	r24, r1
    15d0:	24 c0       	rjmp	.+72     	; 0x161a <vfprintf+0x6d2>
    15d2:	55 20       	and	r5, r5
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <vfprintf+0x690>
    15d6:	e4 cc       	rjmp	.-1592   	; 0xfa0 <vfprintf+0x58>
    15d8:	b7 01       	movw	r22, r14
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    15e2:	5a 94       	dec	r5
    15e4:	f6 cf       	rjmp	.-20     	; 0x15d2 <vfprintf+0x68a>
    15e6:	f7 01       	movw	r30, r14
    15e8:	86 81       	ldd	r24, Z+6	; 0x06
    15ea:	97 81       	ldd	r25, Z+7	; 0x07
    15ec:	26 c0       	rjmp	.+76     	; 0x163a <vfprintf+0x6f2>
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	23 c0       	rjmp	.+70     	; 0x163a <vfprintf+0x6f2>
    15f4:	b7 01       	movw	r22, r14
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    15fe:	5a 94       	dec	r5
    1600:	51 10       	cpse	r5, r1
    1602:	f8 cf       	rjmp	.-16     	; 0x15f4 <vfprintf+0x6ac>
    1604:	d8 cf       	rjmp	.-80     	; 0x15b6 <vfprintf+0x66e>
    1606:	51 2c       	mov	r5, r1
    1608:	b7 01       	movw	r22, r14
    160a:	80 2f       	mov	r24, r16
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    1612:	d3 cf       	rjmp	.-90     	; 0x15ba <vfprintf+0x672>
    1614:	00 eb       	ldi	r16, 0xB0	; 176
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	d5 cf       	rjmp	.-86     	; 0x15c4 <vfprintf+0x67c>
    161a:	91 10       	cpse	r9, r1
    161c:	80 52       	subi	r24, 0x20	; 32
    161e:	b7 01       	movw	r22, r14
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 77 0c 	call	0x18ee	; 0x18ee <fputc>
    1626:	0f 5f       	subi	r16, 0xFF	; 255
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	cf cf       	rjmp	.-98     	; 0x15ca <vfprintf+0x682>
    162c:	23 e0       	ldi	r18, 0x03	; 3
    162e:	25 15       	cp	r18, r5
    1630:	10 f4       	brcc	.+4      	; 0x1636 <vfprintf+0x6ee>
    1632:	83 e0       	ldi	r24, 0x03	; 3
    1634:	bd cf       	rjmp	.-134    	; 0x15b0 <vfprintf+0x668>
    1636:	51 2c       	mov	r5, r1
    1638:	c0 cf       	rjmp	.-128    	; 0x15ba <vfprintf+0x672>
    163a:	60 96       	adiw	r28, 0x10	; 16
    163c:	e2 e1       	ldi	r30, 0x12	; 18
    163e:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__epilogue_restores__>

00001642 <__udivmodsi4>:
    1642:	a1 e2       	ldi	r26, 0x21	; 33
    1644:	1a 2e       	mov	r1, r26
    1646:	aa 1b       	sub	r26, r26
    1648:	bb 1b       	sub	r27, r27
    164a:	fd 01       	movw	r30, r26
    164c:	0d c0       	rjmp	.+26     	; 0x1668 <__udivmodsi4_ep>

0000164e <__udivmodsi4_loop>:
    164e:	aa 1f       	adc	r26, r26
    1650:	bb 1f       	adc	r27, r27
    1652:	ee 1f       	adc	r30, r30
    1654:	ff 1f       	adc	r31, r31
    1656:	a2 17       	cp	r26, r18
    1658:	b3 07       	cpc	r27, r19
    165a:	e4 07       	cpc	r30, r20
    165c:	f5 07       	cpc	r31, r21
    165e:	20 f0       	brcs	.+8      	; 0x1668 <__udivmodsi4_ep>
    1660:	a2 1b       	sub	r26, r18
    1662:	b3 0b       	sbc	r27, r19
    1664:	e4 0b       	sbc	r30, r20
    1666:	f5 0b       	sbc	r31, r21

00001668 <__udivmodsi4_ep>:
    1668:	66 1f       	adc	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	88 1f       	adc	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	1a 94       	dec	r1
    1672:	69 f7       	brne	.-38     	; 0x164e <__udivmodsi4_loop>
    1674:	60 95       	com	r22
    1676:	70 95       	com	r23
    1678:	80 95       	com	r24
    167a:	90 95       	com	r25
    167c:	9b 01       	movw	r18, r22
    167e:	ac 01       	movw	r20, r24
    1680:	bd 01       	movw	r22, r26
    1682:	cf 01       	movw	r24, r30
    1684:	08 95       	ret

00001686 <__umulhisi3>:
    1686:	a2 9f       	mul	r26, r18
    1688:	b0 01       	movw	r22, r0
    168a:	b3 9f       	mul	r27, r19
    168c:	c0 01       	movw	r24, r0
    168e:	a3 9f       	mul	r26, r19
    1690:	70 0d       	add	r23, r0
    1692:	81 1d       	adc	r24, r1
    1694:	11 24       	eor	r1, r1
    1696:	91 1d       	adc	r25, r1
    1698:	b2 9f       	mul	r27, r18
    169a:	70 0d       	add	r23, r0
    169c:	81 1d       	adc	r24, r1
    169e:	11 24       	eor	r1, r1
    16a0:	91 1d       	adc	r25, r1
    16a2:	08 95       	ret

000016a4 <__prologue_saves__>:
    16a4:	2f 92       	push	r2
    16a6:	3f 92       	push	r3
    16a8:	4f 92       	push	r4
    16aa:	5f 92       	push	r5
    16ac:	6f 92       	push	r6
    16ae:	7f 92       	push	r7
    16b0:	8f 92       	push	r8
    16b2:	9f 92       	push	r9
    16b4:	af 92       	push	r10
    16b6:	bf 92       	push	r11
    16b8:	cf 92       	push	r12
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	ca 1b       	sub	r28, r26
    16ce:	db 0b       	sbc	r29, r27
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	09 94       	ijmp

000016dc <__epilogue_restores__>:
    16dc:	2a 88       	ldd	r2, Y+18	; 0x12
    16de:	39 88       	ldd	r3, Y+17	; 0x11
    16e0:	48 88       	ldd	r4, Y+16	; 0x10
    16e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    16e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    16e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    16e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    16ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    16ee:	b9 84       	ldd	r11, Y+9	; 0x09
    16f0:	c8 84       	ldd	r12, Y+8	; 0x08
    16f2:	df 80       	ldd	r13, Y+7	; 0x07
    16f4:	ee 80       	ldd	r14, Y+6	; 0x06
    16f6:	fd 80       	ldd	r15, Y+5	; 0x05
    16f8:	0c 81       	ldd	r16, Y+4	; 0x04
    16fa:	1b 81       	ldd	r17, Y+3	; 0x03
    16fc:	aa 81       	ldd	r26, Y+2	; 0x02
    16fe:	b9 81       	ldd	r27, Y+1	; 0x01
    1700:	ce 0f       	add	r28, r30
    1702:	d1 1d       	adc	r29, r1
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	ed 01       	movw	r28, r26
    1710:	08 95       	ret

00001712 <__ftoa_engine>:
    1712:	28 30       	cpi	r18, 0x08	; 8
    1714:	08 f0       	brcs	.+2      	; 0x1718 <__ftoa_engine+0x6>
    1716:	27 e0       	ldi	r18, 0x07	; 7
    1718:	33 27       	eor	r19, r19
    171a:	da 01       	movw	r26, r20
    171c:	99 0f       	add	r25, r25
    171e:	31 1d       	adc	r19, r1
    1720:	87 fd       	sbrc	r24, 7
    1722:	91 60       	ori	r25, 0x01	; 1
    1724:	00 96       	adiw	r24, 0x00	; 0
    1726:	61 05       	cpc	r22, r1
    1728:	71 05       	cpc	r23, r1
    172a:	39 f4       	brne	.+14     	; 0x173a <__ftoa_engine+0x28>
    172c:	32 60       	ori	r19, 0x02	; 2
    172e:	2e 5f       	subi	r18, 0xFE	; 254
    1730:	3d 93       	st	X+, r19
    1732:	30 e3       	ldi	r19, 0x30	; 48
    1734:	2a 95       	dec	r18
    1736:	e1 f7       	brne	.-8      	; 0x1730 <__ftoa_engine+0x1e>
    1738:	08 95       	ret
    173a:	9f 3f       	cpi	r25, 0xFF	; 255
    173c:	30 f0       	brcs	.+12     	; 0x174a <__ftoa_engine+0x38>
    173e:	80 38       	cpi	r24, 0x80	; 128
    1740:	71 05       	cpc	r23, r1
    1742:	61 05       	cpc	r22, r1
    1744:	09 f0       	breq	.+2      	; 0x1748 <__ftoa_engine+0x36>
    1746:	3c 5f       	subi	r19, 0xFC	; 252
    1748:	3c 5f       	subi	r19, 0xFC	; 252
    174a:	3d 93       	st	X+, r19
    174c:	91 30       	cpi	r25, 0x01	; 1
    174e:	08 f0       	brcs	.+2      	; 0x1752 <__ftoa_engine+0x40>
    1750:	80 68       	ori	r24, 0x80	; 128
    1752:	91 1d       	adc	r25, r1
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	1f 93       	push	r17
    175a:	0f 93       	push	r16
    175c:	ff 92       	push	r15
    175e:	ef 92       	push	r14
    1760:	19 2f       	mov	r17, r25
    1762:	98 7f       	andi	r25, 0xF8	; 248
    1764:	96 95       	lsr	r25
    1766:	e9 2f       	mov	r30, r25
    1768:	96 95       	lsr	r25
    176a:	96 95       	lsr	r25
    176c:	e9 0f       	add	r30, r25
    176e:	ff 27       	eor	r31, r31
    1770:	e2 5f       	subi	r30, 0xF2	; 242
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	99 27       	eor	r25, r25
    1776:	33 27       	eor	r19, r19
    1778:	ee 24       	eor	r14, r14
    177a:	ff 24       	eor	r15, r15
    177c:	a7 01       	movw	r20, r14
    177e:	e7 01       	movw	r28, r14
    1780:	05 90       	lpm	r0, Z+
    1782:	08 94       	sec
    1784:	07 94       	ror	r0
    1786:	28 f4       	brcc	.+10     	; 0x1792 <__ftoa_engine+0x80>
    1788:	36 0f       	add	r19, r22
    178a:	e7 1e       	adc	r14, r23
    178c:	f8 1e       	adc	r15, r24
    178e:	49 1f       	adc	r20, r25
    1790:	51 1d       	adc	r21, r1
    1792:	66 0f       	add	r22, r22
    1794:	77 1f       	adc	r23, r23
    1796:	88 1f       	adc	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	06 94       	lsr	r0
    179c:	a1 f7       	brne	.-24     	; 0x1786 <__ftoa_engine+0x74>
    179e:	05 90       	lpm	r0, Z+
    17a0:	07 94       	ror	r0
    17a2:	28 f4       	brcc	.+10     	; 0x17ae <__ftoa_engine+0x9c>
    17a4:	e7 0e       	add	r14, r23
    17a6:	f8 1e       	adc	r15, r24
    17a8:	49 1f       	adc	r20, r25
    17aa:	56 1f       	adc	r21, r22
    17ac:	c1 1d       	adc	r28, r1
    17ae:	77 0f       	add	r23, r23
    17b0:	88 1f       	adc	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	66 1f       	adc	r22, r22
    17b6:	06 94       	lsr	r0
    17b8:	a1 f7       	brne	.-24     	; 0x17a2 <__ftoa_engine+0x90>
    17ba:	05 90       	lpm	r0, Z+
    17bc:	07 94       	ror	r0
    17be:	28 f4       	brcc	.+10     	; 0x17ca <__ftoa_engine+0xb8>
    17c0:	f8 0e       	add	r15, r24
    17c2:	49 1f       	adc	r20, r25
    17c4:	56 1f       	adc	r21, r22
    17c6:	c7 1f       	adc	r28, r23
    17c8:	d1 1d       	adc	r29, r1
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	66 1f       	adc	r22, r22
    17d0:	77 1f       	adc	r23, r23
    17d2:	06 94       	lsr	r0
    17d4:	a1 f7       	brne	.-24     	; 0x17be <__ftoa_engine+0xac>
    17d6:	05 90       	lpm	r0, Z+
    17d8:	07 94       	ror	r0
    17da:	20 f4       	brcc	.+8      	; 0x17e4 <__ftoa_engine+0xd2>
    17dc:	49 0f       	add	r20, r25
    17de:	56 1f       	adc	r21, r22
    17e0:	c7 1f       	adc	r28, r23
    17e2:	d8 1f       	adc	r29, r24
    17e4:	99 0f       	add	r25, r25
    17e6:	66 1f       	adc	r22, r22
    17e8:	77 1f       	adc	r23, r23
    17ea:	88 1f       	adc	r24, r24
    17ec:	06 94       	lsr	r0
    17ee:	a9 f7       	brne	.-22     	; 0x17da <__ftoa_engine+0xc8>
    17f0:	84 91       	lpm	r24, Z
    17f2:	10 95       	com	r17
    17f4:	17 70       	andi	r17, 0x07	; 7
    17f6:	41 f0       	breq	.+16     	; 0x1808 <__ftoa_engine+0xf6>
    17f8:	d6 95       	lsr	r29
    17fa:	c7 95       	ror	r28
    17fc:	57 95       	ror	r21
    17fe:	47 95       	ror	r20
    1800:	f7 94       	ror	r15
    1802:	e7 94       	ror	r14
    1804:	1a 95       	dec	r17
    1806:	c1 f7       	brne	.-16     	; 0x17f8 <__ftoa_engine+0xe6>
    1808:	e4 eb       	ldi	r30, 0xB4	; 180
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	68 94       	set
    180e:	15 90       	lpm	r1, Z+
    1810:	15 91       	lpm	r17, Z+
    1812:	35 91       	lpm	r19, Z+
    1814:	65 91       	lpm	r22, Z+
    1816:	95 91       	lpm	r25, Z+
    1818:	05 90       	lpm	r0, Z+
    181a:	7f e2       	ldi	r23, 0x2F	; 47
    181c:	73 95       	inc	r23
    181e:	e1 18       	sub	r14, r1
    1820:	f1 0a       	sbc	r15, r17
    1822:	43 0b       	sbc	r20, r19
    1824:	56 0b       	sbc	r21, r22
    1826:	c9 0b       	sbc	r28, r25
    1828:	d0 09       	sbc	r29, r0
    182a:	c0 f7       	brcc	.-16     	; 0x181c <__ftoa_engine+0x10a>
    182c:	e1 0c       	add	r14, r1
    182e:	f1 1e       	adc	r15, r17
    1830:	43 1f       	adc	r20, r19
    1832:	56 1f       	adc	r21, r22
    1834:	c9 1f       	adc	r28, r25
    1836:	d0 1d       	adc	r29, r0
    1838:	7e f4       	brtc	.+30     	; 0x1858 <__ftoa_engine+0x146>
    183a:	70 33       	cpi	r23, 0x30	; 48
    183c:	11 f4       	brne	.+4      	; 0x1842 <__ftoa_engine+0x130>
    183e:	8a 95       	dec	r24
    1840:	e6 cf       	rjmp	.-52     	; 0x180e <__ftoa_engine+0xfc>
    1842:	e8 94       	clt
    1844:	01 50       	subi	r16, 0x01	; 1
    1846:	30 f0       	brcs	.+12     	; 0x1854 <__ftoa_engine+0x142>
    1848:	08 0f       	add	r16, r24
    184a:	0a f4       	brpl	.+2      	; 0x184e <__ftoa_engine+0x13c>
    184c:	00 27       	eor	r16, r16
    184e:	02 17       	cp	r16, r18
    1850:	08 f4       	brcc	.+2      	; 0x1854 <__ftoa_engine+0x142>
    1852:	20 2f       	mov	r18, r16
    1854:	23 95       	inc	r18
    1856:	02 2f       	mov	r16, r18
    1858:	7a 33       	cpi	r23, 0x3A	; 58
    185a:	28 f0       	brcs	.+10     	; 0x1866 <__ftoa_engine+0x154>
    185c:	79 e3       	ldi	r23, 0x39	; 57
    185e:	7d 93       	st	X+, r23
    1860:	2a 95       	dec	r18
    1862:	e9 f7       	brne	.-6      	; 0x185e <__ftoa_engine+0x14c>
    1864:	10 c0       	rjmp	.+32     	; 0x1886 <__ftoa_engine+0x174>
    1866:	7d 93       	st	X+, r23
    1868:	2a 95       	dec	r18
    186a:	89 f6       	brne	.-94     	; 0x180e <__ftoa_engine+0xfc>
    186c:	06 94       	lsr	r0
    186e:	97 95       	ror	r25
    1870:	67 95       	ror	r22
    1872:	37 95       	ror	r19
    1874:	17 95       	ror	r17
    1876:	17 94       	ror	r1
    1878:	e1 18       	sub	r14, r1
    187a:	f1 0a       	sbc	r15, r17
    187c:	43 0b       	sbc	r20, r19
    187e:	56 0b       	sbc	r21, r22
    1880:	c9 0b       	sbc	r28, r25
    1882:	d0 09       	sbc	r29, r0
    1884:	98 f0       	brcs	.+38     	; 0x18ac <__ftoa_engine+0x19a>
    1886:	23 95       	inc	r18
    1888:	7e 91       	ld	r23, -X
    188a:	73 95       	inc	r23
    188c:	7a 33       	cpi	r23, 0x3A	; 58
    188e:	08 f0       	brcs	.+2      	; 0x1892 <__ftoa_engine+0x180>
    1890:	70 e3       	ldi	r23, 0x30	; 48
    1892:	7c 93       	st	X, r23
    1894:	20 13       	cpse	r18, r16
    1896:	b8 f7       	brcc	.-18     	; 0x1886 <__ftoa_engine+0x174>
    1898:	7e 91       	ld	r23, -X
    189a:	70 61       	ori	r23, 0x10	; 16
    189c:	7d 93       	st	X+, r23
    189e:	30 f0       	brcs	.+12     	; 0x18ac <__ftoa_engine+0x19a>
    18a0:	83 95       	inc	r24
    18a2:	71 e3       	ldi	r23, 0x31	; 49
    18a4:	7d 93       	st	X+, r23
    18a6:	70 e3       	ldi	r23, 0x30	; 48
    18a8:	2a 95       	dec	r18
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <__ftoa_engine+0x192>
    18ac:	11 24       	eor	r1, r1
    18ae:	ef 90       	pop	r14
    18b0:	ff 90       	pop	r15
    18b2:	0f 91       	pop	r16
    18b4:	1f 91       	pop	r17
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	99 27       	eor	r25, r25
    18bc:	87 fd       	sbrc	r24, 7
    18be:	90 95       	com	r25
    18c0:	08 95       	ret

000018c2 <strnlen_P>:
    18c2:	fc 01       	movw	r30, r24
    18c4:	05 90       	lpm	r0, Z+
    18c6:	61 50       	subi	r22, 0x01	; 1
    18c8:	70 40       	sbci	r23, 0x00	; 0
    18ca:	01 10       	cpse	r0, r1
    18cc:	d8 f7       	brcc	.-10     	; 0x18c4 <strnlen_P+0x2>
    18ce:	80 95       	com	r24
    18d0:	90 95       	com	r25
    18d2:	8e 0f       	add	r24, r30
    18d4:	9f 1f       	adc	r25, r31
    18d6:	08 95       	ret

000018d8 <strnlen>:
    18d8:	fc 01       	movw	r30, r24
    18da:	61 50       	subi	r22, 0x01	; 1
    18dc:	70 40       	sbci	r23, 0x00	; 0
    18de:	01 90       	ld	r0, Z+
    18e0:	01 10       	cpse	r0, r1
    18e2:	d8 f7       	brcc	.-10     	; 0x18da <strnlen+0x2>
    18e4:	80 95       	com	r24
    18e6:	90 95       	com	r25
    18e8:	8e 0f       	add	r24, r30
    18ea:	9f 1f       	adc	r25, r31
    18ec:	08 95       	ret

000018ee <fputc>:
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	fb 01       	movw	r30, r22
    18f8:	23 81       	ldd	r18, Z+3	; 0x03
    18fa:	21 fd       	sbrc	r18, 1
    18fc:	03 c0       	rjmp	.+6      	; 0x1904 <fputc+0x16>
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	9f ef       	ldi	r25, 0xFF	; 255
    1902:	2c c0       	rjmp	.+88     	; 0x195c <fputc+0x6e>
    1904:	22 ff       	sbrs	r18, 2
    1906:	16 c0       	rjmp	.+44     	; 0x1934 <fputc+0x46>
    1908:	46 81       	ldd	r20, Z+6	; 0x06
    190a:	57 81       	ldd	r21, Z+7	; 0x07
    190c:	24 81       	ldd	r18, Z+4	; 0x04
    190e:	35 81       	ldd	r19, Z+5	; 0x05
    1910:	42 17       	cp	r20, r18
    1912:	53 07       	cpc	r21, r19
    1914:	44 f4       	brge	.+16     	; 0x1926 <fputc+0x38>
    1916:	a0 81       	ld	r26, Z
    1918:	b1 81       	ldd	r27, Z+1	; 0x01
    191a:	9d 01       	movw	r18, r26
    191c:	2f 5f       	subi	r18, 0xFF	; 255
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	31 83       	std	Z+1, r19	; 0x01
    1922:	20 83       	st	Z, r18
    1924:	8c 93       	st	X, r24
    1926:	26 81       	ldd	r18, Z+6	; 0x06
    1928:	37 81       	ldd	r19, Z+7	; 0x07
    192a:	2f 5f       	subi	r18, 0xFF	; 255
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	37 83       	std	Z+7, r19	; 0x07
    1930:	26 83       	std	Z+6, r18	; 0x06
    1932:	14 c0       	rjmp	.+40     	; 0x195c <fputc+0x6e>
    1934:	8b 01       	movw	r16, r22
    1936:	ec 01       	movw	r28, r24
    1938:	fb 01       	movw	r30, r22
    193a:	00 84       	ldd	r0, Z+8	; 0x08
    193c:	f1 85       	ldd	r31, Z+9	; 0x09
    193e:	e0 2d       	mov	r30, r0
    1940:	09 95       	icall
    1942:	89 2b       	or	r24, r25
    1944:	e1 f6       	brne	.-72     	; 0x18fe <fputc+0x10>
    1946:	d8 01       	movw	r26, r16
    1948:	16 96       	adiw	r26, 0x06	; 6
    194a:	8d 91       	ld	r24, X+
    194c:	9c 91       	ld	r25, X
    194e:	17 97       	sbiw	r26, 0x07	; 7
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	17 96       	adiw	r26, 0x07	; 7
    1954:	9c 93       	st	X, r25
    1956:	8e 93       	st	-X, r24
    1958:	16 97       	sbiw	r26, 0x06	; 6
    195a:	ce 01       	movw	r24, r28
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	08 95       	ret

00001966 <snprintf>:
    1966:	ae e0       	ldi	r26, 0x0E	; 14
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e9 eb       	ldi	r30, 0xB9	; 185
    196c:	fc e0       	ldi	r31, 0x0C	; 12
    196e:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__prologue_saves__+0x1c>
    1972:	0d 89       	ldd	r16, Y+21	; 0x15
    1974:	1e 89       	ldd	r17, Y+22	; 0x16
    1976:	8f 89       	ldd	r24, Y+23	; 0x17
    1978:	98 8d       	ldd	r25, Y+24	; 0x18
    197a:	26 e0       	ldi	r18, 0x06	; 6
    197c:	2c 83       	std	Y+4, r18	; 0x04
    197e:	1a 83       	std	Y+2, r17	; 0x02
    1980:	09 83       	std	Y+1, r16	; 0x01
    1982:	97 ff       	sbrs	r25, 7
    1984:	02 c0       	rjmp	.+4      	; 0x198a <snprintf+0x24>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e8       	ldi	r25, 0x80	; 128
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	ae 01       	movw	r20, r28
    1992:	45 5e       	subi	r20, 0xE5	; 229
    1994:	5f 4f       	sbci	r21, 0xFF	; 255
    1996:	69 8d       	ldd	r22, Y+25	; 0x19
    1998:	7a 8d       	ldd	r23, Y+26	; 0x1a
    199a:	ce 01       	movw	r24, r28
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	0e 94 a4 07 	call	0xf48	; 0xf48 <vfprintf>
    19a2:	4d 81       	ldd	r20, Y+5	; 0x05
    19a4:	5e 81       	ldd	r21, Y+6	; 0x06
    19a6:	57 fd       	sbrc	r21, 7
    19a8:	0a c0       	rjmp	.+20     	; 0x19be <snprintf+0x58>
    19aa:	2f 81       	ldd	r18, Y+7	; 0x07
    19ac:	38 85       	ldd	r19, Y+8	; 0x08
    19ae:	42 17       	cp	r20, r18
    19b0:	53 07       	cpc	r21, r19
    19b2:	0c f4       	brge	.+2      	; 0x19b6 <snprintf+0x50>
    19b4:	9a 01       	movw	r18, r20
    19b6:	f8 01       	movw	r30, r16
    19b8:	e2 0f       	add	r30, r18
    19ba:	f3 1f       	adc	r31, r19
    19bc:	10 82       	st	Z, r1
    19be:	2e 96       	adiw	r28, 0x0e	; 14
    19c0:	e4 e0       	ldi	r30, 0x04	; 4
    19c2:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__epilogue_restores__+0x1c>

000019c6 <__ultoa_invert>:
    19c6:	fa 01       	movw	r30, r20
    19c8:	aa 27       	eor	r26, r26
    19ca:	28 30       	cpi	r18, 0x08	; 8
    19cc:	51 f1       	breq	.+84     	; 0x1a22 <__ultoa_invert+0x5c>
    19ce:	20 31       	cpi	r18, 0x10	; 16
    19d0:	81 f1       	breq	.+96     	; 0x1a32 <__ultoa_invert+0x6c>
    19d2:	e8 94       	clt
    19d4:	6f 93       	push	r22
    19d6:	6e 7f       	andi	r22, 0xFE	; 254
    19d8:	6e 5f       	subi	r22, 0xFE	; 254
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	af 4f       	sbci	r26, 0xFF	; 255
    19e2:	b1 e0       	ldi	r27, 0x01	; 1
    19e4:	3e d0       	rcall	.+124    	; 0x1a62 <__ultoa_invert+0x9c>
    19e6:	b4 e0       	ldi	r27, 0x04	; 4
    19e8:	3c d0       	rcall	.+120    	; 0x1a62 <__ultoa_invert+0x9c>
    19ea:	67 0f       	add	r22, r23
    19ec:	78 1f       	adc	r23, r24
    19ee:	89 1f       	adc	r24, r25
    19f0:	9a 1f       	adc	r25, r26
    19f2:	a1 1d       	adc	r26, r1
    19f4:	68 0f       	add	r22, r24
    19f6:	79 1f       	adc	r23, r25
    19f8:	8a 1f       	adc	r24, r26
    19fa:	91 1d       	adc	r25, r1
    19fc:	a1 1d       	adc	r26, r1
    19fe:	6a 0f       	add	r22, r26
    1a00:	71 1d       	adc	r23, r1
    1a02:	81 1d       	adc	r24, r1
    1a04:	91 1d       	adc	r25, r1
    1a06:	a1 1d       	adc	r26, r1
    1a08:	20 d0       	rcall	.+64     	; 0x1a4a <__ultoa_invert+0x84>
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <__ultoa_invert+0x48>
    1a0c:	68 94       	set
    1a0e:	3f 91       	pop	r19
    1a10:	2a e0       	ldi	r18, 0x0A	; 10
    1a12:	26 9f       	mul	r18, r22
    1a14:	11 24       	eor	r1, r1
    1a16:	30 19       	sub	r19, r0
    1a18:	30 5d       	subi	r19, 0xD0	; 208
    1a1a:	31 93       	st	Z+, r19
    1a1c:	de f6       	brtc	.-74     	; 0x19d4 <__ultoa_invert+0xe>
    1a1e:	cf 01       	movw	r24, r30
    1a20:	08 95       	ret
    1a22:	46 2f       	mov	r20, r22
    1a24:	47 70       	andi	r20, 0x07	; 7
    1a26:	40 5d       	subi	r20, 0xD0	; 208
    1a28:	41 93       	st	Z+, r20
    1a2a:	b3 e0       	ldi	r27, 0x03	; 3
    1a2c:	0f d0       	rcall	.+30     	; 0x1a4c <__ultoa_invert+0x86>
    1a2e:	c9 f7       	brne	.-14     	; 0x1a22 <__ultoa_invert+0x5c>
    1a30:	f6 cf       	rjmp	.-20     	; 0x1a1e <__ultoa_invert+0x58>
    1a32:	46 2f       	mov	r20, r22
    1a34:	4f 70       	andi	r20, 0x0F	; 15
    1a36:	40 5d       	subi	r20, 0xD0	; 208
    1a38:	4a 33       	cpi	r20, 0x3A	; 58
    1a3a:	18 f0       	brcs	.+6      	; 0x1a42 <__ultoa_invert+0x7c>
    1a3c:	49 5d       	subi	r20, 0xD9	; 217
    1a3e:	31 fd       	sbrc	r19, 1
    1a40:	40 52       	subi	r20, 0x20	; 32
    1a42:	41 93       	st	Z+, r20
    1a44:	02 d0       	rcall	.+4      	; 0x1a4a <__ultoa_invert+0x84>
    1a46:	a9 f7       	brne	.-22     	; 0x1a32 <__ultoa_invert+0x6c>
    1a48:	ea cf       	rjmp	.-44     	; 0x1a1e <__ultoa_invert+0x58>
    1a4a:	b4 e0       	ldi	r27, 0x04	; 4
    1a4c:	a6 95       	lsr	r26
    1a4e:	97 95       	ror	r25
    1a50:	87 95       	ror	r24
    1a52:	77 95       	ror	r23
    1a54:	67 95       	ror	r22
    1a56:	ba 95       	dec	r27
    1a58:	c9 f7       	brne	.-14     	; 0x1a4c <__ultoa_invert+0x86>
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	61 05       	cpc	r22, r1
    1a5e:	71 05       	cpc	r23, r1
    1a60:	08 95       	ret
    1a62:	9b 01       	movw	r18, r22
    1a64:	ac 01       	movw	r20, r24
    1a66:	0a 2e       	mov	r0, r26
    1a68:	06 94       	lsr	r0
    1a6a:	57 95       	ror	r21
    1a6c:	47 95       	ror	r20
    1a6e:	37 95       	ror	r19
    1a70:	27 95       	ror	r18
    1a72:	ba 95       	dec	r27
    1a74:	c9 f7       	brne	.-14     	; 0x1a68 <__ultoa_invert+0xa2>
    1a76:	62 0f       	add	r22, r18
    1a78:	73 1f       	adc	r23, r19
    1a7a:	84 1f       	adc	r24, r20
    1a7c:	95 1f       	adc	r25, r21
    1a7e:	a0 1d       	adc	r26, r0
    1a80:	08 95       	ret

00001a82 <_exit>:
    1a82:	f8 94       	cli

00001a84 <__stop_program>:
    1a84:	ff cf       	rjmp	.-2      	; 0x1a84 <__stop_program>
