
avr_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00002940  000029d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  0080016a  0080016a  00002a3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003634  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000146f  00000000  00000000  000063f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fd3  00000000  00000000  0000785f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000950  00000000  00000000  00009834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e1c  00000000  00000000  0000a184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035f0  00000000  00000000  0000afa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000e590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__ctors_end>
       4:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_1>
       8:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_2>
       c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      10:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      14:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      18:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      1c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      20:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      24:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_9>
      28:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_10>
      2c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_11>
      30:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      34:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      38:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      3c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      40:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      44:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      48:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      4c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      50:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      54:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      58:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      5c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      60:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      64:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      68:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      6c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      70:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      74:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      78:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      7c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      80:	0c 94 94 03 	jmp	0x728	; 0x728 <__vector_32>
      84:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      88:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      8c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      90:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      94:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      98:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      9c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      a0:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      a4:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      a8:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__bad_interrupt>
      ac:	e2 04       	cpc	r14, r2
      ae:	ce 04       	cpc	r12, r14
      b0:	f5 04       	cpc	r15, r5
      b2:	ce 04       	cpc	r12, r14
      b4:	f5 04       	cpc	r15, r5
      b6:	f5 04       	cpc	r15, r5
      b8:	e2 04       	cpc	r14, r2
      ba:	e2 04       	cpc	r14, r2
      bc:	f5 04       	cpc	r15, r5
      be:	f5 04       	cpc	r15, r5
      c0:	ce 04       	cpc	r12, r14
      c2:	f5 04       	cpc	r15, r5
      c4:	ce 04       	cpc	r12, r14
      c6:	e2 04       	cpc	r14, r2
      c8:	48 05       	cpc	r20, r8
      ca:	34 05       	cpc	r19, r4
      cc:	5b 05       	cpc	r21, r11
      ce:	34 05       	cpc	r19, r4
      d0:	5b 05       	cpc	r21, r11
      d2:	5b 05       	cpc	r21, r11
      d4:	48 05       	cpc	r20, r8
      d6:	48 05       	cpc	r20, r8
      d8:	5b 05       	cpc	r21, r11
      da:	5b 05       	cpc	r21, r11
      dc:	34 05       	cpc	r19, r4
      de:	5b 05       	cpc	r21, r11
      e0:	34 05       	cpc	r19, r4
      e2:	48 05       	cpc	r20, r8
      e4:	af 05       	cpc	r26, r15
      e6:	9b 05       	cpc	r25, r11
      e8:	c2 05       	cpc	r28, r2
      ea:	9b 05       	cpc	r25, r11
      ec:	c2 05       	cpc	r28, r2
      ee:	c2 05       	cpc	r28, r2
      f0:	af 05       	cpc	r26, r15
      f2:	af 05       	cpc	r26, r15
      f4:	c2 05       	cpc	r28, r2
      f6:	c2 05       	cpc	r28, r2
      f8:	9b 05       	cpc	r25, r11
      fa:	c2 05       	cpc	r28, r2
      fc:	9b 05       	cpc	r25, r11
      fe:	af 05       	cpc	r26, r15

00000100 <__trampolines_end>:
     100:	6e 61       	ori	r22, 0x1E	; 30
     102:	6e 00       	.word	0x006e	; ????

00000104 <__c.2332>:
     104:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     114:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     124:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     134:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     144:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     154:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     164:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     174:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     184:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     194:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1a4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1b4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1c4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1d4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1e4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1f4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000202 <__c.2474>:
     202:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000020e <__c.2416>:
     20e:	49 4d 55 20 46 61 69 6c 65 64 0d 0a 00              IMU Failed...

0000021b <__c.2414>:
     21b:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

00000226 <__c.2412>:
     226:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

00000231 <descriptor_list>:
     231:	00 01 00 00 c8 02 12 00 02 00 00 85 02 43 00 03     .............C..
     241:	00 00 81 02 04 01 03 09 04 6d 02 12 02 03 09 04     .........m......
     251:	65 02 06 03 03 09 04 5b 02 08                       e......[..

0000025b <string3>:
     25b:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000265 <string2>:
     265:	06 03 4d 00 32 00 00 00                             ..M.2...

0000026d <string1>:
     26d:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     27d:	65 00 00 00                                         e...

00000281 <string0>:
     281:	04 03 09 04                                         ....

00000285 <config1_descriptor>:
     285:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     295:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     2a5:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     2b5:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     2c5:	40 00 00                                            @..

000002c8 <device_descriptor>:
     2c8:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     2d8:	03 01                                               ..

000002da <endpoint_config_table>:
     2da:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000002e4 <__ctors_end>:
     2e4:	11 24       	eor	r1, r1
     2e6:	1f be       	out	0x3f, r1	; 63
     2e8:	cf ef       	ldi	r28, 0xFF	; 255
     2ea:	da e0       	ldi	r29, 0x0A	; 10
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	cd bf       	out	0x3d, r28	; 61

000002f0 <__do_copy_data>:
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	a0 e0       	ldi	r26, 0x00	; 0
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	e0 e4       	ldi	r30, 0x40	; 64
     2f8:	f9 e2       	ldi	r31, 0x29	; 41
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <__do_copy_data+0x10>
     2fc:	05 90       	lpm	r0, Z+
     2fe:	0d 92       	st	X+, r0
     300:	aa 36       	cpi	r26, 0x6A	; 106
     302:	b1 07       	cpc	r27, r17
     304:	d9 f7       	brne	.-10     	; 0x2fc <__do_copy_data+0xc>

00000306 <__do_clear_bss>:
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	aa e6       	ldi	r26, 0x6A	; 106
     30a:	b1 e0       	ldi	r27, 0x01	; 1
     30c:	01 c0       	rjmp	.+2      	; 0x310 <.do_clear_bss_start>

0000030e <.do_clear_bss_loop>:
     30e:	1d 92       	st	X+, r1

00000310 <.do_clear_bss_start>:
     310:	a2 3d       	cpi	r26, 0xD2	; 210
     312:	b2 07       	cpc	r27, r18
     314:	e1 f7       	brne	.-8      	; 0x30e <.do_clear_bss_loop>
     316:	0e 94 39 03 	call	0x672	; 0x672 <main>
     31a:	0c 94 9e 14 	jmp	0x293c	; 0x293c <_exit>

0000031e <__bad_interrupt>:
     31e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000322 <timer3_init_50Hz>:
/* --------------------- TIMER-3 INITIALISATION (CTC, 50 Hz) ------------------
   16 MHz / 256 prescale = 62 500 Hz
   62 500 Hz 0.02 s = 1 250 counts ? OCR3A = 1249               */
static void timer3_init_50Hz(void)
{
    TCCR3A = 0;                          /* normal port operation       */
     322:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    TCCR3B = (1 << WGM32) | (1 << CS32); /* CTC, prescaler = 256        */
     326:	8c e0       	ldi	r24, 0x0C	; 12
     328:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    OCR3A = 1249;
     32c:	81 ee       	ldi	r24, 0xE1	; 225
     32e:	94 e0       	ldi	r25, 0x04	; 4
     330:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
     334:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
    TIMSK3 = (1 << OCIE3A); /* enable compare-match A IRQ  */
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f8071>
     33e:	08 95       	ret

00000340 <parse_jetson_line>:

    extern float rx_distance, rx_angle, rx_lin_acc, rx_max_ang_acc;
    extern uint16_t rx_max_vel, rx_max_omega, rx_last_vel, rx_last_omega;

    // Note: "%f" for floats, "%u" for uint16_t on AVR
    int cnt = sscanf(line,
     340:	2a e6       	ldi	r18, 0x6A	; 106
     342:	31 e0       	ldi	r19, 0x01	; 1
     344:	3f 93       	push	r19
     346:	2f 93       	push	r18
     348:	2e e6       	ldi	r18, 0x6E	; 110
     34a:	31 e0       	ldi	r19, 0x01	; 1
     34c:	3f 93       	push	r19
     34e:	2f 93       	push	r18
     350:	22 e7       	ldi	r18, 0x72	; 114
     352:	31 e0       	ldi	r19, 0x01	; 1
     354:	3f 93       	push	r19
     356:	2f 93       	push	r18
     358:	24 e7       	ldi	r18, 0x74	; 116
     35a:	31 e0       	ldi	r19, 0x01	; 1
     35c:	3f 93       	push	r19
     35e:	2f 93       	push	r18
     360:	26 e7       	ldi	r18, 0x76	; 118
     362:	31 e0       	ldi	r19, 0x01	; 1
     364:	3f 93       	push	r19
     366:	2f 93       	push	r18
     368:	28 e7       	ldi	r18, 0x78	; 120
     36a:	31 e0       	ldi	r19, 0x01	; 1
     36c:	3f 93       	push	r19
     36e:	2f 93       	push	r18
     370:	2a e7       	ldi	r18, 0x7A	; 122
     372:	31 e0       	ldi	r19, 0x01	; 1
     374:	3f 93       	push	r19
     376:	2f 93       	push	r18
     378:	2e e7       	ldi	r18, 0x7E	; 126
     37a:	31 e0       	ldi	r19, 0x01	; 1
     37c:	3f 93       	push	r19
     37e:	2f 93       	push	r18
     380:	27 e0       	ldi	r18, 0x07	; 7
     382:	31 e0       	ldi	r19, 0x01	; 1
     384:	3f 93       	push	r19
     386:	2f 93       	push	r18
     388:	9f 93       	push	r25
     38a:	8f 93       	push	r24
     38c:	0e 94 0c 11 	call	0x2218	; 0x2218 <sscanf>
                     &rx_max_omega,
                     &rx_last_vel,
                     &rx_last_omega,
                     &rx_lin_acc,
                     &rx_max_ang_acc);
    return (cnt == 8) ? 1 : 0;
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	4d b7       	in	r20, 0x3d	; 61
     394:	5e b7       	in	r21, 0x3e	; 62
     396:	4c 5e       	subi	r20, 0xEC	; 236
     398:	5f 4f       	sbci	r21, 0xFF	; 255
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	5e bf       	out	0x3e, r21	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	4d bf       	out	0x3d, r20	; 61
     3a4:	08 97       	sbiw	r24, 0x08	; 8
     3a6:	09 f0       	breq	.+2      	; 0x3aa <parse_jetson_line+0x6a>
     3a8:	20 e0       	ldi	r18, 0x00	; 0
}
     3aa:	82 2f       	mov	r24, r18
     3ac:	08 95       	ret

000003ae <receive_from_jetson>:

static void receive_from_jetson(void)
{
    while (m_usb_rx_available())
     3ae:	21 c0       	rjmp	.+66     	; 0x3f2 <receive_from_jetson+0x44>
    {
        char c = m_usb_rx_char();
     3b0:	0e 94 84 08 	call	0x1108	; 0x1108 <m_usb_rx_char>
        // start parsing if new line detected
        if (c == '\n' || c == '\r')
     3b4:	8a 30       	cpi	r24, 0x0A	; 10
     3b6:	11 f0       	breq	.+4      	; 0x3bc <receive_from_jetson+0xe>
     3b8:	8d 30       	cpi	r24, 0x0D	; 13
     3ba:	79 f4       	brne	.+30     	; 0x3da <receive_from_jetson+0x2c>
        {
            if (rx_index > 0)
     3bc:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <rx_index>
     3c0:	ee 23       	and	r30, r30
     3c2:	b9 f0       	breq	.+46     	; 0x3f2 <receive_from_jetson+0x44>
            {
                rx_buf[rx_index] = '\0';
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	ed 57       	subi	r30, 0x7D	; 125
     3c8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ca:	10 82       	st	Z, r1
                if (parse_jetson_line(rx_buf))
     3cc:	83 e8       	ldi	r24, 0x83	; 131
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 a0 01 	call	0x340	; 0x340 <parse_jetson_line>
                {
                }
                rx_index = 0;
     3d4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <rx_index>
     3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <receive_from_jetson+0x44>
            }
        }
        else if (rx_index < (RX_BUF_SIZE - 1))
     3da:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <rx_index>
     3de:	ef 33       	cpi	r30, 0x3F	; 63
     3e0:	40 f4       	brcc	.+16     	; 0x3f2 <receive_from_jetson+0x44>
        {
            rx_buf[rx_index++] = c;
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	9e 0f       	add	r25, r30
     3e6:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <rx_index>
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	ed 57       	subi	r30, 0x7D	; 125
     3ee:	fe 4f       	sbci	r31, 0xFE	; 254
     3f0:	80 83       	st	Z, r24
    return (cnt == 8) ? 1 : 0;
}

static void receive_from_jetson(void)
{
    while (m_usb_rx_available())
     3f2:	0e 94 a2 08 	call	0x1144	; 0x1144 <m_usb_rx_available>
     3f6:	81 11       	cpse	r24, r1
     3f8:	db cf       	rjmp	.-74     	; 0x3b0 <receive_from_jetson+0x2>
        else if (rx_index < (RX_BUF_SIZE - 1))
        {
            rx_buf[rx_index++] = c;
        }
    }
}
     3fa:	08 95       	ret

000003fc <usb_send_ram>:
    m_usb_tx_push();
}

/* ------------------- Tiny helper ------------------------- */
static void usb_send_ram(const char *s)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	ec 01       	movw	r28, r24
    while (*s)
     402:	03 c0       	rjmp	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
        m_usb_tx_char(*s++);
     404:	21 96       	adiw	r28, 0x01	; 1
     406:	0e 94 b1 08 	call	0x1162	; 0x1162 <m_usb_tx_char>
}

/* ------------------- Tiny helper ------------------------- */
static void usb_send_ram(const char *s)
{
    while (*s)
     40a:	88 81       	ld	r24, Y
     40c:	81 11       	cpse	r24, r1
     40e:	fa cf       	rjmp	.-12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
        m_usb_tx_char(*s++);
}
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <send_telemetry>:
    send_telemetry(); /* quick! no heavy work here   */
}

/* ------------------- TELEMETRY SENDER (called from main) ----------------- */
static void send_telemetry(void)
{
     416:	2f 92       	push	r2
     418:	3f 92       	push	r3
     41a:	4f 92       	push	r4
     41c:	5f 92       	push	r5
     41e:	6f 92       	push	r6
     420:	7f 92       	push	r7
     422:	8f 92       	push	r8
     424:	9f 92       	push	r9
     426:	af 92       	push	r10
     428:	bf 92       	push	r11
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	c0 5b       	subi	r28, 0xB0	; 176
     440:	d1 09       	sbc	r29, r1
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
    char line[160];

    /* ---------- IMU ---------- */
    int16_t h16, r16, p16;
    bno055_get_euler(&h16, &r16, &p16);
     44c:	ae 01       	movw	r20, r28
     44e:	4b 55       	subi	r20, 0x5B	; 91
     450:	5f 4f       	sbci	r21, 0xFF	; 255
     452:	be 01       	movw	r22, r28
     454:	6d 55       	subi	r22, 0x5D	; 93
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	ce 01       	movw	r24, r28
     45a:	8f 55       	subi	r24, 0x5F	; 95
     45c:	9f 4f       	sbci	r25, 0xFF	; 255
     45e:	0e 94 2f 07 	call	0xe5e	; 0xe5e <bno055_get_euler>

    float h = h16 / 16.0f;
     462:	cf 55       	subi	r28, 0x5F	; 95
     464:	df 4f       	sbci	r29, 0xFF	; 255
     466:	68 81       	ld	r22, Y
     468:	79 81       	ldd	r23, Y+1	; 0x01
     46a:	c1 5a       	subi	r28, 0xA1	; 161
     46c:	d0 40       	sbci	r29, 0x00	; 0
     46e:	07 2e       	mov	r0, r23
     470:	00 0c       	add	r0, r0
     472:	88 0b       	sbc	r24, r24
     474:	99 0b       	sbc	r25, r25
     476:	0e 94 ce 0a 	call	0x159c	; 0x159c <__floatsisf>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e8       	ldi	r20, 0x80	; 128
     480:	5d e3       	ldi	r21, 0x3D	; 61
     482:	0e 94 09 0b 	call	0x1612	; 0x1612 <__mulsf3>
     486:	c9 55       	subi	r28, 0x59	; 89
     488:	df 4f       	sbci	r29, 0xFF	; 255
     48a:	68 83       	st	Y, r22
     48c:	c7 5a       	subi	r28, 0xA7	; 167
     48e:	d0 40       	sbci	r29, 0x00	; 0
     490:	c8 55       	subi	r28, 0x58	; 88
     492:	df 4f       	sbci	r29, 0xFF	; 255
     494:	78 83       	st	Y, r23
     496:	c8 5a       	subi	r28, 0xA8	; 168
     498:	d0 40       	sbci	r29, 0x00	; 0
     49a:	c7 55       	subi	r28, 0x57	; 87
     49c:	df 4f       	sbci	r29, 0xFF	; 255
     49e:	88 83       	st	Y, r24
     4a0:	c9 5a       	subi	r28, 0xA9	; 169
     4a2:	d0 40       	sbci	r29, 0x00	; 0
     4a4:	c6 55       	subi	r28, 0x56	; 86
     4a6:	df 4f       	sbci	r29, 0xFF	; 255
     4a8:	98 83       	st	Y, r25
     4aa:	ca 5a       	subi	r28, 0xAA	; 170
     4ac:	d0 40       	sbci	r29, 0x00	; 0
    float r = r16 / 16.0f;
     4ae:	cd 55       	subi	r28, 0x5D	; 93
     4b0:	df 4f       	sbci	r29, 0xFF	; 255
     4b2:	68 81       	ld	r22, Y
     4b4:	79 81       	ldd	r23, Y+1	; 0x01
     4b6:	c3 5a       	subi	r28, 0xA3	; 163
     4b8:	d0 40       	sbci	r29, 0x00	; 0
     4ba:	07 2e       	mov	r0, r23
     4bc:	00 0c       	add	r0, r0
     4be:	88 0b       	sbc	r24, r24
     4c0:	99 0b       	sbc	r25, r25
     4c2:	0e 94 ce 0a 	call	0x159c	; 0x159c <__floatsisf>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e8       	ldi	r20, 0x80	; 128
     4cc:	5d e3       	ldi	r21, 0x3D	; 61
     4ce:	0e 94 09 0b 	call	0x1612	; 0x1612 <__mulsf3>
     4d2:	c5 55       	subi	r28, 0x55	; 85
     4d4:	df 4f       	sbci	r29, 0xFF	; 255
     4d6:	68 83       	st	Y, r22
     4d8:	cb 5a       	subi	r28, 0xAB	; 171
     4da:	d0 40       	sbci	r29, 0x00	; 0
     4dc:	c4 55       	subi	r28, 0x54	; 84
     4de:	df 4f       	sbci	r29, 0xFF	; 255
     4e0:	78 83       	st	Y, r23
     4e2:	cc 5a       	subi	r28, 0xAC	; 172
     4e4:	d0 40       	sbci	r29, 0x00	; 0
     4e6:	c3 55       	subi	r28, 0x53	; 83
     4e8:	df 4f       	sbci	r29, 0xFF	; 255
     4ea:	88 83       	st	Y, r24
     4ec:	cd 5a       	subi	r28, 0xAD	; 173
     4ee:	d0 40       	sbci	r29, 0x00	; 0
     4f0:	c2 55       	subi	r28, 0x52	; 82
     4f2:	df 4f       	sbci	r29, 0xFF	; 255
     4f4:	98 83       	st	Y, r25
     4f6:	ce 5a       	subi	r28, 0xAE	; 174
     4f8:	d0 40       	sbci	r29, 0x00	; 0
    float p = p16 / 16.0f;
     4fa:	cb 55       	subi	r28, 0x5B	; 91
     4fc:	df 4f       	sbci	r29, 0xFF	; 255
     4fe:	68 81       	ld	r22, Y
     500:	79 81       	ldd	r23, Y+1	; 0x01
     502:	c5 5a       	subi	r28, 0xA5	; 165
     504:	d0 40       	sbci	r29, 0x00	; 0
     506:	07 2e       	mov	r0, r23
     508:	00 0c       	add	r0, r0
     50a:	88 0b       	sbc	r24, r24
     50c:	99 0b       	sbc	r25, r25
     50e:	0e 94 ce 0a 	call	0x159c	; 0x159c <__floatsisf>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e8       	ldi	r20, 0x80	; 128
     518:	5d e3       	ldi	r21, 0x3D	; 61
     51a:	0e 94 09 0b 	call	0x1612	; 0x1612 <__mulsf3>
     51e:	c1 55       	subi	r28, 0x51	; 81
     520:	df 4f       	sbci	r29, 0xFF	; 255
     522:	68 83       	st	Y, r22
     524:	cf 5a       	subi	r28, 0xAF	; 175
     526:	d0 40       	sbci	r29, 0x00	; 0
     528:	c0 55       	subi	r28, 0x50	; 80
     52a:	df 4f       	sbci	r29, 0xFF	; 255
     52c:	78 83       	st	Y, r23
     52e:	c0 5b       	subi	r28, 0xB0	; 176
     530:	d0 40       	sbci	r29, 0x00	; 0
     532:	18 2f       	mov	r17, r24
     534:	09 2f       	mov	r16, r25

    // uint8_t cal = bno055_is_fully_calibrated() ? 1u : 0u;

    /* ---------- ADC ---------- */
    uint16_t vbat_main = analog_get_battery_1_mV();
     536:	0e 94 0d 04 	call	0x81a	; 0x81a <analog_get_battery_1_mV>
     53a:	f8 2e       	mov	r15, r24
     53c:	e9 2e       	mov	r14, r25
    uint16_t vbat_aux = analog_get_battery_2_mV();
     53e:	0e 94 1d 04 	call	0x83a	; 0x83a <analog_get_battery_2_mV>
     542:	d8 2e       	mov	r13, r24
     544:	c9 2e       	mov	r12, r25
    uint16_t cliffL = analog_get_cliff_left();
     546:	0e 94 2d 04 	call	0x85a	; 0x85a <analog_get_cliff_left>
     54a:	b8 2e       	mov	r11, r24
     54c:	a9 2e       	mov	r10, r25
    uint16_t cliffF = analog_get_cliff_front();
     54e:	0e 94 31 04 	call	0x862	; 0x862 <analog_get_cliff_front>
     552:	98 2e       	mov	r9, r24
     554:	89 2e       	mov	r8, r25
    uint16_t cliffR = analog_get_cliff_right();
     556:	0e 94 35 04 	call	0x86a	; 0x86a <analog_get_cliff_right>
     55a:	78 2e       	mov	r7, r24
     55c:	69 2e       	mov	r6, r25

    /* ---------- Encoders ---------- */
    int32_t encL = encoder_get_left();
     55e:	0e 94 d1 05 	call	0xba2	; 0xba2 <encoder_get_left>
     562:	56 2e       	mov	r5, r22
     564:	47 2e       	mov	r4, r23
     566:	38 2e       	mov	r3, r24
     568:	29 2e       	mov	r2, r25
    int32_t encR = encoder_get_right();
     56a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <encoder_get_right>

    /* ---------- Format & ship ---------- */
    snprintf(line, sizeof(line),
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	7f 93       	push	r23
     574:	6f 93       	push	r22
     576:	2f 92       	push	r2
     578:	3f 92       	push	r3
     57a:	4f 92       	push	r4
     57c:	5f 92       	push	r5
     57e:	6f 92       	push	r6
     580:	7f 92       	push	r7
     582:	8f 92       	push	r8
     584:	9f 92       	push	r9
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	c0 55       	subi	r28, 0x50	; 80
     598:	df 4f       	sbci	r29, 0xFF	; 255
     59a:	88 81       	ld	r24, Y
     59c:	c0 5b       	subi	r28, 0xB0	; 176
     59e:	d0 40       	sbci	r29, 0x00	; 0
     5a0:	8f 93       	push	r24
     5a2:	c1 55       	subi	r28, 0x51	; 81
     5a4:	df 4f       	sbci	r29, 0xFF	; 255
     5a6:	98 81       	ld	r25, Y
     5a8:	cf 5a       	subi	r28, 0xAF	; 175
     5aa:	d0 40       	sbci	r29, 0x00	; 0
     5ac:	9f 93       	push	r25
     5ae:	c2 55       	subi	r28, 0x52	; 82
     5b0:	df 4f       	sbci	r29, 0xFF	; 255
     5b2:	88 81       	ld	r24, Y
     5b4:	ce 5a       	subi	r28, 0xAE	; 174
     5b6:	d0 40       	sbci	r29, 0x00	; 0
     5b8:	8f 93       	push	r24
     5ba:	c3 55       	subi	r28, 0x53	; 83
     5bc:	df 4f       	sbci	r29, 0xFF	; 255
     5be:	98 81       	ld	r25, Y
     5c0:	cd 5a       	subi	r28, 0xAD	; 173
     5c2:	d0 40       	sbci	r29, 0x00	; 0
     5c4:	9f 93       	push	r25
     5c6:	c4 55       	subi	r28, 0x54	; 84
     5c8:	df 4f       	sbci	r29, 0xFF	; 255
     5ca:	88 81       	ld	r24, Y
     5cc:	cc 5a       	subi	r28, 0xAC	; 172
     5ce:	d0 40       	sbci	r29, 0x00	; 0
     5d0:	8f 93       	push	r24
     5d2:	c5 55       	subi	r28, 0x55	; 85
     5d4:	df 4f       	sbci	r29, 0xFF	; 255
     5d6:	98 81       	ld	r25, Y
     5d8:	cb 5a       	subi	r28, 0xAB	; 171
     5da:	d0 40       	sbci	r29, 0x00	; 0
     5dc:	9f 93       	push	r25
     5de:	c6 55       	subi	r28, 0x56	; 86
     5e0:	df 4f       	sbci	r29, 0xFF	; 255
     5e2:	88 81       	ld	r24, Y
     5e4:	ca 5a       	subi	r28, 0xAA	; 170
     5e6:	d0 40       	sbci	r29, 0x00	; 0
     5e8:	8f 93       	push	r24
     5ea:	c7 55       	subi	r28, 0x57	; 87
     5ec:	df 4f       	sbci	r29, 0xFF	; 255
     5ee:	98 81       	ld	r25, Y
     5f0:	c9 5a       	subi	r28, 0xA9	; 169
     5f2:	d0 40       	sbci	r29, 0x00	; 0
     5f4:	9f 93       	push	r25
     5f6:	c8 55       	subi	r28, 0x58	; 88
     5f8:	df 4f       	sbci	r29, 0xFF	; 255
     5fa:	88 81       	ld	r24, Y
     5fc:	c8 5a       	subi	r28, 0xA8	; 168
     5fe:	d0 40       	sbci	r29, 0x00	; 0
     600:	8f 93       	push	r24
     602:	c9 55       	subi	r28, 0x59	; 89
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	98 81       	ld	r25, Y
     608:	c7 5a       	subi	r28, 0xA7	; 167
     60a:	d0 40       	sbci	r29, 0x00	; 0
     60c:	9f 93       	push	r25
     60e:	8f e1       	ldi	r24, 0x1F	; 31
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	1f 92       	push	r1
     618:	80 ea       	ldi	r24, 0xA0	; 160
     61a:	8f 93       	push	r24
     61c:	8e 01       	movw	r16, r28
     61e:	0f 5f       	subi	r16, 0xFF	; 255
     620:	1f 4f       	sbci	r17, 0xFF	; 255
     622:	1f 93       	push	r17
     624:	0f 93       	push	r16
     626:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <snprintf>
             h, r, p,               /* argument now matches %u   */
             vbat_main, vbat_aux,
             cliffL, cliffF, cliffR,
             (long)encL, (long)encR); /* cast silences -format    */

    usb_send_ram(line);
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	c8 01       	movw	r24, r16
     636:	0e 94 fe 01 	call	0x3fc	; 0x3fc <usb_send_ram>
    m_usb_tx_push();
     63a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <m_usb_tx_push>
}
     63e:	c0 55       	subi	r28, 0x50	; 80
     640:	df 4f       	sbci	r29, 0xFF	; 255
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	ff 90       	pop	r15
     656:	ef 90       	pop	r14
     658:	df 90       	pop	r13
     65a:	cf 90       	pop	r12
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	7f 90       	pop	r7
     666:	6f 90       	pop	r6
     668:	5f 90       	pop	r5
     66a:	4f 90       	pop	r4
     66c:	3f 90       	pop	r3
     66e:	2f 90       	pop	r2
     670:	08 95       	ret

00000672 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     672:	2f ef       	ldi	r18, 0xFF	; 255
     674:	31 ee       	ldi	r19, 0xE1	; 225
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	21 50       	subi	r18, 0x01	; 1
     67a:	30 40       	sbci	r19, 0x00	; 0
     67c:	80 40       	sbci	r24, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <main+0x6>
     680:	00 c0       	rjmp	.+0      	; 0x682 <main+0x10>
     682:	00 00       	nop
/* ====================================================*/
int main(void)
{
    /* ---- initialize everything ---- */
    _delay_ms(100);
    m_usb_init();
     684:	0e 94 68 08 	call	0x10d0	; 0x10d0 <m_usb_init>

    // If usb handshake fails, this will block the entire execution of the code, remove at production ready code
    while (!m_usb_isconnected())
     688:	0e 94 81 08 	call	0x1102	; 0x1102 <m_usb_isconnected>
     68c:	88 23       	and	r24, r24
     68e:	e1 f3       	breq	.-8      	; 0x688 <main+0x16>
    {
    } /* wait for host terminal      */

    m_usb_tx_string("M2 ready\r\n");
     690:	86 e2       	ldi	r24, 0x26	; 38
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 b4 0a 	call	0x1568	; 0x1568 <print_P>

    motors_init();
     698:	0e 94 72 07 	call	0xee4	; 0xee4 <motors_init>
    encoder_init();
     69c:	0e 94 39 04 	call	0x872	; 0x872 <encoder_init>
    analog_init();
     6a0:	0e 94 b8 03 	call	0x770	; 0x770 <analog_init>

    // /* --------------------- quick test sequence ------------------------------ */
    motors_enable_left(true);
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <motors_enable_left>
    motors_enable_right(true);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 b1 07 	call	0xf62	; 0xf62 <motors_enable_right>

    motors_set_dir_left(false);
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 c4 07 	call	0xf88	; 0xf88 <motors_set_dir_left>
    motors_set_dir_right(true);
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <motors_set_dir_right>
     6bc:	8f e3       	ldi	r24, 0x3F	; 63
     6be:	9f e1       	ldi	r25, 0x1F	; 31
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <main+0x4e>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <main+0x54>
     6c6:	00 00       	nop
    _delay_ms(2);
    motors_set_speed_left(1000);
     6c8:	88 ee       	ldi	r24, 0xE8	; 232
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <motors_set_speed_left>
    motors_set_speed_right(1000);
     6d0:	88 ee       	ldi	r24, 0xE8	; 232
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	0e 94 2e 08 	call	0x105c	; 0x105c <motors_set_speed_right>
     6d8:	94 e5       	ldi	r25, 0x54	; 84
     6da:	2d ec       	ldi	r18, 0xCD	; 205
     6dc:	3d e2       	ldi	r19, 0x2D	; 45
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	91 50       	subi	r25, 0x01	; 1
     6e2:	20 40       	sbci	r18, 0x00	; 0
     6e4:	30 40       	sbci	r19, 0x00	; 0
     6e6:	80 40       	sbci	r24, 0x00	; 0
     6e8:	d9 f7       	brne	.-10     	; 0x6e0 <main+0x6e>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x7a>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <main+0x7c>
     6ee:	00 00       	nop
    _delay_ms(20000);
    motors_stop_all();
     6f0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <motors_stop_all>

    m_usb_tx_string("M2 ready\r\n");
     6f4:	8b e1       	ldi	r24, 0x1B	; 27
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <print_P>

    twi_init();
     6fc:	0e 94 13 06 	call	0xc26	; 0xc26 <twi_init>
    if (!bno055_init())
     700:	0e 94 ed 06 	call	0xdda	; 0xdda <bno055_init>
     704:	81 11       	cpse	r24, r1
     706:	04 c0       	rjmp	.+8      	; 0x710 <main+0x9e>
    {
        m_usb_tx_string("IMU Failed\r\n");
     708:	8e e0       	ldi	r24, 0x0E	; 14
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <print_P>
    }

    /* ---- start 50 Hz timer & enable global IRQs ---- */
    timer3_init_50Hz(); /* Timer-3 compare-match every 20 ms        */
     710:	0e 94 91 01 	call	0x322	; 0x322 <timer3_init_50Hz>
    sei();              /* global interrupt enable                 */
     714:	78 94       	sei
     716:	8f e9       	ldi	r24, 0x9F	; 159
     718:	9f e0       	ldi	r25, 0x0F	; 15
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <main+0xa8>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <main+0xae>
     720:	00 00       	nop
    while (1)
    {
        _delay_ms(1);

        // check for any incoming Jetson data
        receive_from_jetson();
     722:	0e 94 d7 01 	call	0x3ae	; 0x3ae <receive_from_jetson>
     726:	f7 cf       	rjmp	.-18     	; 0x716 <main+0xa4>

00000728 <__vector_32>:
    TIMSK3 = (1 << OCIE3A); /* enable compare-match A IRQ  */
}

/* ------------------------- TIMER-3 COMPARE ISR --------------------------- */
ISR(TIMER3_COMPA_vect)
{
     728:	1f 92       	push	r1
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	2f 93       	push	r18
     734:	3f 93       	push	r19
     736:	4f 93       	push	r20
     738:	5f 93       	push	r21
     73a:	6f 93       	push	r22
     73c:	7f 93       	push	r23
     73e:	8f 93       	push	r24
     740:	9f 93       	push	r25
     742:	af 93       	push	r26
     744:	bf 93       	push	r27
     746:	ef 93       	push	r30
     748:	ff 93       	push	r31
    send_telemetry(); /* quick! no heavy work here   */
     74a:	0e 94 0b 02 	call	0x416	; 0x416 <send_telemetry>
}
     74e:	ff 91       	pop	r31
     750:	ef 91       	pop	r30
     752:	bf 91       	pop	r27
     754:	af 91       	pop	r26
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	7f 91       	pop	r23
     75c:	6f 91       	pop	r22
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	0f 90       	pop	r0
     76c:	1f 90       	pop	r1
     76e:	18 95       	reti

00000770 <analog_init>:

/* ------------------------------------------------------- */
void analog_init(void)
{
	/* AVcc reference, right-adjust, start on channel 0 */
	ADMUX  = (1<<REFS0);            /* AVcc with ext. cap on AREF */
     770:	ec e7       	ldi	r30, 0x7C	; 124
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 e4       	ldi	r24, 0x40	; 64
     776:	80 83       	st	Z, r24

static inline void adc_select_channel(uint8_t ch)
{
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
     778:	80 81       	ld	r24, Z
     77a:	80 7f       	andi	r24, 0xF0	; 240
     77c:	80 83       	st	Z, r24
		ADCSRB &= ~(1<<MUX5);
     77e:	eb e7       	ldi	r30, 0x7B	; 123
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	8f 7d       	andi	r24, 0xDF	; 223
     786:	80 83       	st	Z, r24
	/* AVcc reference, right-adjust, start on channel 0 */
	ADMUX  = (1<<REFS0);            /* AVcc with ext. cap on AREF */
	adc_select_channel(0);

	/* prescaler, enable, no free-running */
	ADCSRA = (1<<ADEN) | ADC_PRESCALER_BITS;
     788:	87 e8       	ldi	r24, 0x87	; 135
     78a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	/* Disable digital input buffers on the used analog pins to save power/noise */
	DIDR0 =  (1<<ADC0D) | (1<<ADC1D) | (1<<ADC4D) | (1<<ADC5D) | (1<<ADC6D);
     78e:	83 e7       	ldi	r24, 0x73	; 115
     790:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     794:	08 95       	ret

00000796 <analog_read_raw>:
#include <avr/io.h>

static inline void adc_select_channel(uint8_t ch)
{
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
     796:	88 30       	cpi	r24, 0x08	; 8
     798:	80 f4       	brcc	.+32     	; 0x7ba <analog_read_raw+0x24>
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
     79a:	ec e7       	ldi	r30, 0x7C	; 124
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	90 81       	ld	r25, Z
     7a0:	90 7f       	andi	r25, 0xF0	; 240
     7a2:	89 2b       	or	r24, r25
     7a4:	80 83       	st	Z, r24
		ADCSRB &= ~(1<<MUX5);
     7a6:	eb e7       	ldi	r30, 0x7B	; 123
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 7d       	andi	r24, 0xDF	; 223
     7ae:	80 83       	st	Z, r24
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     7b0:	20 e0       	ldi	r18, 0x00	; 0
}

/* blocking, software-averaged read ---------------------- */
uint16_t analog_read_raw(uint8_t channel)
{
	uint32_t acc = 0;
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	ba 01       	movw	r22, r20
     7b8:	23 c0       	rjmp	.+70     	; 0x800 <analog_read_raw+0x6a>
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
		ADCSRB &= ~(1<<MUX5);
		} else {
		ADMUX  = (ADMUX & 0xF0) | (ch - 8);
     7ba:	ec e7       	ldi	r30, 0x7C	; 124
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	90 81       	ld	r25, Z
     7c0:	90 7f       	andi	r25, 0xF0	; 240
     7c2:	88 50       	subi	r24, 0x08	; 8
     7c4:	89 2b       	or	r24, r25
     7c6:	80 83       	st	Z, r24
		ADCSRB |=  (1<<MUX5);
     7c8:	eb e7       	ldi	r30, 0x7B	; 123
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	80 62       	ori	r24, 0x20	; 32
     7d0:	80 83       	st	Z, r24
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     7d2:	20 e0       	ldi	r18, 0x00	; 0
}

/* blocking, software-averaged read ---------------------- */
uint16_t analog_read_raw(uint8_t channel)
{
	uint32_t acc = 0;
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	ba 01       	movw	r22, r20
     7da:	12 c0       	rjmp	.+36     	; 0x800 <analog_read_raw+0x6a>

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
		ADCSRA |= (1<<ADSC);               /* start conversion          */
     7dc:	ea e7       	ldi	r30, 0x7A	; 122
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	90 81       	ld	r25, Z
     7e2:	90 64       	ori	r25, 0x40	; 64
     7e4:	90 83       	st	Z, r25
		while (ADCSRA & (1<<ADSC)) {;}     /* wait until ADSC clears    */
     7e6:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     7ea:	96 fd       	sbrc	r25, 6
     7ec:	fc cf       	rjmp	.-8      	; 0x7e6 <analog_read_raw+0x50>
		acc += ADC;                        /* read ADCL then ADCH       */
     7ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     7f2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     7f6:	48 0f       	add	r20, r24
     7f8:	59 1f       	adc	r21, r25
     7fa:	61 1d       	adc	r22, r1
     7fc:	71 1d       	adc	r23, r1
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     7fe:	2f 5f       	subi	r18, 0xFF	; 255
     800:	24 30       	cpi	r18, 0x04	; 4
     802:	60 f3       	brcs	.-40     	; 0x7dc <analog_read_raw+0x46>
		ADCSRA |= (1<<ADSC);               /* start conversion          */
		while (ADCSRA & (1<<ADSC)) {;}     /* wait until ADSC clears    */
		acc += ADC;                        /* read ADCL then ADCH       */
	}
	return (uint16_t)(acc / ADC_NUM_SAMPLES);
     804:	db 01       	movw	r26, r22
     806:	ca 01       	movw	r24, r20
     808:	b6 95       	lsr	r27
     80a:	a7 95       	ror	r26
     80c:	97 95       	ror	r25
     80e:	87 95       	ror	r24
     810:	b6 95       	lsr	r27
     812:	a7 95       	ror	r26
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
}
     818:	08 95       	ret

0000081a <analog_get_battery_1_mV>:
	return (uint16_t)mv;
}

uint16_t analog_get_battery_1_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_MAIN));
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 cb 03 	call	0x796	; 0x796 <analog_read_raw>

/* ---------------- convenience wrappers -----------------*/
static inline uint16_t to_millivolt(uint16_t adc)
{
	/*  (adc * 1100 mV /1023) * scale-factor  */
	uint32_t mv = (uint32_t)adc * 1100UL / 1023UL;   /* ? AVcc=3.3 V ? update */
     820:	9c 01       	movw	r18, r24
     822:	ac e4       	ldi	r26, 0x4C	; 76
     824:	b4 e0       	ldi	r27, 0x04	; 4
     826:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	33 e0       	ldi	r19, 0x03	; 3
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__udivmodsi4>
}

uint16_t analog_get_battery_1_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_MAIN));
}
     836:	c9 01       	movw	r24, r18
     838:	08 95       	ret

0000083a <analog_get_battery_2_mV>:

uint16_t analog_get_battery_2_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_AUX));
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 cb 03 	call	0x796	; 0x796 <analog_read_raw>

/* ---------------- convenience wrappers -----------------*/
static inline uint16_t to_millivolt(uint16_t adc)
{
	/*  (adc * 1100 mV /1023) * scale-factor  */
	uint32_t mv = (uint32_t)adc * 1100UL / 1023UL;   /* ? AVcc=3.3 V ? update */
     840:	9c 01       	movw	r18, r24
     842:	ac e4       	ldi	r26, 0x4C	; 76
     844:	b4 e0       	ldi	r27, 0x04	; 4
     846:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
     84a:	2f ef       	ldi	r18, 0xFF	; 255
     84c:	33 e0       	ldi	r19, 0x03	; 3
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__udivmodsi4>
}

uint16_t analog_get_battery_2_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_AUX));
}
     856:	c9 01       	movw	r24, r18
     858:	08 95       	ret

0000085a <analog_get_cliff_left>:

uint16_t analog_get_cliff_left (void){ return analog_read_raw(ADC_CH_CLIFF_LEFT);  }
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	0e 94 cb 03 	call	0x796	; 0x796 <analog_read_raw>
     860:	08 95       	ret

00000862 <analog_get_cliff_front>:
uint16_t analog_get_cliff_front(void){ return analog_read_raw(ADC_CH_CLIFF_FRONT); }
     862:	85 e0       	ldi	r24, 0x05	; 5
     864:	0e 94 cb 03 	call	0x796	; 0x796 <analog_read_raw>
     868:	08 95       	ret

0000086a <analog_get_cliff_right>:
uint16_t analog_get_cliff_right(void){ return analog_read_raw(ADC_CH_CLIFF_RIGHT); }
     86a:	86 e0       	ldi	r24, 0x06	; 6
     86c:	0e 94 cb 03 	call	0x796	; 0x796 <analog_read_raw>
     870:	08 95       	ret

00000872 <encoder_init>:

/* Initialise both encoders + emergency pin */
void encoder_init(void)
{
	/*------------- LEFT: PD2/PD3 as INT0/INT1 -------------*/
	ENC_L_A_DDR  &= ~_BV(ENC_L_A_BIT);
     872:	8a b1       	in	r24, 0x0a	; 10
     874:	8b 7f       	andi	r24, 0xFB	; 251
     876:	8a b9       	out	0x0a, r24	; 10
	ENC_L_B_DDR  &= ~_BV(ENC_L_B_BIT);
     878:	8a b1       	in	r24, 0x0a	; 10
     87a:	87 7f       	andi	r24, 0xF7	; 247
     87c:	8a b9       	out	0x0a, r24	; 10
	ENC_L_A_PORT |=  _BV(ENC_L_A_BIT);
     87e:	8b b1       	in	r24, 0x0b	; 11
     880:	84 60       	ori	r24, 0x04	; 4
     882:	8b b9       	out	0x0b, r24	; 11
	ENC_L_B_PORT |=  _BV(ENC_L_B_BIT);
     884:	8b b1       	in	r24, 0x0b	; 11
     886:	88 60       	ori	r24, 0x08	; 8
     888:	8b b9       	out	0x0b, r24	; 11

	/* INT0 on PD2, any edge */
	EICRA  |=  _BV(ISC00);
     88a:	e9 e6       	ldi	r30, 0x69	; 105
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	81 60       	ori	r24, 0x01	; 1
     892:	80 83       	st	Z, r24
	EICRA  &= ~_BV(ISC01);
     894:	80 81       	ld	r24, Z
     896:	8d 7f       	andi	r24, 0xFD	; 253
     898:	80 83       	st	Z, r24
	EIMSK  |=  _BV(INT0);
     89a:	8d b3       	in	r24, 0x1d	; 29
     89c:	81 60       	ori	r24, 0x01	; 1
     89e:	8d bb       	out	0x1d, r24	; 29
	/* INT1 on PD3, any edge */
	EICRA  |=  _BV(ISC10);
     8a0:	80 81       	ld	r24, Z
     8a2:	84 60       	ori	r24, 0x04	; 4
     8a4:	80 83       	st	Z, r24
	EICRA  &= ~_BV(ISC11);
     8a6:	80 81       	ld	r24, Z
     8a8:	87 7f       	andi	r24, 0xF7	; 247
     8aa:	80 83       	st	Z, r24
	EIMSK  |=  _BV(INT1);
     8ac:	8d b3       	in	r24, 0x1d	; 29
     8ae:	82 60       	ori	r24, 0x02	; 2
     8b0:	8d bb       	out	0x1d, r24	; 29

	/* Seed last_state */
	left_last_state = ((ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?2:0)
     8b2:	4a 9b       	sbis	0x09, 2	; 9
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <encoder_init+0x48>
     8b6:	22 e0       	ldi	r18, 0x02	; 2
     8b8:	01 c0       	rjmp	.+2      	; 0x8bc <encoder_init+0x4a>
     8ba:	20 e0       	ldi	r18, 0x00	; 0
	| ((ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0);
     8bc:	99 b1       	in	r25, 0x09	; 9
     8be:	93 fb       	bst	r25, 3
     8c0:	88 27       	eor	r24, r24
     8c2:	80 f9       	bld	r24, 0
	EICRA  |=  _BV(ISC10);
	EICRA  &= ~_BV(ISC11);
	EIMSK  |=  _BV(INT1);

	/* Seed last_state */
	left_last_state = ((ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?2:0)
     8c4:	82 2b       	or	r24, r18
     8c6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <left_last_state>
	| ((ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0);

	/*------------- RIGHT: PB6/PB7 + EMG PB3 as PCINT0 -------------*/
	/* pins input + pull-up */
	ENC_R_A_DDR    &= ~_BV(ENC_R_A_BIT);
     8ca:	84 b1       	in	r24, 0x04	; 4
     8cc:	8f 7b       	andi	r24, 0xBF	; 191
     8ce:	84 b9       	out	0x04, r24	; 4
	ENC_R_B_DDR    &= ~_BV(ENC_R_B_BIT);
     8d0:	84 b1       	in	r24, 0x04	; 4
     8d2:	8f 77       	andi	r24, 0x7F	; 127
     8d4:	84 b9       	out	0x04, r24	; 4
	EMG_BTN_DDR    &= ~_BV(EMG_BTN_BIT);
     8d6:	84 b1       	in	r24, 0x04	; 4
     8d8:	87 7f       	andi	r24, 0xF7	; 247
     8da:	84 b9       	out	0x04, r24	; 4
	ENC_R_A_PORT   |=  _BV(ENC_R_A_BIT);
     8dc:	85 b1       	in	r24, 0x05	; 5
     8de:	80 64       	ori	r24, 0x40	; 64
     8e0:	85 b9       	out	0x05, r24	; 5
	ENC_R_B_PORT   |=  _BV(ENC_R_B_BIT);
     8e2:	85 b1       	in	r24, 0x05	; 5
     8e4:	80 68       	ori	r24, 0x80	; 128
     8e6:	85 b9       	out	0x05, r24	; 5
	EMG_BTN_PORT   |=  _BV(EMG_BTN_BIT);
     8e8:	85 b1       	in	r24, 0x05	; 5
     8ea:	88 60       	ori	r24, 0x08	; 8
     8ec:	85 b9       	out	0x05, r24	; 5

	/* enable PCINT[7:0] */
	PCICR         |=  _BV(PCIE0);
     8ee:	e8 e6       	ldi	r30, 0x68	; 104
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	81 60       	ori	r24, 0x01	; 1
     8f6:	80 83       	st	Z, r24
	/* mask PB3, PB6, PB7 */
	PCMSK0        |=  _BV(EMG_BTN_BIT)
     8f8:	eb e6       	ldi	r30, 0x6B	; 107
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	88 6c       	ori	r24, 0xC8	; 200
     900:	80 83       	st	Z, r24
	| _BV(ENC_R_A_BIT)
	| _BV(ENC_R_B_BIT);

	right_last_state = ((ENC_R_A_PINREG & _BV(ENC_R_A_BIT))?2:0)
     902:	1e 9b       	sbis	0x03, 6	; 3
     904:	02 c0       	rjmp	.+4      	; 0x90a <encoder_init+0x98>
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	01 c0       	rjmp	.+2      	; 0x90c <encoder_init+0x9a>
     90a:	90 e0       	ldi	r25, 0x00	; 0
	| ((ENC_R_B_PINREG & _BV(ENC_R_B_BIT))?1:0);
     90c:	83 b1       	in	r24, 0x03	; 3
     90e:	88 1f       	adc	r24, r24
     910:	88 27       	eor	r24, r24
     912:	88 1f       	adc	r24, r24
	/* mask PB3, PB6, PB7 */
	PCMSK0        |=  _BV(EMG_BTN_BIT)
	| _BV(ENC_R_A_BIT)
	| _BV(ENC_R_B_BIT);

	right_last_state = ((ENC_R_A_PINREG & _BV(ENC_R_A_BIT))?2:0)
     914:	89 2b       	or	r24, r25
     916:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <right_last_state>
	| ((ENC_R_B_PINREG & _BV(ENC_R_B_BIT))?1:0);

	/* Zero counters */
	left_cnt  = right_cnt = 0;
     91a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <right_cnt>
     91e:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <right_cnt+0x1>
     922:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <right_cnt+0x2>
     926:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <right_cnt+0x3>
     92a:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <left_cnt>
     92e:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <left_cnt+0x1>
     932:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <left_cnt+0x2>
     936:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <left_cnt+0x3>
     93a:	08 95       	ret

0000093c <__vector_1>:
}

/* ------------ LEFT ISRs (INT0 & INT1) ------------- */
ISR(INT0_vect)
{
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	ef 93       	push	r30
     954:	ff 93       	push	r31
	uint8_t a = (ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?1:0;
     956:	39 b1       	in	r19, 0x09	; 9
	uint8_t b = (ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0;
     958:	29 b1       	in	r18, 0x09	; 9
     95a:	23 fb       	bst	r18, 3
     95c:	22 27       	eor	r18, r18
     95e:	20 f9       	bld	r18, 0
/* forward */
static inline void enc_handle(volatile int32_t *cnt,
volatile uint8_t *last,
uint8_t a, uint8_t b)
{
	uint8_t encoded    = (a<<1) | b;
     960:	32 fb       	bst	r19, 2
     962:	88 27       	eor	r24, r24
     964:	80 f9       	bld	r24, 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	28 2b       	or	r18, r24
	uint8_t trans      = (*last<<2) | encoded;
     96e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <left_last_state>
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	e2 2f       	mov	r30, r18
     97e:	e8 2b       	or	r30, r24
	switch (trans) {
     980:	8e 2f       	mov	r24, r30
     982:	ee 0f       	add	r30, r30
     984:	99 0b       	sbc	r25, r25
     986:	aa 0b       	sbc	r26, r26
     988:	bb 0b       	sbc	r27, r27
     98a:	fc 01       	movw	r30, r24
     98c:	31 97       	sbiw	r30, 0x01	; 1
     98e:	ee 30       	cpi	r30, 0x0E	; 14
     990:	f1 05       	cpc	r31, r1
     992:	58 f5       	brcc	.+86     	; 0x9ea <__vector_1+0xae>
     994:	ea 5a       	subi	r30, 0xAA	; 170
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__tablejump2__>
		case 0b1101: case 0b0100:
		case 0b0010: case 0b1011:  (*cnt)--; break;
     99c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <left_cnt>
     9a0:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <left_cnt+0x1>
     9a4:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <left_cnt+0x2>
     9a8:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <left_cnt+0x3>
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	a1 09       	sbc	r26, r1
     9b0:	b1 09       	sbc	r27, r1
     9b2:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <left_cnt>
     9b6:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <left_cnt+0x1>
     9ba:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <left_cnt+0x2>
     9be:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <left_cnt+0x3>
     9c2:	13 c0       	rjmp	.+38     	; 0x9ea <__vector_1+0xae>
		case 0b1110: case 0b0111:
		case 0b0001: case 0b1000:  (*cnt)++; break;
     9c4:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <left_cnt>
     9c8:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <left_cnt+0x1>
     9cc:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <left_cnt+0x2>
     9d0:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <left_cnt+0x3>
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	a1 1d       	adc	r26, r1
     9d8:	b1 1d       	adc	r27, r1
     9da:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <left_cnt>
     9de:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <left_cnt+0x1>
     9e2:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <left_cnt+0x2>
     9e6:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <left_cnt+0x3>
		default: /* bounce/invalid */ break;
	}
	*last = encoded;
     9ea:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <left_last_state>
ISR(INT0_vect)
{
	uint8_t a = (ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?1:0;
	uint8_t b = (ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0;
	enc_handle(&left_cnt, &left_last_state, a, b);
}
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	bf 91       	pop	r27
     9f4:	af 91       	pop	r26
     9f6:	9f 91       	pop	r25
     9f8:	8f 91       	pop	r24
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <__vector_2>:

ISR(INT1_vect)
{
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	2f 93       	push	r18
     a14:	3f 93       	push	r19
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	af 93       	push	r26
     a1c:	bf 93       	push	r27
     a1e:	ef 93       	push	r30
     a20:	ff 93       	push	r31
	uint8_t a = (ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?1:0;
     a22:	39 b1       	in	r19, 0x09	; 9
	uint8_t b = (ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0;
     a24:	29 b1       	in	r18, 0x09	; 9
     a26:	23 fb       	bst	r18, 3
     a28:	22 27       	eor	r18, r18
     a2a:	20 f9       	bld	r18, 0
/* forward */
static inline void enc_handle(volatile int32_t *cnt,
volatile uint8_t *last,
uint8_t a, uint8_t b)
{
	uint8_t encoded    = (a<<1) | b;
     a2c:	32 fb       	bst	r19, 2
     a2e:	88 27       	eor	r24, r24
     a30:	80 f9       	bld	r24, 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	28 2b       	or	r18, r24
	uint8_t trans      = (*last<<2) | encoded;
     a3a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <left_last_state>
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	e2 2f       	mov	r30, r18
     a4a:	e8 2b       	or	r30, r24
	switch (trans) {
     a4c:	8e 2f       	mov	r24, r30
     a4e:	ee 0f       	add	r30, r30
     a50:	99 0b       	sbc	r25, r25
     a52:	aa 0b       	sbc	r26, r26
     a54:	bb 0b       	sbc	r27, r27
     a56:	fc 01       	movw	r30, r24
     a58:	31 97       	sbiw	r30, 0x01	; 1
     a5a:	ee 30       	cpi	r30, 0x0E	; 14
     a5c:	f1 05       	cpc	r31, r1
     a5e:	58 f5       	brcc	.+86     	; 0xab6 <__vector_2+0xae>
     a60:	ec 59       	subi	r30, 0x9C	; 156
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__tablejump2__>
		case 0b1101: case 0b0100:
		case 0b0010: case 0b1011:  (*cnt)--; break;
     a68:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <left_cnt>
     a6c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <left_cnt+0x1>
     a70:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <left_cnt+0x2>
     a74:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <left_cnt+0x3>
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	a1 09       	sbc	r26, r1
     a7c:	b1 09       	sbc	r27, r1
     a7e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <left_cnt>
     a82:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <left_cnt+0x1>
     a86:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <left_cnt+0x2>
     a8a:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <left_cnt+0x3>
     a8e:	13 c0       	rjmp	.+38     	; 0xab6 <__vector_2+0xae>
		case 0b1110: case 0b0111:
		case 0b0001: case 0b1000:  (*cnt)++; break;
     a90:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <left_cnt>
     a94:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <left_cnt+0x1>
     a98:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <left_cnt+0x2>
     a9c:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <left_cnt+0x3>
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	a1 1d       	adc	r26, r1
     aa4:	b1 1d       	adc	r27, r1
     aa6:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <left_cnt>
     aaa:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <left_cnt+0x1>
     aae:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <left_cnt+0x2>
     ab2:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <left_cnt+0x3>
		default: /* bounce/invalid */ break;
	}
	*last = encoded;
     ab6:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <left_last_state>
ISR(INT1_vect)
{
	uint8_t a = (ENC_L_A_PINREG & _BV(ENC_L_A_BIT))?1:0;
	uint8_t b = (ENC_L_B_PINREG & _BV(ENC_L_B_BIT))?1:0;
	enc_handle(&left_cnt, &left_last_state, a, b);
}
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_9>:

/* ------------ RIGHT + EMERGENCY (PCINT0) ------------- */
ISR(PCINT0_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	2f 93       	push	r18
     ae0:	3f 93       	push	r19
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
	/* 1) emergency check */
	if (!(EMG_BTN_PINREG & _BV(EMG_BTN_BIT))) {
     aee:	23 b1       	in	r18, 0x03	; 3
		// TODO: call your emergency handler here
		// emergency_button_pressed();
	}

	/* 2) right encoder decode */
	uint8_t a = (ENC_R_A_PINREG & _BV(ENC_R_A_BIT))?1:0;
     af0:	33 b1       	in	r19, 0x03	; 3
	uint8_t b = (ENC_R_B_PINREG & _BV(ENC_R_B_BIT))?1:0;
     af2:	23 b1       	in	r18, 0x03	; 3
     af4:	22 1f       	adc	r18, r18
     af6:	22 27       	eor	r18, r18
     af8:	22 1f       	adc	r18, r18
/* forward */
static inline void enc_handle(volatile int32_t *cnt,
volatile uint8_t *last,
uint8_t a, uint8_t b)
{
	uint8_t encoded    = (a<<1) | b;
     afa:	36 fb       	bst	r19, 6
     afc:	88 27       	eor	r24, r24
     afe:	80 f9       	bld	r24, 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	28 2b       	or	r18, r24
	uint8_t trans      = (*last<<2) | encoded;
     b08:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <right_last_state>
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	e2 2f       	mov	r30, r18
     b18:	e8 2b       	or	r30, r24
	switch (trans) {
     b1a:	8e 2f       	mov	r24, r30
     b1c:	ee 0f       	add	r30, r30
     b1e:	99 0b       	sbc	r25, r25
     b20:	aa 0b       	sbc	r26, r26
     b22:	bb 0b       	sbc	r27, r27
     b24:	fc 01       	movw	r30, r24
     b26:	31 97       	sbiw	r30, 0x01	; 1
     b28:	ee 30       	cpi	r30, 0x0E	; 14
     b2a:	f1 05       	cpc	r31, r1
     b2c:	58 f5       	brcc	.+86     	; 0xb84 <__stack+0x85>
     b2e:	ee 58       	subi	r30, 0x8E	; 142
     b30:	ff 4f       	sbci	r31, 0xFF	; 255
     b32:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__tablejump2__>
		case 0b1101: case 0b0100:
		case 0b0010: case 0b1011:  (*cnt)--; break;
     b36:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <right_cnt>
     b3a:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <right_cnt+0x1>
     b3e:	a0 91 c7 01 	lds	r26, 0x01C7	; 0x8001c7 <right_cnt+0x2>
     b42:	b0 91 c8 01 	lds	r27, 0x01C8	; 0x8001c8 <right_cnt+0x3>
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	a1 09       	sbc	r26, r1
     b4a:	b1 09       	sbc	r27, r1
     b4c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <right_cnt>
     b50:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <right_cnt+0x1>
     b54:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <right_cnt+0x2>
     b58:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <right_cnt+0x3>
     b5c:	13 c0       	rjmp	.+38     	; 0xb84 <__stack+0x85>
		case 0b1110: case 0b0111:
		case 0b0001: case 0b1000:  (*cnt)++; break;
     b5e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <right_cnt>
     b62:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <right_cnt+0x1>
     b66:	a0 91 c7 01 	lds	r26, 0x01C7	; 0x8001c7 <right_cnt+0x2>
     b6a:	b0 91 c8 01 	lds	r27, 0x01C8	; 0x8001c8 <right_cnt+0x3>
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	a1 1d       	adc	r26, r1
     b72:	b1 1d       	adc	r27, r1
     b74:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <right_cnt>
     b78:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <right_cnt+0x1>
     b7c:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <right_cnt+0x2>
     b80:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <right_cnt+0x3>
		default: /* bounce/invalid */ break;
	}
	*last = encoded;
     b84:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <right_last_state>

	/* 2) right encoder decode */
	uint8_t a = (ENC_R_A_PINREG & _BV(ENC_R_A_BIT))?1:0;
	uint8_t b = (ENC_R_B_PINREG & _BV(ENC_R_B_BIT))?1:0;
	enc_handle(&right_cnt, &right_last_state, a, b);
}
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <encoder_get_left>:

/* =========== public API (unchanged) =========== */
int32_t encoder_get_left(void)
{ cli(); int32_t c = left_cnt; sei(); return c; }
     ba2:	f8 94       	cli
     ba4:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <left_cnt>
     ba8:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <left_cnt+0x1>
     bac:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <left_cnt+0x2>
     bb0:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <left_cnt+0x3>
     bb4:	78 94       	sei
     bb6:	08 95       	ret

00000bb8 <encoder_get_right>:

int32_t encoder_get_right(void)
{ cli(); int32_t c = right_cnt; sei(); return c; }
     bb8:	f8 94       	cli
     bba:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <right_cnt>
     bbe:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <right_cnt+0x1>
     bc2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <right_cnt+0x2>
     bc6:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <right_cnt+0x3>
     bca:	78 94       	sei
     bcc:	08 95       	ret

00000bce <twi_start>:
    }
}

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
     bce:	94 ea       	ldi	r25, 0xA4	; 164
     bd0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     bd4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bd8:	99 23       	and	r25, r25
     bda:	e4 f7       	brge	.-8      	; 0xbd4 <twi_start+0x6>

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
     bdc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     be0:	98 7f       	andi	r25, 0xF8	; 248
    if (st != 0x08 && st != 0x10)
     be2:	98 30       	cpi	r25, 0x08	; 8
     be4:	11 f0       	breq	.+4      	; 0xbea <twi_start+0x1c>
     be6:	90 31       	cpi	r25, 0x10	; 16
     be8:	c1 f4       	brne	.+48     	; 0xc1a <twi_start+0x4c>
        return false; /* START / REP START */

    /* load SLA+R/W */
    TWDR = addr_rw;
     bea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = TW_INT_FLAG | TW_ENABLE;
     bee:	84 e8       	ldi	r24, 0x84	; 132
     bf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     bf4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bf8:	88 23       	and	r24, r24
     bfa:	e4 f7       	brge	.-8      	; 0xbf4 <twi_start+0x26>

    /* load SLA+R/W */
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
     bfc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     c00:	88 7f       	andi	r24, 0xF8	; 248
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
     c02:	88 31       	cpi	r24, 0x18	; 24
     c04:	21 f0       	breq	.+8      	; 0xc0e <twi_start+0x40>
     c06:	80 34       	cpi	r24, 0x40	; 64
     c08:	21 f4       	brne	.+8      	; 0xc12 <twi_start+0x44>
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <twi_start+0x46>
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <twi_start+0x46>
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	89 2f       	mov	r24, r25
     c16:	81 70       	andi	r24, 0x01	; 1
     c18:	08 95       	ret
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
    if (st != 0x08 && st != 0x10)
        return false; /* START / REP START */
     c1a:	80 e0       	ldi	r24, 0x00	; 0
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
}
     c1c:	08 95       	ret

00000c1e <twi_stop>:

static void twi_stop(void)
{
    TWCR = TW_INT_FLAG | TW_STOP | TW_ENABLE;
     c1e:	84 e9       	ldi	r24, 0x94	; 148
     c20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c24:	08 95       	ret

00000c26 <twi_init>:

/*   PUBLIC TWI ROUTINES  */
void twi_init(void)
{
    /* prescaler bits (TWPS1:0) = 0 ? prescaler = 1 */
    TWSR &= ~((1u << TWPS0) | (1u << TWPS1));
     c26:	e9 eb       	ldi	r30, 0xB9	; 185
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	8c 7f       	andi	r24, 0xFC	; 252
     c2e:	80 83       	st	Z, r24

    /* choose TWBR such that SCL ? TWI_SCL_HZ                   *
     * TWBR = (F_CPU / SCL - 16) / (2�4^TWPS)                  *
     * At 8MHz with 400kHz I2C: TWBR = (8,000,000/400,000 - 16) / 2 = 4 */
    TWBR = (uint8_t)((F_CPU / TWI_SCL_HZ - 16UL) / 2UL);
     c30:	88 e4       	ldi	r24, 0x48	; 72
     c32:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    {
        /* For 8MHz clock, with 400kHz I2C, TWBR should be 4 */
        TWBR = 4;
    }

    TWCR = TW_ENABLE; /* enable module, no interrupt yet */
     c36:	84 e0       	ldi	r24, 0x04	; 4
     c38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c3c:	08 95       	ret

00000c3e <twi_write>:
}

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	eb 01       	movw	r28, r22
     c48:	14 2f       	mov	r17, r20
    if (!twi_start((sla << 1) | 0))
     c4a:	88 0f       	add	r24, r24
     c4c:	0e 94 e7 05 	call	0xbce	; 0xbce <twi_start>
     c50:	08 2f       	mov	r16, r24
     c52:	81 11       	cpse	r24, r1
     c54:	19 c0       	rjmp	.+50     	; 0xc88 <twi_write+0x4a>
     c56:	1d c0       	rjmp	.+58     	; 0xc92 <twi_write+0x54>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
     c58:	fe 01       	movw	r30, r28
     c5a:	e9 0f       	add	r30, r25
     c5c:	f1 1d       	adc	r31, r1
     c5e:	80 81       	ld	r24, Z
     c60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        TWCR = TW_INT_FLAG | TW_ENABLE;
     c64:	84 e8       	ldi	r24, 0x84	; 132
     c66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     c6a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c6e:	88 23       	and	r24, r24
     c70:	e4 f7       	brge	.-8      	; 0xc6a <twi_write+0x2c>
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
        TWCR = TW_INT_FLAG | TW_ENABLE;
        twi_wait();
        if (TW_STATUS != 0x28)
     c72:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     c76:	88 7f       	andi	r24, 0xF8	; 248
     c78:	88 32       	cpi	r24, 0x28	; 40
     c7a:	21 f0       	breq	.+8      	; 0xc84 <twi_write+0x46>
        {
            twi_stop();
     c7c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <twi_stop>
            return false;
     c80:	00 e0       	ldi	r16, 0x00	; 0
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <twi_write+0x54>

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 0))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     c84:	9f 5f       	subi	r25, 0xFF	; 255
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <twi_write+0x4c>
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	91 17       	cp	r25, r17
     c8c:	28 f3       	brcs	.-54     	; 0xc58 <twi_write+0x1a>
        {
            twi_stop();
            return false;
        } /* data ACK */
    }
    twi_stop();
     c8e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <twi_stop>
    return true;
}
     c92:	80 2f       	mov	r24, r16
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <twi_read>:

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	8b 01       	movw	r16, r22
     ca8:	c4 2f       	mov	r28, r20
    if (!twi_start((sla << 1) | 1))
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	81 60       	ori	r24, 0x01	; 1
     cb2:	0e 94 e7 05 	call	0xbce	; 0xbce <twi_start>
     cb6:	d8 2f       	mov	r29, r24
     cb8:	81 11       	cpse	r24, r1
     cba:	2f c0       	rjmp	.+94     	; 0xd1a <twi_read+0x7c>
     cbc:	33 c0       	rjmp	.+102    	; 0xd24 <twi_read+0x86>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
     cbe:	49 2f       	mov	r20, r25
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	2c 2f       	mov	r18, r28
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	31 09       	sbc	r19, r1
     cca:	42 17       	cp	r20, r18
     ccc:	53 07       	cpc	r21, r19
     cce:	11 f4       	brne	.+4      	; 0xcd4 <twi_read+0x36>
     cd0:	84 e8       	ldi	r24, 0x84	; 132
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <twi_read+0x38>
     cd4:	84 ec       	ldi	r24, 0xC4	; 196
     cd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     cda:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cde:	88 23       	and	r24, r24
     ce0:	e4 f7       	brge	.-8      	; 0xcda <twi_read+0x3c>
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
        twi_wait();
        if ((i < len - 1 && TW_STATUS != 0x50) || /* data with ACK */
     ce2:	42 17       	cp	r20, r18
     ce4:	53 07       	cpc	r21, r19
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <twi_read+0x54>
     ce8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     cec:	88 7f       	andi	r24, 0xF8	; 248
     cee:	80 35       	cpi	r24, 0x50	; 80
     cf0:	41 f4       	brne	.+16     	; 0xd02 <twi_read+0x64>
     cf2:	42 17       	cp	r20, r18
     cf4:	53 07       	cpc	r21, r19
     cf6:	49 f4       	brne	.+18     	; 0xd0a <twi_read+0x6c>
            (i == len - 1 && TW_STATUS != 0x58))  /* data with NACK */
     cf8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     cfc:	88 7f       	andi	r24, 0xF8	; 248
     cfe:	88 35       	cpi	r24, 0x58	; 88
     d00:	21 f0       	breq	.+8      	; 0xd0a <twi_read+0x6c>
        {
            twi_stop();
     d02:	0e 94 0f 06 	call	0xc1e	; 0xc1e <twi_stop>
            return false;
     d06:	d0 e0       	ldi	r29, 0x00	; 0
     d08:	0d c0       	rjmp	.+26     	; 0xd24 <twi_read+0x86>
        }
        buf[i] = TWDR;
     d0a:	f8 01       	movw	r30, r16
     d0c:	e9 0f       	add	r30, r25
     d0e:	f1 1d       	adc	r31, r1
     d10:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     d14:	80 83       	st	Z, r24

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 1))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     d16:	9f 5f       	subi	r25, 0xFF	; 255
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <twi_read+0x7e>
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9c 17       	cp	r25, r28
     d1e:	78 f2       	brcs	.-98     	; 0xcbe <twi_read+0x20>
            twi_stop();
            return false;
        }
        buf[i] = TWDR;
    }
    twi_stop();
     d20:	0e 94 0f 06 	call	0xc1e	; 0xc1e <twi_stop>
    return true;
}
     d24:	8d 2f       	mov	r24, r29
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <bno055_write8>:

/*   BNO055 BASIC ACCESS  */
bool bno055_write8(uint8_t reg, uint8_t val)
{
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	00 d0       	rcall	.+0      	; 0xd36 <bno055_write8+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
    uint8_t pkt[2] = {reg, val};
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	6a 83       	std	Y+2, r22	; 0x02
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
     d3e:	42 e0       	ldi	r20, 0x02	; 2
     d40:	be 01       	movw	r22, r28
     d42:	6f 5f       	subi	r22, 0xFF	; 255
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	88 e2       	ldi	r24, 0x28	; 40
     d48:	0e 94 1f 06 	call	0xc3e	; 0xc3e <twi_write>
}
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <bno055_set_mode>:
}

/*  HIGH-LEVEL HELPERS  */
static bool bno055_set_mode(uint8_t mode)
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
     d56:	68 2f       	mov	r22, r24
     d58:	8d e3       	ldi	r24, 0x3D	; 61
     d5a:	0e 94 98 06 	call	0xd30	; 0xd30 <bno055_write8>
}
     d5e:	08 95       	ret

00000d60 <bno055_read8>:
    uint8_t pkt[2] = {reg, val};
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
}

bool bno055_read8(uint8_t reg, uint8_t *val)
{
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	1f 92       	push	r1
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	8b 01       	movw	r16, r22
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	be 01       	movw	r22, r28
     d76:	6f 5f       	subi	r22, 0xFF	; 255
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	88 e2       	ldi	r24, 0x28	; 40
     d7c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <twi_write>
     d80:	88 23       	and	r24, r24
     d82:	29 f0       	breq	.+10     	; 0xd8e <bno055_read8+0x2e>
        return false;
    return twi_read(BNO055_I2C_ADDR, val, 1);
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	b8 01       	movw	r22, r16
     d88:	88 e2       	ldi	r24, 0x28	; 40
     d8a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <twi_read>
}
     d8e:	0f 90       	pop	r0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <bno055_read>:

bool bno055_read(uint8_t reg, uint8_t *buf, uint8_t len)
{
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	1f 92       	push	r1
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	8b 01       	movw	r16, r22
     dae:	f4 2e       	mov	r15, r20
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	be 01       	movw	r22, r28
     db4:	6f 5f       	subi	r22, 0xFF	; 255
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	88 e2       	ldi	r24, 0x28	; 40
     dba:	0e 94 1f 06 	call	0xc3e	; 0xc3e <twi_write>
     dbe:	88 23       	and	r24, r24
     dc0:	29 f0       	breq	.+10     	; 0xdcc <bno055_read+0x32>
        return false;
    return twi_read(BNO055_I2C_ADDR, buf, len);
     dc2:	4f 2d       	mov	r20, r15
     dc4:	b8 01       	movw	r22, r16
     dc6:	88 e2       	ldi	r24, 0x28	; 40
     dc8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <twi_read>
}
     dcc:	0f 90       	pop	r0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	08 95       	ret

00000dda <bno055_init>:
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
}

bool bno055_init(void)
{
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	1f 92       	push	r1
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
    twi_init();
     de6:	0e 94 13 06 	call	0xc26	; 0xc26 <twi_init>

    /* Ensure sensor is present */
    uint8_t id = 0;
     dea:	19 82       	std	Y+1, r1	; 0x01
    if (!bno055_read8(0x00, &id) || id != 0xA0)
     dec:	be 01       	movw	r22, r28
     dee:	6f 5f       	subi	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	0e 94 b0 06 	call	0xd60	; 0xd60 <bno055_read8>
     df8:	18 2f       	mov	r17, r24
     dfa:	88 23       	and	r24, r24
     dfc:	51 f1       	breq	.+84     	; 0xe52 <bno055_init+0x78>
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	80 3a       	cpi	r24, 0xA0	; 160
     e02:	31 f5       	brne	.+76     	; 0xe50 <bno055_init+0x76>
        return false; /* CHIP_ID */

    /* Switch to CONFIG, reset, then NDOF */
    bno055_set_mode(0x00); /* CONFIG      */
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	0e 94 ab 06 	call	0xd56	; 0xd56 <bno055_set_mode>
     e0a:	2f e7       	ldi	r18, 0x7F	; 127
     e0c:	88 e3       	ldi	r24, 0x38	; 56
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	21 50       	subi	r18, 0x01	; 1
     e12:	80 40       	sbci	r24, 0x00	; 0
     e14:	90 40       	sbci	r25, 0x00	; 0
     e16:	e1 f7       	brne	.-8      	; 0xe10 <bno055_init+0x36>
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <bno055_init+0x40>
     e1a:	00 00       	nop
    _delay_ms(25);

    bno055_write8(0x3F, 0x20); /* SYS_TRIGGER, reset */
     e1c:	60 e2       	ldi	r22, 0x20	; 32
     e1e:	8f e3       	ldi	r24, 0x3F	; 63
     e20:	0e 94 98 06 	call	0xd30	; 0xd30 <bno055_write8>
     e24:	2f ef       	ldi	r18, 0xFF	; 255
     e26:	8c eb       	ldi	r24, 0xBC	; 188
     e28:	9f e1       	ldi	r25, 0x1F	; 31
     e2a:	21 50       	subi	r18, 0x01	; 1
     e2c:	80 40       	sbci	r24, 0x00	; 0
     e2e:	90 40       	sbci	r25, 0x00	; 0
     e30:	e1 f7       	brne	.-8      	; 0xe2a <bno055_init+0x50>
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <bno055_init+0x5a>
     e34:	00 00       	nop
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
     e36:	8c e0       	ldi	r24, 0x0C	; 12
     e38:	0e 94 ab 06 	call	0xd56	; 0xd56 <bno055_set_mode>
     e3c:	2f ef       	ldi	r18, 0xFF	; 255
     e3e:	89 ef       	ldi	r24, 0xF9	; 249
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	21 50       	subi	r18, 0x01	; 1
     e44:	80 40       	sbci	r24, 0x00	; 0
     e46:	90 40       	sbci	r25, 0x00	; 0
     e48:	e1 f7       	brne	.-8      	; 0xe42 <bno055_init+0x68>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <bno055_init+0x72>
     e4c:	00 00       	nop
    _delay_ms(20);
    return true;
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <bno055_init+0x78>
    twi_init();

    /* Ensure sensor is present */
    uint8_t id = 0;
    if (!bno055_read8(0x00, &id) || id != 0xA0)
        return false; /* CHIP_ID */
     e50:	10 e0       	ldi	r17, 0x00	; 0
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
    _delay_ms(20);
    return true;
}
     e52:	81 2f       	mov	r24, r17
     e54:	0f 90       	pop	r0
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	08 95       	ret

00000e5e <bno055_get_euler>:

void bno055_get_euler(int16_t *h, int16_t *r, int16_t *p)
{
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <bno055_get_euler+0x12>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <bno055_get_euler+0x14>
     e72:	00 d0       	rcall	.+0      	; 0xe74 <bno055_get_euler+0x16>
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	6c 01       	movw	r12, r24
     e7a:	7b 01       	movw	r14, r22
     e7c:	8a 01       	movw	r16, r20
    uint8_t buf[6];
    if (bno055_read(0x1A, buf, 6))
     e7e:	46 e0       	ldi	r20, 0x06	; 6
     e80:	be 01       	movw	r22, r28
     e82:	6f 5f       	subi	r22, 0xFF	; 255
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	8a e1       	ldi	r24, 0x1A	; 26
     e88:	0e 94 cd 06 	call	0xd9a	; 0xd9a <bno055_read>
     e8c:	88 23       	and	r24, r24
     e8e:	d9 f0       	breq	.+54     	; 0xec6 <bno055_get_euler+0x68>
    { /* EULER_H_LSB */
        *h = (int16_t)(buf[0] | ((uint16_t)buf[1] << 8));
     e90:	29 81       	ldd	r18, Y+1	; 0x01
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	98 2f       	mov	r25, r24
     e98:	88 27       	eor	r24, r24
     e9a:	82 2b       	or	r24, r18
     e9c:	f6 01       	movw	r30, r12
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	80 83       	st	Z, r24
        *r = (int16_t)(buf[2] | ((uint16_t)buf[3] << 8));
     ea2:	2b 81       	ldd	r18, Y+3	; 0x03
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	98 2f       	mov	r25, r24
     eaa:	88 27       	eor	r24, r24
     eac:	82 2b       	or	r24, r18
     eae:	f7 01       	movw	r30, r14
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
        *p = (int16_t)(buf[4] | ((uint16_t)buf[5] << 8));
     eb4:	2d 81       	ldd	r18, Y+5	; 0x05
     eb6:	8e 81       	ldd	r24, Y+6	; 0x06
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	98 2f       	mov	r25, r24
     ebc:	88 27       	eor	r24, r24
     ebe:	82 2b       	or	r24, r18
     ec0:	f8 01       	movw	r30, r16
     ec2:	91 83       	std	Z+1, r25	; 0x01
     ec4:	80 83       	st	Z, r24
    }
}
     ec6:	26 96       	adiw	r28, 0x06	; 6
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	08 95       	ret

00000ee4 <motors_init>:
		RIGHT_PUL_PORT |= _BV(RIGHT_PUL_BIT);
		_delay_us(5);
		RIGHT_PUL_PORT &= ~_BV(RIGHT_PUL_BIT);
		_delay_us(5);
	}
}
     ee4:	8a b1       	in	r24, 0x0a	; 10
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	8a b9       	out	0x0a, r24	; 10
     eea:	8a b1       	in	r24, 0x0a	; 10
     eec:	80 64       	ori	r24, 0x40	; 64
     eee:	8a b9       	out	0x0a, r24	; 10
     ef0:	87 b1       	in	r24, 0x07	; 7
     ef2:	80 64       	ori	r24, 0x40	; 64
     ef4:	87 b9       	out	0x07, r24	; 7
     ef6:	84 b1       	in	r24, 0x04	; 4
     ef8:	80 62       	ori	r24, 0x20	; 32
     efa:	84 b9       	out	0x04, r24	; 4
     efc:	84 b1       	in	r24, 0x04	; 4
     efe:	80 61       	ori	r24, 0x10	; 16
     f00:	84 b9       	out	0x04, r24	; 4
     f02:	80 b3       	in	r24, 0x10	; 16
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	80 bb       	out	0x10, r24	; 16
     f08:	8b b1       	in	r24, 0x0b	; 11
     f0a:	80 68       	ori	r24, 0x80	; 128
     f0c:	8b b9       	out	0x0b, r24	; 11
     f0e:	8b b1       	in	r24, 0x0b	; 11
     f10:	80 64       	ori	r24, 0x40	; 64
     f12:	8b b9       	out	0x0b, r24	; 11
     f14:	88 b1       	in	r24, 0x08	; 8
     f16:	8f 7b       	andi	r24, 0xBF	; 191
     f18:	88 b9       	out	0x08, r24	; 8
     f1a:	85 b1       	in	r24, 0x05	; 5
     f1c:	80 62       	ori	r24, 0x20	; 32
     f1e:	85 b9       	out	0x05, r24	; 5
     f20:	85 b1       	in	r24, 0x05	; 5
     f22:	80 61       	ori	r24, 0x10	; 16
     f24:	85 b9       	out	0x05, r24	; 5
     f26:	81 b3       	in	r24, 0x11	; 17
     f28:	8f 77       	andi	r24, 0x7F	; 127
     f2a:	81 bb       	out	0x11, r24	; 17
     f2c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     f30:	84 e0       	ldi	r24, 0x04	; 4
     f32:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7f80c3>
     f3c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     f40:	80 e4       	ldi	r24, 0x40	; 64
     f42:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     f46:	88 e0       	ldi	r24, 0x08	; 8
     f48:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     f4c:	08 95       	ret

00000f4e <motors_enable_left>:
     f4e:	88 23       	and	r24, r24
     f50:	21 f0       	breq	.+8      	; 0xf5a <motors_enable_left+0xc>
     f52:	88 b1       	in	r24, 0x08	; 8
     f54:	80 64       	ori	r24, 0x40	; 64
     f56:	88 b9       	out	0x08, r24	; 8
     f58:	08 95       	ret
     f5a:	88 b1       	in	r24, 0x08	; 8
     f5c:	8f 7b       	andi	r24, 0xBF	; 191
     f5e:	88 b9       	out	0x08, r24	; 8
     f60:	08 95       	ret

00000f62 <motors_enable_right>:
     f62:	88 23       	and	r24, r24
     f64:	21 f0       	breq	.+8      	; 0xf6e <motors_enable_right+0xc>
     f66:	81 b3       	in	r24, 0x11	; 17
     f68:	80 68       	ori	r24, 0x80	; 128
     f6a:	81 bb       	out	0x11, r24	; 17
     f6c:	08 95       	ret
     f6e:	81 b3       	in	r24, 0x11	; 17
     f70:	8f 77       	andi	r24, 0x7F	; 127
     f72:	81 bb       	out	0x11, r24	; 17
     f74:	08 95       	ret

00000f76 <motors_enable_all>:
     f76:	cf 93       	push	r28
     f78:	c8 2f       	mov	r28, r24
     f7a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <motors_enable_left>
     f7e:	8c 2f       	mov	r24, r28
     f80:	0e 94 b1 07 	call	0xf62	; 0xf62 <motors_enable_right>
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <motors_set_dir_left>:
     f88:	88 23       	and	r24, r24
     f8a:	21 f0       	breq	.+8      	; 0xf94 <motors_set_dir_left+0xc>
     f8c:	8b b1       	in	r24, 0x0b	; 11
     f8e:	80 64       	ori	r24, 0x40	; 64
     f90:	8b b9       	out	0x0b, r24	; 11
     f92:	08 95       	ret
     f94:	8b b1       	in	r24, 0x0b	; 11
     f96:	8f 7b       	andi	r24, 0xBF	; 191
     f98:	8b b9       	out	0x0b, r24	; 11
     f9a:	08 95       	ret

00000f9c <motors_set_dir_right>:
     f9c:	88 23       	and	r24, r24
     f9e:	21 f0       	breq	.+8      	; 0xfa8 <motors_set_dir_right+0xc>
     fa0:	85 b1       	in	r24, 0x05	; 5
     fa2:	80 61       	ori	r24, 0x10	; 16
     fa4:	85 b9       	out	0x05, r24	; 5
     fa6:	08 95       	ret
     fa8:	85 b1       	in	r24, 0x05	; 5
     faa:	8f 7e       	andi	r24, 0xEF	; 239
     fac:	85 b9       	out	0x05, r24	; 5
     fae:	08 95       	ret

00000fb0 <motors_set_speed_left>:
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	ec 01       	movw	r28, r24
     fb6:	9c 01       	movw	r18, r24
     fb8:	a8 ec       	ldi	r26, 0xC8	; 200
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
     fc0:	2c e3       	ldi	r18, 0x3C	; 60
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__udivmodsi4>
     fcc:	e1 ec       	ldi	r30, 0xC1	; 193
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 7f       	andi	r24, 0xF0	; 240
     fd4:	80 83       	st	Z, r24
     fd6:	c5 3f       	cpi	r28, 0xF5	; 245
     fd8:	d1 40       	sbci	r29, 0x01	; 1
     fda:	f8 f0       	brcs	.+62     	; 0x101a <motors_set_speed_left+0x6a>
     fdc:	01 2e       	mov	r0, r17
     fde:	19 e0       	ldi	r17, 0x09	; 9
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	44 1f       	adc	r20, r20
     fe6:	55 1f       	adc	r21, r21
     fe8:	1a 95       	dec	r17
     fea:	d1 f7       	brne	.-12     	; 0xfe0 <motors_set_speed_left+0x30>
     fec:	10 2d       	mov	r17, r0
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	74 e2       	ldi	r23, 0x24	; 36
     ff2:	84 ef       	ldi	r24, 0xF4	; 244
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__udivmodsi4>
     ffa:	21 50       	subi	r18, 0x01	; 1
     ffc:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <left_top>
    1000:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
    1004:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <left_top>
    1008:	86 95       	lsr	r24
    100a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f80d2>
    100e:	e1 ec       	ldi	r30, 0xC1	; 193
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	89 60       	ori	r24, 0x09	; 9
    1016:	80 83       	st	Z, r24
    1018:	1e c0       	rjmp	.+60     	; 0x1056 <motors_set_speed_left+0xa6>
    101a:	01 2e       	mov	r0, r17
    101c:	1c e0       	ldi	r17, 0x0C	; 12
    101e:	22 0f       	add	r18, r18
    1020:	33 1f       	adc	r19, r19
    1022:	44 1f       	adc	r20, r20
    1024:	55 1f       	adc	r21, r21
    1026:	1a 95       	dec	r17
    1028:	d1 f7       	brne	.-12     	; 0x101e <motors_set_speed_left+0x6e>
    102a:	10 2d       	mov	r17, r0
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	74 e2       	ldi	r23, 0x24	; 36
    1030:	84 ef       	ldi	r24, 0xF4	; 244
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__udivmodsi4>
    1038:	21 50       	subi	r18, 0x01	; 1
    103a:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <left_top>
    103e:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7f80d1>
    1042:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <left_top>
    1046:	86 95       	lsr	r24
    1048:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f80d2>
    104c:	e1 ec       	ldi	r30, 0xC1	; 193
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8c 60       	ori	r24, 0x0C	; 12
    1054:	80 83       	st	Z, r24
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <motors_set_speed_right>:
    105c:	9c 01       	movw	r18, r24
    105e:	a8 ec       	ldi	r26, 0xC8	; 200
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__umulhisi3>
    1066:	2c e3       	ldi	r18, 0x3C	; 60
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__udivmodsi4>
    1072:	01 2e       	mov	r0, r17
    1074:	1b e0       	ldi	r17, 0x0B	; 11
    1076:	22 0f       	add	r18, r18
    1078:	33 1f       	adc	r19, r19
    107a:	44 1f       	adc	r20, r20
    107c:	55 1f       	adc	r21, r21
    107e:	1a 95       	dec	r17
    1080:	d1 f7       	brne	.-12     	; 0x1076 <motors_set_speed_right+0x1a>
    1082:	10 2d       	mov	r17, r0
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	74 e2       	ldi	r23, 0x24	; 36
    1088:	84 ef       	ldi	r24, 0xF4	; 244
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__udivmodsi4>
    1090:	da 01       	movw	r26, r20
    1092:	c9 01       	movw	r24, r18
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	a1 09       	sbc	r26, r1
    1098:	b1 09       	sbc	r27, r1
    109a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    109e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    10a2:	e1 e8       	ldi	r30, 0x81	; 129
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	88 7f       	andi	r24, 0xF8	; 248
    10aa:	80 83       	st	Z, r24
    10ac:	80 81       	ld	r24, Z
    10ae:	85 60       	ori	r24, 0x05	; 5
    10b0:	80 83       	st	Z, r24
    10b2:	08 95       	ret

000010b4 <motors_stop_all>:

void motors_stop_all(void)
{
	/* disable drivers */
	motors_enable_all(false);
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0e 94 bb 07 	call	0xf76	; 0xf76 <motors_enable_all>

	/* stop timers � clear prescaler bits */
	TCCR1B &= ~(_BV(CS12) | _BV(CS11) | _BV(CS10));
    10ba:	e1 e8       	ldi	r30, 0x81	; 129
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	88 7f       	andi	r24, 0xF8	; 248
    10c2:	80 83       	st	Z, r24
	TCCR4B &= ~(_BV(CS43) | _BV(CS42) | _BV(CS41) | _BV(CS40));
    10c4:	e1 ec       	ldi	r30, 0xC1	; 193
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	80 7f       	andi	r24, 0xF0	; 240
    10cc:	80 83       	st	Z, r24
    10ce:	08 95       	ret

000010d0 <m_usb_init>:
	UEDATX = signals;
	UEDATX = 0;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
    10d6:	80 ea       	ldi	r24, 0xA0	; 160
    10d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    10dc:	82 e1       	ldi	r24, 0x12	; 18
    10de:	89 bd       	out	0x29, r24	; 41
    10e0:	09 b4       	in	r0, 0x29	; 41
    10e2:	00 fe       	sbrs	r0, 0
    10e4:	fd cf       	rjmp	.-6      	; 0x10e0 <m_usb_init+0x10>
    10e6:	80 e9       	ldi	r24, 0x90	; 144
    10e8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    10ec:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    10f0:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <usb_configuration>
    10f4:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <cdc_line_rtsdtr>
    10f8:	8c e0       	ldi	r24, 0x0C	; 12
    10fa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    10fe:	78 94       	sei
    1100:	08 95       	ret

00001102 <m_usb_isconnected>:
    1102:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <usb_configuration>
    1106:	08 95       	ret

00001108 <m_usb_rx_char>:
    1108:	9f b7       	in	r25, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <usb_configuration>
    1110:	81 11       	cpse	r24, r1
    1112:	03 c0       	rjmp	.+6      	; 0x111a <m_usb_rx_char+0x12>
    1114:	9f bf       	out	0x3f, r25	; 63
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	08 95       	ret
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1120:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1124:	85 fd       	sbrc	r24, 5
    1126:	03 c0       	rjmp	.+6      	; 0x112e <m_usb_rx_char+0x26>
    1128:	9f bf       	out	0x3f, r25	; 63
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	08 95       	ret
    112e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1132:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1136:	25 fd       	sbrc	r18, 5
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <m_usb_rx_char+0x38>
    113a:	2b e6       	ldi	r18, 0x6B	; 107
    113c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1140:	9f bf       	out	0x3f, r25	; 63
    1142:	08 95       	ret

00001144 <m_usb_rx_available>:
    1144:	9f b7       	in	r25, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <usb_configuration>
    114c:	88 23       	and	r24, r24
    114e:	31 f0       	breq	.+12     	; 0x115c <m_usb_rx_available+0x18>
    1150:	83 e0       	ldi	r24, 0x03	; 3
    1152:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1156:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    115a:	01 c0       	rjmp	.+2      	; 0x115e <m_usb_rx_available+0x1a>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	9f bf       	out	0x3f, r25	; 63
    1160:	08 95       	ret

00001162 <m_usb_tx_char>:
    1162:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <usb_configuration>
    1166:	99 23       	and	r25, r25
    1168:	e1 f1       	breq	.+120    	; 0x11e2 <m_usb_tx_char+0x80>
    116a:	9f b7       	in	r25, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	24 e0       	ldi	r18, 0x04	; 4
    1170:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1174:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <transmit_previous_timeout>
    1178:	22 23       	and	r18, r18
    117a:	49 f0       	breq	.+18     	; 0x118e <m_usb_tx_char+0x2c>
    117c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1180:	25 fd       	sbrc	r18, 5
    1182:	03 c0       	rjmp	.+6      	; 0x118a <m_usb_tx_char+0x28>
    1184:	9f bf       	out	0x3f, r25	; 63
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	08 95       	ret
    118a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <transmit_previous_timeout>
    118e:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1192:	37 5e       	subi	r19, 0xE7	; 231
    1194:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1198:	25 fd       	sbrc	r18, 5
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <m_usb_tx_char+0x62>
    119c:	9f bf       	out	0x3f, r25	; 63
    119e:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    11a2:	39 13       	cpse	r19, r25
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <m_usb_tx_char+0x4e>
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <transmit_previous_timeout>
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	08 95       	ret
    11b0:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <usb_configuration>
    11b4:	99 23       	and	r25, r25
    11b6:	b9 f0       	breq	.+46     	; 0x11e6 <m_usb_tx_char+0x84>
    11b8:	9f b7       	in	r25, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	24 e0       	ldi	r18, 0x04	; 4
    11be:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    11c2:	e8 cf       	rjmp	.-48     	; 0x1194 <m_usb_tx_char+0x32>
    11c4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    11c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    11cc:	85 fd       	sbrc	r24, 5
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <m_usb_tx_char+0x74>
    11d0:	8a e3       	ldi	r24, 0x3A	; 58
    11d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <transmit_flush_timer>
    11dc:	9f bf       	out	0x3f, r25	; 63
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	08 95       	ret
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	08 95       	ret
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	08 95       	ret

000011ea <m_usb_tx_push>:
    11ea:	8f b7       	in	r24, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <transmit_flush_timer>
    11f2:	99 23       	and	r25, r25
    11f4:	41 f0       	breq	.+16     	; 0x1206 <m_usb_tx_push+0x1c>
    11f6:	94 e0       	ldi	r25, 0x04	; 4
    11f8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    11fc:	9a e3       	ldi	r25, 0x3A	; 58
    11fe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1202:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <transmit_flush_timer>
    1206:	8f bf       	out	0x3f, r24	; 63
    1208:	08 95       	ret

0000120a <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	ef 93       	push	r30
    121a:	ff 93       	push	r31
	uint8_t intbits, t;

	intbits = UDINT;
    121c:	e1 ee       	ldi	r30, 0xE1	; 225
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
	UDINT = 0;
    1222:	10 82       	st	Z, r1
	if (intbits & (1 << EORSTI))
    1224:	83 ff       	sbrs	r24, 3
    1226:	11 c0       	rjmp	.+34     	; 0x124a <__vector_10+0x40>
	{
		UENUM = 0;
    1228:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
		UECONX = 1;
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		UECFG0X = EP_TYPE_CONTROL;
    1232:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1236:	92 e1       	ldi	r25, 0x12	; 18
    1238:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
		UEIENX = (1 << RXSTPE);
    123c:	98 e0       	ldi	r25, 0x08	; 8
    123e:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
		usb_configuration = 0;
    1242:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <usb_configuration>
		cdc_line_rtsdtr = 0;
    1246:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <cdc_line_rtsdtr>
	}
	if (intbits & (1 << SOFI))
    124a:	82 ff       	sbrs	r24, 2
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <__vector_10+0x6a>
	{
		if (usb_configuration)
    124e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <usb_configuration>
    1252:	88 23       	and	r24, r24
    1254:	79 f0       	breq	.+30     	; 0x1274 <__vector_10+0x6a>
		{
			t = transmit_flush_timer;
    1256:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <transmit_flush_timer>
			if (t)
    125a:	88 23       	and	r24, r24
    125c:	59 f0       	breq	.+22     	; 0x1274 <__vector_10+0x6a>
			{
				transmit_flush_timer = --t;
    125e:	81 50       	subi	r24, 0x01	; 1
    1260:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <transmit_flush_timer>
				if (!t)
    1264:	81 11       	cpse	r24, r1
    1266:	06 c0       	rjmp	.+12     	; 0x1274 <__vector_10+0x6a>
				{
					UENUM = CDC_TX_ENDPOINT;
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
					UEINTX = 0x3A;
    126e:	8a e3       	ldi	r24, 0x3A	; 58
    1270:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				}
			}
		}
	}
}
    1274:	ff 91       	pop	r31
    1276:	ef 91       	pop	r30
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t desc_length;

	UENUM = 0;
    12ac:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	intbits = UEINTX;
    12b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	if (intbits & (1 << RXSTPI))
    12b4:	83 ff       	sbrs	r24, 3
    12b6:	42 c1       	rjmp	.+644    	; 0x153c <__vector_11+0x2b6>
	{
		bmRequestType = UEDATX;
    12b8:	e1 ef       	ldi	r30, 0xF1	; 241
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	b0 81       	ld	r27, Z
		bRequest = UEDATX;
    12be:	a0 81       	ld	r26, Z
		wValue = UEDATX;
    12c0:	20 81       	ld	r18, Z
		wValue |= (UEDATX << 8);
    12c2:	80 81       	ld	r24, Z
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	98 2f       	mov	r25, r24
    12c8:	88 27       	eor	r24, r24
    12ca:	82 2b       	or	r24, r18
		wIndex = UEDATX;
    12cc:	40 81       	ld	r20, Z
		wIndex |= (UEDATX << 8);
    12ce:	20 81       	ld	r18, Z
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	32 2f       	mov	r19, r18
    12d4:	22 27       	eor	r18, r18
    12d6:	b9 01       	movw	r22, r18
    12d8:	64 2b       	or	r22, r20
		wLength = UEDATX;
    12da:	40 81       	ld	r20, Z
		wLength |= (UEDATX << 8);
    12dc:	20 81       	ld	r18, Z
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	32 2f       	mov	r19, r18
    12e2:	22 27       	eor	r18, r18
    12e4:	f9 01       	movw	r30, r18
    12e6:	e4 2b       	or	r30, r20
    12e8:	af 01       	movw	r20, r30
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
    12ea:	22 ef       	ldi	r18, 0xF2	; 242
    12ec:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		if (bRequest == GET_DESCRIPTOR)
    12f0:	a6 30       	cpi	r26, 0x06	; 6
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <__vector_11+0x70>
    12f4:	51 c0       	rjmp	.+162    	; 0x1398 <__vector_11+0x112>
    12f6:	a0 e0       	ldi	r26, 0x00	; 0
    12f8:	21 e3       	ldi	r18, 0x31	; 49
    12fa:	32 e0       	ldi	r19, 0x02	; 2
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
			{
				if (i >= NUM_DESC_LIST)
    12fc:	a6 30       	cpi	r26, 0x06	; 6
    12fe:	20 f0       	brcs	.+8      	; 0x1308 <__vector_11+0x82>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
    1300:	81 e2       	ldi	r24, 0x21	; 33
    1302:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					return;
    1306:	1d c1       	rjmp	.+570    	; 0x1542 <__vector_11+0x2bc>
				}
				desc_val = pgm_read_word(list);
    1308:	f9 01       	movw	r30, r18
    130a:	c5 91       	lpm	r28, Z+
    130c:	d4 91       	lpm	r29, Z
				if (desc_val != wValue)
    130e:	8c 17       	cp	r24, r28
    1310:	9d 07       	cpc	r25, r29
    1312:	19 f0       	breq	.+6      	; 0x131a <__vector_11+0x94>
				{
					list += sizeof(struct descriptor_list_struct);
    1314:	29 5f       	subi	r18, 0xF9	; 249
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
    1318:	1c c0       	rjmp	.+56     	; 0x1352 <__vector_11+0xcc>
				}
				list += 2;
    131a:	f9 01       	movw	r30, r18
    131c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    131e:	c5 91       	lpm	r28, Z+
    1320:	d4 91       	lpm	r29, Z
				if (desc_val != wIndex)
    1322:	6c 17       	cp	r22, r28
    1324:	7d 07       	cpc	r23, r29
    1326:	19 f0       	breq	.+6      	; 0x132e <__vector_11+0xa8>
				{
					list += sizeof(struct descriptor_list_struct) - 2;
    1328:	29 5f       	subi	r18, 0xF9	; 249
    132a:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
    132c:	12 c0       	rjmp	.+36     	; 0x1352 <__vector_11+0xcc>
				}
				list += 2;
    132e:	f9 01       	movw	r30, r18
    1330:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1332:	85 91       	lpm	r24, Z+
    1334:	94 91       	lpm	r25, Z
				list += 2;
    1336:	f9 01       	movw	r30, r18
    1338:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    133a:	64 91       	lpm	r22, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    133c:	9a 01       	movw	r18, r20
    133e:	4f 3f       	cpi	r20, 0xFF	; 255
    1340:	51 05       	cpc	r21, r1
    1342:	19 f0       	breq	.+6      	; 0x134a <__vector_11+0xc4>
    1344:	10 f0       	brcs	.+4      	; 0x134a <__vector_11+0xc4>
    1346:	2f ef       	ldi	r18, 0xFF	; 255
    1348:	30 e0       	ldi	r19, 0x00	; 0
			if (len > desc_length)
    134a:	62 17       	cp	r22, r18
    134c:	20 f0       	brcs	.+8      	; 0x1356 <__vector_11+0xd0>
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    134e:	62 2f       	mov	r22, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <__vector_11+0xd0>
		wLength |= (UEDATX << 8);
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
		if (bRequest == GET_DESCRIPTOR)
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
    1352:	af 5f       	subi	r26, 0xFF	; 255
				list += 2;
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
    1354:	d3 cf       	rjmp	.-90     	; 0x12fc <__vector_11+0x76>
			do
			{
				// wait for host ready for IN packet
				do
				{
					i = UEINTX;
    1356:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
    135a:	32 2f       	mov	r19, r18
    135c:	35 70       	andi	r19, 0x05	; 5
    135e:	d9 f3       	breq	.-10     	; 0x1356 <__vector_11+0xd0>
				if (i & (1 << RXOUTI))
    1360:	22 fd       	sbrc	r18, 2
    1362:	ef c0       	rjmp	.+478    	; 0x1542 <__vector_11+0x2bc>
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1364:	36 2f       	mov	r19, r22
    1366:	61 31       	cpi	r22, 0x11	; 17
    1368:	08 f0       	brcs	.+2      	; 0x136c <__vector_11+0xe6>
    136a:	30 e1       	ldi	r19, 0x10	; 16
				for (i = n; i; i--)
    136c:	23 2f       	mov	r18, r19
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <__vector_11+0xfc>
				{
					UEDATX = pgm_read_byte(desc_addr++);
    1370:	ac 01       	movw	r20, r24
    1372:	4f 5f       	subi	r20, 0xFF	; 255
    1374:	5f 4f       	sbci	r21, 0xFF	; 255
    1376:	fc 01       	movw	r30, r24
    1378:	84 91       	lpm	r24, Z
    137a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
    137e:	21 50       	subi	r18, 0x01	; 1
				{
					UEDATX = pgm_read_byte(desc_addr++);
    1380:	ca 01       	movw	r24, r20
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
    1382:	21 11       	cpse	r18, r1
    1384:	f5 cf       	rjmp	.-22     	; 0x1370 <__vector_11+0xea>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1386:	63 1b       	sub	r22, r19
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1388:	2e ef       	ldi	r18, 0xFE	; 254
    138a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    138e:	61 11       	cpse	r22, r1
    1390:	e2 cf       	rjmp	.-60     	; 0x1356 <__vector_11+0xd0>
    1392:	30 31       	cpi	r19, 0x10	; 16
    1394:	01 f3       	breq	.-64     	; 0x1356 <__vector_11+0xd0>
    1396:	d5 c0       	rjmp	.+426    	; 0x1542 <__vector_11+0x2bc>
			return;
		}
		if (bRequest == SET_ADDRESS)
    1398:	a5 30       	cpi	r26, 0x05	; 5
    139a:	59 f4       	brne	.+22     	; 0x13b2 <__vector_11+0x12c>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    139c:	2e ef       	ldi	r18, 0xFE	; 254
    139e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    13a2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    13a6:	20 ff       	sbrs	r18, 0
    13a8:	fc cf       	rjmp	.-8      	; 0x13a2 <__vector_11+0x11c>
		}
		if (bRequest == SET_ADDRESS)
		{
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1 << ADDEN);
    13aa:	80 68       	ori	r24, 0x80	; 128
    13ac:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
			return;
    13b0:	c8 c0       	rjmp	.+400    	; 0x1542 <__vector_11+0x2bc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0)
    13b2:	a9 30       	cpi	r26, 0x09	; 9
    13b4:	79 f5       	brne	.+94     	; 0x1414 <__vector_11+0x18e>
    13b6:	b1 11       	cpse	r27, r1
    13b8:	2d c0       	rjmp	.+90     	; 0x1414 <__vector_11+0x18e>
		{
			usb_configuration = wValue;
    13ba:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <usb_configuration>
			cdc_line_rtsdtr = 0;
    13be:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <cdc_line_rtsdtr>
			transmit_flush_timer = 0;
    13c2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <transmit_flush_timer>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    13c6:	8e ef       	ldi	r24, 0xFE	; 254
    13c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
    13cc:	81 e0       	ldi	r24, 0x01	; 1
		{
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    13ce:	2a ed       	ldi	r18, 0xDA	; 218
    13d0:	32 e0       	ldi	r19, 0x02	; 2
			for (i = 1; i < 5; i++)
    13d2:	18 c0       	rjmp	.+48     	; 0x1404 <__vector_11+0x17e>
			{
				UENUM = i;
    13d4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				en = pgm_read_byte(cfg++);
    13d8:	a9 01       	movw	r20, r18
    13da:	4f 5f       	subi	r20, 0xFF	; 255
    13dc:	5f 4f       	sbci	r21, 0xFF	; 255
    13de:	f9 01       	movw	r30, r18
    13e0:	94 91       	lpm	r25, Z
				UECONX = en;
    13e2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				if (en)
    13e6:	99 23       	and	r25, r25
    13e8:	59 f0       	breq	.+22     	; 0x1400 <__vector_11+0x17a>
				{
					UECFG0X = pgm_read_byte(cfg++);
    13ea:	fa 01       	movw	r30, r20
    13ec:	44 91       	lpm	r20, Z
    13ee:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
					UECFG1X = pgm_read_byte(cfg++);
    13f2:	31 96       	adiw	r30, 0x01	; 1
    13f4:	e4 91       	lpm	r30, Z
    13f6:	2d 5f       	subi	r18, 0xFD	; 253
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <__vector_11+0x17c>
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
			{
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1400:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	85 30       	cpi	r24, 0x05	; 5
    1406:	30 f3       	brcs	.-52     	; 0x13d4 <__vector_11+0x14e>
				{
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
			UERST = 0x1E;
    1408:	ea ee       	ldi	r30, 0xEA	; 234
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	8e e1       	ldi	r24, 0x1E	; 30
    140e:	80 83       	st	Z, r24
			UERST = 0;
    1410:	10 82       	st	Z, r1
			return;
    1412:	97 c0       	rjmp	.+302    	; 0x1542 <__vector_11+0x2bc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
    1414:	a8 30       	cpi	r26, 0x08	; 8
    1416:	71 f4       	brne	.+28     	; 0x1434 <__vector_11+0x1ae>
    1418:	b0 38       	cpi	r27, 0x80	; 128
    141a:	61 f4       	brne	.+24     	; 0x1434 <__vector_11+0x1ae>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    141c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1420:	80 ff       	sbrs	r24, 0
    1422:	fc cf       	rjmp	.-8      	; 0x141c <__vector_11+0x196>
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
		{
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1424:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <usb_configuration>
    1428:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    142c:	8e ef       	ldi	r24, 0xFE	; 254
    142e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1432:	87 c0       	rjmp	.+270    	; 0x1542 <__vector_11+0x2bc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
    1434:	a1 32       	cpi	r26, 0x21	; 33
    1436:	a9 f4       	brne	.+42     	; 0x1462 <__vector_11+0x1dc>
    1438:	b1 3a       	cpi	r27, 0xA1	; 161
    143a:	99 f4       	brne	.+38     	; 0x1462 <__vector_11+0x1dc>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    143c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1440:	80 ff       	sbrs	r24, 0
    1442:	fc cf       	rjmp	.-8      	; 0x143c <__vector_11+0x1b6>
    1444:	e0 e0       	ldi	r30, 0x00	; 0
    1446:	f1 e0       	ldi	r31, 0x01	; 1
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <__vector_11+0x1d0>
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				UEDATX = *p++;
    144c:	90 81       	ld	r25, Z
    144e:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1452:	8f 5f       	subi	r24, 0xFF	; 255
			{
				UEDATX = *p++;
    1454:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1456:	87 30       	cpi	r24, 0x07	; 7
    1458:	c8 f3       	brcs	.-14     	; 0x144c <__vector_11+0x1c6>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    145a:	8e ef       	ldi	r24, 0xFE	; 254
    145c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1460:	70 c0       	rjmp	.+224    	; 0x1542 <__vector_11+0x2bc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
    1462:	a0 32       	cpi	r26, 0x20	; 32
    1464:	c1 f4       	brne	.+48     	; 0x1496 <__vector_11+0x210>
    1466:	b1 32       	cpi	r27, 0x21	; 33
    1468:	b1 f4       	brne	.+44     	; 0x1496 <__vector_11+0x210>
{
	UEINTX = ~(1 << TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1 << RXOUTI)))
    146a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    146e:	82 ff       	sbrs	r24, 2
    1470:	fc cf       	rjmp	.-8      	; 0x146a <__vector_11+0x1e4>
    1472:	e0 e0       	ldi	r30, 0x00	; 0
    1474:	f1 e0       	ldi	r31, 0x01	; 1
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	05 c0       	rjmp	.+10     	; 0x1484 <__vector_11+0x1fe>
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				*p++ = UEDATX;
    147a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    147e:	90 83       	st	Z, r25
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1480:	8f 5f       	subi	r24, 0xFF	; 255
			{
				*p++ = UEDATX;
    1482:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1484:	87 30       	cpi	r24, 0x07	; 7
    1486:	c8 f3       	brcs	.-14     	; 0x147a <__vector_11+0x1f4>
	while (!(UEINTX & (1 << RXOUTI)))
		;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1 << RXOUTI);
    1488:	e8 ee       	ldi	r30, 0xE8	; 232
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8b ef       	ldi	r24, 0xFB	; 251
    148e:	80 83       	st	Z, r24
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1490:	8e ef       	ldi	r24, 0xFE	; 254
    1492:	80 83       	st	Z, r24
    1494:	56 c0       	rjmp	.+172    	; 0x1542 <__vector_11+0x2bc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21)
    1496:	a2 32       	cpi	r26, 0x22	; 34
    1498:	61 f4       	brne	.+24     	; 0x14b2 <__vector_11+0x22c>
    149a:	b1 32       	cpi	r27, 0x21	; 33
    149c:	51 f4       	brne	.+20     	; 0x14b2 <__vector_11+0x22c>
		{
			cdc_line_rtsdtr = wValue;
    149e:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <cdc_line_rtsdtr>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    14a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14a6:	80 ff       	sbrs	r24, 0
    14a8:	fc cf       	rjmp	.-8      	; 0x14a2 <__vector_11+0x21c>
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    14aa:	8e ef       	ldi	r24, 0xFE	; 254
    14ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14b0:	48 c0       	rjmp	.+144    	; 0x1542 <__vector_11+0x2bc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS)
    14b2:	a1 11       	cpse	r26, r1
    14b4:	1b c0       	rjmp	.+54     	; 0x14ec <__vector_11+0x266>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    14b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14ba:	80 ff       	sbrs	r24, 0
    14bc:	fc cf       	rjmp	.-8      	; 0x14b6 <__vector_11+0x230>
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
    14be:	b2 38       	cpi	r27, 0x82	; 130
    14c0:	61 f4       	brne	.+24     	; 0x14da <__vector_11+0x254>
			{
				UENUM = wIndex;
    14c2:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (UECONX & (1 << STALLRQ))
    14c6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    14ca:	85 fd       	sbrc	r24, 5
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <__vector_11+0x24c>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <__vector_11+0x24e>
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
			{
				UENUM = wIndex;
				if (UECONX & (1 << STALLRQ))
					i = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
				UENUM = 0;
    14d4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <__vector_11+0x256>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
    14da:	80 e0       	ldi	r24, 0x00	; 0
				if (UECONX & (1 << STALLRQ))
					i = 1;
				UENUM = 0;
			}
#endif
			UEDATX = i;
    14dc:	e1 ef       	ldi	r30, 0xF1	; 241
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 83       	st	Z, r24
			UEDATX = 0;
    14e2:	10 82       	st	Z, r1
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    14e4:	8e ef       	ldi	r24, 0xFE	; 254
    14e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14ea:	2b c0       	rjmp	.+86     	; 0x1542 <__vector_11+0x2bc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE) && bmRequestType == 0x02 && wValue == 0)
    14ec:	a1 30       	cpi	r26, 0x01	; 1
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <__vector_11+0x26e>
    14f0:	a3 30       	cpi	r26, 0x03	; 3
    14f2:	21 f5       	brne	.+72     	; 0x153c <__vector_11+0x2b6>
    14f4:	b2 30       	cpi	r27, 0x02	; 2
    14f6:	11 f5       	brne	.+68     	; 0x153c <__vector_11+0x2b6>
    14f8:	89 2b       	or	r24, r25
    14fa:	01 f5       	brne	.+64     	; 0x153c <__vector_11+0x2b6>
		{
			i = wIndex & 0x7F;
    14fc:	26 2f       	mov	r18, r22
    14fe:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT)
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	82 0f       	add	r24, r18
    1504:	84 30       	cpi	r24, 0x04	; 4
    1506:	d0 f4       	brcc	.+52     	; 0x153c <__vector_11+0x2b6>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1508:	8e ef       	ldi	r24, 0xFE	; 254
    150a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		{
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT)
			{
				usb_send_in();
				UENUM = i;
    150e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (bRequest == SET_FEATURE)
    1512:	a3 30       	cpi	r26, 0x03	; 3
    1514:	21 f4       	brne	.+8      	; 0x151e <__vector_11+0x298>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN);
    1516:	81 e2       	ldi	r24, 0x21	; 33
    1518:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    151c:	12 c0       	rjmp	.+36     	; 0x1542 <__vector_11+0x2bc>
				}
				else
				{
					UECONX = (1 << STALLRQC) | (1 << RSTDT) | (1 << EPEN);
    151e:	89 e1       	ldi	r24, 0x19	; 25
    1520:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					UERST = (1 << i);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 c0       	rjmp	.+4      	; 0x152e <__vector_11+0x2a8>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	2a 95       	dec	r18
    1530:	e2 f7       	brpl	.-8      	; 0x152a <__vector_11+0x2a4>
    1532:	ea ee       	ldi	r30, 0xEA	; 234
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 83       	st	Z, r24
					UERST = 0;
    1538:	10 82       	st	Z, r1
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <__vector_11+0x2bc>
				return;
			}
		}
#endif
	}
	UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
    153c:	81 e2       	ldi	r24, 0x21	; 33
    153e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
}
    1542:	ff 91       	pop	r31
    1544:	ef 91       	pop	r30
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <print_P>:

// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	fc 01       	movw	r30, r24
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
    1570:	8f 01       	movw	r16, r30
    1572:	0f 5f       	subi	r16, 0xFF	; 255
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	c4 91       	lpm	r28, Z
		if (!c)
    1578:	cc 23       	and	r28, r28
    157a:	51 f0       	breq	.+20     	; 0x1590 <print_P+0x28>
			break;
		if (c == '\n')
    157c:	ca 30       	cpi	r28, 0x0A	; 10
    157e:	19 f4       	brne	.+6      	; 0x1586 <print_P+0x1e>
			usb_tx_char('\r');
    1580:	8d e0       	ldi	r24, 0x0D	; 13
    1582:	0e 94 b1 08 	call	0x1162	; 0x1162 <m_usb_tx_char>
		usb_tx_char(c);
    1586:	8c 2f       	mov	r24, r28
    1588:	0e 94 b1 08 	call	0x1162	; 0x1162 <m_usb_tx_char>
{
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
    158c:	f8 01       	movw	r30, r16
		if (!c)
			break;
		if (c == '\n')
			usb_tx_char('\r');
		usb_tx_char(c);
	}
    158e:	f0 cf       	rjmp	.-32     	; 0x1570 <print_P+0x8>
}
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	08 95       	ret

00001598 <__floatunsisf>:
    1598:	e8 94       	clt
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <__floatsisf+0x12>

0000159c <__floatsisf>:
    159c:	97 fb       	bst	r25, 7
    159e:	3e f4       	brtc	.+14     	; 0x15ae <__floatsisf+0x12>
    15a0:	90 95       	com	r25
    15a2:	80 95       	com	r24
    15a4:	70 95       	com	r23
    15a6:	61 95       	neg	r22
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	8f 4f       	sbci	r24, 0xFF	; 255
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	99 23       	and	r25, r25
    15b0:	a9 f0       	breq	.+42     	; 0x15dc <__floatsisf+0x40>
    15b2:	f9 2f       	mov	r31, r25
    15b4:	96 e9       	ldi	r25, 0x96	; 150
    15b6:	bb 27       	eor	r27, r27
    15b8:	93 95       	inc	r25
    15ba:	f6 95       	lsr	r31
    15bc:	87 95       	ror	r24
    15be:	77 95       	ror	r23
    15c0:	67 95       	ror	r22
    15c2:	b7 95       	ror	r27
    15c4:	f1 11       	cpse	r31, r1
    15c6:	f8 cf       	rjmp	.-16     	; 0x15b8 <__floatsisf+0x1c>
    15c8:	fa f4       	brpl	.+62     	; 0x1608 <__floatsisf+0x6c>
    15ca:	bb 0f       	add	r27, r27
    15cc:	11 f4       	brne	.+4      	; 0x15d2 <__floatsisf+0x36>
    15ce:	60 ff       	sbrs	r22, 0
    15d0:	1b c0       	rjmp	.+54     	; 0x1608 <__floatsisf+0x6c>
    15d2:	6f 5f       	subi	r22, 0xFF	; 255
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	8f 4f       	sbci	r24, 0xFF	; 255
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	16 c0       	rjmp	.+44     	; 0x1608 <__floatsisf+0x6c>
    15dc:	88 23       	and	r24, r24
    15de:	11 f0       	breq	.+4      	; 0x15e4 <__floatsisf+0x48>
    15e0:	96 e9       	ldi	r25, 0x96	; 150
    15e2:	11 c0       	rjmp	.+34     	; 0x1606 <__floatsisf+0x6a>
    15e4:	77 23       	and	r23, r23
    15e6:	21 f0       	breq	.+8      	; 0x15f0 <__floatsisf+0x54>
    15e8:	9e e8       	ldi	r25, 0x8E	; 142
    15ea:	87 2f       	mov	r24, r23
    15ec:	76 2f       	mov	r23, r22
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <__floatsisf+0x5e>
    15f0:	66 23       	and	r22, r22
    15f2:	71 f0       	breq	.+28     	; 0x1610 <__floatsisf+0x74>
    15f4:	96 e8       	ldi	r25, 0x86	; 134
    15f6:	86 2f       	mov	r24, r22
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	2a f0       	brmi	.+10     	; 0x1608 <__floatsisf+0x6c>
    15fe:	9a 95       	dec	r25
    1600:	66 0f       	add	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	88 1f       	adc	r24, r24
    1606:	da f7       	brpl	.-10     	; 0x15fe <__floatsisf+0x62>
    1608:	88 0f       	add	r24, r24
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	97 f9       	bld	r25, 7
    1610:	08 95       	ret

00001612 <__mulsf3>:
    1612:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulsf3x>
    1616:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__fp_round>
    161a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fp_pscA>
    161e:	38 f0       	brcs	.+14     	; 0x162e <__mulsf3+0x1c>
    1620:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_pscB>
    1624:	20 f0       	brcs	.+8      	; 0x162e <__mulsf3+0x1c>
    1626:	95 23       	and	r25, r21
    1628:	11 f0       	breq	.+4      	; 0x162e <__mulsf3+0x1c>
    162a:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_inf>
    162e:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__fp_nan>
    1632:	11 24       	eor	r1, r1
    1634:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_szero>

00001638 <__mulsf3x>:
    1638:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_split3>
    163c:	70 f3       	brcs	.-36     	; 0x161a <__mulsf3+0x8>

0000163e <__mulsf3_pse>:
    163e:	95 9f       	mul	r25, r21
    1640:	c1 f3       	breq	.-16     	; 0x1632 <__mulsf3+0x20>
    1642:	95 0f       	add	r25, r21
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	55 1f       	adc	r21, r21
    1648:	62 9f       	mul	r22, r18
    164a:	f0 01       	movw	r30, r0
    164c:	72 9f       	mul	r23, r18
    164e:	bb 27       	eor	r27, r27
    1650:	f0 0d       	add	r31, r0
    1652:	b1 1d       	adc	r27, r1
    1654:	63 9f       	mul	r22, r19
    1656:	aa 27       	eor	r26, r26
    1658:	f0 0d       	add	r31, r0
    165a:	b1 1d       	adc	r27, r1
    165c:	aa 1f       	adc	r26, r26
    165e:	64 9f       	mul	r22, r20
    1660:	66 27       	eor	r22, r22
    1662:	b0 0d       	add	r27, r0
    1664:	a1 1d       	adc	r26, r1
    1666:	66 1f       	adc	r22, r22
    1668:	82 9f       	mul	r24, r18
    166a:	22 27       	eor	r18, r18
    166c:	b0 0d       	add	r27, r0
    166e:	a1 1d       	adc	r26, r1
    1670:	62 1f       	adc	r22, r18
    1672:	73 9f       	mul	r23, r19
    1674:	b0 0d       	add	r27, r0
    1676:	a1 1d       	adc	r26, r1
    1678:	62 1f       	adc	r22, r18
    167a:	83 9f       	mul	r24, r19
    167c:	a0 0d       	add	r26, r0
    167e:	61 1d       	adc	r22, r1
    1680:	22 1f       	adc	r18, r18
    1682:	74 9f       	mul	r23, r20
    1684:	33 27       	eor	r19, r19
    1686:	a0 0d       	add	r26, r0
    1688:	61 1d       	adc	r22, r1
    168a:	23 1f       	adc	r18, r19
    168c:	84 9f       	mul	r24, r20
    168e:	60 0d       	add	r22, r0
    1690:	21 1d       	adc	r18, r1
    1692:	82 2f       	mov	r24, r18
    1694:	76 2f       	mov	r23, r22
    1696:	6a 2f       	mov	r22, r26
    1698:	11 24       	eor	r1, r1
    169a:	9f 57       	subi	r25, 0x7F	; 127
    169c:	50 40       	sbci	r21, 0x00	; 0
    169e:	9a f0       	brmi	.+38     	; 0x16c6 <__mulsf3_pse+0x88>
    16a0:	f1 f0       	breq	.+60     	; 0x16de <__mulsf3_pse+0xa0>
    16a2:	88 23       	and	r24, r24
    16a4:	4a f0       	brmi	.+18     	; 0x16b8 <__mulsf3_pse+0x7a>
    16a6:	ee 0f       	add	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	bb 1f       	adc	r27, r27
    16ac:	66 1f       	adc	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 1f       	adc	r24, r24
    16b2:	91 50       	subi	r25, 0x01	; 1
    16b4:	50 40       	sbci	r21, 0x00	; 0
    16b6:	a9 f7       	brne	.-22     	; 0x16a2 <__mulsf3_pse+0x64>
    16b8:	9e 3f       	cpi	r25, 0xFE	; 254
    16ba:	51 05       	cpc	r21, r1
    16bc:	80 f0       	brcs	.+32     	; 0x16de <__mulsf3_pse+0xa0>
    16be:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_inf>
    16c2:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_szero>
    16c6:	5f 3f       	cpi	r21, 0xFF	; 255
    16c8:	e4 f3       	brlt	.-8      	; 0x16c2 <__mulsf3_pse+0x84>
    16ca:	98 3e       	cpi	r25, 0xE8	; 232
    16cc:	d4 f3       	brlt	.-12     	; 0x16c2 <__mulsf3_pse+0x84>
    16ce:	86 95       	lsr	r24
    16d0:	77 95       	ror	r23
    16d2:	67 95       	ror	r22
    16d4:	b7 95       	ror	r27
    16d6:	f7 95       	ror	r31
    16d8:	e7 95       	ror	r30
    16da:	9f 5f       	subi	r25, 0xFF	; 255
    16dc:	c1 f7       	brne	.-16     	; 0x16ce <__mulsf3_pse+0x90>
    16de:	fe 2b       	or	r31, r30
    16e0:	88 0f       	add	r24, r24
    16e2:	91 1d       	adc	r25, r1
    16e4:	96 95       	lsr	r25
    16e6:	87 95       	ror	r24
    16e8:	97 f9       	bld	r25, 7
    16ea:	08 95       	ret

000016ec <__fp_inf>:
    16ec:	97 f9       	bld	r25, 7
    16ee:	9f 67       	ori	r25, 0x7F	; 127
    16f0:	80 e8       	ldi	r24, 0x80	; 128
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	08 95       	ret

000016f8 <__fp_nan>:
    16f8:	9f ef       	ldi	r25, 0xFF	; 255
    16fa:	80 ec       	ldi	r24, 0xC0	; 192
    16fc:	08 95       	ret

000016fe <__fp_pscA>:
    16fe:	00 24       	eor	r0, r0
    1700:	0a 94       	dec	r0
    1702:	16 16       	cp	r1, r22
    1704:	17 06       	cpc	r1, r23
    1706:	18 06       	cpc	r1, r24
    1708:	09 06       	cpc	r0, r25
    170a:	08 95       	ret

0000170c <__fp_pscB>:
    170c:	00 24       	eor	r0, r0
    170e:	0a 94       	dec	r0
    1710:	12 16       	cp	r1, r18
    1712:	13 06       	cpc	r1, r19
    1714:	14 06       	cpc	r1, r20
    1716:	05 06       	cpc	r0, r21
    1718:	08 95       	ret

0000171a <__fp_round>:
    171a:	09 2e       	mov	r0, r25
    171c:	03 94       	inc	r0
    171e:	00 0c       	add	r0, r0
    1720:	11 f4       	brne	.+4      	; 0x1726 <__fp_round+0xc>
    1722:	88 23       	and	r24, r24
    1724:	52 f0       	brmi	.+20     	; 0x173a <__fp_round+0x20>
    1726:	bb 0f       	add	r27, r27
    1728:	40 f4       	brcc	.+16     	; 0x173a <__fp_round+0x20>
    172a:	bf 2b       	or	r27, r31
    172c:	11 f4       	brne	.+4      	; 0x1732 <__fp_round+0x18>
    172e:	60 ff       	sbrs	r22, 0
    1730:	04 c0       	rjmp	.+8      	; 0x173a <__fp_round+0x20>
    1732:	6f 5f       	subi	r22, 0xFF	; 255
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	8f 4f       	sbci	r24, 0xFF	; 255
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	08 95       	ret

0000173c <__fp_split3>:
    173c:	57 fd       	sbrc	r21, 7
    173e:	90 58       	subi	r25, 0x80	; 128
    1740:	44 0f       	add	r20, r20
    1742:	55 1f       	adc	r21, r21
    1744:	59 f0       	breq	.+22     	; 0x175c <__fp_splitA+0x10>
    1746:	5f 3f       	cpi	r21, 0xFF	; 255
    1748:	71 f0       	breq	.+28     	; 0x1766 <__fp_splitA+0x1a>
    174a:	47 95       	ror	r20

0000174c <__fp_splitA>:
    174c:	88 0f       	add	r24, r24
    174e:	97 fb       	bst	r25, 7
    1750:	99 1f       	adc	r25, r25
    1752:	61 f0       	breq	.+24     	; 0x176c <__fp_splitA+0x20>
    1754:	9f 3f       	cpi	r25, 0xFF	; 255
    1756:	79 f0       	breq	.+30     	; 0x1776 <__fp_splitA+0x2a>
    1758:	87 95       	ror	r24
    175a:	08 95       	ret
    175c:	12 16       	cp	r1, r18
    175e:	13 06       	cpc	r1, r19
    1760:	14 06       	cpc	r1, r20
    1762:	55 1f       	adc	r21, r21
    1764:	f2 cf       	rjmp	.-28     	; 0x174a <__fp_split3+0xe>
    1766:	46 95       	lsr	r20
    1768:	f1 df       	rcall	.-30     	; 0x174c <__fp_splitA>
    176a:	08 c0       	rjmp	.+16     	; 0x177c <__fp_splitA+0x30>
    176c:	16 16       	cp	r1, r22
    176e:	17 06       	cpc	r1, r23
    1770:	18 06       	cpc	r1, r24
    1772:	99 1f       	adc	r25, r25
    1774:	f1 cf       	rjmp	.-30     	; 0x1758 <__fp_splitA+0xc>
    1776:	86 95       	lsr	r24
    1778:	71 05       	cpc	r23, r1
    177a:	61 05       	cpc	r22, r1
    177c:	08 94       	sec
    177e:	08 95       	ret

00001780 <__fp_zero>:
    1780:	e8 94       	clt

00001782 <__fp_szero>:
    1782:	bb 27       	eor	r27, r27
    1784:	66 27       	eor	r22, r22
    1786:	77 27       	eor	r23, r23
    1788:	cb 01       	movw	r24, r22
    178a:	97 f9       	bld	r25, 7
    178c:	08 95       	ret

0000178e <vfprintf>:
    178e:	a0 e1       	ldi	r26, 0x10	; 16
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ed ec       	ldi	r30, 0xCD	; 205
    1794:	fb e0       	ldi	r31, 0x0B	; 11
    1796:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__prologue_saves__>
    179a:	7c 01       	movw	r14, r24
    179c:	1b 01       	movw	r2, r22
    179e:	6a 01       	movw	r12, r20
    17a0:	fc 01       	movw	r30, r24
    17a2:	17 82       	std	Z+7, r1	; 0x07
    17a4:	16 82       	std	Z+6, r1	; 0x06
    17a6:	83 81       	ldd	r24, Z+3	; 0x03
    17a8:	81 ff       	sbrs	r24, 1
    17aa:	44 c3       	rjmp	.+1672   	; 0x1e34 <vfprintf+0x6a6>
    17ac:	9e 01       	movw	r18, r28
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	39 01       	movw	r6, r18
    17b4:	f7 01       	movw	r30, r14
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	f1 01       	movw	r30, r2
    17ba:	93 fd       	sbrc	r25, 3
    17bc:	85 91       	lpm	r24, Z+
    17be:	93 ff       	sbrs	r25, 3
    17c0:	81 91       	ld	r24, Z+
    17c2:	1f 01       	movw	r2, r30
    17c4:	88 23       	and	r24, r24
    17c6:	09 f4       	brne	.+2      	; 0x17ca <vfprintf+0x3c>
    17c8:	31 c3       	rjmp	.+1634   	; 0x1e2c <vfprintf+0x69e>
    17ca:	85 32       	cpi	r24, 0x25	; 37
    17cc:	39 f4       	brne	.+14     	; 0x17dc <vfprintf+0x4e>
    17ce:	93 fd       	sbrc	r25, 3
    17d0:	85 91       	lpm	r24, Z+
    17d2:	93 ff       	sbrs	r25, 3
    17d4:	81 91       	ld	r24, Z+
    17d6:	1f 01       	movw	r2, r30
    17d8:	85 32       	cpi	r24, 0x25	; 37
    17da:	39 f4       	brne	.+14     	; 0x17ea <vfprintf+0x5c>
    17dc:	b7 01       	movw	r22, r14
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    17e4:	56 01       	movw	r10, r12
    17e6:	65 01       	movw	r12, r10
    17e8:	e5 cf       	rjmp	.-54     	; 0x17b4 <vfprintf+0x26>
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	51 2c       	mov	r5, r1
    17ee:	91 2c       	mov	r9, r1
    17f0:	ff e1       	ldi	r31, 0x1F	; 31
    17f2:	f9 15       	cp	r31, r9
    17f4:	d8 f0       	brcs	.+54     	; 0x182c <vfprintf+0x9e>
    17f6:	8b 32       	cpi	r24, 0x2B	; 43
    17f8:	79 f0       	breq	.+30     	; 0x1818 <vfprintf+0x8a>
    17fa:	38 f4       	brcc	.+14     	; 0x180a <vfprintf+0x7c>
    17fc:	80 32       	cpi	r24, 0x20	; 32
    17fe:	79 f0       	breq	.+30     	; 0x181e <vfprintf+0x90>
    1800:	83 32       	cpi	r24, 0x23	; 35
    1802:	a1 f4       	brne	.+40     	; 0x182c <vfprintf+0x9e>
    1804:	f9 2d       	mov	r31, r9
    1806:	f0 61       	ori	r31, 0x10	; 16
    1808:	2e c0       	rjmp	.+92     	; 0x1866 <vfprintf+0xd8>
    180a:	8d 32       	cpi	r24, 0x2D	; 45
    180c:	61 f0       	breq	.+24     	; 0x1826 <vfprintf+0x98>
    180e:	80 33       	cpi	r24, 0x30	; 48
    1810:	69 f4       	brne	.+26     	; 0x182c <vfprintf+0x9e>
    1812:	29 2d       	mov	r18, r9
    1814:	21 60       	ori	r18, 0x01	; 1
    1816:	2d c0       	rjmp	.+90     	; 0x1872 <vfprintf+0xe4>
    1818:	39 2d       	mov	r19, r9
    181a:	32 60       	ori	r19, 0x02	; 2
    181c:	93 2e       	mov	r9, r19
    181e:	89 2d       	mov	r24, r9
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	98 2e       	mov	r9, r24
    1824:	2a c0       	rjmp	.+84     	; 0x187a <vfprintf+0xec>
    1826:	e9 2d       	mov	r30, r9
    1828:	e8 60       	ori	r30, 0x08	; 8
    182a:	15 c0       	rjmp	.+42     	; 0x1856 <vfprintf+0xc8>
    182c:	97 fc       	sbrc	r9, 7
    182e:	2d c0       	rjmp	.+90     	; 0x188a <vfprintf+0xfc>
    1830:	20 ed       	ldi	r18, 0xD0	; 208
    1832:	28 0f       	add	r18, r24
    1834:	2a 30       	cpi	r18, 0x0A	; 10
    1836:	88 f4       	brcc	.+34     	; 0x185a <vfprintf+0xcc>
    1838:	96 fe       	sbrs	r9, 6
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <vfprintf+0xba>
    183c:	3a e0       	ldi	r19, 0x0A	; 10
    183e:	13 9f       	mul	r17, r19
    1840:	20 0d       	add	r18, r0
    1842:	11 24       	eor	r1, r1
    1844:	12 2f       	mov	r17, r18
    1846:	19 c0       	rjmp	.+50     	; 0x187a <vfprintf+0xec>
    1848:	8a e0       	ldi	r24, 0x0A	; 10
    184a:	58 9e       	mul	r5, r24
    184c:	20 0d       	add	r18, r0
    184e:	11 24       	eor	r1, r1
    1850:	52 2e       	mov	r5, r18
    1852:	e9 2d       	mov	r30, r9
    1854:	e0 62       	ori	r30, 0x20	; 32
    1856:	9e 2e       	mov	r9, r30
    1858:	10 c0       	rjmp	.+32     	; 0x187a <vfprintf+0xec>
    185a:	8e 32       	cpi	r24, 0x2E	; 46
    185c:	31 f4       	brne	.+12     	; 0x186a <vfprintf+0xdc>
    185e:	96 fc       	sbrc	r9, 6
    1860:	e5 c2       	rjmp	.+1482   	; 0x1e2c <vfprintf+0x69e>
    1862:	f9 2d       	mov	r31, r9
    1864:	f0 64       	ori	r31, 0x40	; 64
    1866:	9f 2e       	mov	r9, r31
    1868:	08 c0       	rjmp	.+16     	; 0x187a <vfprintf+0xec>
    186a:	8c 36       	cpi	r24, 0x6C	; 108
    186c:	21 f4       	brne	.+8      	; 0x1876 <vfprintf+0xe8>
    186e:	29 2d       	mov	r18, r9
    1870:	20 68       	ori	r18, 0x80	; 128
    1872:	92 2e       	mov	r9, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <vfprintf+0xec>
    1876:	88 36       	cpi	r24, 0x68	; 104
    1878:	41 f4       	brne	.+16     	; 0x188a <vfprintf+0xfc>
    187a:	f1 01       	movw	r30, r2
    187c:	93 fd       	sbrc	r25, 3
    187e:	85 91       	lpm	r24, Z+
    1880:	93 ff       	sbrs	r25, 3
    1882:	81 91       	ld	r24, Z+
    1884:	1f 01       	movw	r2, r30
    1886:	81 11       	cpse	r24, r1
    1888:	b3 cf       	rjmp	.-154    	; 0x17f0 <vfprintf+0x62>
    188a:	9b eb       	ldi	r25, 0xBB	; 187
    188c:	98 0f       	add	r25, r24
    188e:	93 30       	cpi	r25, 0x03	; 3
    1890:	20 f4       	brcc	.+8      	; 0x189a <vfprintf+0x10c>
    1892:	99 2d       	mov	r25, r9
    1894:	90 61       	ori	r25, 0x10	; 16
    1896:	80 5e       	subi	r24, 0xE0	; 224
    1898:	07 c0       	rjmp	.+14     	; 0x18a8 <vfprintf+0x11a>
    189a:	9b e9       	ldi	r25, 0x9B	; 155
    189c:	98 0f       	add	r25, r24
    189e:	93 30       	cpi	r25, 0x03	; 3
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <vfprintf+0x116>
    18a2:	66 c1       	rjmp	.+716    	; 0x1b70 <vfprintf+0x3e2>
    18a4:	99 2d       	mov	r25, r9
    18a6:	9f 7e       	andi	r25, 0xEF	; 239
    18a8:	96 ff       	sbrs	r25, 6
    18aa:	16 e0       	ldi	r17, 0x06	; 6
    18ac:	9f 73       	andi	r25, 0x3F	; 63
    18ae:	99 2e       	mov	r9, r25
    18b0:	85 36       	cpi	r24, 0x65	; 101
    18b2:	19 f4       	brne	.+6      	; 0x18ba <vfprintf+0x12c>
    18b4:	90 64       	ori	r25, 0x40	; 64
    18b6:	99 2e       	mov	r9, r25
    18b8:	08 c0       	rjmp	.+16     	; 0x18ca <vfprintf+0x13c>
    18ba:	86 36       	cpi	r24, 0x66	; 102
    18bc:	21 f4       	brne	.+8      	; 0x18c6 <vfprintf+0x138>
    18be:	39 2f       	mov	r19, r25
    18c0:	30 68       	ori	r19, 0x80	; 128
    18c2:	93 2e       	mov	r9, r19
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <vfprintf+0x13c>
    18c6:	11 11       	cpse	r17, r1
    18c8:	11 50       	subi	r17, 0x01	; 1
    18ca:	97 fe       	sbrs	r9, 7
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <vfprintf+0x14e>
    18ce:	1c 33       	cpi	r17, 0x3C	; 60
    18d0:	50 f4       	brcc	.+20     	; 0x18e6 <vfprintf+0x158>
    18d2:	44 24       	eor	r4, r4
    18d4:	43 94       	inc	r4
    18d6:	41 0e       	add	r4, r17
    18d8:	27 e0       	ldi	r18, 0x07	; 7
    18da:	0b c0       	rjmp	.+22     	; 0x18f2 <vfprintf+0x164>
    18dc:	18 30       	cpi	r17, 0x08	; 8
    18de:	38 f0       	brcs	.+14     	; 0x18ee <vfprintf+0x160>
    18e0:	27 e0       	ldi	r18, 0x07	; 7
    18e2:	17 e0       	ldi	r17, 0x07	; 7
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <vfprintf+0x162>
    18e6:	27 e0       	ldi	r18, 0x07	; 7
    18e8:	9c e3       	ldi	r25, 0x3C	; 60
    18ea:	49 2e       	mov	r4, r25
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <vfprintf+0x164>
    18ee:	21 2f       	mov	r18, r17
    18f0:	41 2c       	mov	r4, r1
    18f2:	56 01       	movw	r10, r12
    18f4:	84 e0       	ldi	r24, 0x04	; 4
    18f6:	a8 0e       	add	r10, r24
    18f8:	b1 1c       	adc	r11, r1
    18fa:	f6 01       	movw	r30, r12
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	04 2d       	mov	r16, r4
    1906:	a3 01       	movw	r20, r6
    1908:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__ftoa_engine>
    190c:	6c 01       	movw	r12, r24
    190e:	f9 81       	ldd	r31, Y+1	; 0x01
    1910:	fc 87       	std	Y+12, r31	; 0x0c
    1912:	f0 ff       	sbrs	r31, 0
    1914:	02 c0       	rjmp	.+4      	; 0x191a <vfprintf+0x18c>
    1916:	f3 ff       	sbrs	r31, 3
    1918:	06 c0       	rjmp	.+12     	; 0x1926 <vfprintf+0x198>
    191a:	91 fc       	sbrc	r9, 1
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfprintf+0x19c>
    191e:	92 fe       	sbrs	r9, 2
    1920:	06 c0       	rjmp	.+12     	; 0x192e <vfprintf+0x1a0>
    1922:	00 e2       	ldi	r16, 0x20	; 32
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <vfprintf+0x1a2>
    1926:	0d e2       	ldi	r16, 0x2D	; 45
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <vfprintf+0x1a2>
    192a:	0b e2       	ldi	r16, 0x2B	; 43
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <vfprintf+0x1a2>
    192e:	00 e0       	ldi	r16, 0x00	; 0
    1930:	8c 85       	ldd	r24, Y+12	; 0x0c
    1932:	8c 70       	andi	r24, 0x0C	; 12
    1934:	19 f0       	breq	.+6      	; 0x193c <vfprintf+0x1ae>
    1936:	01 11       	cpse	r16, r1
    1938:	5a c2       	rjmp	.+1204   	; 0x1dee <vfprintf+0x660>
    193a:	9b c2       	rjmp	.+1334   	; 0x1e72 <vfprintf+0x6e4>
    193c:	97 fe       	sbrs	r9, 7
    193e:	10 c0       	rjmp	.+32     	; 0x1960 <vfprintf+0x1d2>
    1940:	4c 0c       	add	r4, r12
    1942:	fc 85       	ldd	r31, Y+12	; 0x0c
    1944:	f4 ff       	sbrs	r31, 4
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <vfprintf+0x1c2>
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	81 33       	cpi	r24, 0x31	; 49
    194c:	09 f4       	brne	.+2      	; 0x1950 <vfprintf+0x1c2>
    194e:	4a 94       	dec	r4
    1950:	14 14       	cp	r1, r4
    1952:	74 f5       	brge	.+92     	; 0x19b0 <vfprintf+0x222>
    1954:	28 e0       	ldi	r18, 0x08	; 8
    1956:	24 15       	cp	r18, r4
    1958:	78 f5       	brcc	.+94     	; 0x19b8 <vfprintf+0x22a>
    195a:	88 e0       	ldi	r24, 0x08	; 8
    195c:	48 2e       	mov	r4, r24
    195e:	2c c0       	rjmp	.+88     	; 0x19b8 <vfprintf+0x22a>
    1960:	96 fc       	sbrc	r9, 6
    1962:	2a c0       	rjmp	.+84     	; 0x19b8 <vfprintf+0x22a>
    1964:	81 2f       	mov	r24, r17
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	8c 15       	cp	r24, r12
    196a:	9d 05       	cpc	r25, r13
    196c:	9c f0       	brlt	.+38     	; 0x1994 <vfprintf+0x206>
    196e:	3c ef       	ldi	r19, 0xFC	; 252
    1970:	c3 16       	cp	r12, r19
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	d3 06       	cpc	r13, r19
    1976:	74 f0       	brlt	.+28     	; 0x1994 <vfprintf+0x206>
    1978:	89 2d       	mov	r24, r9
    197a:	80 68       	ori	r24, 0x80	; 128
    197c:	98 2e       	mov	r9, r24
    197e:	0a c0       	rjmp	.+20     	; 0x1994 <vfprintf+0x206>
    1980:	e2 e0       	ldi	r30, 0x02	; 2
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	ec 0f       	add	r30, r28
    1986:	fd 1f       	adc	r31, r29
    1988:	e1 0f       	add	r30, r17
    198a:	f1 1d       	adc	r31, r1
    198c:	80 81       	ld	r24, Z
    198e:	80 33       	cpi	r24, 0x30	; 48
    1990:	19 f4       	brne	.+6      	; 0x1998 <vfprintf+0x20a>
    1992:	11 50       	subi	r17, 0x01	; 1
    1994:	11 11       	cpse	r17, r1
    1996:	f4 cf       	rjmp	.-24     	; 0x1980 <vfprintf+0x1f2>
    1998:	97 fe       	sbrs	r9, 7
    199a:	0e c0       	rjmp	.+28     	; 0x19b8 <vfprintf+0x22a>
    199c:	44 24       	eor	r4, r4
    199e:	43 94       	inc	r4
    19a0:	41 0e       	add	r4, r17
    19a2:	81 2f       	mov	r24, r17
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	c8 16       	cp	r12, r24
    19a8:	d9 06       	cpc	r13, r25
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <vfprintf+0x228>
    19ac:	1c 19       	sub	r17, r12
    19ae:	04 c0       	rjmp	.+8      	; 0x19b8 <vfprintf+0x22a>
    19b0:	44 24       	eor	r4, r4
    19b2:	43 94       	inc	r4
    19b4:	01 c0       	rjmp	.+2      	; 0x19b8 <vfprintf+0x22a>
    19b6:	10 e0       	ldi	r17, 0x00	; 0
    19b8:	97 fe       	sbrs	r9, 7
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <vfprintf+0x23a>
    19bc:	1c 14       	cp	r1, r12
    19be:	1d 04       	cpc	r1, r13
    19c0:	34 f4       	brge	.+12     	; 0x19ce <vfprintf+0x240>
    19c2:	c6 01       	movw	r24, r12
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	05 c0       	rjmp	.+10     	; 0x19d2 <vfprintf+0x244>
    19c8:	85 e0       	ldi	r24, 0x05	; 5
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <vfprintf+0x244>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	01 11       	cpse	r16, r1
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	11 23       	and	r17, r17
    19d8:	31 f0       	breq	.+12     	; 0x19e6 <vfprintf+0x258>
    19da:	21 2f       	mov	r18, r17
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	82 0f       	add	r24, r18
    19e4:	93 1f       	adc	r25, r19
    19e6:	25 2d       	mov	r18, r5
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	82 17       	cp	r24, r18
    19ec:	93 07       	cpc	r25, r19
    19ee:	14 f4       	brge	.+4      	; 0x19f4 <vfprintf+0x266>
    19f0:	58 1a       	sub	r5, r24
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <vfprintf+0x268>
    19f4:	51 2c       	mov	r5, r1
    19f6:	89 2d       	mov	r24, r9
    19f8:	89 70       	andi	r24, 0x09	; 9
    19fa:	49 f4       	brne	.+18     	; 0x1a0e <vfprintf+0x280>
    19fc:	55 20       	and	r5, r5
    19fe:	39 f0       	breq	.+14     	; 0x1a0e <vfprintf+0x280>
    1a00:	b7 01       	movw	r22, r14
    1a02:	80 e2       	ldi	r24, 0x20	; 32
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1a0a:	5a 94       	dec	r5
    1a0c:	f7 cf       	rjmp	.-18     	; 0x19fc <vfprintf+0x26e>
    1a0e:	00 23       	and	r16, r16
    1a10:	29 f0       	breq	.+10     	; 0x1a1c <vfprintf+0x28e>
    1a12:	b7 01       	movw	r22, r14
    1a14:	80 2f       	mov	r24, r16
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1a1c:	93 fc       	sbrc	r9, 3
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <vfprintf+0x2a4>
    1a20:	55 20       	and	r5, r5
    1a22:	39 f0       	breq	.+14     	; 0x1a32 <vfprintf+0x2a4>
    1a24:	b7 01       	movw	r22, r14
    1a26:	80 e3       	ldi	r24, 0x30	; 48
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1a2e:	5a 94       	dec	r5
    1a30:	f7 cf       	rjmp	.-18     	; 0x1a20 <vfprintf+0x292>
    1a32:	97 fe       	sbrs	r9, 7
    1a34:	4c c0       	rjmp	.+152    	; 0x1ace <vfprintf+0x340>
    1a36:	46 01       	movw	r8, r12
    1a38:	d7 fe       	sbrs	r13, 7
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <vfprintf+0x2b2>
    1a3c:	81 2c       	mov	r8, r1
    1a3e:	91 2c       	mov	r9, r1
    1a40:	c6 01       	movw	r24, r12
    1a42:	88 19       	sub	r24, r8
    1a44:	99 09       	sbc	r25, r9
    1a46:	f3 01       	movw	r30, r6
    1a48:	e8 0f       	add	r30, r24
    1a4a:	f9 1f       	adc	r31, r25
    1a4c:	fe 87       	std	Y+14, r31	; 0x0e
    1a4e:	ed 87       	std	Y+13, r30	; 0x0d
    1a50:	96 01       	movw	r18, r12
    1a52:	24 19       	sub	r18, r4
    1a54:	31 09       	sbc	r19, r1
    1a56:	38 8b       	std	Y+16, r19	; 0x10
    1a58:	2f 87       	std	Y+15, r18	; 0x0f
    1a5a:	01 2f       	mov	r16, r17
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
    1a5e:	11 95       	neg	r17
    1a60:	01 95       	neg	r16
    1a62:	11 09       	sbc	r17, r1
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	83 16       	cp	r8, r19
    1a68:	93 06       	cpc	r9, r19
    1a6a:	29 f4       	brne	.+10     	; 0x1a76 <vfprintf+0x2e8>
    1a6c:	b7 01       	movw	r22, r14
    1a6e:	8e e2       	ldi	r24, 0x2E	; 46
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1a76:	c8 14       	cp	r12, r8
    1a78:	d9 04       	cpc	r13, r9
    1a7a:	4c f0       	brlt	.+18     	; 0x1a8e <vfprintf+0x300>
    1a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7e:	98 89       	ldd	r25, Y+16	; 0x10
    1a80:	88 15       	cp	r24, r8
    1a82:	99 05       	cpc	r25, r9
    1a84:	24 f4       	brge	.+8      	; 0x1a8e <vfprintf+0x300>
    1a86:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a88:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a8a:	81 81       	ldd	r24, Z+1	; 0x01
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <vfprintf+0x302>
    1a8e:	80 e3       	ldi	r24, 0x30	; 48
    1a90:	f1 e0       	ldi	r31, 0x01	; 1
    1a92:	8f 1a       	sub	r8, r31
    1a94:	91 08       	sbc	r9, r1
    1a96:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a98:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	3e 87       	std	Y+14, r19	; 0x0e
    1aa0:	2d 87       	std	Y+13, r18	; 0x0d
    1aa2:	80 16       	cp	r8, r16
    1aa4:	91 06       	cpc	r9, r17
    1aa6:	2c f0       	brlt	.+10     	; 0x1ab2 <vfprintf+0x324>
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1ab0:	d9 cf       	rjmp	.-78     	; 0x1a64 <vfprintf+0x2d6>
    1ab2:	c8 14       	cp	r12, r8
    1ab4:	d9 04       	cpc	r13, r9
    1ab6:	41 f4       	brne	.+16     	; 0x1ac8 <vfprintf+0x33a>
    1ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aba:	96 33       	cpi	r25, 0x36	; 54
    1abc:	20 f4       	brcc	.+8      	; 0x1ac6 <vfprintf+0x338>
    1abe:	95 33       	cpi	r25, 0x35	; 53
    1ac0:	19 f4       	brne	.+6      	; 0x1ac8 <vfprintf+0x33a>
    1ac2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ac4:	34 ff       	sbrs	r19, 4
    1ac6:	81 e3       	ldi	r24, 0x31	; 49
    1ac8:	b7 01       	movw	r22, r14
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	4e c0       	rjmp	.+156    	; 0x1b6a <vfprintf+0x3dc>
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	81 33       	cpi	r24, 0x31	; 49
    1ad2:	19 f0       	breq	.+6      	; 0x1ada <vfprintf+0x34c>
    1ad4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ad6:	9f 7e       	andi	r25, 0xEF	; 239
    1ad8:	9c 87       	std	Y+12, r25	; 0x0c
    1ada:	b7 01       	movw	r22, r14
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1ae2:	11 11       	cpse	r17, r1
    1ae4:	05 c0       	rjmp	.+10     	; 0x1af0 <vfprintf+0x362>
    1ae6:	94 fc       	sbrc	r9, 4
    1ae8:	18 c0       	rjmp	.+48     	; 0x1b1a <vfprintf+0x38c>
    1aea:	85 e6       	ldi	r24, 0x65	; 101
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	17 c0       	rjmp	.+46     	; 0x1b1e <vfprintf+0x390>
    1af0:	b7 01       	movw	r22, r14
    1af2:	8e e2       	ldi	r24, 0x2E	; 46
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1afa:	1e 5f       	subi	r17, 0xFE	; 254
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	01 e0       	ldi	r16, 0x01	; 1
    1b00:	08 0f       	add	r16, r24
    1b02:	f3 01       	movw	r30, r6
    1b04:	e8 0f       	add	r30, r24
    1b06:	f1 1d       	adc	r31, r1
    1b08:	80 81       	ld	r24, Z
    1b0a:	b7 01       	movw	r22, r14
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1b12:	80 2f       	mov	r24, r16
    1b14:	01 13       	cpse	r16, r17
    1b16:	f3 cf       	rjmp	.-26     	; 0x1afe <vfprintf+0x370>
    1b18:	e6 cf       	rjmp	.-52     	; 0x1ae6 <vfprintf+0x358>
    1b1a:	85 e4       	ldi	r24, 0x45	; 69
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	b7 01       	movw	r22, r14
    1b20:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1b24:	d7 fc       	sbrc	r13, 7
    1b26:	06 c0       	rjmp	.+12     	; 0x1b34 <vfprintf+0x3a6>
    1b28:	c1 14       	cp	r12, r1
    1b2a:	d1 04       	cpc	r13, r1
    1b2c:	41 f4       	brne	.+16     	; 0x1b3e <vfprintf+0x3b0>
    1b2e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b30:	e4 ff       	sbrs	r30, 4
    1b32:	05 c0       	rjmp	.+10     	; 0x1b3e <vfprintf+0x3b0>
    1b34:	d1 94       	neg	r13
    1b36:	c1 94       	neg	r12
    1b38:	d1 08       	sbc	r13, r1
    1b3a:	8d e2       	ldi	r24, 0x2D	; 45
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <vfprintf+0x3b2>
    1b3e:	8b e2       	ldi	r24, 0x2B	; 43
    1b40:	b7 01       	movw	r22, r14
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1b48:	80 e3       	ldi	r24, 0x30	; 48
    1b4a:	2a e0       	ldi	r18, 0x0A	; 10
    1b4c:	c2 16       	cp	r12, r18
    1b4e:	d1 04       	cpc	r13, r1
    1b50:	2c f0       	brlt	.+10     	; 0x1b5c <vfprintf+0x3ce>
    1b52:	8f 5f       	subi	r24, 0xFF	; 255
    1b54:	fa e0       	ldi	r31, 0x0A	; 10
    1b56:	cf 1a       	sub	r12, r31
    1b58:	d1 08       	sbc	r13, r1
    1b5a:	f7 cf       	rjmp	.-18     	; 0x1b4a <vfprintf+0x3bc>
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1b64:	b7 01       	movw	r22, r14
    1b66:	c6 01       	movw	r24, r12
    1b68:	c0 96       	adiw	r24, 0x30	; 48
    1b6a:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1b6e:	54 c1       	rjmp	.+680    	; 0x1e18 <vfprintf+0x68a>
    1b70:	83 36       	cpi	r24, 0x63	; 99
    1b72:	31 f0       	breq	.+12     	; 0x1b80 <vfprintf+0x3f2>
    1b74:	83 37       	cpi	r24, 0x73	; 115
    1b76:	79 f0       	breq	.+30     	; 0x1b96 <vfprintf+0x408>
    1b78:	83 35       	cpi	r24, 0x53	; 83
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <vfprintf+0x3f0>
    1b7c:	56 c0       	rjmp	.+172    	; 0x1c2a <vfprintf+0x49c>
    1b7e:	20 c0       	rjmp	.+64     	; 0x1bc0 <vfprintf+0x432>
    1b80:	56 01       	movw	r10, r12
    1b82:	32 e0       	ldi	r19, 0x02	; 2
    1b84:	a3 0e       	add	r10, r19
    1b86:	b1 1c       	adc	r11, r1
    1b88:	f6 01       	movw	r30, r12
    1b8a:	80 81       	ld	r24, Z
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	01 e0       	ldi	r16, 0x01	; 1
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	63 01       	movw	r12, r6
    1b94:	12 c0       	rjmp	.+36     	; 0x1bba <vfprintf+0x42c>
    1b96:	56 01       	movw	r10, r12
    1b98:	f2 e0       	ldi	r31, 0x02	; 2
    1b9a:	af 0e       	add	r10, r31
    1b9c:	b1 1c       	adc	r11, r1
    1b9e:	f6 01       	movw	r30, r12
    1ba0:	c0 80       	ld	r12, Z
    1ba2:	d1 80       	ldd	r13, Z+1	; 0x01
    1ba4:	96 fe       	sbrs	r9, 6
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <vfprintf+0x420>
    1ba8:	61 2f       	mov	r22, r17
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <vfprintf+0x424>
    1bae:	6f ef       	ldi	r22, 0xFF	; 255
    1bb0:	7f ef       	ldi	r23, 0xFF	; 255
    1bb2:	c6 01       	movw	r24, r12
    1bb4:	0e 94 95 10 	call	0x212a	; 0x212a <strnlen>
    1bb8:	8c 01       	movw	r16, r24
    1bba:	f9 2d       	mov	r31, r9
    1bbc:	ff 77       	andi	r31, 0x7F	; 127
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <vfprintf+0x45a>
    1bc0:	56 01       	movw	r10, r12
    1bc2:	22 e0       	ldi	r18, 0x02	; 2
    1bc4:	a2 0e       	add	r10, r18
    1bc6:	b1 1c       	adc	r11, r1
    1bc8:	f6 01       	movw	r30, r12
    1bca:	c0 80       	ld	r12, Z
    1bcc:	d1 80       	ldd	r13, Z+1	; 0x01
    1bce:	96 fe       	sbrs	r9, 6
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <vfprintf+0x44a>
    1bd2:	61 2f       	mov	r22, r17
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <vfprintf+0x44e>
    1bd8:	6f ef       	ldi	r22, 0xFF	; 255
    1bda:	7f ef       	ldi	r23, 0xFF	; 255
    1bdc:	c6 01       	movw	r24, r12
    1bde:	0e 94 8a 10 	call	0x2114	; 0x2114 <strnlen_P>
    1be2:	8c 01       	movw	r16, r24
    1be4:	f9 2d       	mov	r31, r9
    1be6:	f0 68       	ori	r31, 0x80	; 128
    1be8:	9f 2e       	mov	r9, r31
    1bea:	f3 fd       	sbrc	r31, 3
    1bec:	1a c0       	rjmp	.+52     	; 0x1c22 <vfprintf+0x494>
    1bee:	85 2d       	mov	r24, r5
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	08 17       	cp	r16, r24
    1bf4:	19 07       	cpc	r17, r25
    1bf6:	a8 f4       	brcc	.+42     	; 0x1c22 <vfprintf+0x494>
    1bf8:	b7 01       	movw	r22, r14
    1bfa:	80 e2       	ldi	r24, 0x20	; 32
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1c02:	5a 94       	dec	r5
    1c04:	f4 cf       	rjmp	.-24     	; 0x1bee <vfprintf+0x460>
    1c06:	f6 01       	movw	r30, r12
    1c08:	97 fc       	sbrc	r9, 7
    1c0a:	85 91       	lpm	r24, Z+
    1c0c:	97 fe       	sbrs	r9, 7
    1c0e:	81 91       	ld	r24, Z+
    1c10:	6f 01       	movw	r12, r30
    1c12:	b7 01       	movw	r22, r14
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1c1a:	51 10       	cpse	r5, r1
    1c1c:	5a 94       	dec	r5
    1c1e:	01 50       	subi	r16, 0x01	; 1
    1c20:	11 09       	sbc	r17, r1
    1c22:	01 15       	cp	r16, r1
    1c24:	11 05       	cpc	r17, r1
    1c26:	79 f7       	brne	.-34     	; 0x1c06 <vfprintf+0x478>
    1c28:	f7 c0       	rjmp	.+494    	; 0x1e18 <vfprintf+0x68a>
    1c2a:	84 36       	cpi	r24, 0x64	; 100
    1c2c:	11 f0       	breq	.+4      	; 0x1c32 <vfprintf+0x4a4>
    1c2e:	89 36       	cpi	r24, 0x69	; 105
    1c30:	61 f5       	brne	.+88     	; 0x1c8a <vfprintf+0x4fc>
    1c32:	56 01       	movw	r10, r12
    1c34:	97 fe       	sbrs	r9, 7
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <vfprintf+0x4bc>
    1c38:	24 e0       	ldi	r18, 0x04	; 4
    1c3a:	a2 0e       	add	r10, r18
    1c3c:	b1 1c       	adc	r11, r1
    1c3e:	f6 01       	movw	r30, r12
    1c40:	60 81       	ld	r22, Z
    1c42:	71 81       	ldd	r23, Z+1	; 0x01
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	0a c0       	rjmp	.+20     	; 0x1c5e <vfprintf+0x4d0>
    1c4a:	f2 e0       	ldi	r31, 0x02	; 2
    1c4c:	af 0e       	add	r10, r31
    1c4e:	b1 1c       	adc	r11, r1
    1c50:	f6 01       	movw	r30, r12
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	07 2e       	mov	r0, r23
    1c58:	00 0c       	add	r0, r0
    1c5a:	88 0b       	sbc	r24, r24
    1c5c:	99 0b       	sbc	r25, r25
    1c5e:	f9 2d       	mov	r31, r9
    1c60:	ff 76       	andi	r31, 0x6F	; 111
    1c62:	9f 2e       	mov	r9, r31
    1c64:	97 ff       	sbrs	r25, 7
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <vfprintf+0x4ec>
    1c68:	90 95       	com	r25
    1c6a:	80 95       	com	r24
    1c6c:	70 95       	com	r23
    1c6e:	61 95       	neg	r22
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	8f 4f       	sbci	r24, 0xFF	; 255
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	f0 68       	ori	r31, 0x80	; 128
    1c78:	9f 2e       	mov	r9, r31
    1c7a:	2a e0       	ldi	r18, 0x0A	; 10
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	a3 01       	movw	r20, r6
    1c80:	0e 94 25 11 	call	0x224a	; 0x224a <__ultoa_invert>
    1c84:	c8 2e       	mov	r12, r24
    1c86:	c6 18       	sub	r12, r6
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <vfprintf+0x57a>
    1c8a:	09 2d       	mov	r16, r9
    1c8c:	85 37       	cpi	r24, 0x75	; 117
    1c8e:	21 f4       	brne	.+8      	; 0x1c98 <vfprintf+0x50a>
    1c90:	0f 7e       	andi	r16, 0xEF	; 239
    1c92:	2a e0       	ldi	r18, 0x0A	; 10
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	1d c0       	rjmp	.+58     	; 0x1cd2 <vfprintf+0x544>
    1c98:	09 7f       	andi	r16, 0xF9	; 249
    1c9a:	8f 36       	cpi	r24, 0x6F	; 111
    1c9c:	91 f0       	breq	.+36     	; 0x1cc2 <vfprintf+0x534>
    1c9e:	18 f4       	brcc	.+6      	; 0x1ca6 <vfprintf+0x518>
    1ca0:	88 35       	cpi	r24, 0x58	; 88
    1ca2:	59 f0       	breq	.+22     	; 0x1cba <vfprintf+0x52c>
    1ca4:	c3 c0       	rjmp	.+390    	; 0x1e2c <vfprintf+0x69e>
    1ca6:	80 37       	cpi	r24, 0x70	; 112
    1ca8:	19 f0       	breq	.+6      	; 0x1cb0 <vfprintf+0x522>
    1caa:	88 37       	cpi	r24, 0x78	; 120
    1cac:	11 f0       	breq	.+4      	; 0x1cb2 <vfprintf+0x524>
    1cae:	be c0       	rjmp	.+380    	; 0x1e2c <vfprintf+0x69e>
    1cb0:	00 61       	ori	r16, 0x10	; 16
    1cb2:	04 ff       	sbrs	r16, 4
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <vfprintf+0x53a>
    1cb6:	04 60       	ori	r16, 0x04	; 4
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <vfprintf+0x53a>
    1cba:	94 fe       	sbrs	r9, 4
    1cbc:	08 c0       	rjmp	.+16     	; 0x1cce <vfprintf+0x540>
    1cbe:	06 60       	ori	r16, 0x06	; 6
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <vfprintf+0x540>
    1cc2:	28 e0       	ldi	r18, 0x08	; 8
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	05 c0       	rjmp	.+10     	; 0x1cd2 <vfprintf+0x544>
    1cc8:	20 e1       	ldi	r18, 0x10	; 16
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <vfprintf+0x544>
    1cce:	20 e1       	ldi	r18, 0x10	; 16
    1cd0:	32 e0       	ldi	r19, 0x02	; 2
    1cd2:	56 01       	movw	r10, r12
    1cd4:	07 ff       	sbrs	r16, 7
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <vfprintf+0x55c>
    1cd8:	84 e0       	ldi	r24, 0x04	; 4
    1cda:	a8 0e       	add	r10, r24
    1cdc:	b1 1c       	adc	r11, r1
    1cde:	f6 01       	movw	r30, r12
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <vfprintf+0x56c>
    1cea:	f2 e0       	ldi	r31, 0x02	; 2
    1cec:	af 0e       	add	r10, r31
    1cee:	b1 1c       	adc	r11, r1
    1cf0:	f6 01       	movw	r30, r12
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a3 01       	movw	r20, r6
    1cfc:	0e 94 25 11 	call	0x224a	; 0x224a <__ultoa_invert>
    1d00:	c8 2e       	mov	r12, r24
    1d02:	c6 18       	sub	r12, r6
    1d04:	0f 77       	andi	r16, 0x7F	; 127
    1d06:	90 2e       	mov	r9, r16
    1d08:	96 fe       	sbrs	r9, 6
    1d0a:	0b c0       	rjmp	.+22     	; 0x1d22 <vfprintf+0x594>
    1d0c:	09 2d       	mov	r16, r9
    1d0e:	0e 7f       	andi	r16, 0xFE	; 254
    1d10:	c1 16       	cp	r12, r17
    1d12:	50 f4       	brcc	.+20     	; 0x1d28 <vfprintf+0x59a>
    1d14:	94 fe       	sbrs	r9, 4
    1d16:	0a c0       	rjmp	.+20     	; 0x1d2c <vfprintf+0x59e>
    1d18:	92 fc       	sbrc	r9, 2
    1d1a:	08 c0       	rjmp	.+16     	; 0x1d2c <vfprintf+0x59e>
    1d1c:	09 2d       	mov	r16, r9
    1d1e:	0e 7e       	andi	r16, 0xEE	; 238
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <vfprintf+0x59e>
    1d22:	dc 2c       	mov	r13, r12
    1d24:	09 2d       	mov	r16, r9
    1d26:	03 c0       	rjmp	.+6      	; 0x1d2e <vfprintf+0x5a0>
    1d28:	dc 2c       	mov	r13, r12
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <vfprintf+0x5a0>
    1d2c:	d1 2e       	mov	r13, r17
    1d2e:	04 ff       	sbrs	r16, 4
    1d30:	0d c0       	rjmp	.+26     	; 0x1d4c <vfprintf+0x5be>
    1d32:	fe 01       	movw	r30, r28
    1d34:	ec 0d       	add	r30, r12
    1d36:	f1 1d       	adc	r31, r1
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 33       	cpi	r24, 0x30	; 48
    1d3c:	11 f4       	brne	.+4      	; 0x1d42 <vfprintf+0x5b4>
    1d3e:	09 7e       	andi	r16, 0xE9	; 233
    1d40:	09 c0       	rjmp	.+18     	; 0x1d54 <vfprintf+0x5c6>
    1d42:	02 ff       	sbrs	r16, 2
    1d44:	06 c0       	rjmp	.+12     	; 0x1d52 <vfprintf+0x5c4>
    1d46:	d3 94       	inc	r13
    1d48:	d3 94       	inc	r13
    1d4a:	04 c0       	rjmp	.+8      	; 0x1d54 <vfprintf+0x5c6>
    1d4c:	80 2f       	mov	r24, r16
    1d4e:	86 78       	andi	r24, 0x86	; 134
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <vfprintf+0x5c6>
    1d52:	d3 94       	inc	r13
    1d54:	03 fd       	sbrc	r16, 3
    1d56:	11 c0       	rjmp	.+34     	; 0x1d7a <vfprintf+0x5ec>
    1d58:	00 ff       	sbrs	r16, 0
    1d5a:	06 c0       	rjmp	.+12     	; 0x1d68 <vfprintf+0x5da>
    1d5c:	1c 2d       	mov	r17, r12
    1d5e:	d5 14       	cp	r13, r5
    1d60:	80 f4       	brcc	.+32     	; 0x1d82 <vfprintf+0x5f4>
    1d62:	15 0d       	add	r17, r5
    1d64:	1d 19       	sub	r17, r13
    1d66:	0d c0       	rjmp	.+26     	; 0x1d82 <vfprintf+0x5f4>
    1d68:	d5 14       	cp	r13, r5
    1d6a:	58 f4       	brcc	.+22     	; 0x1d82 <vfprintf+0x5f4>
    1d6c:	b7 01       	movw	r22, r14
    1d6e:	80 e2       	ldi	r24, 0x20	; 32
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1d76:	d3 94       	inc	r13
    1d78:	f7 cf       	rjmp	.-18     	; 0x1d68 <vfprintf+0x5da>
    1d7a:	d5 14       	cp	r13, r5
    1d7c:	10 f4       	brcc	.+4      	; 0x1d82 <vfprintf+0x5f4>
    1d7e:	5d 18       	sub	r5, r13
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <vfprintf+0x5f6>
    1d82:	51 2c       	mov	r5, r1
    1d84:	04 ff       	sbrs	r16, 4
    1d86:	10 c0       	rjmp	.+32     	; 0x1da8 <vfprintf+0x61a>
    1d88:	b7 01       	movw	r22, r14
    1d8a:	80 e3       	ldi	r24, 0x30	; 48
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1d92:	02 ff       	sbrs	r16, 2
    1d94:	17 c0       	rjmp	.+46     	; 0x1dc4 <vfprintf+0x636>
    1d96:	01 fd       	sbrc	r16, 1
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <vfprintf+0x612>
    1d9a:	88 e7       	ldi	r24, 0x78	; 120
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <vfprintf+0x616>
    1da0:	88 e5       	ldi	r24, 0x58	; 88
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	b7 01       	movw	r22, r14
    1da6:	0c c0       	rjmp	.+24     	; 0x1dc0 <vfprintf+0x632>
    1da8:	80 2f       	mov	r24, r16
    1daa:	86 78       	andi	r24, 0x86	; 134
    1dac:	59 f0       	breq	.+22     	; 0x1dc4 <vfprintf+0x636>
    1dae:	01 ff       	sbrs	r16, 1
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <vfprintf+0x628>
    1db2:	8b e2       	ldi	r24, 0x2B	; 43
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <vfprintf+0x62a>
    1db6:	80 e2       	ldi	r24, 0x20	; 32
    1db8:	07 fd       	sbrc	r16, 7
    1dba:	8d e2       	ldi	r24, 0x2D	; 45
    1dbc:	b7 01       	movw	r22, r14
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1dc4:	c1 16       	cp	r12, r17
    1dc6:	38 f4       	brcc	.+14     	; 0x1dd6 <vfprintf+0x648>
    1dc8:	b7 01       	movw	r22, r14
    1dca:	80 e3       	ldi	r24, 0x30	; 48
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1dd2:	11 50       	subi	r17, 0x01	; 1
    1dd4:	f7 cf       	rjmp	.-18     	; 0x1dc4 <vfprintf+0x636>
    1dd6:	ca 94       	dec	r12
    1dd8:	f3 01       	movw	r30, r6
    1dda:	ec 0d       	add	r30, r12
    1ddc:	f1 1d       	adc	r31, r1
    1dde:	80 81       	ld	r24, Z
    1de0:	b7 01       	movw	r22, r14
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1de8:	c1 10       	cpse	r12, r1
    1dea:	f5 cf       	rjmp	.-22     	; 0x1dd6 <vfprintf+0x648>
    1dec:	15 c0       	rjmp	.+42     	; 0x1e18 <vfprintf+0x68a>
    1dee:	f4 e0       	ldi	r31, 0x04	; 4
    1df0:	f5 15       	cp	r31, r5
    1df2:	60 f5       	brcc	.+88     	; 0x1e4c <vfprintf+0x6be>
    1df4:	84 e0       	ldi	r24, 0x04	; 4
    1df6:	58 1a       	sub	r5, r24
    1df8:	93 fe       	sbrs	r9, 3
    1dfa:	1f c0       	rjmp	.+62     	; 0x1e3a <vfprintf+0x6ac>
    1dfc:	01 11       	cpse	r16, r1
    1dfe:	27 c0       	rjmp	.+78     	; 0x1e4e <vfprintf+0x6c0>
    1e00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e02:	23 ff       	sbrs	r18, 3
    1e04:	2a c0       	rjmp	.+84     	; 0x1e5a <vfprintf+0x6cc>
    1e06:	00 e0       	ldi	r16, 0x00	; 0
    1e08:	11 e0       	ldi	r17, 0x01	; 1
    1e0a:	39 2d       	mov	r19, r9
    1e0c:	30 71       	andi	r19, 0x10	; 16
    1e0e:	93 2e       	mov	r9, r19
    1e10:	f8 01       	movw	r30, r16
    1e12:	84 91       	lpm	r24, Z
    1e14:	81 11       	cpse	r24, r1
    1e16:	24 c0       	rjmp	.+72     	; 0x1e60 <vfprintf+0x6d2>
    1e18:	55 20       	and	r5, r5
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <vfprintf+0x690>
    1e1c:	e4 cc       	rjmp	.-1592   	; 0x17e6 <vfprintf+0x58>
    1e1e:	b7 01       	movw	r22, r14
    1e20:	80 e2       	ldi	r24, 0x20	; 32
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1e28:	5a 94       	dec	r5
    1e2a:	f6 cf       	rjmp	.-20     	; 0x1e18 <vfprintf+0x68a>
    1e2c:	f7 01       	movw	r30, r14
    1e2e:	86 81       	ldd	r24, Z+6	; 0x06
    1e30:	97 81       	ldd	r25, Z+7	; 0x07
    1e32:	26 c0       	rjmp	.+76     	; 0x1e80 <vfprintf+0x6f2>
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	9f ef       	ldi	r25, 0xFF	; 255
    1e38:	23 c0       	rjmp	.+70     	; 0x1e80 <vfprintf+0x6f2>
    1e3a:	b7 01       	movw	r22, r14
    1e3c:	80 e2       	ldi	r24, 0x20	; 32
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1e44:	5a 94       	dec	r5
    1e46:	51 10       	cpse	r5, r1
    1e48:	f8 cf       	rjmp	.-16     	; 0x1e3a <vfprintf+0x6ac>
    1e4a:	d8 cf       	rjmp	.-80     	; 0x1dfc <vfprintf+0x66e>
    1e4c:	51 2c       	mov	r5, r1
    1e4e:	b7 01       	movw	r22, r14
    1e50:	80 2f       	mov	r24, r16
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1e58:	d3 cf       	rjmp	.-90     	; 0x1e00 <vfprintf+0x672>
    1e5a:	04 e0       	ldi	r16, 0x04	; 4
    1e5c:	11 e0       	ldi	r17, 0x01	; 1
    1e5e:	d5 cf       	rjmp	.-86     	; 0x1e0a <vfprintf+0x67c>
    1e60:	91 10       	cpse	r9, r1
    1e62:	80 52       	subi	r24, 0x20	; 32
    1e64:	b7 01       	movw	r22, r14
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 a0 10 	call	0x2140	; 0x2140 <fputc>
    1e6c:	0f 5f       	subi	r16, 0xFF	; 255
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	cf cf       	rjmp	.-98     	; 0x1e10 <vfprintf+0x682>
    1e72:	23 e0       	ldi	r18, 0x03	; 3
    1e74:	25 15       	cp	r18, r5
    1e76:	10 f4       	brcc	.+4      	; 0x1e7c <vfprintf+0x6ee>
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	bd cf       	rjmp	.-134    	; 0x1df6 <vfprintf+0x668>
    1e7c:	51 2c       	mov	r5, r1
    1e7e:	c0 cf       	rjmp	.-128    	; 0x1e00 <vfprintf+0x672>
    1e80:	60 96       	adiw	r28, 0x10	; 16
    1e82:	e2 e1       	ldi	r30, 0x12	; 18
    1e84:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__epilogue_restores__>

00001e88 <__udivmodsi4>:
    1e88:	a1 e2       	ldi	r26, 0x21	; 33
    1e8a:	1a 2e       	mov	r1, r26
    1e8c:	aa 1b       	sub	r26, r26
    1e8e:	bb 1b       	sub	r27, r27
    1e90:	fd 01       	movw	r30, r26
    1e92:	0d c0       	rjmp	.+26     	; 0x1eae <__udivmodsi4_ep>

00001e94 <__udivmodsi4_loop>:
    1e94:	aa 1f       	adc	r26, r26
    1e96:	bb 1f       	adc	r27, r27
    1e98:	ee 1f       	adc	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	a2 17       	cp	r26, r18
    1e9e:	b3 07       	cpc	r27, r19
    1ea0:	e4 07       	cpc	r30, r20
    1ea2:	f5 07       	cpc	r31, r21
    1ea4:	20 f0       	brcs	.+8      	; 0x1eae <__udivmodsi4_ep>
    1ea6:	a2 1b       	sub	r26, r18
    1ea8:	b3 0b       	sbc	r27, r19
    1eaa:	e4 0b       	sbc	r30, r20
    1eac:	f5 0b       	sbc	r31, r21

00001eae <__udivmodsi4_ep>:
    1eae:	66 1f       	adc	r22, r22
    1eb0:	77 1f       	adc	r23, r23
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	1a 94       	dec	r1
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <__udivmodsi4_loop>
    1eba:	60 95       	com	r22
    1ebc:	70 95       	com	r23
    1ebe:	80 95       	com	r24
    1ec0:	90 95       	com	r25
    1ec2:	9b 01       	movw	r18, r22
    1ec4:	ac 01       	movw	r20, r24
    1ec6:	bd 01       	movw	r22, r26
    1ec8:	cf 01       	movw	r24, r30
    1eca:	08 95       	ret

00001ecc <__tablejump2__>:
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	05 90       	lpm	r0, Z+
    1ed2:	f4 91       	lpm	r31, Z
    1ed4:	e0 2d       	mov	r30, r0
    1ed6:	09 94       	ijmp

00001ed8 <__umulhisi3>:
    1ed8:	a2 9f       	mul	r26, r18
    1eda:	b0 01       	movw	r22, r0
    1edc:	b3 9f       	mul	r27, r19
    1ede:	c0 01       	movw	r24, r0
    1ee0:	a3 9f       	mul	r26, r19
    1ee2:	70 0d       	add	r23, r0
    1ee4:	81 1d       	adc	r24, r1
    1ee6:	11 24       	eor	r1, r1
    1ee8:	91 1d       	adc	r25, r1
    1eea:	b2 9f       	mul	r27, r18
    1eec:	70 0d       	add	r23, r0
    1eee:	81 1d       	adc	r24, r1
    1ef0:	11 24       	eor	r1, r1
    1ef2:	91 1d       	adc	r25, r1
    1ef4:	08 95       	ret

00001ef6 <__prologue_saves__>:
    1ef6:	2f 92       	push	r2
    1ef8:	3f 92       	push	r3
    1efa:	4f 92       	push	r4
    1efc:	5f 92       	push	r5
    1efe:	6f 92       	push	r6
    1f00:	7f 92       	push	r7
    1f02:	8f 92       	push	r8
    1f04:	9f 92       	push	r9
    1f06:	af 92       	push	r10
    1f08:	bf 92       	push	r11
    1f0a:	cf 92       	push	r12
    1f0c:	df 92       	push	r13
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	ca 1b       	sub	r28, r26
    1f20:	db 0b       	sbc	r29, r27
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	09 94       	ijmp

00001f2e <__epilogue_restores__>:
    1f2e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f30:	39 88       	ldd	r3, Y+17	; 0x11
    1f32:	48 88       	ldd	r4, Y+16	; 0x10
    1f34:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f36:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f38:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f40:	b9 84       	ldd	r11, Y+9	; 0x09
    1f42:	c8 84       	ldd	r12, Y+8	; 0x08
    1f44:	df 80       	ldd	r13, Y+7	; 0x07
    1f46:	ee 80       	ldd	r14, Y+6	; 0x06
    1f48:	fd 80       	ldd	r15, Y+5	; 0x05
    1f4a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f4c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f4e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f50:	b9 81       	ldd	r27, Y+1	; 0x01
    1f52:	ce 0f       	add	r28, r30
    1f54:	d1 1d       	adc	r29, r1
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	ed 01       	movw	r28, r26
    1f62:	08 95       	ret

00001f64 <__ftoa_engine>:
    1f64:	28 30       	cpi	r18, 0x08	; 8
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <__ftoa_engine+0x6>
    1f68:	27 e0       	ldi	r18, 0x07	; 7
    1f6a:	33 27       	eor	r19, r19
    1f6c:	da 01       	movw	r26, r20
    1f6e:	99 0f       	add	r25, r25
    1f70:	31 1d       	adc	r19, r1
    1f72:	87 fd       	sbrc	r24, 7
    1f74:	91 60       	ori	r25, 0x01	; 1
    1f76:	00 96       	adiw	r24, 0x00	; 0
    1f78:	61 05       	cpc	r22, r1
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	39 f4       	brne	.+14     	; 0x1f8c <__ftoa_engine+0x28>
    1f7e:	32 60       	ori	r19, 0x02	; 2
    1f80:	2e 5f       	subi	r18, 0xFE	; 254
    1f82:	3d 93       	st	X+, r19
    1f84:	30 e3       	ldi	r19, 0x30	; 48
    1f86:	2a 95       	dec	r18
    1f88:	e1 f7       	brne	.-8      	; 0x1f82 <__ftoa_engine+0x1e>
    1f8a:	08 95       	ret
    1f8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f8e:	30 f0       	brcs	.+12     	; 0x1f9c <__ftoa_engine+0x38>
    1f90:	80 38       	cpi	r24, 0x80	; 128
    1f92:	71 05       	cpc	r23, r1
    1f94:	61 05       	cpc	r22, r1
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <__ftoa_engine+0x36>
    1f98:	3c 5f       	subi	r19, 0xFC	; 252
    1f9a:	3c 5f       	subi	r19, 0xFC	; 252
    1f9c:	3d 93       	st	X+, r19
    1f9e:	91 30       	cpi	r25, 0x01	; 1
    1fa0:	08 f0       	brcs	.+2      	; 0x1fa4 <__ftoa_engine+0x40>
    1fa2:	80 68       	ori	r24, 0x80	; 128
    1fa4:	91 1d       	adc	r25, r1
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	1f 93       	push	r17
    1fac:	0f 93       	push	r16
    1fae:	ff 92       	push	r15
    1fb0:	ef 92       	push	r14
    1fb2:	19 2f       	mov	r17, r25
    1fb4:	98 7f       	andi	r25, 0xF8	; 248
    1fb6:	96 95       	lsr	r25
    1fb8:	e9 2f       	mov	r30, r25
    1fba:	96 95       	lsr	r25
    1fbc:	96 95       	lsr	r25
    1fbe:	e9 0f       	add	r30, r25
    1fc0:	ff 27       	eor	r31, r31
    1fc2:	ee 59       	subi	r30, 0x9E	; 158
    1fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc6:	99 27       	eor	r25, r25
    1fc8:	33 27       	eor	r19, r19
    1fca:	ee 24       	eor	r14, r14
    1fcc:	ff 24       	eor	r15, r15
    1fce:	a7 01       	movw	r20, r14
    1fd0:	e7 01       	movw	r28, r14
    1fd2:	05 90       	lpm	r0, Z+
    1fd4:	08 94       	sec
    1fd6:	07 94       	ror	r0
    1fd8:	28 f4       	brcc	.+10     	; 0x1fe4 <__ftoa_engine+0x80>
    1fda:	36 0f       	add	r19, r22
    1fdc:	e7 1e       	adc	r14, r23
    1fde:	f8 1e       	adc	r15, r24
    1fe0:	49 1f       	adc	r20, r25
    1fe2:	51 1d       	adc	r21, r1
    1fe4:	66 0f       	add	r22, r22
    1fe6:	77 1f       	adc	r23, r23
    1fe8:	88 1f       	adc	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	06 94       	lsr	r0
    1fee:	a1 f7       	brne	.-24     	; 0x1fd8 <__ftoa_engine+0x74>
    1ff0:	05 90       	lpm	r0, Z+
    1ff2:	07 94       	ror	r0
    1ff4:	28 f4       	brcc	.+10     	; 0x2000 <__ftoa_engine+0x9c>
    1ff6:	e7 0e       	add	r14, r23
    1ff8:	f8 1e       	adc	r15, r24
    1ffa:	49 1f       	adc	r20, r25
    1ffc:	56 1f       	adc	r21, r22
    1ffe:	c1 1d       	adc	r28, r1
    2000:	77 0f       	add	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	66 1f       	adc	r22, r22
    2008:	06 94       	lsr	r0
    200a:	a1 f7       	brne	.-24     	; 0x1ff4 <__ftoa_engine+0x90>
    200c:	05 90       	lpm	r0, Z+
    200e:	07 94       	ror	r0
    2010:	28 f4       	brcc	.+10     	; 0x201c <__ftoa_engine+0xb8>
    2012:	f8 0e       	add	r15, r24
    2014:	49 1f       	adc	r20, r25
    2016:	56 1f       	adc	r21, r22
    2018:	c7 1f       	adc	r28, r23
    201a:	d1 1d       	adc	r29, r1
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	66 1f       	adc	r22, r22
    2022:	77 1f       	adc	r23, r23
    2024:	06 94       	lsr	r0
    2026:	a1 f7       	brne	.-24     	; 0x2010 <__ftoa_engine+0xac>
    2028:	05 90       	lpm	r0, Z+
    202a:	07 94       	ror	r0
    202c:	20 f4       	brcc	.+8      	; 0x2036 <__ftoa_engine+0xd2>
    202e:	49 0f       	add	r20, r25
    2030:	56 1f       	adc	r21, r22
    2032:	c7 1f       	adc	r28, r23
    2034:	d8 1f       	adc	r29, r24
    2036:	99 0f       	add	r25, r25
    2038:	66 1f       	adc	r22, r22
    203a:	77 1f       	adc	r23, r23
    203c:	88 1f       	adc	r24, r24
    203e:	06 94       	lsr	r0
    2040:	a9 f7       	brne	.-22     	; 0x202c <__ftoa_engine+0xc8>
    2042:	84 91       	lpm	r24, Z
    2044:	10 95       	com	r17
    2046:	17 70       	andi	r17, 0x07	; 7
    2048:	41 f0       	breq	.+16     	; 0x205a <__ftoa_engine+0xf6>
    204a:	d6 95       	lsr	r29
    204c:	c7 95       	ror	r28
    204e:	57 95       	ror	r21
    2050:	47 95       	ror	r20
    2052:	f7 94       	ror	r15
    2054:	e7 94       	ror	r14
    2056:	1a 95       	dec	r17
    2058:	c1 f7       	brne	.-16     	; 0x204a <__ftoa_engine+0xe6>
    205a:	e8 e0       	ldi	r30, 0x08	; 8
    205c:	f1 e0       	ldi	r31, 0x01	; 1
    205e:	68 94       	set
    2060:	15 90       	lpm	r1, Z+
    2062:	15 91       	lpm	r17, Z+
    2064:	35 91       	lpm	r19, Z+
    2066:	65 91       	lpm	r22, Z+
    2068:	95 91       	lpm	r25, Z+
    206a:	05 90       	lpm	r0, Z+
    206c:	7f e2       	ldi	r23, 0x2F	; 47
    206e:	73 95       	inc	r23
    2070:	e1 18       	sub	r14, r1
    2072:	f1 0a       	sbc	r15, r17
    2074:	43 0b       	sbc	r20, r19
    2076:	56 0b       	sbc	r21, r22
    2078:	c9 0b       	sbc	r28, r25
    207a:	d0 09       	sbc	r29, r0
    207c:	c0 f7       	brcc	.-16     	; 0x206e <__ftoa_engine+0x10a>
    207e:	e1 0c       	add	r14, r1
    2080:	f1 1e       	adc	r15, r17
    2082:	43 1f       	adc	r20, r19
    2084:	56 1f       	adc	r21, r22
    2086:	c9 1f       	adc	r28, r25
    2088:	d0 1d       	adc	r29, r0
    208a:	7e f4       	brtc	.+30     	; 0x20aa <__ftoa_engine+0x146>
    208c:	70 33       	cpi	r23, 0x30	; 48
    208e:	11 f4       	brne	.+4      	; 0x2094 <__ftoa_engine+0x130>
    2090:	8a 95       	dec	r24
    2092:	e6 cf       	rjmp	.-52     	; 0x2060 <__ftoa_engine+0xfc>
    2094:	e8 94       	clt
    2096:	01 50       	subi	r16, 0x01	; 1
    2098:	30 f0       	brcs	.+12     	; 0x20a6 <__ftoa_engine+0x142>
    209a:	08 0f       	add	r16, r24
    209c:	0a f4       	brpl	.+2      	; 0x20a0 <__ftoa_engine+0x13c>
    209e:	00 27       	eor	r16, r16
    20a0:	02 17       	cp	r16, r18
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <__ftoa_engine+0x142>
    20a4:	20 2f       	mov	r18, r16
    20a6:	23 95       	inc	r18
    20a8:	02 2f       	mov	r16, r18
    20aa:	7a 33       	cpi	r23, 0x3A	; 58
    20ac:	28 f0       	brcs	.+10     	; 0x20b8 <__ftoa_engine+0x154>
    20ae:	79 e3       	ldi	r23, 0x39	; 57
    20b0:	7d 93       	st	X+, r23
    20b2:	2a 95       	dec	r18
    20b4:	e9 f7       	brne	.-6      	; 0x20b0 <__ftoa_engine+0x14c>
    20b6:	10 c0       	rjmp	.+32     	; 0x20d8 <__ftoa_engine+0x174>
    20b8:	7d 93       	st	X+, r23
    20ba:	2a 95       	dec	r18
    20bc:	89 f6       	brne	.-94     	; 0x2060 <__ftoa_engine+0xfc>
    20be:	06 94       	lsr	r0
    20c0:	97 95       	ror	r25
    20c2:	67 95       	ror	r22
    20c4:	37 95       	ror	r19
    20c6:	17 95       	ror	r17
    20c8:	17 94       	ror	r1
    20ca:	e1 18       	sub	r14, r1
    20cc:	f1 0a       	sbc	r15, r17
    20ce:	43 0b       	sbc	r20, r19
    20d0:	56 0b       	sbc	r21, r22
    20d2:	c9 0b       	sbc	r28, r25
    20d4:	d0 09       	sbc	r29, r0
    20d6:	98 f0       	brcs	.+38     	; 0x20fe <__ftoa_engine+0x19a>
    20d8:	23 95       	inc	r18
    20da:	7e 91       	ld	r23, -X
    20dc:	73 95       	inc	r23
    20de:	7a 33       	cpi	r23, 0x3A	; 58
    20e0:	08 f0       	brcs	.+2      	; 0x20e4 <__ftoa_engine+0x180>
    20e2:	70 e3       	ldi	r23, 0x30	; 48
    20e4:	7c 93       	st	X, r23
    20e6:	20 13       	cpse	r18, r16
    20e8:	b8 f7       	brcc	.-18     	; 0x20d8 <__ftoa_engine+0x174>
    20ea:	7e 91       	ld	r23, -X
    20ec:	70 61       	ori	r23, 0x10	; 16
    20ee:	7d 93       	st	X+, r23
    20f0:	30 f0       	brcs	.+12     	; 0x20fe <__ftoa_engine+0x19a>
    20f2:	83 95       	inc	r24
    20f4:	71 e3       	ldi	r23, 0x31	; 49
    20f6:	7d 93       	st	X+, r23
    20f8:	70 e3       	ldi	r23, 0x30	; 48
    20fa:	2a 95       	dec	r18
    20fc:	e1 f7       	brne	.-8      	; 0x20f6 <__ftoa_engine+0x192>
    20fe:	11 24       	eor	r1, r1
    2100:	ef 90       	pop	r14
    2102:	ff 90       	pop	r15
    2104:	0f 91       	pop	r16
    2106:	1f 91       	pop	r17
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	99 27       	eor	r25, r25
    210e:	87 fd       	sbrc	r24, 7
    2110:	90 95       	com	r25
    2112:	08 95       	ret

00002114 <strnlen_P>:
    2114:	fc 01       	movw	r30, r24
    2116:	05 90       	lpm	r0, Z+
    2118:	61 50       	subi	r22, 0x01	; 1
    211a:	70 40       	sbci	r23, 0x00	; 0
    211c:	01 10       	cpse	r0, r1
    211e:	d8 f7       	brcc	.-10     	; 0x2116 <strnlen_P+0x2>
    2120:	80 95       	com	r24
    2122:	90 95       	com	r25
    2124:	8e 0f       	add	r24, r30
    2126:	9f 1f       	adc	r25, r31
    2128:	08 95       	ret

0000212a <strnlen>:
    212a:	fc 01       	movw	r30, r24
    212c:	61 50       	subi	r22, 0x01	; 1
    212e:	70 40       	sbci	r23, 0x00	; 0
    2130:	01 90       	ld	r0, Z+
    2132:	01 10       	cpse	r0, r1
    2134:	d8 f7       	brcc	.-10     	; 0x212c <strnlen+0x2>
    2136:	80 95       	com	r24
    2138:	90 95       	com	r25
    213a:	8e 0f       	add	r24, r30
    213c:	9f 1f       	adc	r25, r31
    213e:	08 95       	ret

00002140 <fputc>:
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	fb 01       	movw	r30, r22
    214a:	23 81       	ldd	r18, Z+3	; 0x03
    214c:	21 fd       	sbrc	r18, 1
    214e:	03 c0       	rjmp	.+6      	; 0x2156 <fputc+0x16>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	9f ef       	ldi	r25, 0xFF	; 255
    2154:	2c c0       	rjmp	.+88     	; 0x21ae <fputc+0x6e>
    2156:	22 ff       	sbrs	r18, 2
    2158:	16 c0       	rjmp	.+44     	; 0x2186 <fputc+0x46>
    215a:	46 81       	ldd	r20, Z+6	; 0x06
    215c:	57 81       	ldd	r21, Z+7	; 0x07
    215e:	24 81       	ldd	r18, Z+4	; 0x04
    2160:	35 81       	ldd	r19, Z+5	; 0x05
    2162:	42 17       	cp	r20, r18
    2164:	53 07       	cpc	r21, r19
    2166:	44 f4       	brge	.+16     	; 0x2178 <fputc+0x38>
    2168:	a0 81       	ld	r26, Z
    216a:	b1 81       	ldd	r27, Z+1	; 0x01
    216c:	9d 01       	movw	r18, r26
    216e:	2f 5f       	subi	r18, 0xFF	; 255
    2170:	3f 4f       	sbci	r19, 0xFF	; 255
    2172:	31 83       	std	Z+1, r19	; 0x01
    2174:	20 83       	st	Z, r18
    2176:	8c 93       	st	X, r24
    2178:	26 81       	ldd	r18, Z+6	; 0x06
    217a:	37 81       	ldd	r19, Z+7	; 0x07
    217c:	2f 5f       	subi	r18, 0xFF	; 255
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	37 83       	std	Z+7, r19	; 0x07
    2182:	26 83       	std	Z+6, r18	; 0x06
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <fputc+0x6e>
    2186:	8b 01       	movw	r16, r22
    2188:	ec 01       	movw	r28, r24
    218a:	fb 01       	movw	r30, r22
    218c:	00 84       	ldd	r0, Z+8	; 0x08
    218e:	f1 85       	ldd	r31, Z+9	; 0x09
    2190:	e0 2d       	mov	r30, r0
    2192:	09 95       	icall
    2194:	89 2b       	or	r24, r25
    2196:	e1 f6       	brne	.-72     	; 0x2150 <fputc+0x10>
    2198:	d8 01       	movw	r26, r16
    219a:	16 96       	adiw	r26, 0x06	; 6
    219c:	8d 91       	ld	r24, X+
    219e:	9c 91       	ld	r25, X
    21a0:	17 97       	sbiw	r26, 0x07	; 7
    21a2:	01 96       	adiw	r24, 0x01	; 1
    21a4:	17 96       	adiw	r26, 0x07	; 7
    21a6:	9c 93       	st	X, r25
    21a8:	8e 93       	st	-X, r24
    21aa:	16 97       	sbiw	r26, 0x06	; 6
    21ac:	ce 01       	movw	r24, r28
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <snprintf>:
    21b8:	ae e0       	ldi	r26, 0x0E	; 14
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e2 ee       	ldi	r30, 0xE2	; 226
    21be:	f0 e1       	ldi	r31, 0x10	; 16
    21c0:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__prologue_saves__+0x1c>
    21c4:	0d 89       	ldd	r16, Y+21	; 0x15
    21c6:	1e 89       	ldd	r17, Y+22	; 0x16
    21c8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ca:	98 8d       	ldd	r25, Y+24	; 0x18
    21cc:	26 e0       	ldi	r18, 0x06	; 6
    21ce:	2c 83       	std	Y+4, r18	; 0x04
    21d0:	1a 83       	std	Y+2, r17	; 0x02
    21d2:	09 83       	std	Y+1, r16	; 0x01
    21d4:	97 ff       	sbrs	r25, 7
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <snprintf+0x24>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e8       	ldi	r25, 0x80	; 128
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	ae 01       	movw	r20, r28
    21e4:	45 5e       	subi	r20, 0xE5	; 229
    21e6:	5f 4f       	sbci	r21, 0xFF	; 255
    21e8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ec:	ce 01       	movw	r24, r28
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	0e 94 c7 0b 	call	0x178e	; 0x178e <vfprintf>
    21f4:	4d 81       	ldd	r20, Y+5	; 0x05
    21f6:	5e 81       	ldd	r21, Y+6	; 0x06
    21f8:	57 fd       	sbrc	r21, 7
    21fa:	0a c0       	rjmp	.+20     	; 0x2210 <snprintf+0x58>
    21fc:	2f 81       	ldd	r18, Y+7	; 0x07
    21fe:	38 85       	ldd	r19, Y+8	; 0x08
    2200:	42 17       	cp	r20, r18
    2202:	53 07       	cpc	r21, r19
    2204:	0c f4       	brge	.+2      	; 0x2208 <snprintf+0x50>
    2206:	9a 01       	movw	r18, r20
    2208:	f8 01       	movw	r30, r16
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	10 82       	st	Z, r1
    2210:	2e 96       	adiw	r28, 0x0e	; 14
    2212:	e4 e0       	ldi	r30, 0x04	; 4
    2214:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__epilogue_restores__+0x1c>

00002218 <sscanf>:
    2218:	ae e0       	ldi	r26, 0x0E	; 14
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e2 e1       	ldi	r30, 0x12	; 18
    221e:	f1 e1       	ldi	r31, 0x11	; 17
    2220:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__prologue_saves__+0x20>
    2224:	85 e0       	ldi	r24, 0x05	; 5
    2226:	8c 83       	std	Y+4, r24	; 0x04
    2228:	8b 89       	ldd	r24, Y+19	; 0x13
    222a:	9c 89       	ldd	r25, Y+20	; 0x14
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	ae 01       	movw	r20, r28
    2232:	49 5e       	subi	r20, 0xE9	; 233
    2234:	5f 4f       	sbci	r21, 0xFF	; 255
    2236:	6d 89       	ldd	r22, Y+21	; 0x15
    2238:	7e 89       	ldd	r23, Y+22	; 0x16
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	0e 94 1f 13 	call	0x263e	; 0x263e <vfscanf>
    2242:	2e 96       	adiw	r28, 0x0e	; 14
    2244:	e2 e0       	ldi	r30, 0x02	; 2
    2246:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__epilogue_restores__+0x20>

0000224a <__ultoa_invert>:
    224a:	fa 01       	movw	r30, r20
    224c:	aa 27       	eor	r26, r26
    224e:	28 30       	cpi	r18, 0x08	; 8
    2250:	51 f1       	breq	.+84     	; 0x22a6 <__ultoa_invert+0x5c>
    2252:	20 31       	cpi	r18, 0x10	; 16
    2254:	81 f1       	breq	.+96     	; 0x22b6 <__ultoa_invert+0x6c>
    2256:	e8 94       	clt
    2258:	6f 93       	push	r22
    225a:	6e 7f       	andi	r22, 0xFE	; 254
    225c:	6e 5f       	subi	r22, 0xFE	; 254
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	8f 4f       	sbci	r24, 0xFF	; 255
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	af 4f       	sbci	r26, 0xFF	; 255
    2266:	b1 e0       	ldi	r27, 0x01	; 1
    2268:	3e d0       	rcall	.+124    	; 0x22e6 <__ultoa_invert+0x9c>
    226a:	b4 e0       	ldi	r27, 0x04	; 4
    226c:	3c d0       	rcall	.+120    	; 0x22e6 <__ultoa_invert+0x9c>
    226e:	67 0f       	add	r22, r23
    2270:	78 1f       	adc	r23, r24
    2272:	89 1f       	adc	r24, r25
    2274:	9a 1f       	adc	r25, r26
    2276:	a1 1d       	adc	r26, r1
    2278:	68 0f       	add	r22, r24
    227a:	79 1f       	adc	r23, r25
    227c:	8a 1f       	adc	r24, r26
    227e:	91 1d       	adc	r25, r1
    2280:	a1 1d       	adc	r26, r1
    2282:	6a 0f       	add	r22, r26
    2284:	71 1d       	adc	r23, r1
    2286:	81 1d       	adc	r24, r1
    2288:	91 1d       	adc	r25, r1
    228a:	a1 1d       	adc	r26, r1
    228c:	20 d0       	rcall	.+64     	; 0x22ce <__ultoa_invert+0x84>
    228e:	09 f4       	brne	.+2      	; 0x2292 <__ultoa_invert+0x48>
    2290:	68 94       	set
    2292:	3f 91       	pop	r19
    2294:	2a e0       	ldi	r18, 0x0A	; 10
    2296:	26 9f       	mul	r18, r22
    2298:	11 24       	eor	r1, r1
    229a:	30 19       	sub	r19, r0
    229c:	30 5d       	subi	r19, 0xD0	; 208
    229e:	31 93       	st	Z+, r19
    22a0:	de f6       	brtc	.-74     	; 0x2258 <__ultoa_invert+0xe>
    22a2:	cf 01       	movw	r24, r30
    22a4:	08 95       	ret
    22a6:	46 2f       	mov	r20, r22
    22a8:	47 70       	andi	r20, 0x07	; 7
    22aa:	40 5d       	subi	r20, 0xD0	; 208
    22ac:	41 93       	st	Z+, r20
    22ae:	b3 e0       	ldi	r27, 0x03	; 3
    22b0:	0f d0       	rcall	.+30     	; 0x22d0 <__ultoa_invert+0x86>
    22b2:	c9 f7       	brne	.-14     	; 0x22a6 <__ultoa_invert+0x5c>
    22b4:	f6 cf       	rjmp	.-20     	; 0x22a2 <__ultoa_invert+0x58>
    22b6:	46 2f       	mov	r20, r22
    22b8:	4f 70       	andi	r20, 0x0F	; 15
    22ba:	40 5d       	subi	r20, 0xD0	; 208
    22bc:	4a 33       	cpi	r20, 0x3A	; 58
    22be:	18 f0       	brcs	.+6      	; 0x22c6 <__ultoa_invert+0x7c>
    22c0:	49 5d       	subi	r20, 0xD9	; 217
    22c2:	31 fd       	sbrc	r19, 1
    22c4:	40 52       	subi	r20, 0x20	; 32
    22c6:	41 93       	st	Z+, r20
    22c8:	02 d0       	rcall	.+4      	; 0x22ce <__ultoa_invert+0x84>
    22ca:	a9 f7       	brne	.-22     	; 0x22b6 <__ultoa_invert+0x6c>
    22cc:	ea cf       	rjmp	.-44     	; 0x22a2 <__ultoa_invert+0x58>
    22ce:	b4 e0       	ldi	r27, 0x04	; 4
    22d0:	a6 95       	lsr	r26
    22d2:	97 95       	ror	r25
    22d4:	87 95       	ror	r24
    22d6:	77 95       	ror	r23
    22d8:	67 95       	ror	r22
    22da:	ba 95       	dec	r27
    22dc:	c9 f7       	brne	.-14     	; 0x22d0 <__ultoa_invert+0x86>
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	61 05       	cpc	r22, r1
    22e2:	71 05       	cpc	r23, r1
    22e4:	08 95       	ret
    22e6:	9b 01       	movw	r18, r22
    22e8:	ac 01       	movw	r20, r24
    22ea:	0a 2e       	mov	r0, r26
    22ec:	06 94       	lsr	r0
    22ee:	57 95       	ror	r21
    22f0:	47 95       	ror	r20
    22f2:	37 95       	ror	r19
    22f4:	27 95       	ror	r18
    22f6:	ba 95       	dec	r27
    22f8:	c9 f7       	brne	.-14     	; 0x22ec <__ultoa_invert+0xa2>
    22fa:	62 0f       	add	r22, r18
    22fc:	73 1f       	adc	r23, r19
    22fe:	84 1f       	adc	r24, r20
    2300:	95 1f       	adc	r25, r21
    2302:	a0 1d       	adc	r26, r0
    2304:	08 95       	ret

00002306 <putval>:
    2306:	20 fd       	sbrc	r18, 0
    2308:	09 c0       	rjmp	.+18     	; 0x231c <putval+0x16>
    230a:	fc 01       	movw	r30, r24
    230c:	23 fd       	sbrc	r18, 3
    230e:	05 c0       	rjmp	.+10     	; 0x231a <putval+0x14>
    2310:	22 ff       	sbrs	r18, 2
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <putval+0x12>
    2314:	73 83       	std	Z+3, r23	; 0x03
    2316:	62 83       	std	Z+2, r22	; 0x02
    2318:	51 83       	std	Z+1, r21	; 0x01
    231a:	40 83       	st	Z, r20
    231c:	08 95       	ret

0000231e <mulacc>:
    231e:	44 fd       	sbrc	r20, 4
    2320:	17 c0       	rjmp	.+46     	; 0x2350 <mulacc+0x32>
    2322:	46 fd       	sbrc	r20, 6
    2324:	17 c0       	rjmp	.+46     	; 0x2354 <mulacc+0x36>
    2326:	ab 01       	movw	r20, r22
    2328:	bc 01       	movw	r22, r24
    232a:	da 01       	movw	r26, r20
    232c:	fb 01       	movw	r30, r22
    232e:	aa 0f       	add	r26, r26
    2330:	bb 1f       	adc	r27, r27
    2332:	ee 1f       	adc	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	10 94       	com	r1
    2338:	d1 f7       	brne	.-12     	; 0x232e <mulacc+0x10>
    233a:	4a 0f       	add	r20, r26
    233c:	5b 1f       	adc	r21, r27
    233e:	6e 1f       	adc	r22, r30
    2340:	7f 1f       	adc	r23, r31
    2342:	cb 01       	movw	r24, r22
    2344:	ba 01       	movw	r22, r20
    2346:	66 0f       	add	r22, r22
    2348:	77 1f       	adc	r23, r23
    234a:	88 1f       	adc	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	09 c0       	rjmp	.+18     	; 0x2362 <mulacc+0x44>
    2350:	33 e0       	ldi	r19, 0x03	; 3
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <mulacc+0x38>
    2354:	34 e0       	ldi	r19, 0x04	; 4
    2356:	66 0f       	add	r22, r22
    2358:	77 1f       	adc	r23, r23
    235a:	88 1f       	adc	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	31 50       	subi	r19, 0x01	; 1
    2360:	d1 f7       	brne	.-12     	; 0x2356 <mulacc+0x38>
    2362:	62 0f       	add	r22, r18
    2364:	71 1d       	adc	r23, r1
    2366:	81 1d       	adc	r24, r1
    2368:	91 1d       	adc	r25, r1
    236a:	08 95       	ret

0000236c <skip_spaces>:
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	8c 01       	movw	r16, r24
    2376:	c8 01       	movw	r24, r16
    2378:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    237c:	ec 01       	movw	r28, r24
    237e:	97 fd       	sbrc	r25, 7
    2380:	08 c0       	rjmp	.+16     	; 0x2392 <skip_spaces+0x26>
    2382:	0e 94 30 14 	call	0x2860	; 0x2860 <isspace>
    2386:	89 2b       	or	r24, r25
    2388:	b1 f7       	brne	.-20     	; 0x2376 <skip_spaces+0xa>
    238a:	b8 01       	movw	r22, r16
    238c:	ce 01       	movw	r24, r28
    238e:	0e 94 82 14 	call	0x2904	; 0x2904 <ungetc>
    2392:	ce 01       	movw	r24, r28
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	08 95       	ret

0000239e <conv_int>:
    239e:	8f 92       	push	r8
    23a0:	9f 92       	push	r9
    23a2:	af 92       	push	r10
    23a4:	bf 92       	push	r11
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	8c 01       	movw	r16, r24
    23b4:	d6 2f       	mov	r29, r22
    23b6:	7a 01       	movw	r14, r20
    23b8:	b2 2e       	mov	r11, r18
    23ba:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    23be:	9c 01       	movw	r18, r24
    23c0:	33 27       	eor	r19, r19
    23c2:	2b 32       	cpi	r18, 0x2B	; 43
    23c4:	31 05       	cpc	r19, r1
    23c6:	31 f0       	breq	.+12     	; 0x23d4 <conv_int+0x36>
    23c8:	2d 32       	cpi	r18, 0x2D	; 45
    23ca:	31 05       	cpc	r19, r1
    23cc:	61 f4       	brne	.+24     	; 0x23e6 <conv_int+0x48>
    23ce:	8b 2d       	mov	r24, r11
    23d0:	80 68       	ori	r24, 0x80	; 128
    23d2:	b8 2e       	mov	r11, r24
    23d4:	d1 50       	subi	r29, 0x01	; 1
    23d6:	11 f4       	brne	.+4      	; 0x23dc <conv_int+0x3e>
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	68 c0       	rjmp	.+208    	; 0x24ac <conv_int+0x10e>
    23dc:	c8 01       	movw	r24, r16
    23de:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    23e2:	97 fd       	sbrc	r25, 7
    23e4:	f9 cf       	rjmp	.-14     	; 0x23d8 <conv_int+0x3a>
    23e6:	cb 2d       	mov	r28, r11
    23e8:	cd 7f       	andi	r28, 0xFD	; 253
    23ea:	2b 2d       	mov	r18, r11
    23ec:	20 73       	andi	r18, 0x30	; 48
    23ee:	09 f5       	brne	.+66     	; 0x2432 <conv_int+0x94>
    23f0:	80 33       	cpi	r24, 0x30	; 48
    23f2:	f9 f4       	brne	.+62     	; 0x2432 <conv_int+0x94>
    23f4:	aa 24       	eor	r10, r10
    23f6:	aa 94       	dec	r10
    23f8:	ad 0e       	add	r10, r29
    23fa:	09 f4       	brne	.+2      	; 0x23fe <conv_int+0x60>
    23fc:	43 c0       	rjmp	.+134    	; 0x2484 <conv_int+0xe6>
    23fe:	c8 01       	movw	r24, r16
    2400:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    2404:	97 fd       	sbrc	r25, 7
    2406:	3e c0       	rjmp	.+124    	; 0x2484 <conv_int+0xe6>
    2408:	9c 01       	movw	r18, r24
    240a:	2f 7d       	andi	r18, 0xDF	; 223
    240c:	33 27       	eor	r19, r19
    240e:	28 35       	cpi	r18, 0x58	; 88
    2410:	31 05       	cpc	r19, r1
    2412:	49 f4       	brne	.+18     	; 0x2426 <conv_int+0x88>
    2414:	c2 64       	ori	r28, 0x42	; 66
    2416:	d2 50       	subi	r29, 0x02	; 2
    2418:	a9 f1       	breq	.+106    	; 0x2484 <conv_int+0xe6>
    241a:	c8 01       	movw	r24, r16
    241c:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    2420:	97 ff       	sbrs	r25, 7
    2422:	07 c0       	rjmp	.+14     	; 0x2432 <conv_int+0x94>
    2424:	2f c0       	rjmp	.+94     	; 0x2484 <conv_int+0xe6>
    2426:	b6 fe       	sbrs	r11, 6
    2428:	02 c0       	rjmp	.+4      	; 0x242e <conv_int+0x90>
    242a:	c2 60       	ori	r28, 0x02	; 2
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <conv_int+0x92>
    242e:	c2 61       	ori	r28, 0x12	; 18
    2430:	da 2d       	mov	r29, r10
    2432:	81 2c       	mov	r8, r1
    2434:	91 2c       	mov	r9, r1
    2436:	54 01       	movw	r10, r8
    2438:	20 ed       	ldi	r18, 0xD0	; 208
    243a:	28 0f       	add	r18, r24
    243c:	28 30       	cpi	r18, 0x08	; 8
    243e:	80 f0       	brcs	.+32     	; 0x2460 <conv_int+0xc2>
    2440:	c4 ff       	sbrs	r28, 4
    2442:	04 c0       	rjmp	.+8      	; 0x244c <conv_int+0xae>
    2444:	b8 01       	movw	r22, r16
    2446:	0e 94 82 14 	call	0x2904	; 0x2904 <ungetc>
    244a:	19 c0       	rjmp	.+50     	; 0x247e <conv_int+0xe0>
    244c:	2a 30       	cpi	r18, 0x0A	; 10
    244e:	40 f0       	brcs	.+16     	; 0x2460 <conv_int+0xc2>
    2450:	c6 ff       	sbrs	r28, 6
    2452:	f8 cf       	rjmp	.-16     	; 0x2444 <conv_int+0xa6>
    2454:	2f 7d       	andi	r18, 0xDF	; 223
    2456:	3f ee       	ldi	r19, 0xEF	; 239
    2458:	32 0f       	add	r19, r18
    245a:	36 30       	cpi	r19, 0x06	; 6
    245c:	98 f7       	brcc	.-26     	; 0x2444 <conv_int+0xa6>
    245e:	27 50       	subi	r18, 0x07	; 7
    2460:	4c 2f       	mov	r20, r28
    2462:	c5 01       	movw	r24, r10
    2464:	b4 01       	movw	r22, r8
    2466:	0e 94 8f 11 	call	0x231e	; 0x231e <mulacc>
    246a:	4b 01       	movw	r8, r22
    246c:	5c 01       	movw	r10, r24
    246e:	c2 60       	ori	r28, 0x02	; 2
    2470:	d1 50       	subi	r29, 0x01	; 1
    2472:	59 f0       	breq	.+22     	; 0x248a <conv_int+0xec>
    2474:	c8 01       	movw	r24, r16
    2476:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    247a:	97 ff       	sbrs	r25, 7
    247c:	dd cf       	rjmp	.-70     	; 0x2438 <conv_int+0x9a>
    247e:	c1 fd       	sbrc	r28, 1
    2480:	04 c0       	rjmp	.+8      	; 0x248a <conv_int+0xec>
    2482:	aa cf       	rjmp	.-172    	; 0x23d8 <conv_int+0x3a>
    2484:	81 2c       	mov	r8, r1
    2486:	91 2c       	mov	r9, r1
    2488:	54 01       	movw	r10, r8
    248a:	c7 ff       	sbrs	r28, 7
    248c:	08 c0       	rjmp	.+16     	; 0x249e <conv_int+0x100>
    248e:	b0 94       	com	r11
    2490:	a0 94       	com	r10
    2492:	90 94       	com	r9
    2494:	80 94       	com	r8
    2496:	81 1c       	adc	r8, r1
    2498:	91 1c       	adc	r9, r1
    249a:	a1 1c       	adc	r10, r1
    249c:	b1 1c       	adc	r11, r1
    249e:	2c 2f       	mov	r18, r28
    24a0:	b5 01       	movw	r22, r10
    24a2:	a4 01       	movw	r20, r8
    24a4:	c7 01       	movw	r24, r14
    24a6:	0e 94 83 11 	call	0x2306	; 0x2306 <putval>
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	bf 90       	pop	r11
    24ba:	af 90       	pop	r10
    24bc:	9f 90       	pop	r9
    24be:	8f 90       	pop	r8
    24c0:	08 95       	ret

000024c2 <conv_brk>:
    24c2:	a0 e2       	ldi	r26, 0x20	; 32
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e7 e6       	ldi	r30, 0x67	; 103
    24c8:	f2 e1       	ldi	r31, 0x12	; 18
    24ca:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__prologue_saves__+0x6>
    24ce:	5c 01       	movw	r10, r24
    24d0:	96 2e       	mov	r9, r22
    24d2:	7a 01       	movw	r14, r20
    24d4:	f9 01       	movw	r30, r18
    24d6:	8e 01       	movw	r16, r28
    24d8:	0f 5f       	subi	r16, 0xFF	; 255
    24da:	1f 4f       	sbci	r17, 0xFF	; 255
    24dc:	68 01       	movw	r12, r16
    24de:	80 e2       	ldi	r24, 0x20	; 32
    24e0:	d8 01       	movw	r26, r16
    24e2:	1d 92       	st	X+, r1
    24e4:	8a 95       	dec	r24
    24e6:	e9 f7       	brne	.-6      	; 0x24e2 <conv_brk+0x20>
    24e8:	d5 01       	movw	r26, r10
    24ea:	13 96       	adiw	r26, 0x03	; 3
    24ec:	8c 90       	ld	r8, X
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	61 2c       	mov	r6, r1
    24f4:	71 2c       	mov	r7, r1
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	61 e0       	ldi	r22, 0x01	; 1
    24fa:	70 e0       	ldi	r23, 0x00	; 0
    24fc:	83 fc       	sbrc	r8, 3
    24fe:	25 91       	lpm	r18, Z+
    2500:	83 fe       	sbrs	r8, 3
    2502:	21 91       	ld	r18, Z+
    2504:	8f 01       	movw	r16, r30
    2506:	52 2e       	mov	r5, r18
    2508:	21 11       	cpse	r18, r1
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <conv_brk+0x50>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	92 c0       	rjmp	.+292    	; 0x2636 <conv_brk+0x174>
    2512:	2e 35       	cpi	r18, 0x5E	; 94
    2514:	11 f4       	brne	.+4      	; 0x251a <conv_brk+0x58>
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	51 f1       	breq	.+84     	; 0x256e <conv_brk+0xac>
    251a:	43 2f       	mov	r20, r19
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	48 17       	cp	r20, r24
    2520:	59 07       	cpc	r21, r25
    2522:	3c f4       	brge	.+14     	; 0x2532 <conv_brk+0x70>
    2524:	2d 35       	cpi	r18, 0x5D	; 93
    2526:	59 f1       	breq	.+86     	; 0x257e <conv_brk+0xbc>
    2528:	2d 32       	cpi	r18, 0x2D	; 45
    252a:	19 f4       	brne	.+6      	; 0x2532 <conv_brk+0x70>
    252c:	77 20       	and	r7, r7
    252e:	09 f1       	breq	.+66     	; 0x2572 <conv_brk+0xb0>
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <conv_brk+0x76>
    2532:	77 20       	and	r7, r7
    2534:	09 f4       	brne	.+2      	; 0x2538 <conv_brk+0x76>
    2536:	6a c0       	rjmp	.+212    	; 0x260c <conv_brk+0x14a>
    2538:	45 2d       	mov	r20, r5
    253a:	46 95       	lsr	r20
    253c:	46 95       	lsr	r20
    253e:	46 95       	lsr	r20
    2540:	d6 01       	movw	r26, r12
    2542:	a4 0f       	add	r26, r20
    2544:	b1 1d       	adc	r27, r1
    2546:	45 2d       	mov	r20, r5
    2548:	47 70       	andi	r20, 0x07	; 7
    254a:	8b 01       	movw	r16, r22
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <conv_brk+0x90>
    254e:	00 0f       	add	r16, r16
    2550:	11 1f       	adc	r17, r17
    2552:	4a 95       	dec	r20
    2554:	e2 f7       	brpl	.-8      	; 0x254e <conv_brk+0x8c>
    2556:	a8 01       	movw	r20, r16
    2558:	5c 91       	ld	r21, X
    255a:	45 2b       	or	r20, r21
    255c:	4c 93       	st	X, r20
    255e:	65 14       	cp	r6, r5
    2560:	59 f0       	breq	.+22     	; 0x2578 <conv_brk+0xb6>
    2562:	56 14       	cp	r5, r6
    2564:	10 f4       	brcc	.+4      	; 0x256a <conv_brk+0xa8>
    2566:	53 94       	inc	r5
    2568:	e7 cf       	rjmp	.-50     	; 0x2538 <conv_brk+0x76>
    256a:	5a 94       	dec	r5
    256c:	e5 cf       	rjmp	.-54     	; 0x2538 <conv_brk+0x76>
    256e:	31 e0       	ldi	r19, 0x01	; 1
    2570:	04 c0       	rjmp	.+8      	; 0x257a <conv_brk+0xb8>
    2572:	77 24       	eor	r7, r7
    2574:	73 94       	inc	r7
    2576:	01 c0       	rjmp	.+2      	; 0x257a <conv_brk+0xb8>
    2578:	71 2c       	mov	r7, r1
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	bf cf       	rjmp	.-130    	; 0x24fc <conv_brk+0x3a>
    257e:	77 20       	and	r7, r7
    2580:	19 f0       	breq	.+6      	; 0x2588 <conv_brk+0xc6>
    2582:	8e 81       	ldd	r24, Y+6	; 0x06
    2584:	80 62       	ori	r24, 0x20	; 32
    2586:	8e 83       	std	Y+6, r24	; 0x06
    2588:	31 11       	cpse	r19, r1
    258a:	03 c0       	rjmp	.+6      	; 0x2592 <conv_brk+0xd0>
    258c:	88 24       	eor	r8, r8
    258e:	83 94       	inc	r8
    2590:	17 c0       	rjmp	.+46     	; 0x25c0 <conv_brk+0xfe>
    2592:	f6 01       	movw	r30, r12
    2594:	9e 01       	movw	r18, r28
    2596:	2f 5d       	subi	r18, 0xDF	; 223
    2598:	3f 4f       	sbci	r19, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	80 95       	com	r24
    259e:	81 93       	st	Z+, r24
    25a0:	2e 17       	cp	r18, r30
    25a2:	3f 07       	cpc	r19, r31
    25a4:	d1 f7       	brne	.-12     	; 0x259a <conv_brk+0xd8>
    25a6:	f2 cf       	rjmp	.-28     	; 0x258c <conv_brk+0xca>
    25a8:	e1 14       	cp	r14, r1
    25aa:	f1 04       	cpc	r15, r1
    25ac:	29 f0       	breq	.+10     	; 0x25b8 <conv_brk+0xf6>
    25ae:	d7 01       	movw	r26, r14
    25b0:	8c 93       	st	X, r24
    25b2:	f7 01       	movw	r30, r14
    25b4:	31 96       	adiw	r30, 0x01	; 1
    25b6:	7f 01       	movw	r14, r30
    25b8:	9a 94       	dec	r9
    25ba:	81 2c       	mov	r8, r1
    25bc:	99 20       	and	r9, r9
    25be:	f9 f0       	breq	.+62     	; 0x25fe <conv_brk+0x13c>
    25c0:	c5 01       	movw	r24, r10
    25c2:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    25c6:	97 fd       	sbrc	r25, 7
    25c8:	18 c0       	rjmp	.+48     	; 0x25fa <conv_brk+0x138>
    25ca:	fc 01       	movw	r30, r24
    25cc:	ff 27       	eor	r31, r31
    25ce:	23 e0       	ldi	r18, 0x03	; 3
    25d0:	f5 95       	asr	r31
    25d2:	e7 95       	ror	r30
    25d4:	2a 95       	dec	r18
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <conv_brk+0x10e>
    25d8:	ec 0d       	add	r30, r12
    25da:	fd 1d       	adc	r31, r13
    25dc:	20 81       	ld	r18, Z
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	ac 01       	movw	r20, r24
    25e2:	47 70       	andi	r20, 0x07	; 7
    25e4:	55 27       	eor	r21, r21
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <conv_brk+0x12a>
    25e8:	35 95       	asr	r19
    25ea:	27 95       	ror	r18
    25ec:	4a 95       	dec	r20
    25ee:	e2 f7       	brpl	.-8      	; 0x25e8 <conv_brk+0x126>
    25f0:	20 fd       	sbrc	r18, 0
    25f2:	da cf       	rjmp	.-76     	; 0x25a8 <conv_brk+0xe6>
    25f4:	b5 01       	movw	r22, r10
    25f6:	0e 94 82 14 	call	0x2904	; 0x2904 <ungetc>
    25fa:	81 10       	cpse	r8, r1
    25fc:	87 cf       	rjmp	.-242    	; 0x250c <conv_brk+0x4a>
    25fe:	e1 14       	cp	r14, r1
    2600:	f1 04       	cpc	r15, r1
    2602:	11 f0       	breq	.+4      	; 0x2608 <conv_brk+0x146>
    2604:	d7 01       	movw	r26, r14
    2606:	1c 92       	st	X, r1
    2608:	c8 01       	movw	r24, r16
    260a:	15 c0       	rjmp	.+42     	; 0x2636 <conv_brk+0x174>
    260c:	42 2f       	mov	r20, r18
    260e:	46 95       	lsr	r20
    2610:	46 95       	lsr	r20
    2612:	46 95       	lsr	r20
    2614:	d6 01       	movw	r26, r12
    2616:	a4 0f       	add	r26, r20
    2618:	b1 1d       	adc	r27, r1
    261a:	42 2f       	mov	r20, r18
    261c:	47 70       	andi	r20, 0x07	; 7
    261e:	8b 01       	movw	r16, r22
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <conv_brk+0x164>
    2622:	00 0f       	add	r16, r16
    2624:	11 1f       	adc	r17, r17
    2626:	4a 95       	dec	r20
    2628:	e2 f7       	brpl	.-8      	; 0x2622 <conv_brk+0x160>
    262a:	a8 01       	movw	r20, r16
    262c:	5c 91       	ld	r21, X
    262e:	45 2b       	or	r20, r21
    2630:	4c 93       	st	X, r20
    2632:	62 2e       	mov	r6, r18
    2634:	a2 cf       	rjmp	.-188    	; 0x257a <conv_brk+0xb8>
    2636:	a0 96       	adiw	r28, 0x20	; 32
    2638:	ef e0       	ldi	r30, 0x0F	; 15
    263a:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__epilogue_restores__+0x6>

0000263e <vfscanf>:
    263e:	a0 e0       	ldi	r26, 0x00	; 0
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e5 e2       	ldi	r30, 0x25	; 37
    2644:	f3 e1       	ldi	r31, 0x13	; 19
    2646:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__prologue_saves__+0x6>
    264a:	6c 01       	movw	r12, r24
    264c:	eb 01       	movw	r28, r22
    264e:	5a 01       	movw	r10, r20
    2650:	fc 01       	movw	r30, r24
    2652:	17 82       	std	Z+7, r1	; 0x07
    2654:	16 82       	std	Z+6, r1	; 0x06
    2656:	51 2c       	mov	r5, r1
    2658:	f6 01       	movw	r30, r12
    265a:	e3 80       	ldd	r14, Z+3	; 0x03
    265c:	fe 01       	movw	r30, r28
    265e:	e3 fc       	sbrc	r14, 3
    2660:	85 91       	lpm	r24, Z+
    2662:	e3 fe       	sbrs	r14, 3
    2664:	81 91       	ld	r24, Z+
    2666:	18 2f       	mov	r17, r24
    2668:	ef 01       	movw	r28, r30
    266a:	88 23       	and	r24, r24
    266c:	09 f4       	brne	.+2      	; 0x2670 <vfscanf+0x32>
    266e:	ee c0       	rjmp	.+476    	; 0x284c <vfscanf+0x20e>
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 30 14 	call	0x2860	; 0x2860 <isspace>
    2676:	89 2b       	or	r24, r25
    2678:	21 f0       	breq	.+8      	; 0x2682 <vfscanf+0x44>
    267a:	c6 01       	movw	r24, r12
    267c:	0e 94 b6 11 	call	0x236c	; 0x236c <skip_spaces>
    2680:	eb cf       	rjmp	.-42     	; 0x2658 <vfscanf+0x1a>
    2682:	15 32       	cpi	r17, 0x25	; 37
    2684:	41 f4       	brne	.+16     	; 0x2696 <vfscanf+0x58>
    2686:	fe 01       	movw	r30, r28
    2688:	e3 fc       	sbrc	r14, 3
    268a:	15 91       	lpm	r17, Z+
    268c:	e3 fe       	sbrs	r14, 3
    268e:	11 91       	ld	r17, Z+
    2690:	ef 01       	movw	r28, r30
    2692:	15 32       	cpi	r17, 0x25	; 37
    2694:	81 f4       	brne	.+32     	; 0x26b6 <vfscanf+0x78>
    2696:	c6 01       	movw	r24, r12
    2698:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    269c:	97 fd       	sbrc	r25, 7
    269e:	d4 c0       	rjmp	.+424    	; 0x2848 <vfscanf+0x20a>
    26a0:	41 2f       	mov	r20, r17
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	9c 01       	movw	r18, r24
    26a6:	33 27       	eor	r19, r19
    26a8:	24 17       	cp	r18, r20
    26aa:	35 07       	cpc	r19, r21
    26ac:	a9 f2       	breq	.-86     	; 0x2658 <vfscanf+0x1a>
    26ae:	b6 01       	movw	r22, r12
    26b0:	0e 94 82 14 	call	0x2904	; 0x2904 <ungetc>
    26b4:	cb c0       	rjmp	.+406    	; 0x284c <vfscanf+0x20e>
    26b6:	1a 32       	cpi	r17, 0x2A	; 42
    26b8:	39 f4       	brne	.+14     	; 0x26c8 <vfscanf+0x8a>
    26ba:	e3 fc       	sbrc	r14, 3
    26bc:	15 91       	lpm	r17, Z+
    26be:	e3 fe       	sbrs	r14, 3
    26c0:	11 91       	ld	r17, Z+
    26c2:	ef 01       	movw	r28, r30
    26c4:	01 e0       	ldi	r16, 0x01	; 1
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <vfscanf+0x8c>
    26c8:	00 e0       	ldi	r16, 0x00	; 0
    26ca:	f1 2c       	mov	r15, r1
    26cc:	20 ed       	ldi	r18, 0xD0	; 208
    26ce:	21 0f       	add	r18, r17
    26d0:	2a 30       	cpi	r18, 0x0A	; 10
    26d2:	80 f4       	brcc	.+32     	; 0x26f4 <vfscanf+0xb6>
    26d4:	02 60       	ori	r16, 0x02	; 2
    26d6:	6f 2d       	mov	r22, r15
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	0e 94 8f 11 	call	0x231e	; 0x231e <mulacc>
    26e4:	f6 2e       	mov	r15, r22
    26e6:	fe 01       	movw	r30, r28
    26e8:	e3 fc       	sbrc	r14, 3
    26ea:	15 91       	lpm	r17, Z+
    26ec:	e3 fe       	sbrs	r14, 3
    26ee:	11 91       	ld	r17, Z+
    26f0:	ef 01       	movw	r28, r30
    26f2:	ec cf       	rjmp	.-40     	; 0x26cc <vfscanf+0x8e>
    26f4:	01 ff       	sbrs	r16, 1
    26f6:	03 c0       	rjmp	.+6      	; 0x26fe <vfscanf+0xc0>
    26f8:	f1 10       	cpse	r15, r1
    26fa:	03 c0       	rjmp	.+6      	; 0x2702 <vfscanf+0xc4>
    26fc:	a7 c0       	rjmp	.+334    	; 0x284c <vfscanf+0x20e>
    26fe:	ff 24       	eor	r15, r15
    2700:	fa 94       	dec	r15
    2702:	18 36       	cpi	r17, 0x68	; 104
    2704:	19 f0       	breq	.+6      	; 0x270c <vfscanf+0xce>
    2706:	1c 36       	cpi	r17, 0x6C	; 108
    2708:	51 f0       	breq	.+20     	; 0x271e <vfscanf+0xe0>
    270a:	10 c0       	rjmp	.+32     	; 0x272c <vfscanf+0xee>
    270c:	fe 01       	movw	r30, r28
    270e:	e3 fc       	sbrc	r14, 3
    2710:	15 91       	lpm	r17, Z+
    2712:	e3 fe       	sbrs	r14, 3
    2714:	11 91       	ld	r17, Z+
    2716:	ef 01       	movw	r28, r30
    2718:	18 36       	cpi	r17, 0x68	; 104
    271a:	41 f4       	brne	.+16     	; 0x272c <vfscanf+0xee>
    271c:	08 60       	ori	r16, 0x08	; 8
    271e:	04 60       	ori	r16, 0x04	; 4
    2720:	fe 01       	movw	r30, r28
    2722:	e3 fc       	sbrc	r14, 3
    2724:	15 91       	lpm	r17, Z+
    2726:	e3 fe       	sbrs	r14, 3
    2728:	11 91       	ld	r17, Z+
    272a:	ef 01       	movw	r28, r30
    272c:	11 23       	and	r17, r17
    272e:	09 f4       	brne	.+2      	; 0x2732 <vfscanf+0xf4>
    2730:	8d c0       	rjmp	.+282    	; 0x284c <vfscanf+0x20e>
    2732:	61 2f       	mov	r22, r17
    2734:	70 e0       	ldi	r23, 0x00	; 0
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	92 e0       	ldi	r25, 0x02	; 2
    273a:	0e 94 39 14 	call	0x2872	; 0x2872 <strchr_P>
    273e:	89 2b       	or	r24, r25
    2740:	09 f4       	brne	.+2      	; 0x2744 <vfscanf+0x106>
    2742:	84 c0       	rjmp	.+264    	; 0x284c <vfscanf+0x20e>
    2744:	00 fd       	sbrc	r16, 0
    2746:	07 c0       	rjmp	.+14     	; 0x2756 <vfscanf+0x118>
    2748:	f5 01       	movw	r30, r10
    274a:	80 80       	ld	r8, Z
    274c:	91 80       	ldd	r9, Z+1	; 0x01
    274e:	c5 01       	movw	r24, r10
    2750:	02 96       	adiw	r24, 0x02	; 2
    2752:	5c 01       	movw	r10, r24
    2754:	02 c0       	rjmp	.+4      	; 0x275a <vfscanf+0x11c>
    2756:	81 2c       	mov	r8, r1
    2758:	91 2c       	mov	r9, r1
    275a:	1e 36       	cpi	r17, 0x6E	; 110
    275c:	51 f4       	brne	.+20     	; 0x2772 <vfscanf+0x134>
    275e:	f6 01       	movw	r30, r12
    2760:	46 81       	ldd	r20, Z+6	; 0x06
    2762:	57 81       	ldd	r21, Z+7	; 0x07
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	20 2f       	mov	r18, r16
    276a:	c4 01       	movw	r24, r8
    276c:	0e 94 83 11 	call	0x2306	; 0x2306 <putval>
    2770:	73 cf       	rjmp	.-282    	; 0x2658 <vfscanf+0x1a>
    2772:	13 36       	cpi	r17, 0x63	; 99
    2774:	a9 f4       	brne	.+42     	; 0x27a0 <vfscanf+0x162>
    2776:	01 fd       	sbrc	r16, 1
    2778:	02 c0       	rjmp	.+4      	; 0x277e <vfscanf+0x140>
    277a:	ff 24       	eor	r15, r15
    277c:	f3 94       	inc	r15
    277e:	c6 01       	movw	r24, r12
    2780:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    2784:	97 fd       	sbrc	r25, 7
    2786:	60 c0       	rjmp	.+192    	; 0x2848 <vfscanf+0x20a>
    2788:	81 14       	cp	r8, r1
    278a:	91 04       	cpc	r9, r1
    278c:	29 f0       	breq	.+10     	; 0x2798 <vfscanf+0x15a>
    278e:	f4 01       	movw	r30, r8
    2790:	80 83       	st	Z, r24
    2792:	c4 01       	movw	r24, r8
    2794:	01 96       	adiw	r24, 0x01	; 1
    2796:	4c 01       	movw	r8, r24
    2798:	fa 94       	dec	r15
    279a:	f1 10       	cpse	r15, r1
    279c:	f0 cf       	rjmp	.-32     	; 0x277e <vfscanf+0x140>
    279e:	50 c0       	rjmp	.+160    	; 0x2840 <vfscanf+0x202>
    27a0:	1b 35       	cpi	r17, 0x5B	; 91
    27a2:	59 f4       	brne	.+22     	; 0x27ba <vfscanf+0x17c>
    27a4:	9e 01       	movw	r18, r28
    27a6:	a4 01       	movw	r20, r8
    27a8:	6f 2d       	mov	r22, r15
    27aa:	c6 01       	movw	r24, r12
    27ac:	0e 94 61 12 	call	0x24c2	; 0x24c2 <conv_brk>
    27b0:	ec 01       	movw	r28, r24
    27b2:	89 2b       	or	r24, r25
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <vfscanf+0x17a>
    27b6:	44 c0       	rjmp	.+136    	; 0x2840 <vfscanf+0x202>
    27b8:	3e c0       	rjmp	.+124    	; 0x2836 <vfscanf+0x1f8>
    27ba:	c6 01       	movw	r24, r12
    27bc:	0e 94 b6 11 	call	0x236c	; 0x236c <skip_spaces>
    27c0:	97 fd       	sbrc	r25, 7
    27c2:	42 c0       	rjmp	.+132    	; 0x2848 <vfscanf+0x20a>
    27c4:	1f 36       	cpi	r17, 0x6F	; 111
    27c6:	61 f1       	breq	.+88     	; 0x2820 <vfscanf+0x1e2>
    27c8:	28 f4       	brcc	.+10     	; 0x27d4 <vfscanf+0x196>
    27ca:	14 36       	cpi	r17, 0x64	; 100
    27cc:	39 f1       	breq	.+78     	; 0x281c <vfscanf+0x1de>
    27ce:	19 36       	cpi	r17, 0x69	; 105
    27d0:	51 f1       	breq	.+84     	; 0x2826 <vfscanf+0x1e8>
    27d2:	28 c0       	rjmp	.+80     	; 0x2824 <vfscanf+0x1e6>
    27d4:	13 37       	cpi	r17, 0x73	; 115
    27d6:	71 f0       	breq	.+28     	; 0x27f4 <vfscanf+0x1b6>
    27d8:	15 37       	cpi	r17, 0x75	; 117
    27da:	01 f1       	breq	.+64     	; 0x281c <vfscanf+0x1de>
    27dc:	23 c0       	rjmp	.+70     	; 0x2824 <vfscanf+0x1e6>
    27de:	81 14       	cp	r8, r1
    27e0:	91 04       	cpc	r9, r1
    27e2:	29 f0       	breq	.+10     	; 0x27ee <vfscanf+0x1b0>
    27e4:	f4 01       	movw	r30, r8
    27e6:	60 82       	st	Z, r6
    27e8:	c4 01       	movw	r24, r8
    27ea:	01 96       	adiw	r24, 0x01	; 1
    27ec:	4c 01       	movw	r8, r24
    27ee:	fa 94       	dec	r15
    27f0:	ff 20       	and	r15, r15
    27f2:	71 f0       	breq	.+28     	; 0x2810 <vfscanf+0x1d2>
    27f4:	c6 01       	movw	r24, r12
    27f6:	0e 94 44 14 	call	0x2888	; 0x2888 <fgetc>
    27fa:	3c 01       	movw	r6, r24
    27fc:	97 fd       	sbrc	r25, 7
    27fe:	08 c0       	rjmp	.+16     	; 0x2810 <vfscanf+0x1d2>
    2800:	0e 94 30 14 	call	0x2860	; 0x2860 <isspace>
    2804:	89 2b       	or	r24, r25
    2806:	59 f3       	breq	.-42     	; 0x27de <vfscanf+0x1a0>
    2808:	b6 01       	movw	r22, r12
    280a:	c3 01       	movw	r24, r6
    280c:	0e 94 82 14 	call	0x2904	; 0x2904 <ungetc>
    2810:	81 14       	cp	r8, r1
    2812:	91 04       	cpc	r9, r1
    2814:	a9 f0       	breq	.+42     	; 0x2840 <vfscanf+0x202>
    2816:	f4 01       	movw	r30, r8
    2818:	10 82       	st	Z, r1
    281a:	12 c0       	rjmp	.+36     	; 0x2840 <vfscanf+0x202>
    281c:	00 62       	ori	r16, 0x20	; 32
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <vfscanf+0x1e8>
    2820:	00 61       	ori	r16, 0x10	; 16
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <vfscanf+0x1e8>
    2824:	00 64       	ori	r16, 0x40	; 64
    2826:	20 2f       	mov	r18, r16
    2828:	a4 01       	movw	r20, r8
    282a:	6f 2d       	mov	r22, r15
    282c:	c6 01       	movw	r24, r12
    282e:	0e 94 cf 11 	call	0x239e	; 0x239e <conv_int>
    2832:	81 11       	cpse	r24, r1
    2834:	05 c0       	rjmp	.+10     	; 0x2840 <vfscanf+0x202>
    2836:	f6 01       	movw	r30, r12
    2838:	83 81       	ldd	r24, Z+3	; 0x03
    283a:	80 73       	andi	r24, 0x30	; 48
    283c:	29 f4       	brne	.+10     	; 0x2848 <vfscanf+0x20a>
    283e:	06 c0       	rjmp	.+12     	; 0x284c <vfscanf+0x20e>
    2840:	00 fd       	sbrc	r16, 0
    2842:	0a cf       	rjmp	.-492    	; 0x2658 <vfscanf+0x1a>
    2844:	53 94       	inc	r5
    2846:	08 cf       	rjmp	.-496    	; 0x2658 <vfscanf+0x1a>
    2848:	55 20       	and	r5, r5
    284a:	19 f0       	breq	.+6      	; 0x2852 <vfscanf+0x214>
    284c:	85 2d       	mov	r24, r5
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <vfscanf+0x218>
    2852:	8f ef       	ldi	r24, 0xFF	; 255
    2854:	9f ef       	ldi	r25, 0xFF	; 255
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	ef e0       	ldi	r30, 0x0F	; 15
    285c:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__epilogue_restores__+0x6>

00002860 <isspace>:
    2860:	91 11       	cpse	r25, r1
    2862:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__ctype_isfalse>
    2866:	80 32       	cpi	r24, 0x20	; 32
    2868:	19 f0       	breq	.+6      	; 0x2870 <isspace+0x10>
    286a:	89 50       	subi	r24, 0x09	; 9
    286c:	85 50       	subi	r24, 0x05	; 5
    286e:	c8 f7       	brcc	.-14     	; 0x2862 <isspace+0x2>
    2870:	08 95       	ret

00002872 <strchr_P>:
    2872:	fc 01       	movw	r30, r24
    2874:	05 90       	lpm	r0, Z+
    2876:	06 16       	cp	r0, r22
    2878:	21 f0       	breq	.+8      	; 0x2882 <strchr_P+0x10>
    287a:	00 20       	and	r0, r0
    287c:	d9 f7       	brne	.-10     	; 0x2874 <strchr_P+0x2>
    287e:	c0 01       	movw	r24, r0
    2880:	08 95       	ret
    2882:	31 97       	sbiw	r30, 0x01	; 1
    2884:	cf 01       	movw	r24, r30
    2886:	08 95       	ret

00002888 <fgetc>:
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	ec 01       	movw	r28, r24
    288e:	2b 81       	ldd	r18, Y+3	; 0x03
    2890:	20 ff       	sbrs	r18, 0
    2892:	33 c0       	rjmp	.+102    	; 0x28fa <fgetc+0x72>
    2894:	26 ff       	sbrs	r18, 6
    2896:	0a c0       	rjmp	.+20     	; 0x28ac <fgetc+0x24>
    2898:	2f 7b       	andi	r18, 0xBF	; 191
    289a:	2b 83       	std	Y+3, r18	; 0x03
    289c:	8e 81       	ldd	r24, Y+6	; 0x06
    289e:	9f 81       	ldd	r25, Y+7	; 0x07
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	9f 83       	std	Y+7, r25	; 0x07
    28a4:	8e 83       	std	Y+6, r24	; 0x06
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	29 c0       	rjmp	.+82     	; 0x28fe <fgetc+0x76>
    28ac:	22 ff       	sbrs	r18, 2
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <fgetc+0x46>
    28b0:	e8 81       	ld	r30, Y
    28b2:	f9 81       	ldd	r31, Y+1	; 0x01
    28b4:	80 81       	ld	r24, Z
    28b6:	08 2e       	mov	r0, r24
    28b8:	00 0c       	add	r0, r0
    28ba:	99 0b       	sbc	r25, r25
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	19 f4       	brne	.+6      	; 0x28c6 <fgetc+0x3e>
    28c0:	20 62       	ori	r18, 0x20	; 32
    28c2:	2b 83       	std	Y+3, r18	; 0x03
    28c4:	1a c0       	rjmp	.+52     	; 0x28fa <fgetc+0x72>
    28c6:	31 96       	adiw	r30, 0x01	; 1
    28c8:	f9 83       	std	Y+1, r31	; 0x01
    28ca:	e8 83       	st	Y, r30
    28cc:	0e c0       	rjmp	.+28     	; 0x28ea <fgetc+0x62>
    28ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    28d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    28d2:	09 95       	icall
    28d4:	97 ff       	sbrs	r25, 7
    28d6:	09 c0       	rjmp	.+18     	; 0x28ea <fgetc+0x62>
    28d8:	2b 81       	ldd	r18, Y+3	; 0x03
    28da:	01 96       	adiw	r24, 0x01	; 1
    28dc:	11 f0       	breq	.+4      	; 0x28e2 <fgetc+0x5a>
    28de:	80 e2       	ldi	r24, 0x20	; 32
    28e0:	01 c0       	rjmp	.+2      	; 0x28e4 <fgetc+0x5c>
    28e2:	80 e1       	ldi	r24, 0x10	; 16
    28e4:	82 2b       	or	r24, r18
    28e6:	8b 83       	std	Y+3, r24	; 0x03
    28e8:	08 c0       	rjmp	.+16     	; 0x28fa <fgetc+0x72>
    28ea:	2e 81       	ldd	r18, Y+6	; 0x06
    28ec:	3f 81       	ldd	r19, Y+7	; 0x07
    28ee:	2f 5f       	subi	r18, 0xFF	; 255
    28f0:	3f 4f       	sbci	r19, 0xFF	; 255
    28f2:	3f 83       	std	Y+7, r19	; 0x07
    28f4:	2e 83       	std	Y+6, r18	; 0x06
    28f6:	99 27       	eor	r25, r25
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <fgetc+0x76>
    28fa:	8f ef       	ldi	r24, 0xFF	; 255
    28fc:	9f ef       	ldi	r25, 0xFF	; 255
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	08 95       	ret

00002904 <ungetc>:
    2904:	fb 01       	movw	r30, r22
    2906:	23 81       	ldd	r18, Z+3	; 0x03
    2908:	20 ff       	sbrs	r18, 0
    290a:	12 c0       	rjmp	.+36     	; 0x2930 <ungetc+0x2c>
    290c:	26 fd       	sbrc	r18, 6
    290e:	10 c0       	rjmp	.+32     	; 0x2930 <ungetc+0x2c>
    2910:	8f 3f       	cpi	r24, 0xFF	; 255
    2912:	3f ef       	ldi	r19, 0xFF	; 255
    2914:	93 07       	cpc	r25, r19
    2916:	61 f0       	breq	.+24     	; 0x2930 <ungetc+0x2c>
    2918:	82 83       	std	Z+2, r24	; 0x02
    291a:	2f 7d       	andi	r18, 0xDF	; 223
    291c:	20 64       	ori	r18, 0x40	; 64
    291e:	23 83       	std	Z+3, r18	; 0x03
    2920:	26 81       	ldd	r18, Z+6	; 0x06
    2922:	37 81       	ldd	r19, Z+7	; 0x07
    2924:	21 50       	subi	r18, 0x01	; 1
    2926:	31 09       	sbc	r19, r1
    2928:	37 83       	std	Z+7, r19	; 0x07
    292a:	26 83       	std	Z+6, r18	; 0x06
    292c:	99 27       	eor	r25, r25
    292e:	08 95       	ret
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	9f ef       	ldi	r25, 0xFF	; 255
    2934:	08 95       	ret

00002936 <__ctype_isfalse>:
    2936:	99 27       	eor	r25, r25
    2938:	88 27       	eor	r24, r24

0000293a <__ctype_istrue>:
    293a:	08 95       	ret

0000293c <_exit>:
    293c:	f8 94       	cli

0000293e <__stop_program>:
    293e:	ff cf       	rjmp	.-2      	; 0x293e <__stop_program>
