
avr_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  0000350a  0000359e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000350a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  00800152  00800152  000035f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000364c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  0000368c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e62  00000000  00000000  000039fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015d7  00000000  00000000  0000785e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002480  00000000  00000000  00008e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b7c  00000000  00000000  0000b2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010e2  00000000  00000000  0000be34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e38  00000000  00000000  0000cf16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00010d4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 01 	jmp	0x300	; 0x300 <__ctors_end>
       4:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_1>
       8:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_2>
       c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      10:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      14:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      18:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      1c:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_7>
      20:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      24:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__vector_9>
      28:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_10>
      2c:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__vector_11>
      30:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      34:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      38:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      3c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      40:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      44:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_17>
      48:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      4c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      50:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      54:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      58:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      5c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      60:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      64:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      68:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      6c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      70:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      74:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      78:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      7c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      80:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_32>
      84:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      88:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      8c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      90:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      94:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      98:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_38>
      9c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      a0:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      a4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      a8:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__bad_interrupt>
      ac:	66 05       	cpc	r22, r6
      ae:	52 05       	cpc	r21, r2
      b0:	79 05       	cpc	r23, r9
      b2:	52 05       	cpc	r21, r2
      b4:	79 05       	cpc	r23, r9
      b6:	79 05       	cpc	r23, r9
      b8:	66 05       	cpc	r22, r6
      ba:	66 05       	cpc	r22, r6
      bc:	79 05       	cpc	r23, r9
      be:	79 05       	cpc	r23, r9
      c0:	52 05       	cpc	r21, r2
      c2:	79 05       	cpc	r23, r9
      c4:	52 05       	cpc	r21, r2
      c6:	66 05       	cpc	r22, r6
      c8:	cc 05       	cpc	r28, r12
      ca:	b8 05       	cpc	r27, r8
      cc:	df 05       	cpc	r29, r15
      ce:	b8 05       	cpc	r27, r8
      d0:	df 05       	cpc	r29, r15
      d2:	df 05       	cpc	r29, r15
      d4:	cc 05       	cpc	r28, r12
      d6:	cc 05       	cpc	r28, r12
      d8:	df 05       	cpc	r29, r15
      da:	df 05       	cpc	r29, r15
      dc:	b8 05       	cpc	r27, r8
      de:	df 05       	cpc	r29, r15
      e0:	b8 05       	cpc	r27, r8
      e2:	cc 05       	cpc	r28, r12
      e4:	32 06       	cpc	r3, r18
      e6:	1e 06       	cpc	r1, r30
      e8:	45 06       	cpc	r4, r21
      ea:	1e 06       	cpc	r1, r30
      ec:	45 06       	cpc	r4, r21
      ee:	45 06       	cpc	r4, r21
      f0:	32 06       	cpc	r3, r18
      f2:	32 06       	cpc	r3, r18
      f4:	45 06       	cpc	r4, r21
      f6:	45 06       	cpc	r4, r21
      f8:	1e 06       	cpc	r1, r30
      fa:	45 06       	cpc	r4, r21
      fc:	1e 06       	cpc	r1, r30
      fe:	32 06       	cpc	r3, r18
     100:	9d 06       	cpc	r9, r29
     102:	89 06       	cpc	r8, r25
     104:	b0 06       	cpc	r11, r16
     106:	89 06       	cpc	r8, r25
     108:	b0 06       	cpc	r11, r16
     10a:	b0 06       	cpc	r11, r16
     10c:	9d 06       	cpc	r9, r29
     10e:	9d 06       	cpc	r9, r29
     110:	b0 06       	cpc	r11, r16
     112:	b0 06       	cpc	r11, r16
     114:	89 06       	cpc	r8, r25
     116:	b0 06       	cpc	r11, r16
     118:	89 06       	cpc	r8, r25
     11a:	9d 06       	cpc	r9, r29

0000011c <__trampolines_end>:
     11c:	6e 61       	ori	r22, 0x1E	; 30
     11e:	6e 00       	.word	0x006e	; ????

00000120 <__c.2332>:
     120:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     130:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     140:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     150:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     160:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     170:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     180:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     190:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1a0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1b0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1c0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1d0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1e0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1f0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     200:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     210:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000021e <__c.2474>:
     21e:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000022a <__c.2442>:
     22a:	49 4d 55 20 46 61 69 6c 65 64 0d 0a 00              IMU Failed...

00000237 <__c.2440>:
     237:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

00000242 <__c.2438>:
     242:	4d 32 20 72 65 61 64 79 0d 0a 00                    M2 ready...

0000024d <descriptor_list>:
     24d:	00 01 00 00 e4 02 12 00 02 00 00 a1 02 43 00 03     .............C..
     25d:	00 00 9d 02 04 01 03 09 04 89 02 12 02 03 09 04     ................
     26d:	81 02 06 03 03 09 04 77 02 08                       .......w..

00000277 <string3>:
     277:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000281 <string2>:
     281:	06 03 4d 00 32 00 00 00                             ..M.2...

00000289 <string1>:
     289:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     299:	65 00 00 00                                         e...

0000029d <string0>:
     29d:	04 03 09 04                                         ....

000002a1 <config1_descriptor>:
     2a1:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     2b1:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     2c1:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     2d1:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     2e1:	40 00 00                                            @..

000002e4 <device_descriptor>:
     2e4:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     2f4:	03 01                                               ..

000002f6 <endpoint_config_table>:
     2f6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000300 <__ctors_end>:
     300:	11 24       	eor	r1, r1
     302:	1f be       	out	0x3f, r1	; 63
     304:	cf ef       	ldi	r28, 0xFF	; 255
     306:	da e0       	ldi	r29, 0x0A	; 10
     308:	de bf       	out	0x3e, r29	; 62
     30a:	cd bf       	out	0x3d, r28	; 61

0000030c <__do_copy_data>:
     30c:	11 e0       	ldi	r17, 0x01	; 1
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b1 e0       	ldi	r27, 0x01	; 1
     312:	ea e0       	ldi	r30, 0x0A	; 10
     314:	f5 e3       	ldi	r31, 0x35	; 53
     316:	02 c0       	rjmp	.+4      	; 0x31c <__do_copy_data+0x10>
     318:	05 90       	lpm	r0, Z+
     31a:	0d 92       	st	X+, r0
     31c:	a2 35       	cpi	r26, 0x52	; 82
     31e:	b1 07       	cpc	r27, r17
     320:	d9 f7       	brne	.-10     	; 0x318 <__do_copy_data+0xc>

00000322 <__do_clear_bss>:
     322:	21 e0       	ldi	r18, 0x01	; 1
     324:	a2 e5       	ldi	r26, 0x52	; 82
     326:	b1 e0       	ldi	r27, 0x01	; 1
     328:	01 c0       	rjmp	.+2      	; 0x32c <.do_clear_bss_start>

0000032a <.do_clear_bss_loop>:
     32a:	1d 92       	st	X+, r1

0000032c <.do_clear_bss_start>:
     32c:	a3 3f       	cpi	r26, 0xF3	; 243
     32e:	b2 07       	cpc	r27, r18
     330:	e1 f7       	brne	.-8      	; 0x32a <.do_clear_bss_loop>
     332:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
     336:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <_exit>

0000033a <__bad_interrupt>:
     33a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033e <timer4_init_50Hz>:
   16 MHz / 2048 = 7812.5 Hz
   7812.5 Hz × 0.01 s ≈ 78 → OCR4A = 78 ⇒ 100.08 Hz         */
static void timer4_init_50Hz(void)
{
    /* reset all Timer-4 control registers (mandatory for this timer) */
    TCCR4A = 0;
     33e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    TCCR4B = 0;
     342:	e1 ec       	ldi	r30, 0xC1	; 193
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	10 82       	st	Z, r1
    TCCR4C = 0;
     348:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    TCCR4D = 0; // set WGM40 and WGM41 to normal mode
     34c:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7f80c3>

    TCNT4 = 0;  /* start from zero                        */
     350:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__TEXT_REGION_LENGTH__+0x7f80bf>
     354:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__TEXT_REGION_LENGTH__+0x7f80be>
    OCR4A = 78; /* compare after 312 counts (~20 ms)      */
     358:	8e e4       	ldi	r24, 0x4E	; 78
     35a:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7f80cf>

    TIMSK4 |= _BV(OCIE4A); /* enable Compare-A interrupt             */
     35e:	a2 e7       	ldi	r26, 0x72	; 114
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	8c 91       	ld	r24, X
     364:	80 64       	ori	r24, 0x40	; 64
     366:	8c 93       	st	X, r24

    /* start clock: prescaler = 2048  →  CS43 | CS41                        */
    TCCR4B |= _BV(CS43) | _BV(CS42);
     368:	80 81       	ld	r24, Z
     36a:	8c 60       	ori	r24, 0x0C	; 12
     36c:	80 83       	st	Z, r24
     36e:	08 95       	ret

00000370 <parse_jetson_line>:

    extern float rx_distance, rx_angle, rx_lin_acc, rx_max_ang_acc;
    extern uint16_t rx_max_vel, rx_max_omega, rx_last_vel, rx_last_omega;

    // Note: "%f" for floats, "%u" for uint16_t on AVR
    int cnt = sscanf(line,
     370:	23 e5       	ldi	r18, 0x53	; 83
     372:	31 e0       	ldi	r19, 0x01	; 1
     374:	3f 93       	push	r19
     376:	2f 93       	push	r18
     378:	27 e5       	ldi	r18, 0x57	; 87
     37a:	31 e0       	ldi	r19, 0x01	; 1
     37c:	3f 93       	push	r19
     37e:	2f 93       	push	r18
     380:	2b e5       	ldi	r18, 0x5B	; 91
     382:	31 e0       	ldi	r19, 0x01	; 1
     384:	3f 93       	push	r19
     386:	2f 93       	push	r18
     388:	2d e5       	ldi	r18, 0x5D	; 93
     38a:	31 e0       	ldi	r19, 0x01	; 1
     38c:	3f 93       	push	r19
     38e:	2f 93       	push	r18
     390:	2f e5       	ldi	r18, 0x5F	; 95
     392:	31 e0       	ldi	r19, 0x01	; 1
     394:	3f 93       	push	r19
     396:	2f 93       	push	r18
     398:	21 e6       	ldi	r18, 0x61	; 97
     39a:	31 e0       	ldi	r19, 0x01	; 1
     39c:	3f 93       	push	r19
     39e:	2f 93       	push	r18
     3a0:	23 e6       	ldi	r18, 0x63	; 99
     3a2:	31 e0       	ldi	r19, 0x01	; 1
     3a4:	3f 93       	push	r19
     3a6:	2f 93       	push	r18
     3a8:	27 e6       	ldi	r18, 0x67	; 103
     3aa:	31 e0       	ldi	r19, 0x01	; 1
     3ac:	3f 93       	push	r19
     3ae:	2f 93       	push	r18
     3b0:	27 e0       	ldi	r18, 0x07	; 7
     3b2:	31 e0       	ldi	r19, 0x01	; 1
     3b4:	3f 93       	push	r19
     3b6:	2f 93       	push	r18
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <sscanf>
                     &rx_max_omega,
                     &rx_last_vel,
                     &rx_last_omega,
                     &rx_lin_acc,
                     &rx_max_ang_acc);
    return (cnt == 8) ? 1 : 0;
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	4d b7       	in	r20, 0x3d	; 61
     3c4:	5e b7       	in	r21, 0x3e	; 62
     3c6:	4c 5e       	subi	r20, 0xEC	; 236
     3c8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	5e bf       	out	0x3e, r21	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	4d bf       	out	0x3d, r20	; 61
     3d4:	08 97       	sbiw	r24, 0x08	; 8
     3d6:	09 f0       	breq	.+2      	; 0x3da <parse_jetson_line+0x6a>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
}
     3da:	82 2f       	mov	r24, r18
     3dc:	08 95       	ret

000003de <receive_from_jetson>:

static void receive_from_jetson(void)
{
    while (m_usb_rx_available())
     3de:	21 c0       	rjmp	.+66     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
    {
        char c = m_usb_rx_char();
     3e0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <m_usb_rx_char>
        // start parsing if new line detected
        if (c == '\n' || c == '\r')
     3e4:	8a 30       	cpi	r24, 0x0A	; 10
     3e6:	11 f0       	breq	.+4      	; 0x3ec <receive_from_jetson+0xe>
     3e8:	8d 30       	cpi	r24, 0x0D	; 13
     3ea:	79 f4       	brne	.+30     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
        {
            if (rx_index > 0)
     3ec:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <rx_index>
     3f0:	ee 23       	and	r30, r30
     3f2:	b9 f0       	breq	.+46     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
            {
                rx_buf[rx_index] = '\0';
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e3 59       	subi	r30, 0x93	; 147
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	10 82       	st	Z, r1
                if (parse_jetson_line(rx_buf))
     3fc:	8d e6       	ldi	r24, 0x6D	; 109
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 b8 01 	call	0x370	; 0x370 <parse_jetson_line>
                {
                }
                rx_index = 0;
     404:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <rx_index>
     408:	0c c0       	rjmp	.+24     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
            }
        }
        else if (rx_index < (RX_BUF_SIZE - 1))
     40a:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <rx_index>
     40e:	ef 33       	cpi	r30, 0x3F	; 63
     410:	40 f4       	brcc	.+16     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
        {
            rx_buf[rx_index++] = c;
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	9e 0f       	add	r25, r30
     416:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <rx_index>
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	e3 59       	subi	r30, 0x93	; 147
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	80 83       	st	Z, r24
    return (cnt == 8) ? 1 : 0;
}

static void receive_from_jetson(void)
{
    while (m_usb_rx_available())
     422:	0e 94 04 0a 	call	0x1408	; 0x1408 <m_usb_rx_available>
     426:	81 11       	cpse	r24, r1
     428:	db cf       	rjmp	.-74     	; 0x3e0 <receive_from_jetson+0x2>
        else if (rx_index < (RX_BUF_SIZE - 1))
        {
            rx_buf[rx_index++] = c;
        }
    }
}
     42a:	08 95       	ret

0000042c <usb_send_ram>:
    m_usb_tx_push();
}

/* ------------------- Tiny helper ------------------------- */
static void usb_send_ram(const char *s)
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ec 01       	movw	r28, r24
    while (*s)
     432:	03 c0       	rjmp	.+6      	; 0x43a <usb_send_ram+0xe>
        m_usb_tx_char(*s++);
     434:	21 96       	adiw	r28, 0x01	; 1
     436:	0e 94 13 0a 	call	0x1426	; 0x1426 <m_usb_tx_char>
}

/* ------------------- Tiny helper ------------------------- */
static void usb_send_ram(const char *s)
{
    while (*s)
     43a:	88 81       	ld	r24, Y
     43c:	81 11       	cpse	r24, r1
     43e:	fa cf       	rjmp	.-12     	; 0x434 <usb_send_ram+0x8>
        m_usb_tx_char(*s++);
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <send_telemetry>:
    flag_telemetry_due = 1; /* signal main loop           */
}

/* ------------------- TELEMETRY SENDER (called from main) ----------------- */
static void send_telemetry(bool emerg)
{
     446:	2f 92       	push	r2
     448:	3f 92       	push	r3
     44a:	4f 92       	push	r4
     44c:	5f 92       	push	r5
     44e:	6f 92       	push	r6
     450:	7f 92       	push	r7
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	c1 5b       	subi	r28, 0xB1	; 177
     470:	d1 09       	sbc	r29, r1
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
     47c:	c9 55       	subi	r28, 0x59	; 89
     47e:	df 4f       	sbci	r29, 0xFF	; 255
     480:	88 83       	st	Y, r24
     482:	c7 5a       	subi	r28, 0xA7	; 167
     484:	d0 40       	sbci	r29, 0x00	; 0
    char line[160];

    /* ---------- IMU ---------- */
    int16_t h16, r16, p16;
    bno055_get_euler(&h16, &r16, &p16);
     486:	ae 01       	movw	r20, r28
     488:	4b 55       	subi	r20, 0x5B	; 91
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	be 01       	movw	r22, r28
     48e:	6d 55       	subi	r22, 0x5D	; 93
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	ce 01       	movw	r24, r28
     494:	8f 55       	subi	r24, 0x5F	; 95
     496:	9f 4f       	sbci	r25, 0xFF	; 255
     498:	0e 94 22 08 	call	0x1044	; 0x1044 <bno055_get_euler>

    float h = h16 / 16.0f;
     49c:	cf 55       	subi	r28, 0x5F	; 95
     49e:	df 4f       	sbci	r29, 0xFF	; 255
     4a0:	68 81       	ld	r22, Y
     4a2:	79 81       	ldd	r23, Y+1	; 0x01
     4a4:	c1 5a       	subi	r28, 0xA1	; 161
     4a6:	d0 40       	sbci	r29, 0x00	; 0
     4a8:	07 2e       	mov	r0, r23
     4aa:	00 0c       	add	r0, r0
     4ac:	88 0b       	sbc	r24, r24
     4ae:	99 0b       	sbc	r25, r25
     4b0:	0e 94 2f 10 	call	0x205e	; 0x205e <__floatsisf>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e8       	ldi	r20, 0x80	; 128
     4ba:	5d e3       	ldi	r21, 0x3D	; 61
     4bc:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
     4c0:	c8 55       	subi	r28, 0x58	; 88
     4c2:	df 4f       	sbci	r29, 0xFF	; 255
     4c4:	68 83       	st	Y, r22
     4c6:	c8 5a       	subi	r28, 0xA8	; 168
     4c8:	d0 40       	sbci	r29, 0x00	; 0
     4ca:	c7 55       	subi	r28, 0x57	; 87
     4cc:	df 4f       	sbci	r29, 0xFF	; 255
     4ce:	78 83       	st	Y, r23
     4d0:	c9 5a       	subi	r28, 0xA9	; 169
     4d2:	d0 40       	sbci	r29, 0x00	; 0
     4d4:	c6 55       	subi	r28, 0x56	; 86
     4d6:	df 4f       	sbci	r29, 0xFF	; 255
     4d8:	88 83       	st	Y, r24
     4da:	ca 5a       	subi	r28, 0xAA	; 170
     4dc:	d0 40       	sbci	r29, 0x00	; 0
     4de:	c5 55       	subi	r28, 0x55	; 85
     4e0:	df 4f       	sbci	r29, 0xFF	; 255
     4e2:	98 83       	st	Y, r25
     4e4:	cb 5a       	subi	r28, 0xAB	; 171
     4e6:	d0 40       	sbci	r29, 0x00	; 0
    float r = r16 / 16.0f;
     4e8:	cd 55       	subi	r28, 0x5D	; 93
     4ea:	df 4f       	sbci	r29, 0xFF	; 255
     4ec:	68 81       	ld	r22, Y
     4ee:	79 81       	ldd	r23, Y+1	; 0x01
     4f0:	c3 5a       	subi	r28, 0xA3	; 163
     4f2:	d0 40       	sbci	r29, 0x00	; 0
     4f4:	07 2e       	mov	r0, r23
     4f6:	00 0c       	add	r0, r0
     4f8:	88 0b       	sbc	r24, r24
     4fa:	99 0b       	sbc	r25, r25
     4fc:	0e 94 2f 10 	call	0x205e	; 0x205e <__floatsisf>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e8       	ldi	r20, 0x80	; 128
     506:	5d e3       	ldi	r21, 0x3D	; 61
     508:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
     50c:	c4 55       	subi	r28, 0x54	; 84
     50e:	df 4f       	sbci	r29, 0xFF	; 255
     510:	68 83       	st	Y, r22
     512:	cc 5a       	subi	r28, 0xAC	; 172
     514:	d0 40       	sbci	r29, 0x00	; 0
     516:	c3 55       	subi	r28, 0x53	; 83
     518:	df 4f       	sbci	r29, 0xFF	; 255
     51a:	78 83       	st	Y, r23
     51c:	cd 5a       	subi	r28, 0xAD	; 173
     51e:	d0 40       	sbci	r29, 0x00	; 0
     520:	c2 55       	subi	r28, 0x52	; 82
     522:	df 4f       	sbci	r29, 0xFF	; 255
     524:	88 83       	st	Y, r24
     526:	ce 5a       	subi	r28, 0xAE	; 174
     528:	d0 40       	sbci	r29, 0x00	; 0
     52a:	c1 55       	subi	r28, 0x51	; 81
     52c:	df 4f       	sbci	r29, 0xFF	; 255
     52e:	98 83       	st	Y, r25
     530:	cf 5a       	subi	r28, 0xAF	; 175
     532:	d0 40       	sbci	r29, 0x00	; 0
    float p = p16 / 16.0f;
     534:	cb 55       	subi	r28, 0x5B	; 91
     536:	df 4f       	sbci	r29, 0xFF	; 255
     538:	68 81       	ld	r22, Y
     53a:	79 81       	ldd	r23, Y+1	; 0x01
     53c:	c5 5a       	subi	r28, 0xA5	; 165
     53e:	d0 40       	sbci	r29, 0x00	; 0
     540:	07 2e       	mov	r0, r23
     542:	00 0c       	add	r0, r0
     544:	88 0b       	sbc	r24, r24
     546:	99 0b       	sbc	r25, r25
     548:	0e 94 2f 10 	call	0x205e	; 0x205e <__floatsisf>
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	5d e3       	ldi	r21, 0x3D	; 61
     554:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
     558:	c0 55       	subi	r28, 0x50	; 80
     55a:	df 4f       	sbci	r29, 0xFF	; 255
     55c:	68 83       	st	Y, r22
     55e:	c0 5b       	subi	r28, 0xB0	; 176
     560:	d0 40       	sbci	r29, 0x00	; 0
     562:	cf 54       	subi	r28, 0x4F	; 79
     564:	df 4f       	sbci	r29, 0xFF	; 255
     566:	78 83       	st	Y, r23
     568:	c1 5b       	subi	r28, 0xB1	; 177
     56a:	d0 40       	sbci	r29, 0x00	; 0
     56c:	18 2f       	mov	r17, r24
     56e:	09 2f       	mov	r16, r25

    // uint8_t cal = bno055_is_fully_calibrated() ? 1u : 0u;

    /* ---------- ADC ---------- */
    uint16_t vbat_main = analog_get_battery_1_mV();
     570:	0e 94 91 04 	call	0x922	; 0x922 <analog_get_battery_1_mV>
     574:	b8 2e       	mov	r11, r24
     576:	a9 2e       	mov	r10, r25
    uint16_t vbat_aux = analog_get_battery_2_mV();
     578:	0e 94 a1 04 	call	0x942	; 0x942 <analog_get_battery_2_mV>
     57c:	98 2e       	mov	r9, r24
     57e:	89 2e       	mov	r8, r25
    uint16_t cliffL = analog_get_cliff_left();
     580:	0e 94 b1 04 	call	0x962	; 0x962 <analog_get_cliff_left>
     584:	78 2e       	mov	r7, r24
     586:	69 2e       	mov	r6, r25
    uint16_t cliffF = analog_get_cliff_front();
     588:	0e 94 b5 04 	call	0x96a	; 0x96a <analog_get_cliff_front>
     58c:	58 2e       	mov	r5, r24
     58e:	49 2e       	mov	r4, r25
    uint16_t cliffR = analog_get_cliff_right();
     590:	0e 94 b9 04 	call	0x972	; 0x972 <analog_get_cliff_right>
     594:	38 2e       	mov	r3, r24
     596:	29 2e       	mov	r2, r25

    /* ---------- Encoders ---------- */
    int32_t encL = encoder_get_left();
     598:	0e 94 bf 06 	call	0xd7e	; 0xd7e <encoder_get_left>
     59c:	f6 2e       	mov	r15, r22
     59e:	e7 2e       	mov	r14, r23
     5a0:	d8 2e       	mov	r13, r24
     5a2:	c9 2e       	mov	r12, r25
    int32_t encR = encoder_get_right();
     5a4:	0e 94 ca 06 	call	0xd94	; 0xd94 <encoder_get_right>

    /* ---------- Format & ship ---------- */
    /* Packet Structure: { Yaw Roll Pitch encoderLeft encoderRight bat1Voltage bat2Voltage LeftCliff CenterCliff RightCliff emergencyFlag }  */
    snprintf(line, sizeof(line),
     5a8:	1f 92       	push	r1
     5aa:	c9 55       	subi	r28, 0x59	; 89
     5ac:	df 4f       	sbci	r29, 0xFF	; 255
     5ae:	28 81       	ld	r18, Y
     5b0:	c7 5a       	subi	r28, 0xA7	; 167
     5b2:	d0 40       	sbci	r29, 0x00	; 0
     5b4:	2f 93       	push	r18
     5b6:	2f 92       	push	r2
     5b8:	3f 92       	push	r3
     5ba:	4f 92       	push	r4
     5bc:	5f 92       	push	r5
     5be:	6f 92       	push	r6
     5c0:	7f 92       	push	r7
     5c2:	8f 92       	push	r8
     5c4:	9f 92       	push	r9
     5c6:	af 92       	push	r10
     5c8:	bf 92       	push	r11
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	7f 93       	push	r23
     5d0:	6f 93       	push	r22
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 54       	subi	r28, 0x4F	; 79
     5e0:	df 4f       	sbci	r29, 0xFF	; 255
     5e2:	88 81       	ld	r24, Y
     5e4:	c1 5b       	subi	r28, 0xB1	; 177
     5e6:	d0 40       	sbci	r29, 0x00	; 0
     5e8:	8f 93       	push	r24
     5ea:	c0 55       	subi	r28, 0x50	; 80
     5ec:	df 4f       	sbci	r29, 0xFF	; 255
     5ee:	98 81       	ld	r25, Y
     5f0:	c0 5b       	subi	r28, 0xB0	; 176
     5f2:	d0 40       	sbci	r29, 0x00	; 0
     5f4:	9f 93       	push	r25
     5f6:	c1 55       	subi	r28, 0x51	; 81
     5f8:	df 4f       	sbci	r29, 0xFF	; 255
     5fa:	28 81       	ld	r18, Y
     5fc:	cf 5a       	subi	r28, 0xAF	; 175
     5fe:	d0 40       	sbci	r29, 0x00	; 0
     600:	2f 93       	push	r18
     602:	c2 55       	subi	r28, 0x52	; 82
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	88 81       	ld	r24, Y
     608:	ce 5a       	subi	r28, 0xAE	; 174
     60a:	d0 40       	sbci	r29, 0x00	; 0
     60c:	8f 93       	push	r24
     60e:	c3 55       	subi	r28, 0x53	; 83
     610:	df 4f       	sbci	r29, 0xFF	; 255
     612:	98 81       	ld	r25, Y
     614:	cd 5a       	subi	r28, 0xAD	; 173
     616:	d0 40       	sbci	r29, 0x00	; 0
     618:	9f 93       	push	r25
     61a:	c4 55       	subi	r28, 0x54	; 84
     61c:	df 4f       	sbci	r29, 0xFF	; 255
     61e:	28 81       	ld	r18, Y
     620:	cc 5a       	subi	r28, 0xAC	; 172
     622:	d0 40       	sbci	r29, 0x00	; 0
     624:	2f 93       	push	r18
     626:	c5 55       	subi	r28, 0x55	; 85
     628:	df 4f       	sbci	r29, 0xFF	; 255
     62a:	88 81       	ld	r24, Y
     62c:	cb 5a       	subi	r28, 0xAB	; 171
     62e:	d0 40       	sbci	r29, 0x00	; 0
     630:	8f 93       	push	r24
     632:	c6 55       	subi	r28, 0x56	; 86
     634:	df 4f       	sbci	r29, 0xFF	; 255
     636:	98 81       	ld	r25, Y
     638:	ca 5a       	subi	r28, 0xAA	; 170
     63a:	d0 40       	sbci	r29, 0x00	; 0
     63c:	9f 93       	push	r25
     63e:	c7 55       	subi	r28, 0x57	; 87
     640:	df 4f       	sbci	r29, 0xFF	; 255
     642:	28 81       	ld	r18, Y
     644:	c9 5a       	subi	r28, 0xA9	; 169
     646:	d0 40       	sbci	r29, 0x00	; 0
     648:	2f 93       	push	r18
     64a:	c8 55       	subi	r28, 0x58	; 88
     64c:	df 4f       	sbci	r29, 0xFF	; 255
     64e:	88 81       	ld	r24, Y
     650:	c8 5a       	subi	r28, 0xA8	; 168
     652:	d0 40       	sbci	r29, 0x00	; 0
     654:	8f 93       	push	r24
     656:	8f e1       	ldi	r24, 0x1F	; 31
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	1f 92       	push	r1
     660:	80 ea       	ldi	r24, 0xA0	; 160
     662:	8f 93       	push	r24
     664:	8e 01       	movw	r16, r28
     666:	0f 5f       	subi	r16, 0xFF	; 255
     668:	1f 4f       	sbci	r17, 0xFF	; 255
     66a:	1f 93       	push	r17
     66c:	0f 93       	push	r16
     66e:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <snprintf>
             "%6.2f %6.2f %6.2f %10ld %10ld %u %u %u %u %u %u\r\n", h, r, p, (long)encL, (long)encR, vbat_main, vbat_aux, cliffL, cliffF, cliffR, emerg);

    usb_send_ram(line);
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	c8 01       	movw	r24, r16
     67e:	0e 94 16 02 	call	0x42c	; 0x42c <usb_send_ram>
    m_usb_tx_push();
     682:	0e 94 57 0a 	call	0x14ae	; 0x14ae <m_usb_tx_push>
}
     686:	cf 54       	subi	r28, 0x4F	; 79
     688:	df 4f       	sbci	r29, 0xFF	; 255
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	bf 90       	pop	r11
     6a6:	af 90       	pop	r10
     6a8:	9f 90       	pop	r9
     6aa:	8f 90       	pop	r8
     6ac:	7f 90       	pop	r7
     6ae:	6f 90       	pop	r6
     6b0:	5f 90       	pop	r5
     6b2:	4f 90       	pop	r4
     6b4:	3f 90       	pop	r3
     6b6:	2f 90       	pop	r2
     6b8:	08 95       	ret

000006ba <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	81 ee       	ldi	r24, 0xE1	; 225
     6be:	94 e0       	ldi	r25, 0x04	; 4
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	80 40       	sbci	r24, 0x00	; 0
     6c4:	90 40       	sbci	r25, 0x00	; 0
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <main+0x6>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <main+0x10>
     6ca:	00 00       	nop
/* ====================================================*/
int main(void)
{
    /* ---- initialize everything ---- */
    _delay_ms(100);
    m_usb_init();
     6cc:	0e 94 cd 09 	call	0x139a	; 0x139a <m_usb_init>
    // If usb handshake fails, this will block the entire execution of the code, remove at production ready code
    //while (!m_usb_isconnected())
    //{
    //} /* wait for host terminal      */

    m_usb_tx_string("M2 ready\r\n");
     6d0:	82 e4       	ldi	r24, 0x42	; 66
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	0e 94 16 0c 	call	0x182c	; 0x182c <print_P>

    motors_init();
     6d8:	0e 94 65 08 	call	0x10ca	; 0x10ca <motors_init>
    encoder_init();
     6dc:	0e 94 bd 04 	call	0x97a	; 0x97a <encoder_init>
    analog_init();
     6e0:	0e 94 3c 04 	call	0x878	; 0x878 <analog_init>

    motors_enable_left(true);
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <motors_enable_left>
    motors_enable_right(true);
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <motors_enable_right>

    motors_set_dir_left(true);
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	0e 94 05 09 	call	0x120a	; 0x120a <motors_set_dir_left>
    motors_set_dir_right(false);
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 0f 09 	call	0x121e	; 0x121e <motors_set_dir_right>
     6fc:	8f e3       	ldi	r24, 0x3F	; 63
     6fe:	9f e1       	ldi	r25, 0x1F	; 31
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <main+0x46>
     704:	00 c0       	rjmp	.+0      	; 0x706 <main+0x4c>
     706:	00 00       	nop
    _delay_ms(2);
    motors_set_speed_left(100);
     708:	84 e6       	ldi	r24, 0x64	; 100
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 19 09 	call	0x1232	; 0x1232 <motors_set_speed_left>
    motors_set_speed_right(100);
     710:	84 e6       	ldi	r24, 0x64	; 100
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 4e 09 	call	0x129c	; 0x129c <motors_set_speed_right>
     718:	9f ef       	ldi	r25, 0xFF	; 255
     71a:	23 e2       	ldi	r18, 0x23	; 35
     71c:	84 ef       	ldi	r24, 0xF4	; 244
     71e:	91 50       	subi	r25, 0x01	; 1
     720:	20 40       	sbci	r18, 0x00	; 0
     722:	80 40       	sbci	r24, 0x00	; 0
     724:	e1 f7       	brne	.-8      	; 0x71e <main+0x64>
     726:	00 c0       	rjmp	.+0      	; 0x728 <main+0x6e>
     728:	00 00       	nop

    _delay_ms(5000);

    m_usb_tx_string("M2 ready\r\n");
     72a:	87 e3       	ldi	r24, 0x37	; 55
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	0e 94 16 0c 	call	0x182c	; 0x182c <print_P>

    twi_init();
     732:	0e 94 06 07 	call	0xe0c	; 0xe0c <twi_init>
    if (!bno055_init())
     736:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <bno055_init>
     73a:	81 11       	cpse	r24, r1
     73c:	04 c0       	rjmp	.+8      	; 0x746 <main+0x8c>
    {
        m_usb_tx_string("IMU Failed\r\n");
     73e:	8a e2       	ldi	r24, 0x2A	; 42
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	0e 94 16 0c 	call	0x182c	; 0x182c <print_P>
    }

    /* ---- start 50 Hz timer & enable global IRQs ---- */
    timer4_init_50Hz(); /* Timer-3 compare-match every 20 ms        */
     746:	0e 94 9f 01 	call	0x33e	; 0x33e <timer4_init_50Hz>
    sei();              /* global interrupt enable                 */
     74a:	78 94       	sei

    /* ---------------- MAIN LOOP ---------------------- */
    while (1)
    {
        // check for any incoming Jetson data
        receive_from_jetson();
     74c:	0e 94 ef 01 	call	0x3de	; 0x3de <receive_from_jetson>

        /* ---------- Emergency Button press status ---------- */
        bool emerg = encoder_emergency_hit();
     750:	0e 94 d5 06 	call	0xdaa	; 0xdaa <encoder_emergency_hit>
     754:	c8 2f       	mov	r28, r24

        if (flag_telemetry_due)
     756:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     75a:	88 23       	and	r24, r24
     75c:	29 f0       	breq	.+10     	; 0x768 <main+0xae>
        {
            send_telemetry(emerg);
     75e:	8c 2f       	mov	r24, r28
     760:	0e 94 23 02 	call	0x446	; 0x446 <send_telemetry>
            flag_telemetry_due = 0;
     764:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
        }

        if (emerg)
     768:	cc 23       	and	r28, r28
     76a:	81 f3       	breq	.-32     	; 0x74c <main+0x92>
        {
            if (profile_requested)
     76c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <profile_requested>
     770:	88 23       	and	r24, r24
     772:	09 f4       	brne	.+2      	; 0x776 <main+0xbc>
     774:	5f c0       	rjmp	.+190    	; 0x834 <main+0x17a>
            {
                // decide pure turn vs straight?line
                if (fabsf(rx_angle) > 0.01f && fabsf(rx_distance) < 1e-3f)
     776:	80 90 63 01 	lds	r8, 0x0163	; 0x800163 <rx_angle>
     77a:	90 90 64 01 	lds	r9, 0x0164	; 0x800164 <rx_angle+0x1>
     77e:	a0 90 65 01 	lds	r10, 0x0165	; 0x800165 <rx_angle+0x2>
     782:	b0 90 66 01 	lds	r11, 0x0166	; 0x800166 <rx_angle+0x3>
     786:	c5 01       	movw	r24, r10
     788:	b4 01       	movw	r22, r8
     78a:	9f 77       	andi	r25, 0x7F	; 127
     78c:	2a e0       	ldi	r18, 0x0A	; 10
     78e:	37 ed       	ldi	r19, 0xD7	; 215
     790:	43 e2       	ldi	r20, 0x23	; 35
     792:	5c e3       	ldi	r21, 0x3C	; 60
     794:	0e 94 df 10 	call	0x21be	; 0x21be <__gesf2>
     798:	18 16       	cp	r1, r24
     79a:	64 f5       	brge	.+88     	; 0x7f4 <main+0x13a>
     79c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <rx_distance>
     7a0:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_distance+0x1>
     7a4:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <rx_distance+0x2>
     7a8:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <rx_distance+0x3>
     7ac:	bc 01       	movw	r22, r24
     7ae:	cd 01       	movw	r24, r26
     7b0:	9f 77       	andi	r25, 0x7F	; 127
     7b2:	2f e6       	ldi	r18, 0x6F	; 111
     7b4:	32 e1       	ldi	r19, 0x12	; 18
     7b6:	43 e8       	ldi	r20, 0x83	; 131
     7b8:	5a e3       	ldi	r21, 0x3A	; 58
     7ba:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__cmpsf2>
     7be:	88 23       	and	r24, r24
     7c0:	cc f4       	brge	.+50     	; 0x7f4 <main+0x13a>
                {
                    profiler_turn_init(rx_angle,
     7c2:	c0 90 53 01 	lds	r12, 0x0153	; 0x800153 <rx_max_ang_acc>
     7c6:	d0 90 54 01 	lds	r13, 0x0154	; 0x800154 <rx_max_ang_acc+0x1>
     7ca:	e0 90 55 01 	lds	r14, 0x0155	; 0x800155 <rx_max_ang_acc+0x2>
     7ce:	f0 90 56 01 	lds	r15, 0x0156	; 0x800156 <rx_max_ang_acc+0x3>
     7d2:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <rx_max_omega>
     7d6:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <rx_max_omega+0x1>
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 2d 10 	call	0x205a	; 0x205a <__floatunsisf>
     7e2:	9b 01       	movw	r18, r22
     7e4:	ac 01       	movw	r20, r24
     7e6:	87 01       	movw	r16, r14
     7e8:	76 01       	movw	r14, r12
     7ea:	c5 01       	movw	r24, r10
     7ec:	b4 01       	movw	r22, r8
     7ee:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <profiler_turn_init>
     7f2:	1e c0       	rjmp	.+60     	; 0x830 <main+0x176>
                                       rx_max_omega,
                                       rx_max_ang_acc);
                }
                else
                {
                    profiler_init(rx_distance,
     7f4:	80 90 57 01 	lds	r8, 0x0157	; 0x800157 <rx_lin_acc>
     7f8:	90 90 58 01 	lds	r9, 0x0158	; 0x800158 <rx_lin_acc+0x1>
     7fc:	a0 90 59 01 	lds	r10, 0x0159	; 0x800159 <rx_lin_acc+0x2>
     800:	b0 90 5a 01 	lds	r11, 0x015A	; 0x80015a <rx_lin_acc+0x3>
     804:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <rx_max_vel>
     808:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <rx_max_vel+0x1>
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 2d 10 	call	0x205a	; 0x205a <__floatunsisf>
     814:	9b 01       	movw	r18, r22
     816:	ac 01       	movw	r20, r24
     818:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <rx_distance>
     81c:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <rx_distance+0x1>
     820:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_distance+0x2>
     824:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_distance+0x3>
     828:	85 01       	movw	r16, r10
     82a:	74 01       	movw	r14, r8
     82c:	0e 94 2e 0c 	call	0x185c	; 0x185c <profiler_init>
                                  rx_max_vel,
                                  rx_lin_acc);
                }
                profile_requested = false;
     830:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <profile_requested>
            }

            if (profiler_turn_is_running())
     834:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <profiler_turn_is_running>
     838:	88 23       	and	r24, r24
     83a:	19 f0       	breq	.+6      	; 0x842 <main+0x188>
            {
                profiler_turn_update();
     83c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <profiler_turn_update>
     840:	85 cf       	rjmp	.-246    	; 0x74c <main+0x92>
            }
            else if (profiler_is_running())
     842:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <profiler_is_running>
     846:	88 23       	and	r24, r24
     848:	09 f4       	brne	.+2      	; 0x84c <main+0x192>
     84a:	80 cf       	rjmp	.-256    	; 0x74c <main+0x92>
            {
                profiler_update();
     84c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <profiler_update>
     850:	7d cf       	rjmp	.-262    	; 0x74c <main+0x92>

00000852 <__vector_38>:
    TCCR4B |= _BV(CS43) | _BV(CS42);
}

/* ----------------------- TIMER-4 COMPARE ISR --------------------------- */
ISR(TIMER4_COMPA_vect)
{
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	8f 93       	push	r24
    TCNT4 = 0;              /* emulate CTC                */
     85e:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__TEXT_REGION_LENGTH__+0x7f80bf>
     862:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__TEXT_REGION_LENGTH__+0x7f80be>
    flag_telemetry_due = 1; /* signal main loop           */
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
}
     86c:	8f 91       	pop	r24
     86e:	0f 90       	pop	r0
     870:	0f be       	out	0x3f, r0	; 63
     872:	0f 90       	pop	r0
     874:	1f 90       	pop	r1
     876:	18 95       	reti

00000878 <analog_init>:

/* ------------------------------------------------------- */
void analog_init(void)
{
	/* AVcc reference, right-adjust, start on channel 0 */
	ADMUX  = (1<<REFS0);            /* AVcc with ext. cap on AREF */
     878:	ec e7       	ldi	r30, 0x7C	; 124
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 e4       	ldi	r24, 0x40	; 64
     87e:	80 83       	st	Z, r24

static inline void adc_select_channel(uint8_t ch)
{
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
     880:	80 81       	ld	r24, Z
     882:	80 7f       	andi	r24, 0xF0	; 240
     884:	80 83       	st	Z, r24
		ADCSRB &= ~(1<<MUX5);
     886:	eb e7       	ldi	r30, 0x7B	; 123
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	8f 7d       	andi	r24, 0xDF	; 223
     88e:	80 83       	st	Z, r24
	/* AVcc reference, right-adjust, start on channel 0 */
	ADMUX  = (1<<REFS0);            /* AVcc with ext. cap on AREF */
	adc_select_channel(0);

	/* prescaler, enable, no free-running */
	ADCSRA = (1<<ADEN) | ADC_PRESCALER_BITS;
     890:	87 e8       	ldi	r24, 0x87	; 135
     892:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	/* Disable digital input buffers on the used analog pins to save power/noise */
	DIDR0 =  (1<<ADC0D) | (1<<ADC1D) | (1<<ADC4D) | (1<<ADC5D) | (1<<ADC6D);
     896:	83 e7       	ldi	r24, 0x73	; 115
     898:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     89c:	08 95       	ret

0000089e <analog_read_raw>:
#include <avr/io.h>

static inline void adc_select_channel(uint8_t ch)
{
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
     89e:	88 30       	cpi	r24, 0x08	; 8
     8a0:	80 f4       	brcc	.+32     	; 0x8c2 <analog_read_raw+0x24>
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
     8a2:	ec e7       	ldi	r30, 0x7C	; 124
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	90 81       	ld	r25, Z
     8a8:	90 7f       	andi	r25, 0xF0	; 240
     8aa:	89 2b       	or	r24, r25
     8ac:	80 83       	st	Z, r24
		ADCSRB &= ~(1<<MUX5);
     8ae:	eb e7       	ldi	r30, 0x7B	; 123
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	8f 7d       	andi	r24, 0xDF	; 223
     8b6:	80 83       	st	Z, r24
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     8b8:	20 e0       	ldi	r18, 0x00	; 0
}

/* blocking, software-averaged read ---------------------- */
uint16_t analog_read_raw(uint8_t channel)
{
	uint32_t acc = 0;
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	ba 01       	movw	r22, r20
     8c0:	23 c0       	rjmp	.+70     	; 0x908 <analog_read_raw+0x6a>
	/* For channels 0-7, MUX[3:0]=ch ; for 8-13 set MUX5 in ADCSRB */
	if (ch <= 7) {
		ADMUX  = (ADMUX & 0xF0) | ch;          // keep REFS & ADLAR
		ADCSRB &= ~(1<<MUX5);
		} else {
		ADMUX  = (ADMUX & 0xF0) | (ch - 8);
     8c2:	ec e7       	ldi	r30, 0x7C	; 124
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	90 81       	ld	r25, Z
     8c8:	90 7f       	andi	r25, 0xF0	; 240
     8ca:	88 50       	subi	r24, 0x08	; 8
     8cc:	89 2b       	or	r24, r25
     8ce:	80 83       	st	Z, r24
		ADCSRB |=  (1<<MUX5);
     8d0:	eb e7       	ldi	r30, 0x7B	; 123
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	80 62       	ori	r24, 0x20	; 32
     8d8:	80 83       	st	Z, r24
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     8da:	20 e0       	ldi	r18, 0x00	; 0
}

/* blocking, software-averaged read ---------------------- */
uint16_t analog_read_raw(uint8_t channel)
{
	uint32_t acc = 0;
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	ba 01       	movw	r22, r20
     8e2:	12 c0       	rjmp	.+36     	; 0x908 <analog_read_raw+0x6a>

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
		ADCSRA |= (1<<ADSC);               /* start conversion          */
     8e4:	ea e7       	ldi	r30, 0x7A	; 122
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	90 81       	ld	r25, Z
     8ea:	90 64       	ori	r25, 0x40	; 64
     8ec:	90 83       	st	Z, r25
		while (ADCSRA & (1<<ADSC)) {;}     /* wait until ADSC clears    */
     8ee:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8f2:	96 fd       	sbrc	r25, 6
     8f4:	fc cf       	rjmp	.-8      	; 0x8ee <analog_read_raw+0x50>
		acc += ADC;                        /* read ADCL then ADCH       */
     8f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     8fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     8fe:	48 0f       	add	r20, r24
     900:	59 1f       	adc	r21, r25
     902:	61 1d       	adc	r22, r1
     904:	71 1d       	adc	r23, r1
{
	uint32_t acc = 0;

	adc_select_channel(channel);

	for (uint8_t i = 0; i < ADC_NUM_SAMPLES; ++i) {
     906:	2f 5f       	subi	r18, 0xFF	; 255
     908:	24 30       	cpi	r18, 0x04	; 4
     90a:	60 f3       	brcs	.-40     	; 0x8e4 <analog_read_raw+0x46>
		ADCSRA |= (1<<ADSC);               /* start conversion          */
		while (ADCSRA & (1<<ADSC)) {;}     /* wait until ADSC clears    */
		acc += ADC;                        /* read ADCL then ADCH       */
	}
	return (uint16_t)(acc / ADC_NUM_SAMPLES);
     90c:	db 01       	movw	r26, r22
     90e:	ca 01       	movw	r24, r20
     910:	b6 95       	lsr	r27
     912:	a7 95       	ror	r26
     914:	97 95       	ror	r25
     916:	87 95       	ror	r24
     918:	b6 95       	lsr	r27
     91a:	a7 95       	ror	r26
     91c:	97 95       	ror	r25
     91e:	87 95       	ror	r24
}
     920:	08 95       	ret

00000922 <analog_get_battery_1_mV>:
	return (uint16_t)mv;
}

uint16_t analog_get_battery_1_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_MAIN));
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	0e 94 4f 04 	call	0x89e	; 0x89e <analog_read_raw>

/* ---------------- convenience wrappers -----------------*/
static inline uint16_t to_millivolt(uint16_t adc)
{
	/*  (adc * 1100 mV /1023) * scale-factor  */
	uint32_t mv = (uint32_t)adc * 1100UL / 1023UL;   /* ? AVcc=3.3 V ? update */
     928:	9c 01       	movw	r18, r24
     92a:	ac e4       	ldi	r26, 0x4C	; 76
     92c:	b4 e0       	ldi	r27, 0x04	; 4
     92e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__umulhisi3>
     932:	2f ef       	ldi	r18, 0xFF	; 255
     934:	33 e0       	ldi	r19, 0x03	; 3
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__udivmodsi4>
}

uint16_t analog_get_battery_1_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_MAIN));
}
     93e:	c9 01       	movw	r24, r18
     940:	08 95       	ret

00000942 <analog_get_battery_2_mV>:

uint16_t analog_get_battery_2_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_AUX));
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	0e 94 4f 04 	call	0x89e	; 0x89e <analog_read_raw>

/* ---------------- convenience wrappers -----------------*/
static inline uint16_t to_millivolt(uint16_t adc)
{
	/*  (adc * 1100 mV /1023) * scale-factor  */
	uint32_t mv = (uint32_t)adc * 1100UL / 1023UL;   /* ? AVcc=3.3 V ? update */
     948:	9c 01       	movw	r18, r24
     94a:	ac e4       	ldi	r26, 0x4C	; 76
     94c:	b4 e0       	ldi	r27, 0x04	; 4
     94e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__umulhisi3>
     952:	2f ef       	ldi	r18, 0xFF	; 255
     954:	33 e0       	ldi	r19, 0x03	; 3
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__udivmodsi4>
}

uint16_t analog_get_battery_2_mV(void)
{
	return to_millivolt(analog_read_raw(ADC_CH_BAT_AUX));
}
     95e:	c9 01       	movw	r24, r18
     960:	08 95       	ret

00000962 <analog_get_cliff_left>:

uint16_t analog_get_cliff_left (void){ return analog_read_raw(ADC_CH_CLIFF_LEFT);  }
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	0e 94 4f 04 	call	0x89e	; 0x89e <analog_read_raw>
     968:	08 95       	ret

0000096a <analog_get_cliff_front>:
uint16_t analog_get_cliff_front(void){ return analog_read_raw(ADC_CH_CLIFF_FRONT); }
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	0e 94 4f 04 	call	0x89e	; 0x89e <analog_read_raw>
     970:	08 95       	ret

00000972 <analog_get_cliff_right>:
uint16_t analog_get_cliff_right(void){ return analog_read_raw(ADC_CH_CLIFF_RIGHT); }
     972:	86 e0       	ldi	r24, 0x06	; 6
     974:	0e 94 4f 04 	call	0x89e	; 0x89e <analog_read_raw>
     978:	08 95       	ret

0000097a <encoder_init>:

void encoder_reset_right(void)
{
	cli();
	right_cnt = 0;
	sei();
     97a:	8a b1       	in	r24, 0x0a	; 10
     97c:	8b 7f       	andi	r24, 0xFB	; 251
     97e:	8a b9       	out	0x0a, r24	; 10
     980:	8a b1       	in	r24, 0x0a	; 10
     982:	87 7f       	andi	r24, 0xF7	; 247
     984:	8a b9       	out	0x0a, r24	; 10
     986:	8b b1       	in	r24, 0x0b	; 11
     988:	84 60       	ori	r24, 0x04	; 4
     98a:	8b b9       	out	0x0b, r24	; 11
     98c:	8b b1       	in	r24, 0x0b	; 11
     98e:	88 60       	ori	r24, 0x08	; 8
     990:	8b b9       	out	0x0b, r24	; 11
     992:	e9 e6       	ldi	r30, 0x69	; 105
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	81 60       	ori	r24, 0x01	; 1
     99a:	80 83       	st	Z, r24
     99c:	80 81       	ld	r24, Z
     99e:	8d 7f       	andi	r24, 0xFD	; 253
     9a0:	80 83       	st	Z, r24
     9a2:	8d b3       	in	r24, 0x1d	; 29
     9a4:	81 60       	ori	r24, 0x01	; 1
     9a6:	8d bb       	out	0x1d, r24	; 29
     9a8:	80 81       	ld	r24, Z
     9aa:	84 60       	ori	r24, 0x04	; 4
     9ac:	80 83       	st	Z, r24
     9ae:	80 81       	ld	r24, Z
     9b0:	87 7f       	andi	r24, 0xF7	; 247
     9b2:	80 83       	st	Z, r24
     9b4:	8d b3       	in	r24, 0x1d	; 29
     9b6:	82 60       	ori	r24, 0x02	; 2
     9b8:	8d bb       	out	0x1d, r24	; 29
     9ba:	4a 9b       	sbis	0x09, 2	; 9
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <encoder_init+0x48>
     9be:	22 e0       	ldi	r18, 0x02	; 2
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <encoder_init+0x4a>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	99 b1       	in	r25, 0x09	; 9
     9c6:	93 fb       	bst	r25, 3
     9c8:	88 27       	eor	r24, r24
     9ca:	80 f9       	bld	r24, 0
     9cc:	82 2b       	or	r24, r18
     9ce:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <left_last_state>
     9d2:	8d b1       	in	r24, 0x0d	; 13
     9d4:	8f 7b       	andi	r24, 0xBF	; 191
     9d6:	8d b9       	out	0x0d, r24	; 13
     9d8:	8e b1       	in	r24, 0x0e	; 14
     9da:	80 64       	ori	r24, 0x40	; 64
     9dc:	8e b9       	out	0x0e, r24	; 14
     9de:	84 b1       	in	r24, 0x04	; 4
     9e0:	8f 7e       	andi	r24, 0xEF	; 239
     9e2:	84 b9       	out	0x04, r24	; 4
     9e4:	84 b1       	in	r24, 0x04	; 4
     9e6:	8f 77       	andi	r24, 0x7F	; 127
     9e8:	84 b9       	out	0x04, r24	; 4
     9ea:	85 b1       	in	r24, 0x05	; 5
     9ec:	80 61       	ori	r24, 0x10	; 16
     9ee:	85 b9       	out	0x05, r24	; 5
     9f0:	85 b1       	in	r24, 0x05	; 5
     9f2:	80 68       	ori	r24, 0x80	; 128
     9f4:	85 b9       	out	0x05, r24	; 5
     9f6:	e8 e6       	ldi	r30, 0x68	; 104
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	81 60       	ori	r24, 0x01	; 1
     9fe:	80 83       	st	Z, r24
     a00:	eb e6       	ldi	r30, 0x6B	; 107
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	80 69       	ori	r24, 0x90	; 144
     a08:	80 83       	st	Z, r24
     a0a:	1c 9b       	sbis	0x03, 4	; 3
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <__DATA_REGION_LENGTH__+0x12>
     a0e:	22 e0       	ldi	r18, 0x02	; 2
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <__DATA_REGION_LENGTH__+0x14>
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	9c b1       	in	r25, 0x0c	; 12
     a16:	96 fb       	bst	r25, 6
     a18:	88 27       	eor	r24, r24
     a1a:	80 f9       	bld	r24, 0
     a1c:	82 2b       	or	r24, r18
     a1e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <right_last_state>
     a22:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <right_cnt>
     a26:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <right_cnt+0x1>
     a2a:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <right_cnt+0x2>
     a2e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <right_cnt+0x3>
     a32:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <left_cnt>
     a36:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <left_cnt+0x1>
     a3a:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <left_cnt+0x2>
     a3e:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <left_cnt+0x3>
     a42:	08 95       	ret

00000a44 <__vector_1>:
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	2f 93       	push	r18
     a50:	3f 93       	push	r19
     a52:	8f 93       	push	r24
     a54:	9f 93       	push	r25
     a56:	af 93       	push	r26
     a58:	bf 93       	push	r27
     a5a:	ef 93       	push	r30
     a5c:	ff 93       	push	r31
     a5e:	39 b1       	in	r19, 0x09	; 9
     a60:	29 b1       	in	r18, 0x09	; 9
     a62:	23 fb       	bst	r18, 3
     a64:	22 27       	eor	r18, r18
     a66:	20 f9       	bld	r18, 0
     a68:	32 fb       	bst	r19, 2
     a6a:	88 27       	eor	r24, r24
     a6c:	80 f9       	bld	r24, 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	28 2b       	or	r18, r24
     a76:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <left_last_state>
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	e2 2f       	mov	r30, r18
     a86:	e8 2b       	or	r30, r24
     a88:	8e 2f       	mov	r24, r30
     a8a:	ee 0f       	add	r30, r30
     a8c:	99 0b       	sbc	r25, r25
     a8e:	aa 0b       	sbc	r26, r26
     a90:	bb 0b       	sbc	r27, r27
     a92:	fc 01       	movw	r30, r24
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	ee 30       	cpi	r30, 0x0E	; 14
     a98:	f1 05       	cpc	r31, r1
     a9a:	58 f5       	brcc	.+86     	; 0xaf2 <__vector_1+0xae>
     a9c:	ea 5a       	subi	r30, 0xAA	; 170
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__tablejump2__>
     aa4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <left_cnt>
     aa8:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     aac:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     ab0:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	a1 09       	sbc	r26, r1
     ab8:	b1 09       	sbc	r27, r1
     aba:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <left_cnt>
     abe:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <left_cnt+0x1>
     ac2:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <left_cnt+0x2>
     ac6:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <left_cnt+0x3>
     aca:	13 c0       	rjmp	.+38     	; 0xaf2 <__vector_1+0xae>
     acc:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <left_cnt>
     ad0:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     ad4:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     ad8:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	a1 1d       	adc	r26, r1
     ae0:	b1 1d       	adc	r27, r1
     ae2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <left_cnt>
     ae6:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <left_cnt+0x1>
     aea:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <left_cnt+0x2>
     aee:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <left_cnt+0x3>
     af2:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <left_last_state>
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_2>:
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	2f 93       	push	r18
     b1c:	3f 93       	push	r19
     b1e:	8f 93       	push	r24
     b20:	9f 93       	push	r25
     b22:	af 93       	push	r26
     b24:	bf 93       	push	r27
     b26:	ef 93       	push	r30
     b28:	ff 93       	push	r31
     b2a:	39 b1       	in	r19, 0x09	; 9
     b2c:	29 b1       	in	r18, 0x09	; 9
     b2e:	23 fb       	bst	r18, 3
     b30:	22 27       	eor	r18, r18
     b32:	20 f9       	bld	r18, 0
     b34:	32 fb       	bst	r19, 2
     b36:	88 27       	eor	r24, r24
     b38:	80 f9       	bld	r24, 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	28 2b       	or	r18, r24
     b42:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <left_last_state>
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	e2 2f       	mov	r30, r18
     b52:	e8 2b       	or	r30, r24
     b54:	8e 2f       	mov	r24, r30
     b56:	ee 0f       	add	r30, r30
     b58:	99 0b       	sbc	r25, r25
     b5a:	aa 0b       	sbc	r26, r26
     b5c:	bb 0b       	sbc	r27, r27
     b5e:	fc 01       	movw	r30, r24
     b60:	31 97       	sbiw	r30, 0x01	; 1
     b62:	ee 30       	cpi	r30, 0x0E	; 14
     b64:	f1 05       	cpc	r31, r1
     b66:	58 f5       	brcc	.+86     	; 0xbbe <__vector_2+0xae>
     b68:	ec 59       	subi	r30, 0x9C	; 156
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__tablejump2__>
     b70:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <left_cnt>
     b74:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     b78:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     b7c:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	a1 09       	sbc	r26, r1
     b84:	b1 09       	sbc	r27, r1
     b86:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <left_cnt>
     b8a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <left_cnt+0x1>
     b8e:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <left_cnt+0x2>
     b92:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <left_cnt+0x3>
     b96:	13 c0       	rjmp	.+38     	; 0xbbe <__vector_2+0xae>
     b98:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <left_cnt>
     b9c:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     ba0:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     ba4:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	a1 1d       	adc	r26, r1
     bac:	b1 1d       	adc	r27, r1
     bae:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <left_cnt>
     bb2:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <left_cnt+0x1>
     bb6:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <left_cnt+0x2>
     bba:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <left_cnt+0x3>
     bbe:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <left_last_state>
     bc2:	ff 91       	pop	r31
     bc4:	ef 91       	pop	r30
     bc6:	bf 91       	pop	r27
     bc8:	af 91       	pop	r26
     bca:	9f 91       	pop	r25
     bcc:	8f 91       	pop	r24
     bce:	3f 91       	pop	r19
     bd0:	2f 91       	pop	r18
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <__vector_7>:
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	ef 93       	push	r30
     bf4:	ff 93       	push	r31
     bf6:	33 b1       	in	r19, 0x03	; 3
     bf8:	2c b1       	in	r18, 0x0c	; 12
     bfa:	26 fb       	bst	r18, 6
     bfc:	22 27       	eor	r18, r18
     bfe:	20 f9       	bld	r18, 0
     c00:	34 fb       	bst	r19, 4
     c02:	88 27       	eor	r24, r24
     c04:	80 f9       	bld	r24, 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	28 2b       	or	r18, r24
     c0e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <right_last_state>
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	e2 2f       	mov	r30, r18
     c1e:	e8 2b       	or	r30, r24
     c20:	8e 2f       	mov	r24, r30
     c22:	ee 0f       	add	r30, r30
     c24:	99 0b       	sbc	r25, r25
     c26:	aa 0b       	sbc	r26, r26
     c28:	bb 0b       	sbc	r27, r27
     c2a:	fc 01       	movw	r30, r24
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	ee 30       	cpi	r30, 0x0E	; 14
     c30:	f1 05       	cpc	r31, r1
     c32:	58 f5       	brcc	.+86     	; 0xc8a <__vector_7+0xae>
     c34:	ee 58       	subi	r30, 0x8E	; 142
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__tablejump2__>
     c3c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <right_cnt>
     c40:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     c44:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     c48:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	a1 09       	sbc	r26, r1
     c50:	b1 09       	sbc	r27, r1
     c52:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <right_cnt>
     c56:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <right_cnt+0x1>
     c5a:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <right_cnt+0x2>
     c5e:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <right_cnt+0x3>
     c62:	13 c0       	rjmp	.+38     	; 0xc8a <__vector_7+0xae>
     c64:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <right_cnt>
     c68:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     c6c:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     c70:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	a1 1d       	adc	r26, r1
     c78:	b1 1d       	adc	r27, r1
     c7a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <right_cnt>
     c7e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <right_cnt+0x1>
     c82:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <right_cnt+0x2>
     c86:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <right_cnt+0x3>
     c8a:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <right_last_state>
     c8e:	ff 91       	pop	r31
     c90:	ef 91       	pop	r30
     c92:	bf 91       	pop	r27
     c94:	af 91       	pop	r26
     c96:	9f 91       	pop	r25
     c98:	8f 91       	pop	r24
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_9>:
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	af 93       	push	r26
     cbc:	bf 93       	push	r27
     cbe:	ef 93       	push	r30
     cc0:	ff 93       	push	r31
     cc2:	1f 99       	sbic	0x03, 7	; 3
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <__vector_9+0x24>
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	20 93 ad 01 	sts	0x01AD, r18	; 0x8001ad <emg_flag>
     ccc:	33 b1       	in	r19, 0x03	; 3
     cce:	2c b1       	in	r18, 0x0c	; 12
     cd0:	26 fb       	bst	r18, 6
     cd2:	22 27       	eor	r18, r18
     cd4:	20 f9       	bld	r18, 0
     cd6:	34 fb       	bst	r19, 4
     cd8:	88 27       	eor	r24, r24
     cda:	80 f9       	bld	r24, 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	28 2b       	or	r18, r24
     ce4:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <right_last_state>
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	e2 2f       	mov	r30, r18
     cf4:	e8 2b       	or	r30, r24
     cf6:	8e 2f       	mov	r24, r30
     cf8:	ee 0f       	add	r30, r30
     cfa:	99 0b       	sbc	r25, r25
     cfc:	aa 0b       	sbc	r26, r26
     cfe:	bb 0b       	sbc	r27, r27
     d00:	fc 01       	movw	r30, r24
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	ee 30       	cpi	r30, 0x0E	; 14
     d06:	f1 05       	cpc	r31, r1
     d08:	58 f5       	brcc	.+86     	; 0xd60 <__vector_9+0xb8>
     d0a:	e0 58       	subi	r30, 0x80	; 128
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__tablejump2__>
     d12:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <right_cnt>
     d16:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     d1a:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     d1e:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	a1 09       	sbc	r26, r1
     d26:	b1 09       	sbc	r27, r1
     d28:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <right_cnt>
     d2c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <right_cnt+0x1>
     d30:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <right_cnt+0x2>
     d34:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <right_cnt+0x3>
     d38:	13 c0       	rjmp	.+38     	; 0xd60 <__vector_9+0xb8>
     d3a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <right_cnt>
     d3e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     d42:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     d46:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	a1 1d       	adc	r26, r1
     d4e:	b1 1d       	adc	r27, r1
     d50:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <right_cnt>
     d54:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <right_cnt+0x1>
     d58:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <right_cnt+0x2>
     d5c:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <right_cnt+0x3>
     d60:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <right_last_state>
     d64:	ff 91       	pop	r31
     d66:	ef 91       	pop	r30
     d68:	bf 91       	pop	r27
     d6a:	af 91       	pop	r26
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <encoder_get_left>:
     d7e:	f8 94       	cli
     d80:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <left_cnt>
     d84:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <left_cnt+0x1>
     d88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <left_cnt+0x2>
     d8c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <left_cnt+0x3>
     d90:	78 94       	sei
     d92:	08 95       	ret

00000d94 <encoder_get_right>:
     d94:	f8 94       	cli
     d96:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <right_cnt>
     d9a:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <right_cnt+0x1>
     d9e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <right_cnt+0x2>
     da2:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <right_cnt+0x3>
     da6:	78 94       	sei
     da8:	08 95       	ret

00000daa <encoder_emergency_hit>:
}

bool encoder_emergency_hit(void)
{
	bool hit;
	cli(); /* atomic: read-then-clear */
     daa:	f8 94       	cli
	hit = emg_flag;
     dac:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <emg_flag>
	// emg_flag = false; //needs to stop all operations in a way that restart can fix it
	sei();
     db0:	78 94       	sei
	return hit;
     db2:	08 95       	ret

00000db4 <twi_start>:
    }
}

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
     db4:	94 ea       	ldi	r25, 0xA4	; 164
     db6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     dba:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     dbe:	99 23       	and	r25, r25
     dc0:	e4 f7       	brge	.-8      	; 0xdba <twi_start+0x6>

static bool twi_start(uint8_t addr_rw)
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
     dc2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     dc6:	98 7f       	andi	r25, 0xF8	; 248
    if (st != 0x08 && st != 0x10)
     dc8:	98 30       	cpi	r25, 0x08	; 8
     dca:	11 f0       	breq	.+4      	; 0xdd0 <twi_start+0x1c>
     dcc:	90 31       	cpi	r25, 0x10	; 16
     dce:	c1 f4       	brne	.+48     	; 0xe00 <twi_start+0x4c>
        return false; /* START / REP START */

    /* load SLA+R/W */
    TWDR = addr_rw;
     dd0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = TW_INT_FLAG | TW_ENABLE;
     dd4:	84 e8       	ldi	r24, 0x84	; 132
     dd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     dda:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     dde:	88 23       	and	r24, r24
     de0:	e4 f7       	brge	.-8      	; 0xdda <twi_start+0x26>

    /* load SLA+R/W */
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
     de2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     de6:	88 7f       	andi	r24, 0xF8	; 248
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
     de8:	88 31       	cpi	r24, 0x18	; 24
     dea:	21 f0       	breq	.+8      	; 0xdf4 <twi_start+0x40>
     dec:	80 34       	cpi	r24, 0x40	; 64
     dee:	21 f4       	brne	.+8      	; 0xdf8 <twi_start+0x44>
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <twi_start+0x46>
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <twi_start+0x46>
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	89 2f       	mov	r24, r25
     dfc:	81 70       	andi	r24, 0x01	; 1
     dfe:	08 95       	ret
{
    TWCR = TW_INT_FLAG | TW_START | TW_ENABLE;
    twi_wait();
    uint8_t st = TW_STATUS;
    if (st != 0x08 && st != 0x10)
        return false; /* START / REP START */
     e00:	80 e0       	ldi	r24, 0x00	; 0
    TWDR = addr_rw;
    TWCR = TW_INT_FLAG | TW_ENABLE;
    twi_wait();
    st = TW_STATUS;
    return (st == 0x18 /* SLA+W ACK */) || (st == 0x40 /* SLA+R ACK */);
}
     e02:	08 95       	ret

00000e04 <twi_stop>:

static void twi_stop(void)
{
    TWCR = TW_INT_FLAG | TW_STOP | TW_ENABLE;
     e04:	84 e9       	ldi	r24, 0x94	; 148
     e06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e0a:	08 95       	ret

00000e0c <twi_init>:

/*   PUBLIC TWI ROUTINES  */
void twi_init(void)
{
    /* prescaler bits (TWPS1:0) = 0 ? prescaler = 1 */
    TWSR &= ~((1u << TWPS0) | (1u << TWPS1));
     e0c:	e9 eb       	ldi	r30, 0xB9	; 185
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8c 7f       	andi	r24, 0xFC	; 252
     e14:	80 83       	st	Z, r24

    /* choose TWBR such that SCL ? TWI_SCL_HZ                   *
     * TWBR = (F_CPU / SCL - 16) / (2�4^TWPS)                  *
     * At 8MHz with 400kHz I2C: TWBR = (8,000,000/400,000 - 16) / 2 = 4 */
    TWBR = (uint8_t)((F_CPU / TWI_SCL_HZ - 16UL) / 2UL);
     e16:	88 e4       	ldi	r24, 0x48	; 72
     e18:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    {
        /* For 8MHz clock, with 400kHz I2C, TWBR should be 4 */
        TWBR = 4;
    }

    TWCR = TW_ENABLE; /* enable module, no interrupt yet */
     e1c:	84 e0       	ldi	r24, 0x04	; 4
     e1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e22:	08 95       	ret

00000e24 <twi_write>:
}

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	eb 01       	movw	r28, r22
     e2e:	14 2f       	mov	r17, r20
    if (!twi_start((sla << 1) | 0))
     e30:	88 0f       	add	r24, r24
     e32:	0e 94 da 06 	call	0xdb4	; 0xdb4 <twi_start>
     e36:	08 2f       	mov	r16, r24
     e38:	81 11       	cpse	r24, r1
     e3a:	19 c0       	rjmp	.+50     	; 0xe6e <twi_write+0x4a>
     e3c:	1d c0       	rjmp	.+58     	; 0xe78 <twi_write+0x54>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
     e3e:	fe 01       	movw	r30, r28
     e40:	e9 0f       	add	r30, r25
     e42:	f1 1d       	adc	r31, r1
     e44:	80 81       	ld	r24, Z
     e46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        TWCR = TW_INT_FLAG | TW_ENABLE;
     e4a:	84 e8       	ldi	r24, 0x84	; 132
     e4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     e50:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e54:	88 23       	and	r24, r24
     e56:	e4 f7       	brge	.-8      	; 0xe50 <twi_write+0x2c>
    for (uint8_t i = 0; i < len; ++i)
    {
        TWDR = buf[i];
        TWCR = TW_INT_FLAG | TW_ENABLE;
        twi_wait();
        if (TW_STATUS != 0x28)
     e58:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e5c:	88 7f       	andi	r24, 0xF8	; 248
     e5e:	88 32       	cpi	r24, 0x28	; 40
     e60:	21 f0       	breq	.+8      	; 0xe6a <twi_write+0x46>
        {
            twi_stop();
     e62:	0e 94 02 07 	call	0xe04	; 0xe04 <twi_stop>
            return false;
     e66:	00 e0       	ldi	r16, 0x00	; 0
     e68:	07 c0       	rjmp	.+14     	; 0xe78 <twi_write+0x54>

bool twi_write(uint8_t sla, const uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 0))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     e6a:	9f 5f       	subi	r25, 0xFF	; 255
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <twi_write+0x4c>
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	91 17       	cp	r25, r17
     e72:	28 f3       	brcs	.-54     	; 0xe3e <twi_write+0x1a>
        {
            twi_stop();
            return false;
        } /* data ACK */
    }
    twi_stop();
     e74:	0e 94 02 07 	call	0xe04	; 0xe04 <twi_stop>
    return true;
}
     e78:	80 2f       	mov	r24, r16
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <twi_read>:

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	8b 01       	movw	r16, r22
     e8e:	c4 2f       	mov	r28, r20
    if (!twi_start((sla << 1) | 1))
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	0e 94 da 06 	call	0xdb4	; 0xdb4 <twi_start>
     e9c:	d8 2f       	mov	r29, r24
     e9e:	81 11       	cpse	r24, r1
     ea0:	2f c0       	rjmp	.+94     	; 0xf00 <twi_read+0x7c>
     ea2:	33 c0       	rjmp	.+102    	; 0xf0a <twi_read+0x86>
        return false;
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
     ea4:	49 2f       	mov	r20, r25
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	2c 2f       	mov	r18, r28
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	21 50       	subi	r18, 0x01	; 1
     eae:	31 09       	sbc	r19, r1
     eb0:	42 17       	cp	r20, r18
     eb2:	53 07       	cpc	r21, r19
     eb4:	11 f4       	brne	.+4      	; 0xeba <twi_read+0x36>
     eb6:	84 e8       	ldi	r24, 0x84	; 132
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <twi_read+0x38>
     eba:	84 ec       	ldi	r24, 0xC4	; 196
     ebc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
#define TW_STATUS (TWSR & 0xF8u)

/*   INTERNAL UTILITIES  */
static inline void twi_wait(void)
{
    while (!(TWCR & TW_INT_FLAG))
     ec0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ec4:	88 23       	and	r24, r24
     ec6:	e4 f7       	brge	.-8      	; 0xec0 <twi_read+0x3c>
    for (uint8_t i = 0; i < len; ++i)
    {
        /* ACK all bytes except last */
        TWCR = TW_INT_FLAG | TW_ENABLE | (i == len - 1 ? 0 : TW_ACK);
        twi_wait();
        if ((i < len - 1 && TW_STATUS != 0x50) || /* data with ACK */
     ec8:	42 17       	cp	r20, r18
     eca:	53 07       	cpc	r21, r19
     ecc:	2c f4       	brge	.+10     	; 0xed8 <twi_read+0x54>
     ece:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     ed2:	88 7f       	andi	r24, 0xF8	; 248
     ed4:	80 35       	cpi	r24, 0x50	; 80
     ed6:	41 f4       	brne	.+16     	; 0xee8 <twi_read+0x64>
     ed8:	42 17       	cp	r20, r18
     eda:	53 07       	cpc	r21, r19
     edc:	49 f4       	brne	.+18     	; 0xef0 <twi_read+0x6c>
            (i == len - 1 && TW_STATUS != 0x58))  /* data with NACK */
     ede:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     ee2:	88 7f       	andi	r24, 0xF8	; 248
     ee4:	88 35       	cpi	r24, 0x58	; 88
     ee6:	21 f0       	breq	.+8      	; 0xef0 <twi_read+0x6c>
        {
            twi_stop();
     ee8:	0e 94 02 07 	call	0xe04	; 0xe04 <twi_stop>
            return false;
     eec:	d0 e0       	ldi	r29, 0x00	; 0
     eee:	0d c0       	rjmp	.+26     	; 0xf0a <twi_read+0x86>
        }
        buf[i] = TWDR;
     ef0:	f8 01       	movw	r30, r16
     ef2:	e9 0f       	add	r30, r25
     ef4:	f1 1d       	adc	r31, r1
     ef6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     efa:	80 83       	st	Z, r24

bool twi_read(uint8_t sla, uint8_t *buf, uint8_t len)
{
    if (!twi_start((sla << 1) | 1))
        return false;
    for (uint8_t i = 0; i < len; ++i)
     efc:	9f 5f       	subi	r25, 0xFF	; 255
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <twi_read+0x7e>
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 17       	cp	r25, r28
     f04:	78 f2       	brcs	.-98     	; 0xea4 <twi_read+0x20>
            twi_stop();
            return false;
        }
        buf[i] = TWDR;
    }
    twi_stop();
     f06:	0e 94 02 07 	call	0xe04	; 0xe04 <twi_stop>
    return true;
}
     f0a:	8d 2f       	mov	r24, r29
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <bno055_write8>:

/*   BNO055 BASIC ACCESS  */
bool bno055_write8(uint8_t reg, uint8_t val)
{
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <bno055_write8+0x6>
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
    uint8_t pkt[2] = {reg, val};
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	6a 83       	std	Y+2, r22	; 0x02
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
     f24:	42 e0       	ldi	r20, 0x02	; 2
     f26:	be 01       	movw	r22, r28
     f28:	6f 5f       	subi	r22, 0xFF	; 255
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	88 e2       	ldi	r24, 0x28	; 40
     f2e:	0e 94 12 07 	call	0xe24	; 0xe24 <twi_write>
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <bno055_set_mode>:
}

/*  HIGH-LEVEL HELPERS  */
static bool bno055_set_mode(uint8_t mode)
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
     f3c:	68 2f       	mov	r22, r24
     f3e:	8d e3       	ldi	r24, 0x3D	; 61
     f40:	0e 94 8b 07 	call	0xf16	; 0xf16 <bno055_write8>
}
     f44:	08 95       	ret

00000f46 <bno055_read8>:
    uint8_t pkt[2] = {reg, val};
    return twi_write(BNO055_I2C_ADDR, pkt, 2);
}

bool bno055_read8(uint8_t reg, uint8_t *val)
{
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	1f 92       	push	r1
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	8b 01       	movw	r16, r22
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	be 01       	movw	r22, r28
     f5c:	6f 5f       	subi	r22, 0xFF	; 255
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	88 e2       	ldi	r24, 0x28	; 40
     f62:	0e 94 12 07 	call	0xe24	; 0xe24 <twi_write>
     f66:	88 23       	and	r24, r24
     f68:	29 f0       	breq	.+10     	; 0xf74 <bno055_read8+0x2e>
        return false;
    return twi_read(BNO055_I2C_ADDR, val, 1);
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	b8 01       	movw	r22, r16
     f6e:	88 e2       	ldi	r24, 0x28	; 40
     f70:	0e 94 42 07 	call	0xe84	; 0xe84 <twi_read>
}
     f74:	0f 90       	pop	r0
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	08 95       	ret

00000f80 <bno055_read>:

bool bno055_read(uint8_t reg, uint8_t *buf, uint8_t len)
{
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	1f 92       	push	r1
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	8b 01       	movw	r16, r22
     f94:	f4 2e       	mov	r15, r20
    if (!twi_write(BNO055_I2C_ADDR, &reg, 1))
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	be 01       	movw	r22, r28
     f9a:	6f 5f       	subi	r22, 0xFF	; 255
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	88 e2       	ldi	r24, 0x28	; 40
     fa0:	0e 94 12 07 	call	0xe24	; 0xe24 <twi_write>
     fa4:	88 23       	and	r24, r24
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <bno055_read+0x32>
        return false;
    return twi_read(BNO055_I2C_ADDR, buf, len);
     fa8:	4f 2d       	mov	r20, r15
     faa:	b8 01       	movw	r22, r16
     fac:	88 e2       	ldi	r24, 0x28	; 40
     fae:	0e 94 42 07 	call	0xe84	; 0xe84 <twi_read>
}
     fb2:	0f 90       	pop	r0
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	08 95       	ret

00000fc0 <bno055_init>:
{
    return bno055_write8(0x3D, mode); /* BNO055_OPR_MODE_ADDR */
}

bool bno055_init(void)
{
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	1f 92       	push	r1
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
    twi_init();
     fcc:	0e 94 06 07 	call	0xe0c	; 0xe0c <twi_init>

    /* Ensure sensor is present */
    uint8_t id = 0;
     fd0:	19 82       	std	Y+1, r1	; 0x01
    if (!bno055_read8(0x00, &id) || id != 0xA0)
     fd2:	be 01       	movw	r22, r28
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	0e 94 a3 07 	call	0xf46	; 0xf46 <bno055_read8>
     fde:	18 2f       	mov	r17, r24
     fe0:	88 23       	and	r24, r24
     fe2:	51 f1       	breq	.+84     	; 0x1038 <bno055_init+0x78>
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	80 3a       	cpi	r24, 0xA0	; 160
     fe8:	31 f5       	brne	.+76     	; 0x1036 <bno055_init+0x76>
        return false; /* CHIP_ID */

    /* Switch to CONFIG, reset, then NDOF */
    bno055_set_mode(0x00); /* CONFIG      */
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	0e 94 9e 07 	call	0xf3c	; 0xf3c <bno055_set_mode>
     ff0:	2f e7       	ldi	r18, 0x7F	; 127
     ff2:	88 e3       	ldi	r24, 0x38	; 56
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	21 50       	subi	r18, 0x01	; 1
     ff8:	80 40       	sbci	r24, 0x00	; 0
     ffa:	90 40       	sbci	r25, 0x00	; 0
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <bno055_init+0x36>
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <bno055_init+0x40>
    1000:	00 00       	nop
    _delay_ms(25);

    bno055_write8(0x3F, 0x20); /* SYS_TRIGGER, reset */
    1002:	60 e2       	ldi	r22, 0x20	; 32
    1004:	8f e3       	ldi	r24, 0x3F	; 63
    1006:	0e 94 8b 07 	call	0xf16	; 0xf16 <bno055_write8>
    100a:	2f ef       	ldi	r18, 0xFF	; 255
    100c:	8c eb       	ldi	r24, 0xBC	; 188
    100e:	9f e1       	ldi	r25, 0x1F	; 31
    1010:	21 50       	subi	r18, 0x01	; 1
    1012:	80 40       	sbci	r24, 0x00	; 0
    1014:	90 40       	sbci	r25, 0x00	; 0
    1016:	e1 f7       	brne	.-8      	; 0x1010 <bno055_init+0x50>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <bno055_init+0x5a>
    101a:	00 00       	nop
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
    101c:	8c e0       	ldi	r24, 0x0C	; 12
    101e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <bno055_set_mode>
    1022:	2f ef       	ldi	r18, 0xFF	; 255
    1024:	89 ef       	ldi	r24, 0xF9	; 249
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	21 50       	subi	r18, 0x01	; 1
    102a:	80 40       	sbci	r24, 0x00	; 0
    102c:	90 40       	sbci	r25, 0x00	; 0
    102e:	e1 f7       	brne	.-8      	; 0x1028 <bno055_init+0x68>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <bno055_init+0x72>
    1032:	00 00       	nop
    _delay_ms(20);
    return true;
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <bno055_init+0x78>
    twi_init();

    /* Ensure sensor is present */
    uint8_t id = 0;
    if (!bno055_read8(0x00, &id) || id != 0xA0)
        return false; /* CHIP_ID */
    1036:	10 e0       	ldi	r17, 0x00	; 0
    _delay_ms(650);            /* ~650 ms boot time */

    bno055_set_mode(0x0C); /* NDOF fusion */
    _delay_ms(20);
    return true;
}
    1038:	81 2f       	mov	r24, r17
    103a:	0f 90       	pop	r0
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	08 95       	ret

00001044 <bno055_get_euler>:

void bno055_get_euler(int16_t *h, int16_t *r, int16_t *p)
{
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	00 d0       	rcall	.+0      	; 0x1056 <bno055_get_euler+0x12>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <bno055_get_euler+0x14>
    1058:	00 d0       	rcall	.+0      	; 0x105a <bno055_get_euler+0x16>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	6c 01       	movw	r12, r24
    1060:	7b 01       	movw	r14, r22
    1062:	8a 01       	movw	r16, r20
    uint8_t buf[6];
    if (bno055_read(0x1A, buf, 6))
    1064:	46 e0       	ldi	r20, 0x06	; 6
    1066:	be 01       	movw	r22, r28
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	8a e1       	ldi	r24, 0x1A	; 26
    106e:	0e 94 c0 07 	call	0xf80	; 0xf80 <bno055_read>
    1072:	88 23       	and	r24, r24
    1074:	d9 f0       	breq	.+54     	; 0x10ac <bno055_get_euler+0x68>
    { /* EULER_H_LSB */
        *h = (int16_t)(buf[0] | ((uint16_t)buf[1] << 8));
    1076:	29 81       	ldd	r18, Y+1	; 0x01
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	98 2f       	mov	r25, r24
    107e:	88 27       	eor	r24, r24
    1080:	82 2b       	or	r24, r18
    1082:	f6 01       	movw	r30, r12
    1084:	91 83       	std	Z+1, r25	; 0x01
    1086:	80 83       	st	Z, r24
        *r = (int16_t)(buf[2] | ((uint16_t)buf[3] << 8));
    1088:	2b 81       	ldd	r18, Y+3	; 0x03
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	98 2f       	mov	r25, r24
    1090:	88 27       	eor	r24, r24
    1092:	82 2b       	or	r24, r18
    1094:	f7 01       	movw	r30, r14
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
        *p = (int16_t)(buf[4] | ((uint16_t)buf[5] << 8));
    109a:	2d 81       	ldd	r18, Y+5	; 0x05
    109c:	8e 81       	ldd	r24, Y+6	; 0x06
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	98 2f       	mov	r25, r24
    10a2:	88 27       	eor	r24, r24
    10a4:	82 2b       	or	r24, r18
    10a6:	f8 01       	movw	r30, r16
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	80 83       	st	Z, r24
    }
}
    10ac:	26 96       	adiw	r28, 0x06	; 6
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	08 95       	ret

000010ca <motors_init>:
		RIGHT_PUL_PORT |= _BV(RIGHT_PUL_BIT);
		_delay_us(5);
		RIGHT_PUL_PORT &= ~_BV(RIGHT_PUL_BIT);
		_delay_us(5);
	}
}
    10ca:	87 b1       	in	r24, 0x07	; 7
    10cc:	80 64       	ori	r24, 0x40	; 64
    10ce:	87 b9       	out	0x07, r24	; 7
    10d0:	8a b1       	in	r24, 0x0a	; 10
    10d2:	80 64       	ori	r24, 0x40	; 64
    10d4:	8a b9       	out	0x0a, r24	; 10
    10d6:	84 b1       	in	r24, 0x04	; 4
    10d8:	80 64       	ori	r24, 0x40	; 64
    10da:	84 b9       	out	0x04, r24	; 4
    10dc:	84 b1       	in	r24, 0x04	; 4
    10de:	80 62       	ori	r24, 0x20	; 32
    10e0:	84 b9       	out	0x04, r24	; 4
    10e2:	8a b1       	in	r24, 0x0a	; 10
    10e4:	80 61       	ori	r24, 0x10	; 16
    10e6:	8a b9       	out	0x0a, r24	; 10
    10e8:	8a b1       	in	r24, 0x0a	; 10
    10ea:	80 68       	ori	r24, 0x80	; 128
    10ec:	8a b9       	out	0x0a, r24	; 10
    10ee:	88 b1       	in	r24, 0x08	; 8
    10f0:	80 64       	ori	r24, 0x40	; 64
    10f2:	88 b9       	out	0x08, r24	; 8
    10f4:	8b b1       	in	r24, 0x0b	; 11
    10f6:	80 64       	ori	r24, 0x40	; 64
    10f8:	8b b9       	out	0x0b, r24	; 11
    10fa:	85 b1       	in	r24, 0x05	; 5
    10fc:	8f 7b       	andi	r24, 0xBF	; 191
    10fe:	85 b9       	out	0x05, r24	; 5
    1100:	85 b1       	in	r24, 0x05	; 5
    1102:	80 62       	ori	r24, 0x20	; 32
    1104:	85 b9       	out	0x05, r24	; 5
    1106:	8b b1       	in	r24, 0x0b	; 11
    1108:	80 61       	ori	r24, 0x10	; 16
    110a:	8b b9       	out	0x0b, r24	; 11
    110c:	8b b1       	in	r24, 0x0b	; 11
    110e:	8f 77       	andi	r24, 0x7F	; 127
    1110:	8b b9       	out	0x0b, r24	; 11
    1112:	90 e4       	ldi	r25, 0x40	; 64
    1114:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1118:	88 e0       	ldi	r24, 0x08	; 8
    111a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    111e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1122:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1126:	e1 e7       	ldi	r30, 0x71	; 113
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	82 60       	ori	r24, 0x02	; 2
    112e:	80 83       	st	Z, r24
    1130:	ef e6       	ldi	r30, 0x6F	; 111
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	82 60       	ori	r24, 0x02	; 2
    1138:	80 83       	st	Z, r24
    113a:	08 95       	ret

0000113c <__vector_32>:
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
    114a:	af 93       	push	r26
    114c:	bf 93       	push	r27
    114e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <left_edge_cnt>
    1152:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <left_edge_cnt+0x1>
    1156:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <left_edge_cnt+0x2>
    115a:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <left_edge_cnt+0x3>
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	a1 1d       	adc	r26, r1
    1162:	b1 1d       	adc	r27, r1
    1164:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <left_edge_cnt>
    1168:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <left_edge_cnt+0x1>
    116c:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <left_edge_cnt+0x2>
    1170:	b0 93 bf 01 	sts	0x01BF, r27	; 0x8001bf <left_edge_cnt+0x3>
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_17>:
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	8f 93       	push	r24
    1192:	9f 93       	push	r25
    1194:	af 93       	push	r26
    1196:	bf 93       	push	r27
    1198:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <right_edge_cnt>
    119c:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <right_edge_cnt+0x1>
    11a0:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <right_edge_cnt+0x2>
    11a4:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <right_edge_cnt+0x3>
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	a1 1d       	adc	r26, r1
    11ac:	b1 1d       	adc	r27, r1
    11ae:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <right_edge_cnt>
    11b2:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <right_edge_cnt+0x1>
    11b6:	a0 93 ba 01 	sts	0x01BA, r26	; 0x8001ba <right_edge_cnt+0x2>
    11ba:	b0 93 bb 01 	sts	0x01BB, r27	; 0x8001bb <right_edge_cnt+0x3>
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <motors_enable_left>:
    11d0:	88 23       	and	r24, r24
    11d2:	21 f0       	breq	.+8      	; 0x11dc <motors_enable_left+0xc>
    11d4:	85 b1       	in	r24, 0x05	; 5
    11d6:	80 64       	ori	r24, 0x40	; 64
    11d8:	85 b9       	out	0x05, r24	; 5
    11da:	08 95       	ret
    11dc:	85 b1       	in	r24, 0x05	; 5
    11de:	8f 7b       	andi	r24, 0xBF	; 191
    11e0:	85 b9       	out	0x05, r24	; 5
    11e2:	08 95       	ret

000011e4 <motors_enable_right>:
    11e4:	88 23       	and	r24, r24
    11e6:	21 f0       	breq	.+8      	; 0x11f0 <motors_enable_right+0xc>
    11e8:	8b b1       	in	r24, 0x0b	; 11
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	8b b9       	out	0x0b, r24	; 11
    11ee:	08 95       	ret
    11f0:	8b b1       	in	r24, 0x0b	; 11
    11f2:	8f 77       	andi	r24, 0x7F	; 127
    11f4:	8b b9       	out	0x0b, r24	; 11
    11f6:	08 95       	ret

000011f8 <motors_enable_all>:
    11f8:	cf 93       	push	r28
    11fa:	c8 2f       	mov	r28, r24
    11fc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <motors_enable_left>
    1200:	8c 2f       	mov	r24, r28
    1202:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <motors_enable_right>
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <motors_set_dir_left>:
    120a:	88 23       	and	r24, r24
    120c:	21 f0       	breq	.+8      	; 0x1216 <motors_set_dir_left+0xc>
    120e:	8b b1       	in	r24, 0x0b	; 11
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	8b b9       	out	0x0b, r24	; 11
    1214:	08 95       	ret
    1216:	8b b1       	in	r24, 0x0b	; 11
    1218:	8f 7b       	andi	r24, 0xBF	; 191
    121a:	8b b9       	out	0x0b, r24	; 11
    121c:	08 95       	ret

0000121e <motors_set_dir_right>:
    121e:	88 23       	and	r24, r24
    1220:	21 f0       	breq	.+8      	; 0x122a <motors_set_dir_right+0xc>
    1222:	8b b1       	in	r24, 0x0b	; 11
    1224:	80 61       	ori	r24, 0x10	; 16
    1226:	8b b9       	out	0x0b, r24	; 11
    1228:	08 95       	ret
    122a:	8b b1       	in	r24, 0x0b	; 11
    122c:	8f 7e       	andi	r24, 0xEF	; 239
    122e:	8b b9       	out	0x0b, r24	; 11
    1230:	08 95       	ret

00001232 <motors_set_speed_left>:
    1232:	9c 01       	movw	r18, r24
    1234:	a8 ec       	ldi	r26, 0xC8	; 200
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__umulhisi3>
    123c:	2c e3       	ldi	r18, 0x3C	; 60
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__udivmodsi4>
    1248:	01 2e       	mov	r0, r17
    124a:	1b e0       	ldi	r17, 0x0B	; 11
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	44 1f       	adc	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	1a 95       	dec	r17
    1256:	d1 f7       	brne	.-12     	; 0x124c <motors_set_speed_left+0x1a>
    1258:	10 2d       	mov	r17, r0
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	74 e2       	ldi	r23, 0x24	; 36
    125e:	84 ef       	ldi	r24, 0xF4	; 244
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__udivmodsi4>
    1266:	da 01       	movw	r26, r20
    1268:	c9 01       	movw	r24, r18
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	a1 09       	sbc	r26, r1
    126e:	b1 09       	sbc	r27, r1
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	a2 07       	cpc	r26, r18
    1276:	b1 05       	cpc	r27, r1
    1278:	20 f0       	brcs	.+8      	; 0x1282 <motors_set_speed_left+0x50>
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	9f ef       	ldi	r25, 0xFF	; 255
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    1286:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
    128a:	e1 e9       	ldi	r30, 0x91	; 145
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	88 7f       	andi	r24, 0xF8	; 248
    1292:	80 83       	st	Z, r24
    1294:	80 81       	ld	r24, Z
    1296:	85 60       	ori	r24, 0x05	; 5
    1298:	80 83       	st	Z, r24
    129a:	08 95       	ret

0000129c <motors_set_speed_right>:
    129c:	9c 01       	movw	r18, r24
    129e:	a8 ec       	ldi	r26, 0xC8	; 200
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__umulhisi3>
    12a6:	2c e3       	ldi	r18, 0x3C	; 60
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__udivmodsi4>
    12b2:	01 2e       	mov	r0, r17
    12b4:	1b e0       	ldi	r17, 0x0B	; 11
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	44 1f       	adc	r20, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	1a 95       	dec	r17
    12c0:	d1 f7       	brne	.-12     	; 0x12b6 <motors_set_speed_right+0x1a>
    12c2:	10 2d       	mov	r17, r0
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	74 e2       	ldi	r23, 0x24	; 36
    12c8:	84 ef       	ldi	r24, 0xF4	; 244
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 29 15 	call	0x2a52	; 0x2a52 <__udivmodsi4>
    12d0:	da 01       	movw	r26, r20
    12d2:	c9 01       	movw	r24, r18
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	a1 09       	sbc	r26, r1
    12d8:	b1 09       	sbc	r27, r1
    12da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    12de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    12e2:	e1 e8       	ldi	r30, 0x81	; 129
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	88 7f       	andi	r24, 0xF8	; 248
    12ea:	80 83       	st	Z, r24
    12ec:	80 81       	ld	r24, Z
    12ee:	85 60       	ori	r24, 0x05	; 5
    12f0:	80 83       	st	Z, r24
    12f2:	08 95       	ret

000012f4 <motors_set_speed_both>:
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	eb 01       	movw	r28, r22
    12fa:	0e 94 19 09 	call	0x1232	; 0x1232 <motors_set_speed_left>
    12fe:	ce 01       	movw	r24, r28
    1300:	0e 94 4e 09 	call	0x129c	; 0x129c <motors_set_speed_right>
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <motors_stop_all>:

void motors_stop_all(void)
{
	motors_enable_all(false);
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <motors_enable_all>

	TCCR1B &= ~(_BV(CS12) | _BV(CS11) | _BV(CS10)); /* stop Timer-1 */
    1310:	e1 e8       	ldi	r30, 0x81	; 129
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	88 7f       	andi	r24, 0xF8	; 248
    1318:	80 83       	st	Z, r24
	TCCR3B &= ~(_BV(CS32) | _BV(CS31) | _BV(CS30)); /* stop Timer-3 */
    131a:	e1 e9       	ldi	r30, 0x91	; 145
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	88 7f       	andi	r24, 0xF8	; 248
    1322:	80 83       	st	Z, r24
    1324:	08 95       	ret

00001326 <motors_reset_edge_counts>:
}

/* — API to reset & read counts atomically — */
void motors_reset_edge_counts(void)
{
	uint8_t oldSREG = SREG;
    1326:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1328:	f8 94       	cli
	left_edge_cnt = right_edge_cnt = 0;
    132a:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <right_edge_cnt>
    132e:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <right_edge_cnt+0x1>
    1332:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <right_edge_cnt+0x2>
    1336:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <right_edge_cnt+0x3>
    133a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <left_edge_cnt>
    133e:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <left_edge_cnt+0x1>
    1342:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <left_edge_cnt+0x2>
    1346:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <left_edge_cnt+0x3>
	SREG = oldSREG;
    134a:	8f bf       	out	0x3f, r24	; 63
    134c:	08 95       	ret

0000134e <motors_get_edge_count_left>:
}

uint32_t motors_get_edge_count_left(void)
{
	uint32_t c;
	uint8_t oldSREG = SREG;
    134e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1350:	f8 94       	cli
	c = left_edge_cnt;
    1352:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <left_edge_cnt>
    1356:	70 91 bd 01 	lds	r23, 0x01BD	; 0x8001bd <left_edge_cnt+0x1>
    135a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <left_edge_cnt+0x2>
    135e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <left_edge_cnt+0x3>
	SREG = oldSREG;
    1362:	2f bf       	out	0x3f, r18	; 63
	return c;
}
    1364:	08 95       	ret

00001366 <motors_get_edge_count_right>:

uint32_t motors_get_edge_count_right(void)
{
	uint32_t c;
	uint8_t oldSREG = SREG;
    1366:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1368:	f8 94       	cli
	c = right_edge_cnt;
    136a:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <right_edge_cnt>
    136e:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <right_edge_cnt+0x1>
    1372:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <right_edge_cnt+0x2>
    1376:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <right_edge_cnt+0x3>
	SREG = oldSREG;
    137a:	2f bf       	out	0x3f, r18	; 63
	return c;
}
    137c:	08 95       	ret

0000137e <motors_get_step_count_left>:

uint32_t motors_get_step_count_left(void)
{
	return motors_get_edge_count_left() >> 1;
    137e:	0e 94 a7 09 	call	0x134e	; 0x134e <motors_get_edge_count_left>
    1382:	96 95       	lsr	r25
    1384:	87 95       	ror	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
}
    138a:	08 95       	ret

0000138c <motors_get_step_count_right>:

uint32_t motors_get_step_count_right(void)
{
	return motors_get_edge_count_right() >> 1;
    138c:	0e 94 b3 09 	call	0x1366	; 0x1366 <motors_get_edge_count_right>
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	77 95       	ror	r23
    1396:	67 95       	ror	r22
    1398:	08 95       	ret

0000139a <m_usb_init>:
	UEDATX = signals;
	UEDATX = 0;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
    13a0:	80 ea       	ldi	r24, 0xA0	; 160
    13a2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    13a6:	82 e1       	ldi	r24, 0x12	; 18
    13a8:	89 bd       	out	0x29, r24	; 41
    13aa:	09 b4       	in	r0, 0x29	; 41
    13ac:	00 fe       	sbrs	r0, 0
    13ae:	fd cf       	rjmp	.-6      	; 0x13aa <m_usb_init+0x10>
    13b0:	80 e9       	ldi	r24, 0x90	; 144
    13b2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    13b6:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    13ba:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <usb_configuration>
    13be:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <cdc_line_rtsdtr>
    13c2:	8c e0       	ldi	r24, 0x0C	; 12
    13c4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    13c8:	78 94       	sei
    13ca:	08 95       	ret

000013cc <m_usb_rx_char>:
    13cc:	9f b7       	in	r25, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usb_configuration>
    13d4:	81 11       	cpse	r24, r1
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <m_usb_rx_char+0x12>
    13d8:	9f bf       	out	0x3f, r25	; 63
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	08 95       	ret
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    13e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    13e8:	85 fd       	sbrc	r24, 5
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <m_usb_rx_char+0x26>
    13ec:	9f bf       	out	0x3f, r25	; 63
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	08 95       	ret
    13f2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    13f6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    13fa:	25 fd       	sbrc	r18, 5
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <m_usb_rx_char+0x38>
    13fe:	2b e6       	ldi	r18, 0x6B	; 107
    1400:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1404:	9f bf       	out	0x3f, r25	; 63
    1406:	08 95       	ret

00001408 <m_usb_rx_available>:
    1408:	9f b7       	in	r25, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usb_configuration>
    1410:	88 23       	and	r24, r24
    1412:	31 f0       	breq	.+12     	; 0x1420 <m_usb_rx_available+0x18>
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    141a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <m_usb_rx_available+0x1a>
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	9f bf       	out	0x3f, r25	; 63
    1424:	08 95       	ret

00001426 <m_usb_tx_char>:
    1426:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <usb_configuration>
    142a:	99 23       	and	r25, r25
    142c:	e1 f1       	breq	.+120    	; 0x14a6 <m_usb_tx_char+0x80>
    142e:	9f b7       	in	r25, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	24 e0       	ldi	r18, 0x04	; 4
    1434:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1438:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <transmit_previous_timeout>
    143c:	22 23       	and	r18, r18
    143e:	49 f0       	breq	.+18     	; 0x1452 <m_usb_tx_char+0x2c>
    1440:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1444:	25 fd       	sbrc	r18, 5
    1446:	03 c0       	rjmp	.+6      	; 0x144e <m_usb_tx_char+0x28>
    1448:	9f bf       	out	0x3f, r25	; 63
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	08 95       	ret
    144e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <transmit_previous_timeout>
    1452:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1456:	37 5e       	subi	r19, 0xE7	; 231
    1458:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    145c:	25 fd       	sbrc	r18, 5
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <m_usb_tx_char+0x62>
    1460:	9f bf       	out	0x3f, r25	; 63
    1462:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1466:	39 13       	cpse	r19, r25
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <m_usb_tx_char+0x4e>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <transmit_previous_timeout>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	08 95       	ret
    1474:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <usb_configuration>
    1478:	99 23       	and	r25, r25
    147a:	b9 f0       	breq	.+46     	; 0x14aa <m_usb_tx_char+0x84>
    147c:	9f b7       	in	r25, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	24 e0       	ldi	r18, 0x04	; 4
    1482:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1486:	e8 cf       	rjmp	.-48     	; 0x1458 <m_usb_tx_char+0x32>
    1488:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    148c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1490:	85 fd       	sbrc	r24, 5
    1492:	03 c0       	rjmp	.+6      	; 0x149a <m_usb_tx_char+0x74>
    1494:	8a e3       	ldi	r24, 0x3A	; 58
    1496:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    149a:	85 e0       	ldi	r24, 0x05	; 5
    149c:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <transmit_flush_timer>
    14a0:	9f bf       	out	0x3f, r25	; 63
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	08 95       	ret
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	08 95       	ret
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	08 95       	ret

000014ae <m_usb_tx_push>:
    14ae:	8f b7       	in	r24, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <transmit_flush_timer>
    14b6:	99 23       	and	r25, r25
    14b8:	41 f0       	breq	.+16     	; 0x14ca <m_usb_tx_push+0x1c>
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    14c0:	9a e3       	ldi	r25, 0x3A	; 58
    14c2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14c6:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <transmit_flush_timer>
    14ca:	8f bf       	out	0x3f, r24	; 63
    14cc:	08 95       	ret

000014ce <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
	uint8_t intbits, t;

	intbits = UDINT;
    14e0:	e1 ee       	ldi	r30, 0xE1	; 225
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
	UDINT = 0;
    14e6:	10 82       	st	Z, r1
	if (intbits & (1 << EORSTI))
    14e8:	83 ff       	sbrs	r24, 3
    14ea:	11 c0       	rjmp	.+34     	; 0x150e <__vector_10+0x40>
	{
		UENUM = 0;
    14ec:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
		UECONX = 1;
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		UECFG0X = EP_TYPE_CONTROL;
    14f6:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    14fa:	92 e1       	ldi	r25, 0x12	; 18
    14fc:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
		UEIENX = (1 << RXSTPE);
    1500:	98 e0       	ldi	r25, 0x08	; 8
    1502:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
		usb_configuration = 0;
    1506:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <usb_configuration>
		cdc_line_rtsdtr = 0;
    150a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <cdc_line_rtsdtr>
	}
	if (intbits & (1 << SOFI))
    150e:	82 ff       	sbrs	r24, 2
    1510:	13 c0       	rjmp	.+38     	; 0x1538 <__vector_10+0x6a>
	{
		if (usb_configuration)
    1512:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usb_configuration>
    1516:	88 23       	and	r24, r24
    1518:	79 f0       	breq	.+30     	; 0x1538 <__vector_10+0x6a>
		{
			t = transmit_flush_timer;
    151a:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <transmit_flush_timer>
			if (t)
    151e:	88 23       	and	r24, r24
    1520:	59 f0       	breq	.+22     	; 0x1538 <__vector_10+0x6a>
			{
				transmit_flush_timer = --t;
    1522:	81 50       	subi	r24, 0x01	; 1
    1524:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <transmit_flush_timer>
				if (!t)
    1528:	81 11       	cpse	r24, r1
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <__vector_10+0x6a>
				{
					UENUM = CDC_TX_ENDPOINT;
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
					UEINTX = 0x3A;
    1532:	8a e3       	ldi	r24, 0x3A	; 58
    1534:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				}
			}
		}
	}
}
    1538:	ff 91       	pop	r31
    153a:	ef 91       	pop	r30
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	0f 90       	pop	r0
    1546:	1f 90       	pop	r1
    1548:	18 95       	reti

0000154a <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    154a:	1f 92       	push	r1
    154c:	0f 92       	push	r0
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	0f 92       	push	r0
    1552:	11 24       	eor	r1, r1
    1554:	2f 93       	push	r18
    1556:	3f 93       	push	r19
    1558:	4f 93       	push	r20
    155a:	5f 93       	push	r21
    155c:	6f 93       	push	r22
    155e:	7f 93       	push	r23
    1560:	8f 93       	push	r24
    1562:	9f 93       	push	r25
    1564:	af 93       	push	r26
    1566:	bf 93       	push	r27
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t desc_length;

	UENUM = 0;
    1570:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	intbits = UEINTX;
    1574:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	if (intbits & (1 << RXSTPI))
    1578:	83 ff       	sbrs	r24, 3
    157a:	42 c1       	rjmp	.+644    	; 0x1800 <__vector_11+0x2b6>
	{
		bmRequestType = UEDATX;
    157c:	e1 ef       	ldi	r30, 0xF1	; 241
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	b0 81       	ld	r27, Z
		bRequest = UEDATX;
    1582:	a0 81       	ld	r26, Z
		wValue = UEDATX;
    1584:	20 81       	ld	r18, Z
		wValue |= (UEDATX << 8);
    1586:	80 81       	ld	r24, Z
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	98 2f       	mov	r25, r24
    158c:	88 27       	eor	r24, r24
    158e:	82 2b       	or	r24, r18
		wIndex = UEDATX;
    1590:	40 81       	ld	r20, Z
		wIndex |= (UEDATX << 8);
    1592:	20 81       	ld	r18, Z
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	32 2f       	mov	r19, r18
    1598:	22 27       	eor	r18, r18
    159a:	b9 01       	movw	r22, r18
    159c:	64 2b       	or	r22, r20
		wLength = UEDATX;
    159e:	40 81       	ld	r20, Z
		wLength |= (UEDATX << 8);
    15a0:	20 81       	ld	r18, Z
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	32 2f       	mov	r19, r18
    15a6:	22 27       	eor	r18, r18
    15a8:	f9 01       	movw	r30, r18
    15aa:	e4 2b       	or	r30, r20
    15ac:	af 01       	movw	r20, r30
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
    15ae:	22 ef       	ldi	r18, 0xF2	; 242
    15b0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		if (bRequest == GET_DESCRIPTOR)
    15b4:	a6 30       	cpi	r26, 0x06	; 6
    15b6:	09 f0       	breq	.+2      	; 0x15ba <__vector_11+0x70>
    15b8:	51 c0       	rjmp	.+162    	; 0x165c <__vector_11+0x112>
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	2d e4       	ldi	r18, 0x4D	; 77
    15be:	32 e0       	ldi	r19, 0x02	; 2
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
			{
				if (i >= NUM_DESC_LIST)
    15c0:	a6 30       	cpi	r26, 0x06	; 6
    15c2:	20 f0       	brcs	.+8      	; 0x15cc <__vector_11+0x82>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
    15c4:	81 e2       	ldi	r24, 0x21	; 33
    15c6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					return;
    15ca:	1d c1       	rjmp	.+570    	; 0x1806 <__vector_11+0x2bc>
				}
				desc_val = pgm_read_word(list);
    15cc:	f9 01       	movw	r30, r18
    15ce:	c5 91       	lpm	r28, Z+
    15d0:	d4 91       	lpm	r29, Z
				if (desc_val != wValue)
    15d2:	8c 17       	cp	r24, r28
    15d4:	9d 07       	cpc	r25, r29
    15d6:	19 f0       	breq	.+6      	; 0x15de <__vector_11+0x94>
				{
					list += sizeof(struct descriptor_list_struct);
    15d8:	29 5f       	subi	r18, 0xF9	; 249
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
    15dc:	1c c0       	rjmp	.+56     	; 0x1616 <__vector_11+0xcc>
				}
				list += 2;
    15de:	f9 01       	movw	r30, r18
    15e0:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    15e2:	c5 91       	lpm	r28, Z+
    15e4:	d4 91       	lpm	r29, Z
				if (desc_val != wIndex)
    15e6:	6c 17       	cp	r22, r28
    15e8:	7d 07       	cpc	r23, r29
    15ea:	19 f0       	breq	.+6      	; 0x15f2 <__vector_11+0xa8>
				{
					list += sizeof(struct descriptor_list_struct) - 2;
    15ec:	29 5f       	subi	r18, 0xF9	; 249
    15ee:	3f 4f       	sbci	r19, 0xFF	; 255
					continue;
    15f0:	12 c0       	rjmp	.+36     	; 0x1616 <__vector_11+0xcc>
				}
				list += 2;
    15f2:	f9 01       	movw	r30, r18
    15f4:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    15f6:	85 91       	lpm	r24, Z+
    15f8:	94 91       	lpm	r25, Z
				list += 2;
    15fa:	f9 01       	movw	r30, r18
    15fc:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    15fe:	64 91       	lpm	r22, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1600:	9a 01       	movw	r18, r20
    1602:	4f 3f       	cpi	r20, 0xFF	; 255
    1604:	51 05       	cpc	r21, r1
    1606:	19 f0       	breq	.+6      	; 0x160e <__vector_11+0xc4>
    1608:	10 f0       	brcs	.+4      	; 0x160e <__vector_11+0xc4>
    160a:	2f ef       	ldi	r18, 0xFF	; 255
    160c:	30 e0       	ldi	r19, 0x00	; 0
			if (len > desc_length)
    160e:	62 17       	cp	r22, r18
    1610:	20 f0       	brcs	.+8      	; 0x161a <__vector_11+0xd0>
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1612:	62 2f       	mov	r22, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <__vector_11+0xd0>
		wLength |= (UEDATX << 8);
		UEINTX = ~((1 << RXSTPI) | (1 << RXOUTI) | (1 << TXINI));
		if (bRequest == GET_DESCRIPTOR)
		{
			list = (const uint8_t *)descriptor_list;
			for (i = 0;; i++)
    1616:	af 5f       	subi	r26, 0xFF	; 255
				list += 2;
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
    1618:	d3 cf       	rjmp	.-90     	; 0x15c0 <__vector_11+0x76>
			do
			{
				// wait for host ready for IN packet
				do
				{
					i = UEINTX;
    161a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
    161e:	32 2f       	mov	r19, r18
    1620:	35 70       	andi	r19, 0x05	; 5
    1622:	d9 f3       	breq	.-10     	; 0x161a <__vector_11+0xd0>
				if (i & (1 << RXOUTI))
    1624:	22 fd       	sbrc	r18, 2
    1626:	ef c0       	rjmp	.+478    	; 0x1806 <__vector_11+0x2bc>
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1628:	36 2f       	mov	r19, r22
    162a:	61 31       	cpi	r22, 0x11	; 17
    162c:	08 f0       	brcs	.+2      	; 0x1630 <__vector_11+0xe6>
    162e:	30 e1       	ldi	r19, 0x10	; 16
				for (i = n; i; i--)
    1630:	23 2f       	mov	r18, r19
    1632:	09 c0       	rjmp	.+18     	; 0x1646 <__vector_11+0xfc>
				{
					UEDATX = pgm_read_byte(desc_addr++);
    1634:	ac 01       	movw	r20, r24
    1636:	4f 5f       	subi	r20, 0xFF	; 255
    1638:	5f 4f       	sbci	r21, 0xFF	; 255
    163a:	fc 01       	movw	r30, r24
    163c:	84 91       	lpm	r24, Z
    163e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
    1642:	21 50       	subi	r18, 0x01	; 1
				{
					UEDATX = pgm_read_byte(desc_addr++);
    1644:	ca 01       	movw	r24, r20
				} while (!(i & ((1 << TXINI) | (1 << RXOUTI))));
				if (i & (1 << RXOUTI))
					return; // abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--)
    1646:	21 11       	cpse	r18, r1
    1648:	f5 cf       	rjmp	.-22     	; 0x1634 <__vector_11+0xea>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    164a:	63 1b       	sub	r22, r19
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    164c:	2e ef       	ldi	r18, 0xFE	; 254
    164e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				{
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1652:	61 11       	cpse	r22, r1
    1654:	e2 cf       	rjmp	.-60     	; 0x161a <__vector_11+0xd0>
    1656:	30 31       	cpi	r19, 0x10	; 16
    1658:	01 f3       	breq	.-64     	; 0x161a <__vector_11+0xd0>
    165a:	d5 c0       	rjmp	.+426    	; 0x1806 <__vector_11+0x2bc>
			return;
		}
		if (bRequest == SET_ADDRESS)
    165c:	a5 30       	cpi	r26, 0x05	; 5
    165e:	59 f4       	brne	.+22     	; 0x1676 <__vector_11+0x12c>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1660:	2e ef       	ldi	r18, 0xFE	; 254
    1662:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    1666:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    166a:	20 ff       	sbrs	r18, 0
    166c:	fc cf       	rjmp	.-8      	; 0x1666 <__vector_11+0x11c>
		}
		if (bRequest == SET_ADDRESS)
		{
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1 << ADDEN);
    166e:	80 68       	ori	r24, 0x80	; 128
    1670:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
			return;
    1674:	c8 c0       	rjmp	.+400    	; 0x1806 <__vector_11+0x2bc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0)
    1676:	a9 30       	cpi	r26, 0x09	; 9
    1678:	79 f5       	brne	.+94     	; 0x16d8 <__vector_11+0x18e>
    167a:	b1 11       	cpse	r27, r1
    167c:	2d c0       	rjmp	.+90     	; 0x16d8 <__vector_11+0x18e>
		{
			usb_configuration = wValue;
    167e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <usb_configuration>
			cdc_line_rtsdtr = 0;
    1682:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <cdc_line_rtsdtr>
			transmit_flush_timer = 0;
    1686:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <transmit_flush_timer>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    168a:	8e ef       	ldi	r24, 0xFE	; 254
    168c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
    1690:	81 e0       	ldi	r24, 0x01	; 1
		{
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1692:	26 ef       	ldi	r18, 0xF6	; 246
    1694:	32 e0       	ldi	r19, 0x02	; 2
			for (i = 1; i < 5; i++)
    1696:	18 c0       	rjmp	.+48     	; 0x16c8 <__vector_11+0x17e>
			{
				UENUM = i;
    1698:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				en = pgm_read_byte(cfg++);
    169c:	a9 01       	movw	r20, r18
    169e:	4f 5f       	subi	r20, 0xFF	; 255
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	f9 01       	movw	r30, r18
    16a4:	94 91       	lpm	r25, Z
				UECONX = en;
    16a6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				if (en)
    16aa:	99 23       	and	r25, r25
    16ac:	59 f0       	breq	.+22     	; 0x16c4 <__vector_11+0x17a>
				{
					UECFG0X = pgm_read_byte(cfg++);
    16ae:	fa 01       	movw	r30, r20
    16b0:	44 91       	lpm	r20, Z
    16b2:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
					UECFG1X = pgm_read_byte(cfg++);
    16b6:	31 96       	adiw	r30, 0x01	; 1
    16b8:	e4 91       	lpm	r30, Z
    16ba:	2d 5f       	subi	r18, 0xFD	; 253
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <__vector_11+0x17c>
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
			{
				UENUM = i;
				en = pgm_read_byte(cfg++);
    16c4:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i = 1; i < 5; i++)
    16c6:	8f 5f       	subi	r24, 0xFF	; 255
    16c8:	85 30       	cpi	r24, 0x05	; 5
    16ca:	30 f3       	brcs	.-52     	; 0x1698 <__vector_11+0x14e>
				{
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
			UERST = 0x1E;
    16cc:	ea ee       	ldi	r30, 0xEA	; 234
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	8e e1       	ldi	r24, 0x1E	; 30
    16d2:	80 83       	st	Z, r24
			UERST = 0;
    16d4:	10 82       	st	Z, r1
			return;
    16d6:	97 c0       	rjmp	.+302    	; 0x1806 <__vector_11+0x2bc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
    16d8:	a8 30       	cpi	r26, 0x08	; 8
    16da:	71 f4       	brne	.+28     	; 0x16f8 <__vector_11+0x1ae>
    16dc:	b0 38       	cpi	r27, 0x80	; 128
    16de:	61 f4       	brne	.+24     	; 0x16f8 <__vector_11+0x1ae>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    16e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    16e4:	80 ff       	sbrs	r24, 0
    16e6:	fc cf       	rjmp	.-8      	; 0x16e0 <__vector_11+0x196>
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80)
		{
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    16e8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <usb_configuration>
    16ec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    16f0:	8e ef       	ldi	r24, 0xFE	; 254
    16f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    16f6:	87 c0       	rjmp	.+270    	; 0x1806 <__vector_11+0x2bc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
    16f8:	a1 32       	cpi	r26, 0x21	; 33
    16fa:	a9 f4       	brne	.+42     	; 0x1726 <__vector_11+0x1dc>
    16fc:	b1 3a       	cpi	r27, 0xA1	; 161
    16fe:	99 f4       	brne	.+38     	; 0x1726 <__vector_11+0x1dc>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    1700:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1704:	80 ff       	sbrs	r24, 0
    1706:	fc cf       	rjmp	.-8      	; 0x1700 <__vector_11+0x1b6>
    1708:	e0 e0       	ldi	r30, 0x00	; 0
    170a:	f1 e0       	ldi	r31, 0x01	; 1
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	05 c0       	rjmp	.+10     	; 0x171a <__vector_11+0x1d0>
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				UEDATX = *p++;
    1710:	90 81       	ld	r25, Z
    1712:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1716:	8f 5f       	subi	r24, 0xFF	; 255
			{
				UEDATX = *p++;
    1718:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1)
		{
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    171a:	87 30       	cpi	r24, 0x07	; 7
    171c:	c8 f3       	brcs	.-14     	; 0x1710 <__vector_11+0x1c6>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    171e:	8e ef       	ldi	r24, 0xFE	; 254
    1720:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1724:	70 c0       	rjmp	.+224    	; 0x1806 <__vector_11+0x2bc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
    1726:	a0 32       	cpi	r26, 0x20	; 32
    1728:	c1 f4       	brne	.+48     	; 0x175a <__vector_11+0x210>
    172a:	b1 32       	cpi	r27, 0x21	; 33
    172c:	b1 f4       	brne	.+44     	; 0x175a <__vector_11+0x210>
{
	UEINTX = ~(1 << TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1 << RXOUTI)))
    172e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1732:	82 ff       	sbrs	r24, 2
    1734:	fc cf       	rjmp	.-8      	; 0x172e <__vector_11+0x1e4>
    1736:	e0 e0       	ldi	r30, 0x00	; 0
    1738:	f1 e0       	ldi	r31, 0x01	; 1
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <__vector_11+0x1fe>
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
			{
				*p++ = UEDATX;
    173e:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1742:	90 83       	st	Z, r25
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1744:	8f 5f       	subi	r24, 0xFF	; 255
			{
				*p++ = UEDATX;
    1746:	31 96       	adiw	r30, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21)
		{
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i = 0; i < 7; i++)
    1748:	87 30       	cpi	r24, 0x07	; 7
    174a:	c8 f3       	brcs	.-14     	; 0x173e <__vector_11+0x1f4>
	while (!(UEINTX & (1 << RXOUTI)))
		;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1 << RXOUTI);
    174c:	e8 ee       	ldi	r30, 0xE8	; 232
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	8b ef       	ldi	r24, 0xFB	; 251
    1752:	80 83       	st	Z, r24
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    1754:	8e ef       	ldi	r24, 0xFE	; 254
    1756:	80 83       	st	Z, r24
    1758:	56 c0       	rjmp	.+172    	; 0x1806 <__vector_11+0x2bc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21)
    175a:	a2 32       	cpi	r26, 0x22	; 34
    175c:	61 f4       	brne	.+24     	; 0x1776 <__vector_11+0x22c>
    175e:	b1 32       	cpi	r27, 0x21	; 33
    1760:	51 f4       	brne	.+20     	; 0x1776 <__vector_11+0x22c>
		{
			cdc_line_rtsdtr = wValue;
    1762:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <cdc_line_rtsdtr>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    1766:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    176a:	80 ff       	sbrs	r24, 0
    176c:	fc cf       	rjmp	.-8      	; 0x1766 <__vector_11+0x21c>
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    176e:	8e ef       	ldi	r24, 0xFE	; 254
    1770:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1774:	48 c0       	rjmp	.+144    	; 0x1806 <__vector_11+0x2bc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS)
    1776:	a1 11       	cpse	r26, r1
    1778:	1b c0       	rjmp	.+54     	; 0x17b0 <__vector_11+0x266>
}

// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1 << TXINI)))
    177a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    177e:	80 ff       	sbrs	r24, 0
    1780:	fc cf       	rjmp	.-8      	; 0x177a <__vector_11+0x230>
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
    1782:	b2 38       	cpi	r27, 0x82	; 130
    1784:	61 f4       	brne	.+24     	; 0x179e <__vector_11+0x254>
			{
				UENUM = wIndex;
    1786:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (UECONX & (1 << STALLRQ))
    178a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    178e:	85 fd       	sbrc	r24, 5
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <__vector_11+0x24c>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <__vector_11+0x24e>
#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82)
			{
				UENUM = wIndex;
				if (UECONX & (1 << STALLRQ))
					i = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
				UENUM = 0;
    1798:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <__vector_11+0x256>
			return;
		}
		if (bRequest == GET_STATUS)
		{
			usb_wait_in_ready();
			i = 0;
    179e:	80 e0       	ldi	r24, 0x00	; 0
				if (UECONX & (1 << STALLRQ))
					i = 1;
				UENUM = 0;
			}
#endif
			UEDATX = i;
    17a0:	e1 ef       	ldi	r30, 0xF1	; 241
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 83       	st	Z, r24
			UEDATX = 0;
    17a6:	10 82       	st	Z, r1
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    17a8:	8e ef       	ldi	r24, 0xFE	; 254
    17aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    17ae:	2b c0       	rjmp	.+86     	; 0x1806 <__vector_11+0x2bc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE) && bmRequestType == 0x02 && wValue == 0)
    17b0:	a1 30       	cpi	r26, 0x01	; 1
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <__vector_11+0x26e>
    17b4:	a3 30       	cpi	r26, 0x03	; 3
    17b6:	21 f5       	brne	.+72     	; 0x1800 <__vector_11+0x2b6>
    17b8:	b2 30       	cpi	r27, 0x02	; 2
    17ba:	11 f5       	brne	.+68     	; 0x1800 <__vector_11+0x2b6>
    17bc:	89 2b       	or	r24, r25
    17be:	01 f5       	brne	.+64     	; 0x1800 <__vector_11+0x2b6>
		{
			i = wIndex & 0x7F;
    17c0:	26 2f       	mov	r18, r22
    17c2:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT)
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	82 0f       	add	r24, r18
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	d0 f4       	brcc	.+52     	; 0x1800 <__vector_11+0x2b6>
	while (!(UEINTX & (1 << TXINI)))
		;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1 << TXINI);
    17cc:	8e ef       	ldi	r24, 0xFE	; 254
    17ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		{
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT)
			{
				usb_send_in();
				UENUM = i;
    17d2:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
				if (bRequest == SET_FEATURE)
    17d6:	a3 30       	cpi	r26, 0x03	; 3
    17d8:	21 f4       	brne	.+8      	; 0x17e2 <__vector_11+0x298>
				{
					UECONX = (1 << STALLRQ) | (1 << EPEN);
    17da:	81 e2       	ldi	r24, 0x21	; 33
    17dc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    17e0:	12 c0       	rjmp	.+36     	; 0x1806 <__vector_11+0x2bc>
				}
				else
				{
					UECONX = (1 << STALLRQC) | (1 << RSTDT) | (1 << EPEN);
    17e2:	89 e1       	ldi	r24, 0x19	; 25
    17e4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
					UERST = (1 << i);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <__vector_11+0x2a8>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	2a 95       	dec	r18
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <__vector_11+0x2a4>
    17f6:	ea ee       	ldi	r30, 0xEA	; 234
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 83       	st	Z, r24
					UERST = 0;
    17fc:	10 82       	st	Z, r1
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <__vector_11+0x2bc>
				return;
			}
		}
#endif
	}
	UECONX = (1 << STALLRQ) | (1 << EPEN); // stall
    1800:	81 e2       	ldi	r24, 0x21	; 33
    1802:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
}
    1806:	ff 91       	pop	r31
    1808:	ef 91       	pop	r30
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	bf 91       	pop	r27
    1810:	af 91       	pop	r26
    1812:	9f 91       	pop	r25
    1814:	8f 91       	pop	r24
    1816:	7f 91       	pop	r23
    1818:	6f 91       	pop	r22
    181a:	5f 91       	pop	r21
    181c:	4f 91       	pop	r20
    181e:	3f 91       	pop	r19
    1820:	2f 91       	pop	r18
    1822:	0f 90       	pop	r0
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	0f 90       	pop	r0
    1828:	1f 90       	pop	r1
    182a:	18 95       	reti

0000182c <print_P>:

// BELOW FROM PRINT.C

void print_P(const char *s)
{
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	fc 01       	movw	r30, r24
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
    1834:	8f 01       	movw	r16, r30
    1836:	0f 5f       	subi	r16, 0xFF	; 255
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	c4 91       	lpm	r28, Z
		if (!c)
    183c:	cc 23       	and	r28, r28
    183e:	51 f0       	breq	.+20     	; 0x1854 <print_P+0x28>
			break;
		if (c == '\n')
    1840:	ca 30       	cpi	r28, 0x0A	; 10
    1842:	19 f4       	brne	.+6      	; 0x184a <print_P+0x1e>
			usb_tx_char('\r');
    1844:	8d e0       	ldi	r24, 0x0D	; 13
    1846:	0e 94 13 0a 	call	0x1426	; 0x1426 <m_usb_tx_char>
		usb_tx_char(c);
    184a:	8c 2f       	mov	r24, r28
    184c:	0e 94 13 0a 	call	0x1426	; 0x1426 <m_usb_tx_char>
{
	char c;

	while (1)
	{
		c = pgm_read_byte(s++);
    1850:	f8 01       	movw	r30, r16
		if (!c)
			break;
		if (c == '\n')
			usb_tx_char('\r');
		usb_tx_char(c);
	}
    1852:	f0 cf       	rjmp	.-32     	; 0x1834 <print_P+0x8>
}
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <profiler_init>:

/*---------------------------- LINEAR PROFILE API ----------------------------*/
void profiler_init(float distance_mm,
				   float max_vel_mm_s,
				   float acc_mm_s2)
{
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
	target_dist_mm = distance_mm;
    1864:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <target_dist_mm>
    1868:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <target_dist_mm+0x1>
    186c:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <target_dist_mm+0x2>
    1870:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <target_dist_mm+0x3>
	lin_max_vel = max_vel_mm_s;
    1874:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <lin_max_vel>
    1878:	30 93 ec 01 	sts	0x01EC, r19	; 0x8001ec <lin_max_vel+0x1>
    187c:	40 93 ed 01 	sts	0x01ED, r20	; 0x8001ed <lin_max_vel+0x2>
    1880:	50 93 ee 01 	sts	0x01EE, r21	; 0x8001ee <lin_max_vel+0x3>
	lin_acc = acc_mm_s2;
    1884:	e0 92 e7 01 	sts	0x01E7, r14	; 0x8001e7 <lin_acc>
    1888:	f0 92 e8 01 	sts	0x01E8, r15	; 0x8001e8 <lin_acc+0x1>
    188c:	00 93 e9 01 	sts	0x01E9, r16	; 0x8001e9 <lin_acc+0x2>
    1890:	10 93 ea 01 	sts	0x01EA, r17	; 0x8001ea <lin_acc+0x3>

	/* compute encoder counts per mm */
	float circ = WHEEL_DIAMETER_MM * M_PI;
	lin_counts_per_mm = (4.0f * (float)ENCODER_PPR) / circ;
    1894:	84 ee       	ldi	r24, 0xE4	; 228
    1896:	97 eb       	ldi	r25, 0xB7	; 183
    1898:	ab ec       	ldi	r26, 0xCB	; 203
    189a:	b0 e4       	ldi	r27, 0x40	; 64
    189c:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <lin_counts_per_mm>
    18a0:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <lin_counts_per_mm+0x1>
    18a4:	a0 93 e5 01 	sts	0x01E5, r26	; 0x8001e5 <lin_counts_per_mm+0x2>
    18a8:	b0 93 e6 01 	sts	0x01E6, r27	; 0x8001e6 <lin_counts_per_mm+0x3>

	/* reset & snapshot encoder */
	motors_reset_edge_counts();
    18ac:	0e 94 93 09 	call	0x1326	; 0x1326 <motors_reset_edge_counts>
	lin_start_steps = motors_get_step_count_left();
    18b0:	0e 94 bf 09 	call	0x137e	; 0x137e <motors_get_step_count_left>
    18b4:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <lin_start_steps>
    18b8:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <lin_start_steps+0x1>
    18bc:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <lin_start_steps+0x2>
    18c0:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <lin_start_steps+0x3>

	lin_running = true;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <lin_running>
}
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	ff 90       	pop	r15
    18d0:	ef 90       	pop	r14
    18d2:	08 95       	ret

000018d4 <profiler_update>:

void profiler_update(void)
{
    18d4:	4f 92       	push	r4
    18d6:	5f 92       	push	r5
    18d8:	6f 92       	push	r6
    18da:	7f 92       	push	r7
    18dc:	8f 92       	push	r8
    18de:	9f 92       	push	r9
    18e0:	af 92       	push	r10
    18e2:	bf 92       	push	r11
    18e4:	cf 92       	push	r12
    18e6:	df 92       	push	r13
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	2c 97       	sbiw	r28, 0x0c	; 12
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
	if (!lin_running)
    1900:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <lin_running>
    1904:	88 23       	and	r24, r24
    1906:	09 f4       	brne	.+2      	; 0x190a <profiler_update+0x36>
    1908:	bf c0       	rjmp	.+382    	; 0x1a88 <profiler_update+0x1b4>
		return;

	/* distance so far [mm] */
	uint32_t steps = motors_get_step_count_left() - lin_start_steps;
    190a:	0e 94 bf 09 	call	0x137e	; 0x137e <motors_get_step_count_left>
    190e:	c0 90 df 01 	lds	r12, 0x01DF	; 0x8001df <lin_start_steps>
    1912:	d0 90 e0 01 	lds	r13, 0x01E0	; 0x8001e0 <lin_start_steps+0x1>
    1916:	e0 90 e1 01 	lds	r14, 0x01E1	; 0x8001e1 <lin_start_steps+0x2>
    191a:	f0 90 e2 01 	lds	r15, 0x01E2	; 0x8001e2 <lin_start_steps+0x3>
    191e:	6c 19       	sub	r22, r12
    1920:	7d 09       	sbc	r23, r13
    1922:	8e 09       	sbc	r24, r14
    1924:	9f 09       	sbc	r25, r15
	float dist_mm = steps / lin_counts_per_mm;
    1926:	0e 94 2d 10 	call	0x205a	; 0x205a <__floatunsisf>
    192a:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <lin_counts_per_mm>
    192e:	30 91 e4 01 	lds	r19, 0x01E4	; 0x8001e4 <lin_counts_per_mm+0x1>
    1932:	40 91 e5 01 	lds	r20, 0x01E5	; 0x8001e5 <lin_counts_per_mm+0x2>
    1936:	50 91 e6 01 	lds	r21, 0x01E6	; 0x8001e6 <lin_counts_per_mm+0x3>
    193a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
    193e:	4b 01       	movw	r8, r22
    1940:	5c 01       	movw	r10, r24

	/* trapezoid breakpoints */
	float d_acc = (lin_max_vel * lin_max_vel) / (2.0f * lin_acc);
    1942:	c0 90 eb 01 	lds	r12, 0x01EB	; 0x8001eb <lin_max_vel>
    1946:	d0 90 ec 01 	lds	r13, 0x01EC	; 0x8001ec <lin_max_vel+0x1>
    194a:	e0 90 ed 01 	lds	r14, 0x01ED	; 0x8001ed <lin_max_vel+0x2>
    194e:	f0 90 ee 01 	lds	r15, 0x01EE	; 0x8001ee <lin_max_vel+0x3>
    1952:	a7 01       	movw	r20, r14
    1954:	96 01       	movw	r18, r12
    1956:	c7 01       	movw	r24, r14
    1958:	b6 01       	movw	r22, r12
    195a:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    195e:	2b 01       	movw	r4, r22
    1960:	3c 01       	movw	r6, r24
    1962:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <lin_acc>
    1966:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <lin_acc+0x1>
    196a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <lin_acc+0x2>
    196e:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <lin_acc+0x3>
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__addsf3>
    197a:	6d 83       	std	Y+5, r22	; 0x05
    197c:	7e 83       	std	Y+6, r23	; 0x06
    197e:	8f 83       	std	Y+7, r24	; 0x07
    1980:	98 87       	std	Y+8, r25	; 0x08
    1982:	9b 01       	movw	r18, r22
    1984:	ac 01       	movw	r20, r24
    1986:	c3 01       	movw	r24, r6
    1988:	b2 01       	movw	r22, r4
    198a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
    198e:	69 83       	std	Y+1, r22	; 0x01
    1990:	7a 83       	std	Y+2, r23	; 0x02
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	9c 83       	std	Y+4, r25	; 0x04
	float d_decel = d_acc;
	float cruise_end = target_dist_mm - d_decel;
    1996:	40 90 ef 01 	lds	r4, 0x01EF	; 0x8001ef <target_dist_mm>
    199a:	50 90 f0 01 	lds	r5, 0x01F0	; 0x8001f0 <target_dist_mm+0x1>
    199e:	60 90 f1 01 	lds	r6, 0x01F1	; 0x8001f1 <target_dist_mm+0x2>
    19a2:	70 90 f2 01 	lds	r7, 0x01F2	; 0x8001f2 <target_dist_mm+0x3>
    19a6:	9b 01       	movw	r18, r22
    19a8:	ac 01       	movw	r20, r24
    19aa:	c3 01       	movw	r24, r6
    19ac:	b2 01       	movw	r22, r4
    19ae:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__subsf3>
    19b2:	69 87       	std	Y+9, r22	; 0x09
    19b4:	7a 87       	std	Y+10, r23	; 0x0a
    19b6:	8b 87       	std	Y+11, r24	; 0x0b
    19b8:	9c 87       	std	Y+12, r25	; 0x0c

	/* compute desired v [mm/s] */
	float v;
	if (dist_mm < d_acc)
    19ba:	29 81       	ldd	r18, Y+1	; 0x01
    19bc:	3a 81       	ldd	r19, Y+2	; 0x02
    19be:	4b 81       	ldd	r20, Y+3	; 0x03
    19c0:	5c 81       	ldd	r21, Y+4	; 0x04
    19c2:	c5 01       	movw	r24, r10
    19c4:	b4 01       	movw	r22, r8
    19c6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__cmpsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	6c f4       	brge	.+26     	; 0x19e8 <profiler_update+0x114>
	{
		v = sqrtf(2.0f * lin_acc * dist_mm);
    19ce:	2d 81       	ldd	r18, Y+5	; 0x05
    19d0:	3e 81       	ldd	r19, Y+6	; 0x06
    19d2:	4f 81       	ldd	r20, Y+7	; 0x07
    19d4:	58 85       	ldd	r21, Y+8	; 0x08
    19d6:	c5 01       	movw	r24, r10
    19d8:	b4 01       	movw	r22, r8
    19da:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    19de:	0e 94 57 11 	call	0x22ae	; 0x22ae <sqrt>
    19e2:	6b 01       	movw	r12, r22
    19e4:	7c 01       	movw	r14, r24
    19e6:	1c c0       	rjmp	.+56     	; 0x1a20 <profiler_update+0x14c>
	}
	else if (dist_mm < cruise_end)
    19e8:	29 85       	ldd	r18, Y+9	; 0x09
    19ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    19ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    19ee:	5c 85       	ldd	r21, Y+12	; 0x0c
    19f0:	c5 01       	movw	r24, r10
    19f2:	b4 01       	movw	r22, r8
    19f4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__cmpsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	94 f0       	brlt	.+36     	; 0x1a20 <profiler_update+0x14c>
	{
		v = lin_max_vel;
	}
	else
	{
		float rem = target_dist_mm - dist_mm;
    19fc:	a5 01       	movw	r20, r10
    19fe:	94 01       	movw	r18, r8
    1a00:	c3 01       	movw	r24, r6
    1a02:	b2 01       	movw	r22, r4
    1a04:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__subsf3>
    1a08:	9b 01       	movw	r18, r22
    1a0a:	ac 01       	movw	r20, r24
		v = sqrtf(2.0f * lin_acc * rem);
    1a0c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a0e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a10:	8f 81       	ldd	r24, Y+7	; 0x07
    1a12:	98 85       	ldd	r25, Y+8	; 0x08
    1a14:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1a18:	0e 94 57 11 	call	0x22ae	; 0x22ae <sqrt>
    1a1c:	6b 01       	movw	r12, r22
    1a1e:	7c 01       	movw	r14, r24
	}

	/* convert to RPM */
	float revs_s = v / (WHEEL_DIAMETER_MM * M_PI);
    1a20:	23 e6       	ldi	r18, 0x63	; 99
    1a22:	34 e1       	ldi	r19, 0x14	; 20
    1a24:	4d e1       	ldi	r20, 0x1D	; 29
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	c7 01       	movw	r24, r14
    1a2a:	b6 01       	movw	r22, r12
    1a2c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
	uint16_t rpm = (uint16_t)(revs_s * 60.0f + 0.5f);
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e7       	ldi	r20, 0x70	; 112
    1a36:	52 e4       	ldi	r21, 0x42	; 66
    1a38:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__addsf3>
    1a48:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixunssfsi>
    1a4c:	6b 01       	movw	r12, r22
    1a4e:	7c 01       	movw	r14, r24

	/* command both wheels forward */
	motors_set_dir_left(true);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	0e 94 05 09 	call	0x120a	; 0x120a <motors_set_dir_left>
	motors_set_dir_right(true);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	0e 94 0f 09 	call	0x121e	; 0x121e <motors_set_dir_right>
	motors_set_speed_both(rpm, rpm);
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	c6 01       	movw	r24, r12
    1a60:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <motors_set_speed_both>

	/* done? */
	if (dist_mm >= target_dist_mm)
    1a64:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <target_dist_mm>
    1a68:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <target_dist_mm+0x1>
    1a6c:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <target_dist_mm+0x2>
    1a70:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <target_dist_mm+0x3>
    1a74:	c5 01       	movw	r24, r10
    1a76:	b4 01       	movw	r22, r8
    1a78:	0e 94 df 10 	call	0x21be	; 0x21be <__gesf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	24 f0       	brlt	.+8      	; 0x1a88 <profiler_update+0x1b4>
	{
		motors_stop_all();
    1a80:	0e 94 85 09 	call	0x130a	; 0x130a <motors_stop_all>
		lin_running = false;
    1a84:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <lin_running>
	}
}
    1a88:	2c 96       	adiw	r28, 0x0c	; 12
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	ff 90       	pop	r15
    1a9a:	ef 90       	pop	r14
    1a9c:	df 90       	pop	r13
    1a9e:	cf 90       	pop	r12
    1aa0:	bf 90       	pop	r11
    1aa2:	af 90       	pop	r10
    1aa4:	9f 90       	pop	r9
    1aa6:	8f 90       	pop	r8
    1aa8:	7f 90       	pop	r7
    1aaa:	6f 90       	pop	r6
    1aac:	5f 90       	pop	r5
    1aae:	4f 90       	pop	r4
    1ab0:	08 95       	ret

00001ab2 <profiler_is_running>:

bool profiler_is_running(void)
{
	return lin_running;
}
    1ab2:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <lin_running>
    1ab6:	08 95       	ret

00001ab8 <profiler_turn_init>:

/*---------------------------- ROTATION PROFILE API -------------------------------*/
void profiler_turn_init(float angle_deg,
						float max_omega_deg_s,
						float ang_acc_deg_s2)
{
    1ab8:	4f 92       	push	r4
    1aba:	5f 92       	push	r5
    1abc:	6f 92       	push	r6
    1abe:	7f 92       	push	r7
    1ac0:	8f 92       	push	r8
    1ac2:	9f 92       	push	r9
    1ac4:	af 92       	push	r10
    1ac6:	bf 92       	push	r11
    1ac8:	cf 92       	push	r12
    1aca:	df 92       	push	r13
    1acc:	ef 92       	push	r14
    1ace:	ff 92       	push	r15
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	4b 01       	movw	r8, r22
    1ad8:	5c 01       	movw	r10, r24
    1ada:	29 01       	movw	r4, r18
    1adc:	3a 01       	movw	r6, r20
    1ade:	67 01       	movw	r12, r14
    1ae0:	78 01       	movw	r14, r16
	/* 1) Compute how far each wheel must travel: d = (L/2)*?_rad */
	float theta = angle_deg * (M_PI / 180.0f);
    1ae2:	25 e3       	ldi	r18, 0x35	; 53
    1ae4:	3a ef       	ldi	r19, 0xFA	; 250
    1ae6:	4e e8       	ldi	r20, 0x8E	; 142
    1ae8:	5c e3       	ldi	r21, 0x3C	; 60
    1aea:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
	float half_track = WHEEL_BASE_MM * 0.5f;
	target_wheel_mm = fabsf(half_track * theta);
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e8       	ldi	r19, 0x80	; 128
    1af2:	44 e8       	ldi	r20, 0x84	; 132
    1af4:	53 e4       	ldi	r21, 0x43	; 67
    1af6:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	bf 77       	andi	r27, 0x7F	; 127
    1b00:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <target_wheel_mm>
    1b04:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <target_wheel_mm+0x1>
    1b08:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <target_wheel_mm+0x2>
    1b0c:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <target_wheel_mm+0x3>
	turn_ccw = (angle_deg > 0.0f);
    1b10:	c1 e0       	ldi	r28, 0x01	; 1
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	a9 01       	movw	r20, r18
    1b18:	c5 01       	movw	r24, r10
    1b1a:	b4 01       	movw	r22, r8
    1b1c:	0e 94 df 10 	call	0x21be	; 0x21be <__gesf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	0c f0       	brlt	.+2      	; 0x1b26 <profiler_turn_init+0x6e>
    1b24:	c0 e0       	ldi	r28, 0x00	; 0
    1b26:	c0 93 c4 01 	sts	0x01C4, r28	; 0x8001c4 <turn_ccw>

	/* 2) Convert angular ? linear at wheel rim */
	turn_max_vel = fabsf(max_omega_deg_s * (M_PI / 180.0f) * half_track);
    1b2a:	25 e3       	ldi	r18, 0x35	; 53
    1b2c:	3a ef       	ldi	r19, 0xFA	; 250
    1b2e:	4e e8       	ldi	r20, 0x8E	; 142
    1b30:	5c e3       	ldi	r21, 0x3C	; 60
    1b32:	c3 01       	movw	r24, r6
    1b34:	b2 01       	movw	r22, r4
    1b36:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e8       	ldi	r19, 0x80	; 128
    1b3e:	44 e8       	ldi	r20, 0x84	; 132
    1b40:	53 e4       	ldi	r21, 0x43	; 67
    1b42:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	bf 77       	andi	r27, 0x7F	; 127
    1b4c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <turn_max_vel>
    1b50:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <turn_max_vel+0x1>
    1b54:	a0 93 d8 01 	sts	0x01D8, r26	; 0x8001d8 <turn_max_vel+0x2>
    1b58:	b0 93 d9 01 	sts	0x01D9, r27	; 0x8001d9 <turn_max_vel+0x3>
	turn_acc = fabsf(ang_acc_deg_s2 * (M_PI / 180.0f) * half_track);
    1b5c:	25 e3       	ldi	r18, 0x35	; 53
    1b5e:	3a ef       	ldi	r19, 0xFA	; 250
    1b60:	4e e8       	ldi	r20, 0x8E	; 142
    1b62:	5c e3       	ldi	r21, 0x3C	; 60
    1b64:	c7 01       	movw	r24, r14
    1b66:	b6 01       	movw	r22, r12
    1b68:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e8       	ldi	r19, 0x80	; 128
    1b70:	44 e8       	ldi	r20, 0x84	; 132
    1b72:	53 e4       	ldi	r21, 0x43	; 67
    1b74:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	bf 77       	andi	r27, 0x7F	; 127
    1b7e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <turn_acc>
    1b82:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <turn_acc+0x1>
    1b86:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <turn_acc+0x2>
    1b8a:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <turn_acc+0x3>

	/* 3) Encoder counts per mm (same formula) */
	float circ = WHEEL_DIAMETER_MM * M_PI;
	turn_counts_per_mm = (4.0f * (float)ENCODER_PPR) / circ;
    1b8e:	84 ee       	ldi	r24, 0xE4	; 228
    1b90:	97 eb       	ldi	r25, 0xB7	; 183
    1b92:	ab ec       	ldi	r26, 0xCB	; 203
    1b94:	b0 e4       	ldi	r27, 0x40	; 64
    1b96:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <turn_counts_per_mm>
    1b9a:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <turn_counts_per_mm+0x1>
    1b9e:	a0 93 d0 01 	sts	0x01D0, r26	; 0x8001d0 <turn_counts_per_mm+0x2>
    1ba2:	b0 93 d1 01 	sts	0x01D1, r27	; 0x8001d1 <turn_counts_per_mm+0x3>

	/* 4) Reset & snapshot both encoders */
	motors_reset_edge_counts();
    1ba6:	0e 94 93 09 	call	0x1326	; 0x1326 <motors_reset_edge_counts>
	turn_start_left = motors_get_step_count_left();
    1baa:	0e 94 bf 09 	call	0x137e	; 0x137e <motors_get_step_count_left>
    1bae:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <turn_start_left>
    1bb2:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <turn_start_left+0x1>
    1bb6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <turn_start_left+0x2>
    1bba:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <turn_start_left+0x3>
	turn_start_right = motors_get_step_count_right();
    1bbe:	0e 94 c6 09 	call	0x138c	; 0x138c <motors_get_step_count_right>
    1bc2:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <turn_start_right>
    1bc6:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <turn_start_right+0x1>
    1bca:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <turn_start_right+0x2>
    1bce:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <turn_start_right+0x3>

	turn_running = true;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <turn_running>
}
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	df 90       	pop	r13
    1be4:	cf 90       	pop	r12
    1be6:	bf 90       	pop	r11
    1be8:	af 90       	pop	r10
    1bea:	9f 90       	pop	r9
    1bec:	8f 90       	pop	r8
    1bee:	7f 90       	pop	r7
    1bf0:	6f 90       	pop	r6
    1bf2:	5f 90       	pop	r5
    1bf4:	4f 90       	pop	r4
    1bf6:	08 95       	ret

00001bf8 <profiler_turn_update>:

void profiler_turn_update(void)
{
    1bf8:	4f 92       	push	r4
    1bfa:	5f 92       	push	r5
    1bfc:	6f 92       	push	r6
    1bfe:	7f 92       	push	r7
    1c00:	8f 92       	push	r8
    1c02:	9f 92       	push	r9
    1c04:	af 92       	push	r10
    1c06:	bf 92       	push	r11
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	28 97       	sbiw	r28, 0x08	; 8
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
	if (!turn_running)
    1c24:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <turn_running>
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <profiler_turn_update+0x36>
    1c2c:	eb c0       	rjmp	.+470    	; 0x1e04 <profiler_turn_update+0x20c>
		return;

	/* average wheel travel [mm] */
	uint32_t sl = motors_get_step_count_left() - turn_start_left;
    1c2e:	0e 94 bf 09 	call	0x137e	; 0x137e <motors_get_step_count_left>
    1c32:	c0 90 ca 01 	lds	r12, 0x01CA	; 0x8001ca <turn_start_left>
    1c36:	d0 90 cb 01 	lds	r13, 0x01CB	; 0x8001cb <turn_start_left+0x1>
    1c3a:	e0 90 cc 01 	lds	r14, 0x01CC	; 0x8001cc <turn_start_left+0x2>
    1c3e:	f0 90 cd 01 	lds	r15, 0x01CD	; 0x8001cd <turn_start_left+0x3>
    1c42:	4b 01       	movw	r8, r22
    1c44:	5c 01       	movw	r10, r24
    1c46:	8c 18       	sub	r8, r12
    1c48:	9d 08       	sbc	r9, r13
    1c4a:	ae 08       	sbc	r10, r14
    1c4c:	bf 08       	sbc	r11, r15
	uint32_t sr = motors_get_step_count_right() - turn_start_right;
    1c4e:	0e 94 c6 09 	call	0x138c	; 0x138c <motors_get_step_count_right>
    1c52:	c0 90 c6 01 	lds	r12, 0x01C6	; 0x8001c6 <turn_start_right>
    1c56:	d0 90 c7 01 	lds	r13, 0x01C7	; 0x8001c7 <turn_start_right+0x1>
    1c5a:	e0 90 c8 01 	lds	r14, 0x01C8	; 0x8001c8 <turn_start_right+0x2>
    1c5e:	f0 90 c9 01 	lds	r15, 0x01C9	; 0x8001c9 <turn_start_right+0x3>
    1c62:	9b 01       	movw	r18, r22
    1c64:	ac 01       	movw	r20, r24
    1c66:	2c 19       	sub	r18, r12
    1c68:	3d 09       	sbc	r19, r13
    1c6a:	4e 09       	sbc	r20, r14
    1c6c:	5f 09       	sbc	r21, r15
    1c6e:	69 01       	movw	r12, r18
    1c70:	7a 01       	movw	r14, r20
	float dl = sl / turn_counts_per_mm;
    1c72:	c5 01       	movw	r24, r10
    1c74:	b4 01       	movw	r22, r8
    1c76:	0e 94 2d 10 	call	0x205a	; 0x205a <__floatunsisf>
    1c7a:	80 90 ce 01 	lds	r8, 0x01CE	; 0x8001ce <turn_counts_per_mm>
    1c7e:	90 90 cf 01 	lds	r9, 0x01CF	; 0x8001cf <turn_counts_per_mm+0x1>
    1c82:	a0 90 d0 01 	lds	r10, 0x01D0	; 0x8001d0 <turn_counts_per_mm+0x2>
    1c86:	b0 90 d1 01 	lds	r11, 0x01D1	; 0x8001d1 <turn_counts_per_mm+0x3>
    1c8a:	a5 01       	movw	r20, r10
    1c8c:	94 01       	movw	r18, r8
    1c8e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
    1c92:	2b 01       	movw	r4, r22
    1c94:	3c 01       	movw	r6, r24
	float dr = sr / turn_counts_per_mm;
    1c96:	c7 01       	movw	r24, r14
    1c98:	b6 01       	movw	r22, r12
    1c9a:	0e 94 2d 10 	call	0x205a	; 0x205a <__floatunsisf>
    1c9e:	a5 01       	movw	r20, r10
    1ca0:	94 01       	movw	r18, r8
    1ca2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
    1ca6:	9b 01       	movw	r18, r22
    1ca8:	ac 01       	movw	r20, r24
	float d = (dl + dr) * 0.5f;
    1caa:	c3 01       	movw	r24, r6
    1cac:	b2 01       	movw	r22, r4
    1cae:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__addsf3>
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1cbe:	4b 01       	movw	r8, r22
    1cc0:	5c 01       	movw	r10, r24

	/* trapezoid breakpoints */
	float d_acc = (turn_max_vel * turn_max_vel) / (2.0f * turn_acc);
    1cc2:	c0 90 d6 01 	lds	r12, 0x01D6	; 0x8001d6 <turn_max_vel>
    1cc6:	d0 90 d7 01 	lds	r13, 0x01D7	; 0x8001d7 <turn_max_vel+0x1>
    1cca:	e0 90 d8 01 	lds	r14, 0x01D8	; 0x8001d8 <turn_max_vel+0x2>
    1cce:	f0 90 d9 01 	lds	r15, 0x01D9	; 0x8001d9 <turn_max_vel+0x3>
    1cd2:	a7 01       	movw	r20, r14
    1cd4:	96 01       	movw	r18, r12
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	b6 01       	movw	r22, r12
    1cda:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1cde:	2b 01       	movw	r4, r22
    1ce0:	3c 01       	movw	r6, r24
    1ce2:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <turn_acc>
    1ce6:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <turn_acc+0x1>
    1cea:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <turn_acc+0x2>
    1cee:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <turn_acc+0x3>
    1cf2:	9b 01       	movw	r18, r22
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__addsf3>
    1cfa:	69 83       	std	Y+1, r22	; 0x01
    1cfc:	7a 83       	std	Y+2, r23	; 0x02
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	c3 01       	movw	r24, r6
    1d08:	b2 01       	movw	r22, r4
    1d0a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
    1d0e:	6d 83       	std	Y+5, r22	; 0x05
    1d10:	7e 83       	std	Y+6, r23	; 0x06
    1d12:	8f 83       	std	Y+7, r24	; 0x07
    1d14:	98 87       	std	Y+8, r25	; 0x08
	float d_decel = d_acc;

	/* desired v [mm/s] */
	float v;
	if (d < d_acc)
    1d16:	9b 01       	movw	r18, r22
    1d18:	ac 01       	movw	r20, r24
    1d1a:	c5 01       	movw	r24, r10
    1d1c:	b4 01       	movw	r22, r8
    1d1e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__cmpsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	6c f4       	brge	.+26     	; 0x1d40 <profiler_turn_update+0x148>
	{
		v = sqrtf(2.0f * turn_acc * d);
    1d26:	29 81       	ldd	r18, Y+1	; 0x01
    1d28:	3a 81       	ldd	r19, Y+2	; 0x02
    1d2a:	4b 81       	ldd	r20, Y+3	; 0x03
    1d2c:	5c 81       	ldd	r21, Y+4	; 0x04
    1d2e:	c5 01       	movw	r24, r10
    1d30:	b4 01       	movw	r22, r8
    1d32:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1d36:	0e 94 57 11 	call	0x22ae	; 0x22ae <sqrt>
    1d3a:	6b 01       	movw	r12, r22
    1d3c:	7c 01       	movw	r14, r24
    1d3e:	2a c0       	rjmp	.+84     	; 0x1d94 <profiler_turn_update+0x19c>
	}
	else if (d < (target_wheel_mm - d_decel))
    1d40:	40 90 da 01 	lds	r4, 0x01DA	; 0x8001da <target_wheel_mm>
    1d44:	50 90 db 01 	lds	r5, 0x01DB	; 0x8001db <target_wheel_mm+0x1>
    1d48:	60 90 dc 01 	lds	r6, 0x01DC	; 0x8001dc <target_wheel_mm+0x2>
    1d4c:	70 90 dd 01 	lds	r7, 0x01DD	; 0x8001dd <target_wheel_mm+0x3>
    1d50:	2d 81       	ldd	r18, Y+5	; 0x05
    1d52:	3e 81       	ldd	r19, Y+6	; 0x06
    1d54:	4f 81       	ldd	r20, Y+7	; 0x07
    1d56:	58 85       	ldd	r21, Y+8	; 0x08
    1d58:	c3 01       	movw	r24, r6
    1d5a:	b2 01       	movw	r22, r4
    1d5c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__subsf3>
    1d60:	9b 01       	movw	r18, r22
    1d62:	ac 01       	movw	r20, r24
    1d64:	c5 01       	movw	r24, r10
    1d66:	b4 01       	movw	r22, r8
    1d68:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__cmpsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	94 f0       	brlt	.+36     	; 0x1d94 <profiler_turn_update+0x19c>
	{
		v = turn_max_vel;
	}
	else
	{
		float rem = target_wheel_mm - d;
    1d70:	a5 01       	movw	r20, r10
    1d72:	94 01       	movw	r18, r8
    1d74:	c3 01       	movw	r24, r6
    1d76:	b2 01       	movw	r22, r4
    1d78:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__subsf3>
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	ac 01       	movw	r20, r24
		v = sqrtf(2.0f * turn_acc * rem);
    1d80:	69 81       	ldd	r22, Y+1	; 0x01
    1d82:	7a 81       	ldd	r23, Y+2	; 0x02
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1d8c:	0e 94 57 11 	call	0x22ae	; 0x22ae <sqrt>
    1d90:	6b 01       	movw	r12, r22
    1d92:	7c 01       	movw	r14, r24
	}

	/* convert to RPM */
	float revs_s = v / (WHEEL_DIAMETER_MM * M_PI);
    1d94:	23 e6       	ldi	r18, 0x63	; 99
    1d96:	34 e1       	ldi	r19, 0x14	; 20
    1d98:	4d e1       	ldi	r20, 0x1D	; 29
    1d9a:	54 e4       	ldi	r21, 0x44	; 68
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	b6 01       	movw	r22, r12
    1da0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__divsf3>
	uint16_t rpm = (uint16_t)(revs_s * 60.0f + 0.5f);
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e7       	ldi	r20, 0x70	; 112
    1daa:	52 e4       	ldi	r21, 0x42	; 66
    1dac:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__mulsf3>
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__addsf3>
    1dbc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__fixunssfsi>
    1dc0:	6b 01       	movw	r12, r22
    1dc2:	7c 01       	movw	r14, r24

	/* opposite wheel dirs for in-place turn */
	motors_set_dir_left(!turn_ccw);
    1dc4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <turn_ccw>
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	89 27       	eor	r24, r25
    1dcc:	0e 94 05 09 	call	0x120a	; 0x120a <motors_set_dir_left>
	motors_set_dir_right(turn_ccw);
    1dd0:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <turn_ccw>
    1dd4:	0e 94 0f 09 	call	0x121e	; 0x121e <motors_set_dir_right>
	motors_set_speed_both(rpm, rpm);
    1dd8:	b6 01       	movw	r22, r12
    1dda:	c6 01       	movw	r24, r12
    1ddc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <motors_set_speed_both>

	/* done? */
	if (d >= target_wheel_mm)
    1de0:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <target_wheel_mm>
    1de4:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <target_wheel_mm+0x1>
    1de8:	40 91 dc 01 	lds	r20, 0x01DC	; 0x8001dc <target_wheel_mm+0x2>
    1dec:	50 91 dd 01 	lds	r21, 0x01DD	; 0x8001dd <target_wheel_mm+0x3>
    1df0:	c5 01       	movw	r24, r10
    1df2:	b4 01       	movw	r22, r8
    1df4:	0e 94 df 10 	call	0x21be	; 0x21be <__gesf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	24 f0       	brlt	.+8      	; 0x1e04 <profiler_turn_update+0x20c>
	{
		motors_stop_all();
    1dfc:	0e 94 85 09 	call	0x130a	; 0x130a <motors_stop_all>
		turn_running = false;
    1e00:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <turn_running>
	}
}
    1e04:	28 96       	adiw	r28, 0x08	; 8
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	df 90       	pop	r13
    1e1a:	cf 90       	pop	r12
    1e1c:	bf 90       	pop	r11
    1e1e:	af 90       	pop	r10
    1e20:	9f 90       	pop	r9
    1e22:	8f 90       	pop	r8
    1e24:	7f 90       	pop	r7
    1e26:	6f 90       	pop	r6
    1e28:	5f 90       	pop	r5
    1e2a:	4f 90       	pop	r4
    1e2c:	08 95       	ret

00001e2e <profiler_turn_is_running>:

bool profiler_turn_is_running(void)
{
	return turn_running;
}
    1e2e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <turn_running>
    1e32:	08 95       	ret

00001e34 <__subsf3>:
    1e34:	50 58       	subi	r21, 0x80	; 128

00001e36 <__addsf3>:
    1e36:	bb 27       	eor	r27, r27
    1e38:	aa 27       	eor	r26, r26
    1e3a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__addsf3x>
    1e3e:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__fp_round>
    1e42:	0e 94 97 10 	call	0x212e	; 0x212e <__fp_pscA>
    1e46:	38 f0       	brcs	.+14     	; 0x1e56 <__addsf3+0x20>
    1e48:	0e 94 9e 10 	call	0x213c	; 0x213c <__fp_pscB>
    1e4c:	20 f0       	brcs	.+8      	; 0x1e56 <__addsf3+0x20>
    1e4e:	39 f4       	brne	.+14     	; 0x1e5e <__addsf3+0x28>
    1e50:	9f 3f       	cpi	r25, 0xFF	; 255
    1e52:	19 f4       	brne	.+6      	; 0x1e5a <__addsf3+0x24>
    1e54:	26 f4       	brtc	.+8      	; 0x1e5e <__addsf3+0x28>
    1e56:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__fp_nan>
    1e5a:	0e f4       	brtc	.+2      	; 0x1e5e <__addsf3+0x28>
    1e5c:	e0 95       	com	r30
    1e5e:	e7 fb       	bst	r30, 7
    1e60:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__fp_inf>

00001e64 <__addsf3x>:
    1e64:	e9 2f       	mov	r30, r25
    1e66:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_split3>
    1e6a:	58 f3       	brcs	.-42     	; 0x1e42 <__addsf3+0xc>
    1e6c:	ba 17       	cp	r27, r26
    1e6e:	62 07       	cpc	r22, r18
    1e70:	73 07       	cpc	r23, r19
    1e72:	84 07       	cpc	r24, r20
    1e74:	95 07       	cpc	r25, r21
    1e76:	20 f0       	brcs	.+8      	; 0x1e80 <__addsf3x+0x1c>
    1e78:	79 f4       	brne	.+30     	; 0x1e98 <__addsf3x+0x34>
    1e7a:	a6 f5       	brtc	.+104    	; 0x1ee4 <__addsf3x+0x80>
    1e7c:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_zero>
    1e80:	0e f4       	brtc	.+2      	; 0x1e84 <__addsf3x+0x20>
    1e82:	e0 95       	com	r30
    1e84:	0b 2e       	mov	r0, r27
    1e86:	ba 2f       	mov	r27, r26
    1e88:	a0 2d       	mov	r26, r0
    1e8a:	0b 01       	movw	r0, r22
    1e8c:	b9 01       	movw	r22, r18
    1e8e:	90 01       	movw	r18, r0
    1e90:	0c 01       	movw	r0, r24
    1e92:	ca 01       	movw	r24, r20
    1e94:	a0 01       	movw	r20, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	ff 27       	eor	r31, r31
    1e9a:	59 1b       	sub	r21, r25
    1e9c:	99 f0       	breq	.+38     	; 0x1ec4 <__addsf3x+0x60>
    1e9e:	59 3f       	cpi	r21, 0xF9	; 249
    1ea0:	50 f4       	brcc	.+20     	; 0x1eb6 <__addsf3x+0x52>
    1ea2:	50 3e       	cpi	r21, 0xE0	; 224
    1ea4:	68 f1       	brcs	.+90     	; 0x1f00 <__addsf3x+0x9c>
    1ea6:	1a 16       	cp	r1, r26
    1ea8:	f0 40       	sbci	r31, 0x00	; 0
    1eaa:	a2 2f       	mov	r26, r18
    1eac:	23 2f       	mov	r18, r19
    1eae:	34 2f       	mov	r19, r20
    1eb0:	44 27       	eor	r20, r20
    1eb2:	58 5f       	subi	r21, 0xF8	; 248
    1eb4:	f3 cf       	rjmp	.-26     	; 0x1e9c <__addsf3x+0x38>
    1eb6:	46 95       	lsr	r20
    1eb8:	37 95       	ror	r19
    1eba:	27 95       	ror	r18
    1ebc:	a7 95       	ror	r26
    1ebe:	f0 40       	sbci	r31, 0x00	; 0
    1ec0:	53 95       	inc	r21
    1ec2:	c9 f7       	brne	.-14     	; 0x1eb6 <__addsf3x+0x52>
    1ec4:	7e f4       	brtc	.+30     	; 0x1ee4 <__addsf3x+0x80>
    1ec6:	1f 16       	cp	r1, r31
    1ec8:	ba 0b       	sbc	r27, r26
    1eca:	62 0b       	sbc	r22, r18
    1ecc:	73 0b       	sbc	r23, r19
    1ece:	84 0b       	sbc	r24, r20
    1ed0:	ba f0       	brmi	.+46     	; 0x1f00 <__addsf3x+0x9c>
    1ed2:	91 50       	subi	r25, 0x01	; 1
    1ed4:	a1 f0       	breq	.+40     	; 0x1efe <__addsf3x+0x9a>
    1ed6:	ff 0f       	add	r31, r31
    1ed8:	bb 1f       	adc	r27, r27
    1eda:	66 1f       	adc	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	c2 f7       	brpl	.-16     	; 0x1ed2 <__addsf3x+0x6e>
    1ee2:	0e c0       	rjmp	.+28     	; 0x1f00 <__addsf3x+0x9c>
    1ee4:	ba 0f       	add	r27, r26
    1ee6:	62 1f       	adc	r22, r18
    1ee8:	73 1f       	adc	r23, r19
    1eea:	84 1f       	adc	r24, r20
    1eec:	48 f4       	brcc	.+18     	; 0x1f00 <__addsf3x+0x9c>
    1eee:	87 95       	ror	r24
    1ef0:	77 95       	ror	r23
    1ef2:	67 95       	ror	r22
    1ef4:	b7 95       	ror	r27
    1ef6:	f7 95       	ror	r31
    1ef8:	9e 3f       	cpi	r25, 0xFE	; 254
    1efa:	08 f0       	brcs	.+2      	; 0x1efe <__addsf3x+0x9a>
    1efc:	b0 cf       	rjmp	.-160    	; 0x1e5e <__addsf3+0x28>
    1efe:	93 95       	inc	r25
    1f00:	88 0f       	add	r24, r24
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <__addsf3x+0xa2>
    1f04:	99 27       	eor	r25, r25
    1f06:	ee 0f       	add	r30, r30
    1f08:	97 95       	ror	r25
    1f0a:	87 95       	ror	r24
    1f0c:	08 95       	ret

00001f0e <__cmpsf2>:
    1f0e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fp_cmp>
    1f12:	08 f4       	brcc	.+2      	; 0x1f16 <__cmpsf2+0x8>
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	08 95       	ret

00001f18 <__divsf3>:
    1f18:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__divsf3x>
    1f1c:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__fp_round>
    1f20:	0e 94 9e 10 	call	0x213c	; 0x213c <__fp_pscB>
    1f24:	58 f0       	brcs	.+22     	; 0x1f3c <__divsf3+0x24>
    1f26:	0e 94 97 10 	call	0x212e	; 0x212e <__fp_pscA>
    1f2a:	40 f0       	brcs	.+16     	; 0x1f3c <__divsf3+0x24>
    1f2c:	29 f4       	brne	.+10     	; 0x1f38 <__divsf3+0x20>
    1f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f30:	29 f0       	breq	.+10     	; 0x1f3c <__divsf3+0x24>
    1f32:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__fp_inf>
    1f36:	51 11       	cpse	r21, r1
    1f38:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__fp_szero>
    1f3c:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__fp_nan>

00001f40 <__divsf3x>:
    1f40:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_split3>
    1f44:	68 f3       	brcs	.-38     	; 0x1f20 <__divsf3+0x8>

00001f46 <__divsf3_pse>:
    1f46:	99 23       	and	r25, r25
    1f48:	b1 f3       	breq	.-20     	; 0x1f36 <__divsf3+0x1e>
    1f4a:	55 23       	and	r21, r21
    1f4c:	91 f3       	breq	.-28     	; 0x1f32 <__divsf3+0x1a>
    1f4e:	95 1b       	sub	r25, r21
    1f50:	55 0b       	sbc	r21, r21
    1f52:	bb 27       	eor	r27, r27
    1f54:	aa 27       	eor	r26, r26
    1f56:	62 17       	cp	r22, r18
    1f58:	73 07       	cpc	r23, r19
    1f5a:	84 07       	cpc	r24, r20
    1f5c:	38 f0       	brcs	.+14     	; 0x1f6c <__divsf3_pse+0x26>
    1f5e:	9f 5f       	subi	r25, 0xFF	; 255
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	44 1f       	adc	r20, r20
    1f68:	aa 1f       	adc	r26, r26
    1f6a:	a9 f3       	breq	.-22     	; 0x1f56 <__divsf3_pse+0x10>
    1f6c:	35 d0       	rcall	.+106    	; 0x1fd8 <__divsf3_pse+0x92>
    1f6e:	0e 2e       	mov	r0, r30
    1f70:	3a f0       	brmi	.+14     	; 0x1f80 <__divsf3_pse+0x3a>
    1f72:	e0 e8       	ldi	r30, 0x80	; 128
    1f74:	32 d0       	rcall	.+100    	; 0x1fda <__divsf3_pse+0x94>
    1f76:	91 50       	subi	r25, 0x01	; 1
    1f78:	50 40       	sbci	r21, 0x00	; 0
    1f7a:	e6 95       	lsr	r30
    1f7c:	00 1c       	adc	r0, r0
    1f7e:	ca f7       	brpl	.-14     	; 0x1f72 <__divsf3_pse+0x2c>
    1f80:	2b d0       	rcall	.+86     	; 0x1fd8 <__divsf3_pse+0x92>
    1f82:	fe 2f       	mov	r31, r30
    1f84:	29 d0       	rcall	.+82     	; 0x1fd8 <__divsf3_pse+0x92>
    1f86:	66 0f       	add	r22, r22
    1f88:	77 1f       	adc	r23, r23
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	26 17       	cp	r18, r22
    1f90:	37 07       	cpc	r19, r23
    1f92:	48 07       	cpc	r20, r24
    1f94:	ab 07       	cpc	r26, r27
    1f96:	b0 e8       	ldi	r27, 0x80	; 128
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <__divsf3_pse+0x56>
    1f9a:	bb 0b       	sbc	r27, r27
    1f9c:	80 2d       	mov	r24, r0
    1f9e:	bf 01       	movw	r22, r30
    1fa0:	ff 27       	eor	r31, r31
    1fa2:	93 58       	subi	r25, 0x83	; 131
    1fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa6:	3a f0       	brmi	.+14     	; 0x1fb6 <__divsf3_pse+0x70>
    1fa8:	9e 3f       	cpi	r25, 0xFE	; 254
    1faa:	51 05       	cpc	r21, r1
    1fac:	78 f0       	brcs	.+30     	; 0x1fcc <__divsf3_pse+0x86>
    1fae:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__fp_inf>
    1fb2:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__fp_szero>
    1fb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb8:	e4 f3       	brlt	.-8      	; 0x1fb2 <__divsf3_pse+0x6c>
    1fba:	98 3e       	cpi	r25, 0xE8	; 232
    1fbc:	d4 f3       	brlt	.-12     	; 0x1fb2 <__divsf3_pse+0x6c>
    1fbe:	86 95       	lsr	r24
    1fc0:	77 95       	ror	r23
    1fc2:	67 95       	ror	r22
    1fc4:	b7 95       	ror	r27
    1fc6:	f7 95       	ror	r31
    1fc8:	9f 5f       	subi	r25, 0xFF	; 255
    1fca:	c9 f7       	brne	.-14     	; 0x1fbe <__divsf3_pse+0x78>
    1fcc:	88 0f       	add	r24, r24
    1fce:	91 1d       	adc	r25, r1
    1fd0:	96 95       	lsr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	97 f9       	bld	r25, 7
    1fd6:	08 95       	ret
    1fd8:	e1 e0       	ldi	r30, 0x01	; 1
    1fda:	66 0f       	add	r22, r22
    1fdc:	77 1f       	adc	r23, r23
    1fde:	88 1f       	adc	r24, r24
    1fe0:	bb 1f       	adc	r27, r27
    1fe2:	62 17       	cp	r22, r18
    1fe4:	73 07       	cpc	r23, r19
    1fe6:	84 07       	cpc	r24, r20
    1fe8:	ba 07       	cpc	r27, r26
    1fea:	20 f0       	brcs	.+8      	; 0x1ff4 <__divsf3_pse+0xae>
    1fec:	62 1b       	sub	r22, r18
    1fee:	73 0b       	sbc	r23, r19
    1ff0:	84 0b       	sbc	r24, r20
    1ff2:	ba 0b       	sbc	r27, r26
    1ff4:	ee 1f       	adc	r30, r30
    1ff6:	88 f7       	brcc	.-30     	; 0x1fda <__divsf3_pse+0x94>
    1ff8:	e0 95       	com	r30
    1ffa:	08 95       	ret

00001ffc <__fixunssfsi>:
    1ffc:	0e 94 be 10 	call	0x217c	; 0x217c <__fp_splitA>
    2000:	88 f0       	brcs	.+34     	; 0x2024 <__fixunssfsi+0x28>
    2002:	9f 57       	subi	r25, 0x7F	; 127
    2004:	98 f0       	brcs	.+38     	; 0x202c <__fixunssfsi+0x30>
    2006:	b9 2f       	mov	r27, r25
    2008:	99 27       	eor	r25, r25
    200a:	b7 51       	subi	r27, 0x17	; 23
    200c:	b0 f0       	brcs	.+44     	; 0x203a <__fixunssfsi+0x3e>
    200e:	e1 f0       	breq	.+56     	; 0x2048 <__fixunssfsi+0x4c>
    2010:	66 0f       	add	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	1a f0       	brmi	.+6      	; 0x2020 <__fixunssfsi+0x24>
    201a:	ba 95       	dec	r27
    201c:	c9 f7       	brne	.-14     	; 0x2010 <__fixunssfsi+0x14>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <__fixunssfsi+0x4c>
    2020:	b1 30       	cpi	r27, 0x01	; 1
    2022:	91 f0       	breq	.+36     	; 0x2048 <__fixunssfsi+0x4c>
    2024:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__fp_zero>
    2028:	b1 e0       	ldi	r27, 0x01	; 1
    202a:	08 95       	ret
    202c:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_zero>
    2030:	67 2f       	mov	r22, r23
    2032:	78 2f       	mov	r23, r24
    2034:	88 27       	eor	r24, r24
    2036:	b8 5f       	subi	r27, 0xF8	; 248
    2038:	39 f0       	breq	.+14     	; 0x2048 <__fixunssfsi+0x4c>
    203a:	b9 3f       	cpi	r27, 0xF9	; 249
    203c:	cc f3       	brlt	.-14     	; 0x2030 <__fixunssfsi+0x34>
    203e:	86 95       	lsr	r24
    2040:	77 95       	ror	r23
    2042:	67 95       	ror	r22
    2044:	b3 95       	inc	r27
    2046:	d9 f7       	brne	.-10     	; 0x203e <__fixunssfsi+0x42>
    2048:	3e f4       	brtc	.+14     	; 0x2058 <__fixunssfsi+0x5c>
    204a:	90 95       	com	r25
    204c:	80 95       	com	r24
    204e:	70 95       	com	r23
    2050:	61 95       	neg	r22
    2052:	7f 4f       	sbci	r23, 0xFF	; 255
    2054:	8f 4f       	sbci	r24, 0xFF	; 255
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	08 95       	ret

0000205a <__floatunsisf>:
    205a:	e8 94       	clt
    205c:	09 c0       	rjmp	.+18     	; 0x2070 <__floatsisf+0x12>

0000205e <__floatsisf>:
    205e:	97 fb       	bst	r25, 7
    2060:	3e f4       	brtc	.+14     	; 0x2070 <__floatsisf+0x12>
    2062:	90 95       	com	r25
    2064:	80 95       	com	r24
    2066:	70 95       	com	r23
    2068:	61 95       	neg	r22
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	8f 4f       	sbci	r24, 0xFF	; 255
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	99 23       	and	r25, r25
    2072:	a9 f0       	breq	.+42     	; 0x209e <__floatsisf+0x40>
    2074:	f9 2f       	mov	r31, r25
    2076:	96 e9       	ldi	r25, 0x96	; 150
    2078:	bb 27       	eor	r27, r27
    207a:	93 95       	inc	r25
    207c:	f6 95       	lsr	r31
    207e:	87 95       	ror	r24
    2080:	77 95       	ror	r23
    2082:	67 95       	ror	r22
    2084:	b7 95       	ror	r27
    2086:	f1 11       	cpse	r31, r1
    2088:	f8 cf       	rjmp	.-16     	; 0x207a <__floatsisf+0x1c>
    208a:	fa f4       	brpl	.+62     	; 0x20ca <__floatsisf+0x6c>
    208c:	bb 0f       	add	r27, r27
    208e:	11 f4       	brne	.+4      	; 0x2094 <__floatsisf+0x36>
    2090:	60 ff       	sbrs	r22, 0
    2092:	1b c0       	rjmp	.+54     	; 0x20ca <__floatsisf+0x6c>
    2094:	6f 5f       	subi	r22, 0xFF	; 255
    2096:	7f 4f       	sbci	r23, 0xFF	; 255
    2098:	8f 4f       	sbci	r24, 0xFF	; 255
    209a:	9f 4f       	sbci	r25, 0xFF	; 255
    209c:	16 c0       	rjmp	.+44     	; 0x20ca <__floatsisf+0x6c>
    209e:	88 23       	and	r24, r24
    20a0:	11 f0       	breq	.+4      	; 0x20a6 <__floatsisf+0x48>
    20a2:	96 e9       	ldi	r25, 0x96	; 150
    20a4:	11 c0       	rjmp	.+34     	; 0x20c8 <__floatsisf+0x6a>
    20a6:	77 23       	and	r23, r23
    20a8:	21 f0       	breq	.+8      	; 0x20b2 <__floatsisf+0x54>
    20aa:	9e e8       	ldi	r25, 0x8E	; 142
    20ac:	87 2f       	mov	r24, r23
    20ae:	76 2f       	mov	r23, r22
    20b0:	05 c0       	rjmp	.+10     	; 0x20bc <__floatsisf+0x5e>
    20b2:	66 23       	and	r22, r22
    20b4:	71 f0       	breq	.+28     	; 0x20d2 <__floatsisf+0x74>
    20b6:	96 e8       	ldi	r25, 0x86	; 134
    20b8:	86 2f       	mov	r24, r22
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	2a f0       	brmi	.+10     	; 0x20ca <__floatsisf+0x6c>
    20c0:	9a 95       	dec	r25
    20c2:	66 0f       	add	r22, r22
    20c4:	77 1f       	adc	r23, r23
    20c6:	88 1f       	adc	r24, r24
    20c8:	da f7       	brpl	.-10     	; 0x20c0 <__floatsisf+0x62>
    20ca:	88 0f       	add	r24, r24
    20cc:	96 95       	lsr	r25
    20ce:	87 95       	ror	r24
    20d0:	97 f9       	bld	r25, 7
    20d2:	08 95       	ret

000020d4 <__fp_cmp>:
    20d4:	99 0f       	add	r25, r25
    20d6:	00 08       	sbc	r0, r0
    20d8:	55 0f       	add	r21, r21
    20da:	aa 0b       	sbc	r26, r26
    20dc:	e0 e8       	ldi	r30, 0x80	; 128
    20de:	fe ef       	ldi	r31, 0xFE	; 254
    20e0:	16 16       	cp	r1, r22
    20e2:	17 06       	cpc	r1, r23
    20e4:	e8 07       	cpc	r30, r24
    20e6:	f9 07       	cpc	r31, r25
    20e8:	c0 f0       	brcs	.+48     	; 0x211a <__fp_cmp+0x46>
    20ea:	12 16       	cp	r1, r18
    20ec:	13 06       	cpc	r1, r19
    20ee:	e4 07       	cpc	r30, r20
    20f0:	f5 07       	cpc	r31, r21
    20f2:	98 f0       	brcs	.+38     	; 0x211a <__fp_cmp+0x46>
    20f4:	62 1b       	sub	r22, r18
    20f6:	73 0b       	sbc	r23, r19
    20f8:	84 0b       	sbc	r24, r20
    20fa:	95 0b       	sbc	r25, r21
    20fc:	39 f4       	brne	.+14     	; 0x210c <__fp_cmp+0x38>
    20fe:	0a 26       	eor	r0, r26
    2100:	61 f0       	breq	.+24     	; 0x211a <__fp_cmp+0x46>
    2102:	23 2b       	or	r18, r19
    2104:	24 2b       	or	r18, r20
    2106:	25 2b       	or	r18, r21
    2108:	21 f4       	brne	.+8      	; 0x2112 <__fp_cmp+0x3e>
    210a:	08 95       	ret
    210c:	0a 26       	eor	r0, r26
    210e:	09 f4       	brne	.+2      	; 0x2112 <__fp_cmp+0x3e>
    2110:	a1 40       	sbci	r26, 0x01	; 1
    2112:	a6 95       	lsr	r26
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	81 1d       	adc	r24, r1
    2118:	81 1d       	adc	r24, r1
    211a:	08 95       	ret

0000211c <__fp_inf>:
    211c:	97 f9       	bld	r25, 7
    211e:	9f 67       	ori	r25, 0x7F	; 127
    2120:	80 e8       	ldi	r24, 0x80	; 128
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	08 95       	ret

00002128 <__fp_nan>:
    2128:	9f ef       	ldi	r25, 0xFF	; 255
    212a:	80 ec       	ldi	r24, 0xC0	; 192
    212c:	08 95       	ret

0000212e <__fp_pscA>:
    212e:	00 24       	eor	r0, r0
    2130:	0a 94       	dec	r0
    2132:	16 16       	cp	r1, r22
    2134:	17 06       	cpc	r1, r23
    2136:	18 06       	cpc	r1, r24
    2138:	09 06       	cpc	r0, r25
    213a:	08 95       	ret

0000213c <__fp_pscB>:
    213c:	00 24       	eor	r0, r0
    213e:	0a 94       	dec	r0
    2140:	12 16       	cp	r1, r18
    2142:	13 06       	cpc	r1, r19
    2144:	14 06       	cpc	r1, r20
    2146:	05 06       	cpc	r0, r21
    2148:	08 95       	ret

0000214a <__fp_round>:
    214a:	09 2e       	mov	r0, r25
    214c:	03 94       	inc	r0
    214e:	00 0c       	add	r0, r0
    2150:	11 f4       	brne	.+4      	; 0x2156 <__fp_round+0xc>
    2152:	88 23       	and	r24, r24
    2154:	52 f0       	brmi	.+20     	; 0x216a <__fp_round+0x20>
    2156:	bb 0f       	add	r27, r27
    2158:	40 f4       	brcc	.+16     	; 0x216a <__fp_round+0x20>
    215a:	bf 2b       	or	r27, r31
    215c:	11 f4       	brne	.+4      	; 0x2162 <__fp_round+0x18>
    215e:	60 ff       	sbrs	r22, 0
    2160:	04 c0       	rjmp	.+8      	; 0x216a <__fp_round+0x20>
    2162:	6f 5f       	subi	r22, 0xFF	; 255
    2164:	7f 4f       	sbci	r23, 0xFF	; 255
    2166:	8f 4f       	sbci	r24, 0xFF	; 255
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	08 95       	ret

0000216c <__fp_split3>:
    216c:	57 fd       	sbrc	r21, 7
    216e:	90 58       	subi	r25, 0x80	; 128
    2170:	44 0f       	add	r20, r20
    2172:	55 1f       	adc	r21, r21
    2174:	59 f0       	breq	.+22     	; 0x218c <__fp_splitA+0x10>
    2176:	5f 3f       	cpi	r21, 0xFF	; 255
    2178:	71 f0       	breq	.+28     	; 0x2196 <__fp_splitA+0x1a>
    217a:	47 95       	ror	r20

0000217c <__fp_splitA>:
    217c:	88 0f       	add	r24, r24
    217e:	97 fb       	bst	r25, 7
    2180:	99 1f       	adc	r25, r25
    2182:	61 f0       	breq	.+24     	; 0x219c <__fp_splitA+0x20>
    2184:	9f 3f       	cpi	r25, 0xFF	; 255
    2186:	79 f0       	breq	.+30     	; 0x21a6 <__fp_splitA+0x2a>
    2188:	87 95       	ror	r24
    218a:	08 95       	ret
    218c:	12 16       	cp	r1, r18
    218e:	13 06       	cpc	r1, r19
    2190:	14 06       	cpc	r1, r20
    2192:	55 1f       	adc	r21, r21
    2194:	f2 cf       	rjmp	.-28     	; 0x217a <__fp_split3+0xe>
    2196:	46 95       	lsr	r20
    2198:	f1 df       	rcall	.-30     	; 0x217c <__fp_splitA>
    219a:	08 c0       	rjmp	.+16     	; 0x21ac <__fp_splitA+0x30>
    219c:	16 16       	cp	r1, r22
    219e:	17 06       	cpc	r1, r23
    21a0:	18 06       	cpc	r1, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	f1 cf       	rjmp	.-30     	; 0x2188 <__fp_splitA+0xc>
    21a6:	86 95       	lsr	r24
    21a8:	71 05       	cpc	r23, r1
    21aa:	61 05       	cpc	r22, r1
    21ac:	08 94       	sec
    21ae:	08 95       	ret

000021b0 <__fp_zero>:
    21b0:	e8 94       	clt

000021b2 <__fp_szero>:
    21b2:	bb 27       	eor	r27, r27
    21b4:	66 27       	eor	r22, r22
    21b6:	77 27       	eor	r23, r23
    21b8:	cb 01       	movw	r24, r22
    21ba:	97 f9       	bld	r25, 7
    21bc:	08 95       	ret

000021be <__gesf2>:
    21be:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fp_cmp>
    21c2:	08 f4       	brcc	.+2      	; 0x21c6 <__gesf2+0x8>
    21c4:	8f ef       	ldi	r24, 0xFF	; 255
    21c6:	08 95       	ret

000021c8 <__mulsf3>:
    21c8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3x>
    21cc:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__fp_round>
    21d0:	0e 94 97 10 	call	0x212e	; 0x212e <__fp_pscA>
    21d4:	38 f0       	brcs	.+14     	; 0x21e4 <__mulsf3+0x1c>
    21d6:	0e 94 9e 10 	call	0x213c	; 0x213c <__fp_pscB>
    21da:	20 f0       	brcs	.+8      	; 0x21e4 <__mulsf3+0x1c>
    21dc:	95 23       	and	r25, r21
    21de:	11 f0       	breq	.+4      	; 0x21e4 <__mulsf3+0x1c>
    21e0:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__fp_inf>
    21e4:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__fp_nan>
    21e8:	11 24       	eor	r1, r1
    21ea:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__fp_szero>

000021ee <__mulsf3x>:
    21ee:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_split3>
    21f2:	70 f3       	brcs	.-36     	; 0x21d0 <__mulsf3+0x8>

000021f4 <__mulsf3_pse>:
    21f4:	95 9f       	mul	r25, r21
    21f6:	c1 f3       	breq	.-16     	; 0x21e8 <__mulsf3+0x20>
    21f8:	95 0f       	add	r25, r21
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	55 1f       	adc	r21, r21
    21fe:	62 9f       	mul	r22, r18
    2200:	f0 01       	movw	r30, r0
    2202:	72 9f       	mul	r23, r18
    2204:	bb 27       	eor	r27, r27
    2206:	f0 0d       	add	r31, r0
    2208:	b1 1d       	adc	r27, r1
    220a:	63 9f       	mul	r22, r19
    220c:	aa 27       	eor	r26, r26
    220e:	f0 0d       	add	r31, r0
    2210:	b1 1d       	adc	r27, r1
    2212:	aa 1f       	adc	r26, r26
    2214:	64 9f       	mul	r22, r20
    2216:	66 27       	eor	r22, r22
    2218:	b0 0d       	add	r27, r0
    221a:	a1 1d       	adc	r26, r1
    221c:	66 1f       	adc	r22, r22
    221e:	82 9f       	mul	r24, r18
    2220:	22 27       	eor	r18, r18
    2222:	b0 0d       	add	r27, r0
    2224:	a1 1d       	adc	r26, r1
    2226:	62 1f       	adc	r22, r18
    2228:	73 9f       	mul	r23, r19
    222a:	b0 0d       	add	r27, r0
    222c:	a1 1d       	adc	r26, r1
    222e:	62 1f       	adc	r22, r18
    2230:	83 9f       	mul	r24, r19
    2232:	a0 0d       	add	r26, r0
    2234:	61 1d       	adc	r22, r1
    2236:	22 1f       	adc	r18, r18
    2238:	74 9f       	mul	r23, r20
    223a:	33 27       	eor	r19, r19
    223c:	a0 0d       	add	r26, r0
    223e:	61 1d       	adc	r22, r1
    2240:	23 1f       	adc	r18, r19
    2242:	84 9f       	mul	r24, r20
    2244:	60 0d       	add	r22, r0
    2246:	21 1d       	adc	r18, r1
    2248:	82 2f       	mov	r24, r18
    224a:	76 2f       	mov	r23, r22
    224c:	6a 2f       	mov	r22, r26
    224e:	11 24       	eor	r1, r1
    2250:	9f 57       	subi	r25, 0x7F	; 127
    2252:	50 40       	sbci	r21, 0x00	; 0
    2254:	9a f0       	brmi	.+38     	; 0x227c <__mulsf3_pse+0x88>
    2256:	f1 f0       	breq	.+60     	; 0x2294 <__mulsf3_pse+0xa0>
    2258:	88 23       	and	r24, r24
    225a:	4a f0       	brmi	.+18     	; 0x226e <__mulsf3_pse+0x7a>
    225c:	ee 0f       	add	r30, r30
    225e:	ff 1f       	adc	r31, r31
    2260:	bb 1f       	adc	r27, r27
    2262:	66 1f       	adc	r22, r22
    2264:	77 1f       	adc	r23, r23
    2266:	88 1f       	adc	r24, r24
    2268:	91 50       	subi	r25, 0x01	; 1
    226a:	50 40       	sbci	r21, 0x00	; 0
    226c:	a9 f7       	brne	.-22     	; 0x2258 <__mulsf3_pse+0x64>
    226e:	9e 3f       	cpi	r25, 0xFE	; 254
    2270:	51 05       	cpc	r21, r1
    2272:	80 f0       	brcs	.+32     	; 0x2294 <__mulsf3_pse+0xa0>
    2274:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__fp_inf>
    2278:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__fp_szero>
    227c:	5f 3f       	cpi	r21, 0xFF	; 255
    227e:	e4 f3       	brlt	.-8      	; 0x2278 <__mulsf3_pse+0x84>
    2280:	98 3e       	cpi	r25, 0xE8	; 232
    2282:	d4 f3       	brlt	.-12     	; 0x2278 <__mulsf3_pse+0x84>
    2284:	86 95       	lsr	r24
    2286:	77 95       	ror	r23
    2288:	67 95       	ror	r22
    228a:	b7 95       	ror	r27
    228c:	f7 95       	ror	r31
    228e:	e7 95       	ror	r30
    2290:	9f 5f       	subi	r25, 0xFF	; 255
    2292:	c1 f7       	brne	.-16     	; 0x2284 <__mulsf3_pse+0x90>
    2294:	fe 2b       	or	r31, r30
    2296:	88 0f       	add	r24, r24
    2298:	91 1d       	adc	r25, r1
    229a:	96 95       	lsr	r25
    229c:	87 95       	ror	r24
    229e:	97 f9       	bld	r25, 7
    22a0:	08 95       	ret
    22a2:	19 f4       	brne	.+6      	; 0x22aa <__mulsf3_pse+0xb6>
    22a4:	16 f4       	brtc	.+4      	; 0x22aa <__mulsf3_pse+0xb6>
    22a6:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__fp_nan>
    22aa:	0c 94 97 11 	jmp	0x232e	; 0x232e <__fp_mpack>

000022ae <sqrt>:
    22ae:	0e 94 be 10 	call	0x217c	; 0x217c <__fp_splitA>
    22b2:	b8 f3       	brcs	.-18     	; 0x22a2 <__mulsf3_pse+0xae>
    22b4:	99 23       	and	r25, r25
    22b6:	c9 f3       	breq	.-14     	; 0x22aa <__mulsf3_pse+0xb6>
    22b8:	b6 f3       	brts	.-20     	; 0x22a6 <__mulsf3_pse+0xb2>
    22ba:	9f 57       	subi	r25, 0x7F	; 127
    22bc:	55 0b       	sbc	r21, r21
    22be:	87 ff       	sbrs	r24, 7
    22c0:	0e 94 a5 11 	call	0x234a	; 0x234a <__fp_norm2>
    22c4:	00 24       	eor	r0, r0
    22c6:	a0 e6       	ldi	r26, 0x60	; 96
    22c8:	40 ea       	ldi	r20, 0xA0	; 160
    22ca:	90 01       	movw	r18, r0
    22cc:	80 58       	subi	r24, 0x80	; 128
    22ce:	56 95       	lsr	r21
    22d0:	97 95       	ror	r25
    22d2:	28 f4       	brcc	.+10     	; 0x22de <sqrt+0x30>
    22d4:	80 5c       	subi	r24, 0xC0	; 192
    22d6:	66 0f       	add	r22, r22
    22d8:	77 1f       	adc	r23, r23
    22da:	88 1f       	adc	r24, r24
    22dc:	20 f0       	brcs	.+8      	; 0x22e6 <sqrt+0x38>
    22de:	26 17       	cp	r18, r22
    22e0:	37 07       	cpc	r19, r23
    22e2:	48 07       	cpc	r20, r24
    22e4:	30 f4       	brcc	.+12     	; 0x22f2 <sqrt+0x44>
    22e6:	62 1b       	sub	r22, r18
    22e8:	73 0b       	sbc	r23, r19
    22ea:	84 0b       	sbc	r24, r20
    22ec:	20 29       	or	r18, r0
    22ee:	31 29       	or	r19, r1
    22f0:	4a 2b       	or	r20, r26
    22f2:	a6 95       	lsr	r26
    22f4:	17 94       	ror	r1
    22f6:	07 94       	ror	r0
    22f8:	20 25       	eor	r18, r0
    22fa:	31 25       	eor	r19, r1
    22fc:	4a 27       	eor	r20, r26
    22fe:	58 f7       	brcc	.-42     	; 0x22d6 <sqrt+0x28>
    2300:	66 0f       	add	r22, r22
    2302:	77 1f       	adc	r23, r23
    2304:	88 1f       	adc	r24, r24
    2306:	20 f0       	brcs	.+8      	; 0x2310 <sqrt+0x62>
    2308:	26 17       	cp	r18, r22
    230a:	37 07       	cpc	r19, r23
    230c:	48 07       	cpc	r20, r24
    230e:	30 f4       	brcc	.+12     	; 0x231c <sqrt+0x6e>
    2310:	62 0b       	sbc	r22, r18
    2312:	73 0b       	sbc	r23, r19
    2314:	84 0b       	sbc	r24, r20
    2316:	20 0d       	add	r18, r0
    2318:	31 1d       	adc	r19, r1
    231a:	41 1d       	adc	r20, r1
    231c:	a0 95       	com	r26
    231e:	81 f7       	brne	.-32     	; 0x2300 <sqrt+0x52>
    2320:	b9 01       	movw	r22, r18
    2322:	84 2f       	mov	r24, r20
    2324:	91 58       	subi	r25, 0x81	; 129
    2326:	88 0f       	add	r24, r24
    2328:	96 95       	lsr	r25
    232a:	87 95       	ror	r24
    232c:	08 95       	ret

0000232e <__fp_mpack>:
    232e:	9f 3f       	cpi	r25, 0xFF	; 255
    2330:	31 f0       	breq	.+12     	; 0x233e <__fp_mpack_finite+0xc>

00002332 <__fp_mpack_finite>:
    2332:	91 50       	subi	r25, 0x01	; 1
    2334:	20 f4       	brcc	.+8      	; 0x233e <__fp_mpack_finite+0xc>
    2336:	87 95       	ror	r24
    2338:	77 95       	ror	r23
    233a:	67 95       	ror	r22
    233c:	b7 95       	ror	r27
    233e:	88 0f       	add	r24, r24
    2340:	91 1d       	adc	r25, r1
    2342:	96 95       	lsr	r25
    2344:	87 95       	ror	r24
    2346:	97 f9       	bld	r25, 7
    2348:	08 95       	ret

0000234a <__fp_norm2>:
    234a:	91 50       	subi	r25, 0x01	; 1
    234c:	50 40       	sbci	r21, 0x00	; 0
    234e:	66 0f       	add	r22, r22
    2350:	77 1f       	adc	r23, r23
    2352:	88 1f       	adc	r24, r24
    2354:	d2 f7       	brpl	.-12     	; 0x234a <__fp_norm2>
    2356:	08 95       	ret

00002358 <vfprintf>:
    2358:	a0 e1       	ldi	r26, 0x10	; 16
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e2 eb       	ldi	r30, 0xB2	; 178
    235e:	f1 e1       	ldi	r31, 0x11	; 17
    2360:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__prologue_saves__>
    2364:	7c 01       	movw	r14, r24
    2366:	1b 01       	movw	r2, r22
    2368:	6a 01       	movw	r12, r20
    236a:	fc 01       	movw	r30, r24
    236c:	17 82       	std	Z+7, r1	; 0x07
    236e:	16 82       	std	Z+6, r1	; 0x06
    2370:	83 81       	ldd	r24, Z+3	; 0x03
    2372:	81 ff       	sbrs	r24, 1
    2374:	44 c3       	rjmp	.+1672   	; 0x29fe <vfprintf+0x6a6>
    2376:	9e 01       	movw	r18, r28
    2378:	2f 5f       	subi	r18, 0xFF	; 255
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	39 01       	movw	r6, r18
    237e:	f7 01       	movw	r30, r14
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	f1 01       	movw	r30, r2
    2384:	93 fd       	sbrc	r25, 3
    2386:	85 91       	lpm	r24, Z+
    2388:	93 ff       	sbrs	r25, 3
    238a:	81 91       	ld	r24, Z+
    238c:	1f 01       	movw	r2, r30
    238e:	88 23       	and	r24, r24
    2390:	09 f4       	brne	.+2      	; 0x2394 <vfprintf+0x3c>
    2392:	31 c3       	rjmp	.+1634   	; 0x29f6 <vfprintf+0x69e>
    2394:	85 32       	cpi	r24, 0x25	; 37
    2396:	39 f4       	brne	.+14     	; 0x23a6 <vfprintf+0x4e>
    2398:	93 fd       	sbrc	r25, 3
    239a:	85 91       	lpm	r24, Z+
    239c:	93 ff       	sbrs	r25, 3
    239e:	81 91       	ld	r24, Z+
    23a0:	1f 01       	movw	r2, r30
    23a2:	85 32       	cpi	r24, 0x25	; 37
    23a4:	39 f4       	brne	.+14     	; 0x23b4 <vfprintf+0x5c>
    23a6:	b7 01       	movw	r22, r14
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    23ae:	56 01       	movw	r10, r12
    23b0:	65 01       	movw	r12, r10
    23b2:	e5 cf       	rjmp	.-54     	; 0x237e <vfprintf+0x26>
    23b4:	10 e0       	ldi	r17, 0x00	; 0
    23b6:	51 2c       	mov	r5, r1
    23b8:	91 2c       	mov	r9, r1
    23ba:	ff e1       	ldi	r31, 0x1F	; 31
    23bc:	f9 15       	cp	r31, r9
    23be:	d8 f0       	brcs	.+54     	; 0x23f6 <vfprintf+0x9e>
    23c0:	8b 32       	cpi	r24, 0x2B	; 43
    23c2:	79 f0       	breq	.+30     	; 0x23e2 <vfprintf+0x8a>
    23c4:	38 f4       	brcc	.+14     	; 0x23d4 <vfprintf+0x7c>
    23c6:	80 32       	cpi	r24, 0x20	; 32
    23c8:	79 f0       	breq	.+30     	; 0x23e8 <vfprintf+0x90>
    23ca:	83 32       	cpi	r24, 0x23	; 35
    23cc:	a1 f4       	brne	.+40     	; 0x23f6 <vfprintf+0x9e>
    23ce:	f9 2d       	mov	r31, r9
    23d0:	f0 61       	ori	r31, 0x10	; 16
    23d2:	2e c0       	rjmp	.+92     	; 0x2430 <vfprintf+0xd8>
    23d4:	8d 32       	cpi	r24, 0x2D	; 45
    23d6:	61 f0       	breq	.+24     	; 0x23f0 <vfprintf+0x98>
    23d8:	80 33       	cpi	r24, 0x30	; 48
    23da:	69 f4       	brne	.+26     	; 0x23f6 <vfprintf+0x9e>
    23dc:	29 2d       	mov	r18, r9
    23de:	21 60       	ori	r18, 0x01	; 1
    23e0:	2d c0       	rjmp	.+90     	; 0x243c <vfprintf+0xe4>
    23e2:	39 2d       	mov	r19, r9
    23e4:	32 60       	ori	r19, 0x02	; 2
    23e6:	93 2e       	mov	r9, r19
    23e8:	89 2d       	mov	r24, r9
    23ea:	84 60       	ori	r24, 0x04	; 4
    23ec:	98 2e       	mov	r9, r24
    23ee:	2a c0       	rjmp	.+84     	; 0x2444 <vfprintf+0xec>
    23f0:	e9 2d       	mov	r30, r9
    23f2:	e8 60       	ori	r30, 0x08	; 8
    23f4:	15 c0       	rjmp	.+42     	; 0x2420 <vfprintf+0xc8>
    23f6:	97 fc       	sbrc	r9, 7
    23f8:	2d c0       	rjmp	.+90     	; 0x2454 <vfprintf+0xfc>
    23fa:	20 ed       	ldi	r18, 0xD0	; 208
    23fc:	28 0f       	add	r18, r24
    23fe:	2a 30       	cpi	r18, 0x0A	; 10
    2400:	88 f4       	brcc	.+34     	; 0x2424 <vfprintf+0xcc>
    2402:	96 fe       	sbrs	r9, 6
    2404:	06 c0       	rjmp	.+12     	; 0x2412 <vfprintf+0xba>
    2406:	3a e0       	ldi	r19, 0x0A	; 10
    2408:	13 9f       	mul	r17, r19
    240a:	20 0d       	add	r18, r0
    240c:	11 24       	eor	r1, r1
    240e:	12 2f       	mov	r17, r18
    2410:	19 c0       	rjmp	.+50     	; 0x2444 <vfprintf+0xec>
    2412:	8a e0       	ldi	r24, 0x0A	; 10
    2414:	58 9e       	mul	r5, r24
    2416:	20 0d       	add	r18, r0
    2418:	11 24       	eor	r1, r1
    241a:	52 2e       	mov	r5, r18
    241c:	e9 2d       	mov	r30, r9
    241e:	e0 62       	ori	r30, 0x20	; 32
    2420:	9e 2e       	mov	r9, r30
    2422:	10 c0       	rjmp	.+32     	; 0x2444 <vfprintf+0xec>
    2424:	8e 32       	cpi	r24, 0x2E	; 46
    2426:	31 f4       	brne	.+12     	; 0x2434 <vfprintf+0xdc>
    2428:	96 fc       	sbrc	r9, 6
    242a:	e5 c2       	rjmp	.+1482   	; 0x29f6 <vfprintf+0x69e>
    242c:	f9 2d       	mov	r31, r9
    242e:	f0 64       	ori	r31, 0x40	; 64
    2430:	9f 2e       	mov	r9, r31
    2432:	08 c0       	rjmp	.+16     	; 0x2444 <vfprintf+0xec>
    2434:	8c 36       	cpi	r24, 0x6C	; 108
    2436:	21 f4       	brne	.+8      	; 0x2440 <vfprintf+0xe8>
    2438:	29 2d       	mov	r18, r9
    243a:	20 68       	ori	r18, 0x80	; 128
    243c:	92 2e       	mov	r9, r18
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <vfprintf+0xec>
    2440:	88 36       	cpi	r24, 0x68	; 104
    2442:	41 f4       	brne	.+16     	; 0x2454 <vfprintf+0xfc>
    2444:	f1 01       	movw	r30, r2
    2446:	93 fd       	sbrc	r25, 3
    2448:	85 91       	lpm	r24, Z+
    244a:	93 ff       	sbrs	r25, 3
    244c:	81 91       	ld	r24, Z+
    244e:	1f 01       	movw	r2, r30
    2450:	81 11       	cpse	r24, r1
    2452:	b3 cf       	rjmp	.-154    	; 0x23ba <vfprintf+0x62>
    2454:	9b eb       	ldi	r25, 0xBB	; 187
    2456:	98 0f       	add	r25, r24
    2458:	93 30       	cpi	r25, 0x03	; 3
    245a:	20 f4       	brcc	.+8      	; 0x2464 <vfprintf+0x10c>
    245c:	99 2d       	mov	r25, r9
    245e:	90 61       	ori	r25, 0x10	; 16
    2460:	80 5e       	subi	r24, 0xE0	; 224
    2462:	07 c0       	rjmp	.+14     	; 0x2472 <vfprintf+0x11a>
    2464:	9b e9       	ldi	r25, 0x9B	; 155
    2466:	98 0f       	add	r25, r24
    2468:	93 30       	cpi	r25, 0x03	; 3
    246a:	08 f0       	brcs	.+2      	; 0x246e <vfprintf+0x116>
    246c:	66 c1       	rjmp	.+716    	; 0x273a <vfprintf+0x3e2>
    246e:	99 2d       	mov	r25, r9
    2470:	9f 7e       	andi	r25, 0xEF	; 239
    2472:	96 ff       	sbrs	r25, 6
    2474:	16 e0       	ldi	r17, 0x06	; 6
    2476:	9f 73       	andi	r25, 0x3F	; 63
    2478:	99 2e       	mov	r9, r25
    247a:	85 36       	cpi	r24, 0x65	; 101
    247c:	19 f4       	brne	.+6      	; 0x2484 <vfprintf+0x12c>
    247e:	90 64       	ori	r25, 0x40	; 64
    2480:	99 2e       	mov	r9, r25
    2482:	08 c0       	rjmp	.+16     	; 0x2494 <vfprintf+0x13c>
    2484:	86 36       	cpi	r24, 0x66	; 102
    2486:	21 f4       	brne	.+8      	; 0x2490 <vfprintf+0x138>
    2488:	39 2f       	mov	r19, r25
    248a:	30 68       	ori	r19, 0x80	; 128
    248c:	93 2e       	mov	r9, r19
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <vfprintf+0x13c>
    2490:	11 11       	cpse	r17, r1
    2492:	11 50       	subi	r17, 0x01	; 1
    2494:	97 fe       	sbrs	r9, 7
    2496:	07 c0       	rjmp	.+14     	; 0x24a6 <vfprintf+0x14e>
    2498:	1c 33       	cpi	r17, 0x3C	; 60
    249a:	50 f4       	brcc	.+20     	; 0x24b0 <vfprintf+0x158>
    249c:	44 24       	eor	r4, r4
    249e:	43 94       	inc	r4
    24a0:	41 0e       	add	r4, r17
    24a2:	27 e0       	ldi	r18, 0x07	; 7
    24a4:	0b c0       	rjmp	.+22     	; 0x24bc <vfprintf+0x164>
    24a6:	18 30       	cpi	r17, 0x08	; 8
    24a8:	38 f0       	brcs	.+14     	; 0x24b8 <vfprintf+0x160>
    24aa:	27 e0       	ldi	r18, 0x07	; 7
    24ac:	17 e0       	ldi	r17, 0x07	; 7
    24ae:	05 c0       	rjmp	.+10     	; 0x24ba <vfprintf+0x162>
    24b0:	27 e0       	ldi	r18, 0x07	; 7
    24b2:	9c e3       	ldi	r25, 0x3C	; 60
    24b4:	49 2e       	mov	r4, r25
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <vfprintf+0x164>
    24b8:	21 2f       	mov	r18, r17
    24ba:	41 2c       	mov	r4, r1
    24bc:	56 01       	movw	r10, r12
    24be:	84 e0       	ldi	r24, 0x04	; 4
    24c0:	a8 0e       	add	r10, r24
    24c2:	b1 1c       	adc	r11, r1
    24c4:	f6 01       	movw	r30, r12
    24c6:	60 81       	ld	r22, Z
    24c8:	71 81       	ldd	r23, Z+1	; 0x01
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	93 81       	ldd	r25, Z+3	; 0x03
    24ce:	04 2d       	mov	r16, r4
    24d0:	a3 01       	movw	r20, r6
    24d2:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__ftoa_engine>
    24d6:	6c 01       	movw	r12, r24
    24d8:	f9 81       	ldd	r31, Y+1	; 0x01
    24da:	fc 87       	std	Y+12, r31	; 0x0c
    24dc:	f0 ff       	sbrs	r31, 0
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <vfprintf+0x18c>
    24e0:	f3 ff       	sbrs	r31, 3
    24e2:	06 c0       	rjmp	.+12     	; 0x24f0 <vfprintf+0x198>
    24e4:	91 fc       	sbrc	r9, 1
    24e6:	06 c0       	rjmp	.+12     	; 0x24f4 <vfprintf+0x19c>
    24e8:	92 fe       	sbrs	r9, 2
    24ea:	06 c0       	rjmp	.+12     	; 0x24f8 <vfprintf+0x1a0>
    24ec:	00 e2       	ldi	r16, 0x20	; 32
    24ee:	05 c0       	rjmp	.+10     	; 0x24fa <vfprintf+0x1a2>
    24f0:	0d e2       	ldi	r16, 0x2D	; 45
    24f2:	03 c0       	rjmp	.+6      	; 0x24fa <vfprintf+0x1a2>
    24f4:	0b e2       	ldi	r16, 0x2B	; 43
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <vfprintf+0x1a2>
    24f8:	00 e0       	ldi	r16, 0x00	; 0
    24fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    24fc:	8c 70       	andi	r24, 0x0C	; 12
    24fe:	19 f0       	breq	.+6      	; 0x2506 <vfprintf+0x1ae>
    2500:	01 11       	cpse	r16, r1
    2502:	5a c2       	rjmp	.+1204   	; 0x29b8 <vfprintf+0x660>
    2504:	9b c2       	rjmp	.+1334   	; 0x2a3c <vfprintf+0x6e4>
    2506:	97 fe       	sbrs	r9, 7
    2508:	10 c0       	rjmp	.+32     	; 0x252a <vfprintf+0x1d2>
    250a:	4c 0c       	add	r4, r12
    250c:	fc 85       	ldd	r31, Y+12	; 0x0c
    250e:	f4 ff       	sbrs	r31, 4
    2510:	04 c0       	rjmp	.+8      	; 0x251a <vfprintf+0x1c2>
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	81 33       	cpi	r24, 0x31	; 49
    2516:	09 f4       	brne	.+2      	; 0x251a <vfprintf+0x1c2>
    2518:	4a 94       	dec	r4
    251a:	14 14       	cp	r1, r4
    251c:	74 f5       	brge	.+92     	; 0x257a <vfprintf+0x222>
    251e:	28 e0       	ldi	r18, 0x08	; 8
    2520:	24 15       	cp	r18, r4
    2522:	78 f5       	brcc	.+94     	; 0x2582 <vfprintf+0x22a>
    2524:	88 e0       	ldi	r24, 0x08	; 8
    2526:	48 2e       	mov	r4, r24
    2528:	2c c0       	rjmp	.+88     	; 0x2582 <vfprintf+0x22a>
    252a:	96 fc       	sbrc	r9, 6
    252c:	2a c0       	rjmp	.+84     	; 0x2582 <vfprintf+0x22a>
    252e:	81 2f       	mov	r24, r17
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	8c 15       	cp	r24, r12
    2534:	9d 05       	cpc	r25, r13
    2536:	9c f0       	brlt	.+38     	; 0x255e <vfprintf+0x206>
    2538:	3c ef       	ldi	r19, 0xFC	; 252
    253a:	c3 16       	cp	r12, r19
    253c:	3f ef       	ldi	r19, 0xFF	; 255
    253e:	d3 06       	cpc	r13, r19
    2540:	74 f0       	brlt	.+28     	; 0x255e <vfprintf+0x206>
    2542:	89 2d       	mov	r24, r9
    2544:	80 68       	ori	r24, 0x80	; 128
    2546:	98 2e       	mov	r9, r24
    2548:	0a c0       	rjmp	.+20     	; 0x255e <vfprintf+0x206>
    254a:	e2 e0       	ldi	r30, 0x02	; 2
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	ec 0f       	add	r30, r28
    2550:	fd 1f       	adc	r31, r29
    2552:	e1 0f       	add	r30, r17
    2554:	f1 1d       	adc	r31, r1
    2556:	80 81       	ld	r24, Z
    2558:	80 33       	cpi	r24, 0x30	; 48
    255a:	19 f4       	brne	.+6      	; 0x2562 <vfprintf+0x20a>
    255c:	11 50       	subi	r17, 0x01	; 1
    255e:	11 11       	cpse	r17, r1
    2560:	f4 cf       	rjmp	.-24     	; 0x254a <vfprintf+0x1f2>
    2562:	97 fe       	sbrs	r9, 7
    2564:	0e c0       	rjmp	.+28     	; 0x2582 <vfprintf+0x22a>
    2566:	44 24       	eor	r4, r4
    2568:	43 94       	inc	r4
    256a:	41 0e       	add	r4, r17
    256c:	81 2f       	mov	r24, r17
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	c8 16       	cp	r12, r24
    2572:	d9 06       	cpc	r13, r25
    2574:	2c f4       	brge	.+10     	; 0x2580 <vfprintf+0x228>
    2576:	1c 19       	sub	r17, r12
    2578:	04 c0       	rjmp	.+8      	; 0x2582 <vfprintf+0x22a>
    257a:	44 24       	eor	r4, r4
    257c:	43 94       	inc	r4
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <vfprintf+0x22a>
    2580:	10 e0       	ldi	r17, 0x00	; 0
    2582:	97 fe       	sbrs	r9, 7
    2584:	06 c0       	rjmp	.+12     	; 0x2592 <vfprintf+0x23a>
    2586:	1c 14       	cp	r1, r12
    2588:	1d 04       	cpc	r1, r13
    258a:	34 f4       	brge	.+12     	; 0x2598 <vfprintf+0x240>
    258c:	c6 01       	movw	r24, r12
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	05 c0       	rjmp	.+10     	; 0x259c <vfprintf+0x244>
    2592:	85 e0       	ldi	r24, 0x05	; 5
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	02 c0       	rjmp	.+4      	; 0x259c <vfprintf+0x244>
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	01 11       	cpse	r16, r1
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	11 23       	and	r17, r17
    25a2:	31 f0       	breq	.+12     	; 0x25b0 <vfprintf+0x258>
    25a4:	21 2f       	mov	r18, r17
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	2f 5f       	subi	r18, 0xFF	; 255
    25aa:	3f 4f       	sbci	r19, 0xFF	; 255
    25ac:	82 0f       	add	r24, r18
    25ae:	93 1f       	adc	r25, r19
    25b0:	25 2d       	mov	r18, r5
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	82 17       	cp	r24, r18
    25b6:	93 07       	cpc	r25, r19
    25b8:	14 f4       	brge	.+4      	; 0x25be <vfprintf+0x266>
    25ba:	58 1a       	sub	r5, r24
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <vfprintf+0x268>
    25be:	51 2c       	mov	r5, r1
    25c0:	89 2d       	mov	r24, r9
    25c2:	89 70       	andi	r24, 0x09	; 9
    25c4:	49 f4       	brne	.+18     	; 0x25d8 <vfprintf+0x280>
    25c6:	55 20       	and	r5, r5
    25c8:	39 f0       	breq	.+14     	; 0x25d8 <vfprintf+0x280>
    25ca:	b7 01       	movw	r22, r14
    25cc:	80 e2       	ldi	r24, 0x20	; 32
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    25d4:	5a 94       	dec	r5
    25d6:	f7 cf       	rjmp	.-18     	; 0x25c6 <vfprintf+0x26e>
    25d8:	00 23       	and	r16, r16
    25da:	29 f0       	breq	.+10     	; 0x25e6 <vfprintf+0x28e>
    25dc:	b7 01       	movw	r22, r14
    25de:	80 2f       	mov	r24, r16
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    25e6:	93 fc       	sbrc	r9, 3
    25e8:	09 c0       	rjmp	.+18     	; 0x25fc <vfprintf+0x2a4>
    25ea:	55 20       	and	r5, r5
    25ec:	39 f0       	breq	.+14     	; 0x25fc <vfprintf+0x2a4>
    25ee:	b7 01       	movw	r22, r14
    25f0:	80 e3       	ldi	r24, 0x30	; 48
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    25f8:	5a 94       	dec	r5
    25fa:	f7 cf       	rjmp	.-18     	; 0x25ea <vfprintf+0x292>
    25fc:	97 fe       	sbrs	r9, 7
    25fe:	4c c0       	rjmp	.+152    	; 0x2698 <vfprintf+0x340>
    2600:	46 01       	movw	r8, r12
    2602:	d7 fe       	sbrs	r13, 7
    2604:	02 c0       	rjmp	.+4      	; 0x260a <vfprintf+0x2b2>
    2606:	81 2c       	mov	r8, r1
    2608:	91 2c       	mov	r9, r1
    260a:	c6 01       	movw	r24, r12
    260c:	88 19       	sub	r24, r8
    260e:	99 09       	sbc	r25, r9
    2610:	f3 01       	movw	r30, r6
    2612:	e8 0f       	add	r30, r24
    2614:	f9 1f       	adc	r31, r25
    2616:	fe 87       	std	Y+14, r31	; 0x0e
    2618:	ed 87       	std	Y+13, r30	; 0x0d
    261a:	96 01       	movw	r18, r12
    261c:	24 19       	sub	r18, r4
    261e:	31 09       	sbc	r19, r1
    2620:	38 8b       	std	Y+16, r19	; 0x10
    2622:	2f 87       	std	Y+15, r18	; 0x0f
    2624:	01 2f       	mov	r16, r17
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	11 95       	neg	r17
    262a:	01 95       	neg	r16
    262c:	11 09       	sbc	r17, r1
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	83 16       	cp	r8, r19
    2632:	93 06       	cpc	r9, r19
    2634:	29 f4       	brne	.+10     	; 0x2640 <vfprintf+0x2e8>
    2636:	b7 01       	movw	r22, r14
    2638:	8e e2       	ldi	r24, 0x2E	; 46
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    2640:	c8 14       	cp	r12, r8
    2642:	d9 04       	cpc	r13, r9
    2644:	4c f0       	brlt	.+18     	; 0x2658 <vfprintf+0x300>
    2646:	8f 85       	ldd	r24, Y+15	; 0x0f
    2648:	98 89       	ldd	r25, Y+16	; 0x10
    264a:	88 15       	cp	r24, r8
    264c:	99 05       	cpc	r25, r9
    264e:	24 f4       	brge	.+8      	; 0x2658 <vfprintf+0x300>
    2650:	ed 85       	ldd	r30, Y+13	; 0x0d
    2652:	fe 85       	ldd	r31, Y+14	; 0x0e
    2654:	81 81       	ldd	r24, Z+1	; 0x01
    2656:	01 c0       	rjmp	.+2      	; 0x265a <vfprintf+0x302>
    2658:	80 e3       	ldi	r24, 0x30	; 48
    265a:	f1 e0       	ldi	r31, 0x01	; 1
    265c:	8f 1a       	sub	r8, r31
    265e:	91 08       	sbc	r9, r1
    2660:	2d 85       	ldd	r18, Y+13	; 0x0d
    2662:	3e 85       	ldd	r19, Y+14	; 0x0e
    2664:	2f 5f       	subi	r18, 0xFF	; 255
    2666:	3f 4f       	sbci	r19, 0xFF	; 255
    2668:	3e 87       	std	Y+14, r19	; 0x0e
    266a:	2d 87       	std	Y+13, r18	; 0x0d
    266c:	80 16       	cp	r8, r16
    266e:	91 06       	cpc	r9, r17
    2670:	2c f0       	brlt	.+10     	; 0x267c <vfprintf+0x324>
    2672:	b7 01       	movw	r22, r14
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    267a:	d9 cf       	rjmp	.-78     	; 0x262e <vfprintf+0x2d6>
    267c:	c8 14       	cp	r12, r8
    267e:	d9 04       	cpc	r13, r9
    2680:	41 f4       	brne	.+16     	; 0x2692 <vfprintf+0x33a>
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	96 33       	cpi	r25, 0x36	; 54
    2686:	20 f4       	brcc	.+8      	; 0x2690 <vfprintf+0x338>
    2688:	95 33       	cpi	r25, 0x35	; 53
    268a:	19 f4       	brne	.+6      	; 0x2692 <vfprintf+0x33a>
    268c:	3c 85       	ldd	r19, Y+12	; 0x0c
    268e:	34 ff       	sbrs	r19, 4
    2690:	81 e3       	ldi	r24, 0x31	; 49
    2692:	b7 01       	movw	r22, r14
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	4e c0       	rjmp	.+156    	; 0x2734 <vfprintf+0x3dc>
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	81 33       	cpi	r24, 0x31	; 49
    269c:	19 f0       	breq	.+6      	; 0x26a4 <vfprintf+0x34c>
    269e:	9c 85       	ldd	r25, Y+12	; 0x0c
    26a0:	9f 7e       	andi	r25, 0xEF	; 239
    26a2:	9c 87       	std	Y+12, r25	; 0x0c
    26a4:	b7 01       	movw	r22, r14
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    26ac:	11 11       	cpse	r17, r1
    26ae:	05 c0       	rjmp	.+10     	; 0x26ba <vfprintf+0x362>
    26b0:	94 fc       	sbrc	r9, 4
    26b2:	18 c0       	rjmp	.+48     	; 0x26e4 <vfprintf+0x38c>
    26b4:	85 e6       	ldi	r24, 0x65	; 101
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	17 c0       	rjmp	.+46     	; 0x26e8 <vfprintf+0x390>
    26ba:	b7 01       	movw	r22, r14
    26bc:	8e e2       	ldi	r24, 0x2E	; 46
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    26c4:	1e 5f       	subi	r17, 0xFE	; 254
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	01 e0       	ldi	r16, 0x01	; 1
    26ca:	08 0f       	add	r16, r24
    26cc:	f3 01       	movw	r30, r6
    26ce:	e8 0f       	add	r30, r24
    26d0:	f1 1d       	adc	r31, r1
    26d2:	80 81       	ld	r24, Z
    26d4:	b7 01       	movw	r22, r14
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    26dc:	80 2f       	mov	r24, r16
    26de:	01 13       	cpse	r16, r17
    26e0:	f3 cf       	rjmp	.-26     	; 0x26c8 <vfprintf+0x370>
    26e2:	e6 cf       	rjmp	.-52     	; 0x26b0 <vfprintf+0x358>
    26e4:	85 e4       	ldi	r24, 0x45	; 69
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	b7 01       	movw	r22, r14
    26ea:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    26ee:	d7 fc       	sbrc	r13, 7
    26f0:	06 c0       	rjmp	.+12     	; 0x26fe <vfprintf+0x3a6>
    26f2:	c1 14       	cp	r12, r1
    26f4:	d1 04       	cpc	r13, r1
    26f6:	41 f4       	brne	.+16     	; 0x2708 <vfprintf+0x3b0>
    26f8:	ec 85       	ldd	r30, Y+12	; 0x0c
    26fa:	e4 ff       	sbrs	r30, 4
    26fc:	05 c0       	rjmp	.+10     	; 0x2708 <vfprintf+0x3b0>
    26fe:	d1 94       	neg	r13
    2700:	c1 94       	neg	r12
    2702:	d1 08       	sbc	r13, r1
    2704:	8d e2       	ldi	r24, 0x2D	; 45
    2706:	01 c0       	rjmp	.+2      	; 0x270a <vfprintf+0x3b2>
    2708:	8b e2       	ldi	r24, 0x2B	; 43
    270a:	b7 01       	movw	r22, r14
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    2712:	80 e3       	ldi	r24, 0x30	; 48
    2714:	2a e0       	ldi	r18, 0x0A	; 10
    2716:	c2 16       	cp	r12, r18
    2718:	d1 04       	cpc	r13, r1
    271a:	2c f0       	brlt	.+10     	; 0x2726 <vfprintf+0x3ce>
    271c:	8f 5f       	subi	r24, 0xFF	; 255
    271e:	fa e0       	ldi	r31, 0x0A	; 10
    2720:	cf 1a       	sub	r12, r31
    2722:	d1 08       	sbc	r13, r1
    2724:	f7 cf       	rjmp	.-18     	; 0x2714 <vfprintf+0x3bc>
    2726:	b7 01       	movw	r22, r14
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    272e:	b7 01       	movw	r22, r14
    2730:	c6 01       	movw	r24, r12
    2732:	c0 96       	adiw	r24, 0x30	; 48
    2734:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    2738:	54 c1       	rjmp	.+680    	; 0x29e2 <vfprintf+0x68a>
    273a:	83 36       	cpi	r24, 0x63	; 99
    273c:	31 f0       	breq	.+12     	; 0x274a <vfprintf+0x3f2>
    273e:	83 37       	cpi	r24, 0x73	; 115
    2740:	79 f0       	breq	.+30     	; 0x2760 <vfprintf+0x408>
    2742:	83 35       	cpi	r24, 0x53	; 83
    2744:	09 f0       	breq	.+2      	; 0x2748 <vfprintf+0x3f0>
    2746:	56 c0       	rjmp	.+172    	; 0x27f4 <vfprintf+0x49c>
    2748:	20 c0       	rjmp	.+64     	; 0x278a <vfprintf+0x432>
    274a:	56 01       	movw	r10, r12
    274c:	32 e0       	ldi	r19, 0x02	; 2
    274e:	a3 0e       	add	r10, r19
    2750:	b1 1c       	adc	r11, r1
    2752:	f6 01       	movw	r30, r12
    2754:	80 81       	ld	r24, Z
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	01 e0       	ldi	r16, 0x01	; 1
    275a:	10 e0       	ldi	r17, 0x00	; 0
    275c:	63 01       	movw	r12, r6
    275e:	12 c0       	rjmp	.+36     	; 0x2784 <vfprintf+0x42c>
    2760:	56 01       	movw	r10, r12
    2762:	f2 e0       	ldi	r31, 0x02	; 2
    2764:	af 0e       	add	r10, r31
    2766:	b1 1c       	adc	r11, r1
    2768:	f6 01       	movw	r30, r12
    276a:	c0 80       	ld	r12, Z
    276c:	d1 80       	ldd	r13, Z+1	; 0x01
    276e:	96 fe       	sbrs	r9, 6
    2770:	03 c0       	rjmp	.+6      	; 0x2778 <vfprintf+0x420>
    2772:	61 2f       	mov	r22, r17
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	02 c0       	rjmp	.+4      	; 0x277c <vfprintf+0x424>
    2778:	6f ef       	ldi	r22, 0xFF	; 255
    277a:	7f ef       	ldi	r23, 0xFF	; 255
    277c:	c6 01       	movw	r24, r12
    277e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <strnlen>
    2782:	8c 01       	movw	r16, r24
    2784:	f9 2d       	mov	r31, r9
    2786:	ff 77       	andi	r31, 0x7F	; 127
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <vfprintf+0x45a>
    278a:	56 01       	movw	r10, r12
    278c:	22 e0       	ldi	r18, 0x02	; 2
    278e:	a2 0e       	add	r10, r18
    2790:	b1 1c       	adc	r11, r1
    2792:	f6 01       	movw	r30, r12
    2794:	c0 80       	ld	r12, Z
    2796:	d1 80       	ldd	r13, Z+1	; 0x01
    2798:	96 fe       	sbrs	r9, 6
    279a:	03 c0       	rjmp	.+6      	; 0x27a2 <vfprintf+0x44a>
    279c:	61 2f       	mov	r22, r17
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <vfprintf+0x44e>
    27a2:	6f ef       	ldi	r22, 0xFF	; 255
    27a4:	7f ef       	ldi	r23, 0xFF	; 255
    27a6:	c6 01       	movw	r24, r12
    27a8:	0e 94 6f 16 	call	0x2cde	; 0x2cde <strnlen_P>
    27ac:	8c 01       	movw	r16, r24
    27ae:	f9 2d       	mov	r31, r9
    27b0:	f0 68       	ori	r31, 0x80	; 128
    27b2:	9f 2e       	mov	r9, r31
    27b4:	f3 fd       	sbrc	r31, 3
    27b6:	1a c0       	rjmp	.+52     	; 0x27ec <vfprintf+0x494>
    27b8:	85 2d       	mov	r24, r5
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	08 17       	cp	r16, r24
    27be:	19 07       	cpc	r17, r25
    27c0:	a8 f4       	brcc	.+42     	; 0x27ec <vfprintf+0x494>
    27c2:	b7 01       	movw	r22, r14
    27c4:	80 e2       	ldi	r24, 0x20	; 32
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    27cc:	5a 94       	dec	r5
    27ce:	f4 cf       	rjmp	.-24     	; 0x27b8 <vfprintf+0x460>
    27d0:	f6 01       	movw	r30, r12
    27d2:	97 fc       	sbrc	r9, 7
    27d4:	85 91       	lpm	r24, Z+
    27d6:	97 fe       	sbrs	r9, 7
    27d8:	81 91       	ld	r24, Z+
    27da:	6f 01       	movw	r12, r30
    27dc:	b7 01       	movw	r22, r14
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    27e4:	51 10       	cpse	r5, r1
    27e6:	5a 94       	dec	r5
    27e8:	01 50       	subi	r16, 0x01	; 1
    27ea:	11 09       	sbc	r17, r1
    27ec:	01 15       	cp	r16, r1
    27ee:	11 05       	cpc	r17, r1
    27f0:	79 f7       	brne	.-34     	; 0x27d0 <vfprintf+0x478>
    27f2:	f7 c0       	rjmp	.+494    	; 0x29e2 <vfprintf+0x68a>
    27f4:	84 36       	cpi	r24, 0x64	; 100
    27f6:	11 f0       	breq	.+4      	; 0x27fc <vfprintf+0x4a4>
    27f8:	89 36       	cpi	r24, 0x69	; 105
    27fa:	61 f5       	brne	.+88     	; 0x2854 <vfprintf+0x4fc>
    27fc:	56 01       	movw	r10, r12
    27fe:	97 fe       	sbrs	r9, 7
    2800:	09 c0       	rjmp	.+18     	; 0x2814 <vfprintf+0x4bc>
    2802:	24 e0       	ldi	r18, 0x04	; 4
    2804:	a2 0e       	add	r10, r18
    2806:	b1 1c       	adc	r11, r1
    2808:	f6 01       	movw	r30, r12
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	0a c0       	rjmp	.+20     	; 0x2828 <vfprintf+0x4d0>
    2814:	f2 e0       	ldi	r31, 0x02	; 2
    2816:	af 0e       	add	r10, r31
    2818:	b1 1c       	adc	r11, r1
    281a:	f6 01       	movw	r30, r12
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	07 2e       	mov	r0, r23
    2822:	00 0c       	add	r0, r0
    2824:	88 0b       	sbc	r24, r24
    2826:	99 0b       	sbc	r25, r25
    2828:	f9 2d       	mov	r31, r9
    282a:	ff 76       	andi	r31, 0x6F	; 111
    282c:	9f 2e       	mov	r9, r31
    282e:	97 ff       	sbrs	r25, 7
    2830:	09 c0       	rjmp	.+18     	; 0x2844 <vfprintf+0x4ec>
    2832:	90 95       	com	r25
    2834:	80 95       	com	r24
    2836:	70 95       	com	r23
    2838:	61 95       	neg	r22
    283a:	7f 4f       	sbci	r23, 0xFF	; 255
    283c:	8f 4f       	sbci	r24, 0xFF	; 255
    283e:	9f 4f       	sbci	r25, 0xFF	; 255
    2840:	f0 68       	ori	r31, 0x80	; 128
    2842:	9f 2e       	mov	r9, r31
    2844:	2a e0       	ldi	r18, 0x0A	; 10
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	a3 01       	movw	r20, r6
    284a:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <__ultoa_invert>
    284e:	c8 2e       	mov	r12, r24
    2850:	c6 18       	sub	r12, r6
    2852:	3f c0       	rjmp	.+126    	; 0x28d2 <vfprintf+0x57a>
    2854:	09 2d       	mov	r16, r9
    2856:	85 37       	cpi	r24, 0x75	; 117
    2858:	21 f4       	brne	.+8      	; 0x2862 <vfprintf+0x50a>
    285a:	0f 7e       	andi	r16, 0xEF	; 239
    285c:	2a e0       	ldi	r18, 0x0A	; 10
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	1d c0       	rjmp	.+58     	; 0x289c <vfprintf+0x544>
    2862:	09 7f       	andi	r16, 0xF9	; 249
    2864:	8f 36       	cpi	r24, 0x6F	; 111
    2866:	91 f0       	breq	.+36     	; 0x288c <vfprintf+0x534>
    2868:	18 f4       	brcc	.+6      	; 0x2870 <vfprintf+0x518>
    286a:	88 35       	cpi	r24, 0x58	; 88
    286c:	59 f0       	breq	.+22     	; 0x2884 <vfprintf+0x52c>
    286e:	c3 c0       	rjmp	.+390    	; 0x29f6 <vfprintf+0x69e>
    2870:	80 37       	cpi	r24, 0x70	; 112
    2872:	19 f0       	breq	.+6      	; 0x287a <vfprintf+0x522>
    2874:	88 37       	cpi	r24, 0x78	; 120
    2876:	11 f0       	breq	.+4      	; 0x287c <vfprintf+0x524>
    2878:	be c0       	rjmp	.+380    	; 0x29f6 <vfprintf+0x69e>
    287a:	00 61       	ori	r16, 0x10	; 16
    287c:	04 ff       	sbrs	r16, 4
    287e:	09 c0       	rjmp	.+18     	; 0x2892 <vfprintf+0x53a>
    2880:	04 60       	ori	r16, 0x04	; 4
    2882:	07 c0       	rjmp	.+14     	; 0x2892 <vfprintf+0x53a>
    2884:	94 fe       	sbrs	r9, 4
    2886:	08 c0       	rjmp	.+16     	; 0x2898 <vfprintf+0x540>
    2888:	06 60       	ori	r16, 0x06	; 6
    288a:	06 c0       	rjmp	.+12     	; 0x2898 <vfprintf+0x540>
    288c:	28 e0       	ldi	r18, 0x08	; 8
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	05 c0       	rjmp	.+10     	; 0x289c <vfprintf+0x544>
    2892:	20 e1       	ldi	r18, 0x10	; 16
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	02 c0       	rjmp	.+4      	; 0x289c <vfprintf+0x544>
    2898:	20 e1       	ldi	r18, 0x10	; 16
    289a:	32 e0       	ldi	r19, 0x02	; 2
    289c:	56 01       	movw	r10, r12
    289e:	07 ff       	sbrs	r16, 7
    28a0:	09 c0       	rjmp	.+18     	; 0x28b4 <vfprintf+0x55c>
    28a2:	84 e0       	ldi	r24, 0x04	; 4
    28a4:	a8 0e       	add	r10, r24
    28a6:	b1 1c       	adc	r11, r1
    28a8:	f6 01       	movw	r30, r12
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	08 c0       	rjmp	.+16     	; 0x28c4 <vfprintf+0x56c>
    28b4:	f2 e0       	ldi	r31, 0x02	; 2
    28b6:	af 0e       	add	r10, r31
    28b8:	b1 1c       	adc	r11, r1
    28ba:	f6 01       	movw	r30, r12
    28bc:	60 81       	ld	r22, Z
    28be:	71 81       	ldd	r23, Z+1	; 0x01
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a3 01       	movw	r20, r6
    28c6:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <__ultoa_invert>
    28ca:	c8 2e       	mov	r12, r24
    28cc:	c6 18       	sub	r12, r6
    28ce:	0f 77       	andi	r16, 0x7F	; 127
    28d0:	90 2e       	mov	r9, r16
    28d2:	96 fe       	sbrs	r9, 6
    28d4:	0b c0       	rjmp	.+22     	; 0x28ec <vfprintf+0x594>
    28d6:	09 2d       	mov	r16, r9
    28d8:	0e 7f       	andi	r16, 0xFE	; 254
    28da:	c1 16       	cp	r12, r17
    28dc:	50 f4       	brcc	.+20     	; 0x28f2 <vfprintf+0x59a>
    28de:	94 fe       	sbrs	r9, 4
    28e0:	0a c0       	rjmp	.+20     	; 0x28f6 <vfprintf+0x59e>
    28e2:	92 fc       	sbrc	r9, 2
    28e4:	08 c0       	rjmp	.+16     	; 0x28f6 <vfprintf+0x59e>
    28e6:	09 2d       	mov	r16, r9
    28e8:	0e 7e       	andi	r16, 0xEE	; 238
    28ea:	05 c0       	rjmp	.+10     	; 0x28f6 <vfprintf+0x59e>
    28ec:	dc 2c       	mov	r13, r12
    28ee:	09 2d       	mov	r16, r9
    28f0:	03 c0       	rjmp	.+6      	; 0x28f8 <vfprintf+0x5a0>
    28f2:	dc 2c       	mov	r13, r12
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <vfprintf+0x5a0>
    28f6:	d1 2e       	mov	r13, r17
    28f8:	04 ff       	sbrs	r16, 4
    28fa:	0d c0       	rjmp	.+26     	; 0x2916 <vfprintf+0x5be>
    28fc:	fe 01       	movw	r30, r28
    28fe:	ec 0d       	add	r30, r12
    2900:	f1 1d       	adc	r31, r1
    2902:	80 81       	ld	r24, Z
    2904:	80 33       	cpi	r24, 0x30	; 48
    2906:	11 f4       	brne	.+4      	; 0x290c <vfprintf+0x5b4>
    2908:	09 7e       	andi	r16, 0xE9	; 233
    290a:	09 c0       	rjmp	.+18     	; 0x291e <vfprintf+0x5c6>
    290c:	02 ff       	sbrs	r16, 2
    290e:	06 c0       	rjmp	.+12     	; 0x291c <vfprintf+0x5c4>
    2910:	d3 94       	inc	r13
    2912:	d3 94       	inc	r13
    2914:	04 c0       	rjmp	.+8      	; 0x291e <vfprintf+0x5c6>
    2916:	80 2f       	mov	r24, r16
    2918:	86 78       	andi	r24, 0x86	; 134
    291a:	09 f0       	breq	.+2      	; 0x291e <vfprintf+0x5c6>
    291c:	d3 94       	inc	r13
    291e:	03 fd       	sbrc	r16, 3
    2920:	11 c0       	rjmp	.+34     	; 0x2944 <vfprintf+0x5ec>
    2922:	00 ff       	sbrs	r16, 0
    2924:	06 c0       	rjmp	.+12     	; 0x2932 <vfprintf+0x5da>
    2926:	1c 2d       	mov	r17, r12
    2928:	d5 14       	cp	r13, r5
    292a:	80 f4       	brcc	.+32     	; 0x294c <vfprintf+0x5f4>
    292c:	15 0d       	add	r17, r5
    292e:	1d 19       	sub	r17, r13
    2930:	0d c0       	rjmp	.+26     	; 0x294c <vfprintf+0x5f4>
    2932:	d5 14       	cp	r13, r5
    2934:	58 f4       	brcc	.+22     	; 0x294c <vfprintf+0x5f4>
    2936:	b7 01       	movw	r22, r14
    2938:	80 e2       	ldi	r24, 0x20	; 32
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    2940:	d3 94       	inc	r13
    2942:	f7 cf       	rjmp	.-18     	; 0x2932 <vfprintf+0x5da>
    2944:	d5 14       	cp	r13, r5
    2946:	10 f4       	brcc	.+4      	; 0x294c <vfprintf+0x5f4>
    2948:	5d 18       	sub	r5, r13
    294a:	01 c0       	rjmp	.+2      	; 0x294e <vfprintf+0x5f6>
    294c:	51 2c       	mov	r5, r1
    294e:	04 ff       	sbrs	r16, 4
    2950:	10 c0       	rjmp	.+32     	; 0x2972 <vfprintf+0x61a>
    2952:	b7 01       	movw	r22, r14
    2954:	80 e3       	ldi	r24, 0x30	; 48
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    295c:	02 ff       	sbrs	r16, 2
    295e:	17 c0       	rjmp	.+46     	; 0x298e <vfprintf+0x636>
    2960:	01 fd       	sbrc	r16, 1
    2962:	03 c0       	rjmp	.+6      	; 0x296a <vfprintf+0x612>
    2964:	88 e7       	ldi	r24, 0x78	; 120
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	02 c0       	rjmp	.+4      	; 0x296e <vfprintf+0x616>
    296a:	88 e5       	ldi	r24, 0x58	; 88
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	b7 01       	movw	r22, r14
    2970:	0c c0       	rjmp	.+24     	; 0x298a <vfprintf+0x632>
    2972:	80 2f       	mov	r24, r16
    2974:	86 78       	andi	r24, 0x86	; 134
    2976:	59 f0       	breq	.+22     	; 0x298e <vfprintf+0x636>
    2978:	01 ff       	sbrs	r16, 1
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <vfprintf+0x628>
    297c:	8b e2       	ldi	r24, 0x2B	; 43
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <vfprintf+0x62a>
    2980:	80 e2       	ldi	r24, 0x20	; 32
    2982:	07 fd       	sbrc	r16, 7
    2984:	8d e2       	ldi	r24, 0x2D	; 45
    2986:	b7 01       	movw	r22, r14
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    298e:	c1 16       	cp	r12, r17
    2990:	38 f4       	brcc	.+14     	; 0x29a0 <vfprintf+0x648>
    2992:	b7 01       	movw	r22, r14
    2994:	80 e3       	ldi	r24, 0x30	; 48
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    299c:	11 50       	subi	r17, 0x01	; 1
    299e:	f7 cf       	rjmp	.-18     	; 0x298e <vfprintf+0x636>
    29a0:	ca 94       	dec	r12
    29a2:	f3 01       	movw	r30, r6
    29a4:	ec 0d       	add	r30, r12
    29a6:	f1 1d       	adc	r31, r1
    29a8:	80 81       	ld	r24, Z
    29aa:	b7 01       	movw	r22, r14
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    29b2:	c1 10       	cpse	r12, r1
    29b4:	f5 cf       	rjmp	.-22     	; 0x29a0 <vfprintf+0x648>
    29b6:	15 c0       	rjmp	.+42     	; 0x29e2 <vfprintf+0x68a>
    29b8:	f4 e0       	ldi	r31, 0x04	; 4
    29ba:	f5 15       	cp	r31, r5
    29bc:	60 f5       	brcc	.+88     	; 0x2a16 <vfprintf+0x6be>
    29be:	84 e0       	ldi	r24, 0x04	; 4
    29c0:	58 1a       	sub	r5, r24
    29c2:	93 fe       	sbrs	r9, 3
    29c4:	1f c0       	rjmp	.+62     	; 0x2a04 <vfprintf+0x6ac>
    29c6:	01 11       	cpse	r16, r1
    29c8:	27 c0       	rjmp	.+78     	; 0x2a18 <vfprintf+0x6c0>
    29ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    29cc:	23 ff       	sbrs	r18, 3
    29ce:	2a c0       	rjmp	.+84     	; 0x2a24 <vfprintf+0x6cc>
    29d0:	0c e1       	ldi	r16, 0x1C	; 28
    29d2:	11 e0       	ldi	r17, 0x01	; 1
    29d4:	39 2d       	mov	r19, r9
    29d6:	30 71       	andi	r19, 0x10	; 16
    29d8:	93 2e       	mov	r9, r19
    29da:	f8 01       	movw	r30, r16
    29dc:	84 91       	lpm	r24, Z
    29de:	81 11       	cpse	r24, r1
    29e0:	24 c0       	rjmp	.+72     	; 0x2a2a <vfprintf+0x6d2>
    29e2:	55 20       	and	r5, r5
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <vfprintf+0x690>
    29e6:	e4 cc       	rjmp	.-1592   	; 0x23b0 <vfprintf+0x58>
    29e8:	b7 01       	movw	r22, r14
    29ea:	80 e2       	ldi	r24, 0x20	; 32
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    29f2:	5a 94       	dec	r5
    29f4:	f6 cf       	rjmp	.-20     	; 0x29e2 <vfprintf+0x68a>
    29f6:	f7 01       	movw	r30, r14
    29f8:	86 81       	ldd	r24, Z+6	; 0x06
    29fa:	97 81       	ldd	r25, Z+7	; 0x07
    29fc:	26 c0       	rjmp	.+76     	; 0x2a4a <vfprintf+0x6f2>
    29fe:	8f ef       	ldi	r24, 0xFF	; 255
    2a00:	9f ef       	ldi	r25, 0xFF	; 255
    2a02:	23 c0       	rjmp	.+70     	; 0x2a4a <vfprintf+0x6f2>
    2a04:	b7 01       	movw	r22, r14
    2a06:	80 e2       	ldi	r24, 0x20	; 32
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    2a0e:	5a 94       	dec	r5
    2a10:	51 10       	cpse	r5, r1
    2a12:	f8 cf       	rjmp	.-16     	; 0x2a04 <vfprintf+0x6ac>
    2a14:	d8 cf       	rjmp	.-80     	; 0x29c6 <vfprintf+0x66e>
    2a16:	51 2c       	mov	r5, r1
    2a18:	b7 01       	movw	r22, r14
    2a1a:	80 2f       	mov	r24, r16
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    2a22:	d3 cf       	rjmp	.-90     	; 0x29ca <vfprintf+0x672>
    2a24:	00 e2       	ldi	r16, 0x20	; 32
    2a26:	11 e0       	ldi	r17, 0x01	; 1
    2a28:	d5 cf       	rjmp	.-86     	; 0x29d4 <vfprintf+0x67c>
    2a2a:	91 10       	cpse	r9, r1
    2a2c:	80 52       	subi	r24, 0x20	; 32
    2a2e:	b7 01       	movw	r22, r14
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <fputc>
    2a36:	0f 5f       	subi	r16, 0xFF	; 255
    2a38:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3a:	cf cf       	rjmp	.-98     	; 0x29da <vfprintf+0x682>
    2a3c:	23 e0       	ldi	r18, 0x03	; 3
    2a3e:	25 15       	cp	r18, r5
    2a40:	10 f4       	brcc	.+4      	; 0x2a46 <vfprintf+0x6ee>
    2a42:	83 e0       	ldi	r24, 0x03	; 3
    2a44:	bd cf       	rjmp	.-134    	; 0x29c0 <vfprintf+0x668>
    2a46:	51 2c       	mov	r5, r1
    2a48:	c0 cf       	rjmp	.-128    	; 0x29ca <vfprintf+0x672>
    2a4a:	60 96       	adiw	r28, 0x10	; 16
    2a4c:	e2 e1       	ldi	r30, 0x12	; 18
    2a4e:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__epilogue_restores__>

00002a52 <__udivmodsi4>:
    2a52:	a1 e2       	ldi	r26, 0x21	; 33
    2a54:	1a 2e       	mov	r1, r26
    2a56:	aa 1b       	sub	r26, r26
    2a58:	bb 1b       	sub	r27, r27
    2a5a:	fd 01       	movw	r30, r26
    2a5c:	0d c0       	rjmp	.+26     	; 0x2a78 <__udivmodsi4_ep>

00002a5e <__udivmodsi4_loop>:
    2a5e:	aa 1f       	adc	r26, r26
    2a60:	bb 1f       	adc	r27, r27
    2a62:	ee 1f       	adc	r30, r30
    2a64:	ff 1f       	adc	r31, r31
    2a66:	a2 17       	cp	r26, r18
    2a68:	b3 07       	cpc	r27, r19
    2a6a:	e4 07       	cpc	r30, r20
    2a6c:	f5 07       	cpc	r31, r21
    2a6e:	20 f0       	brcs	.+8      	; 0x2a78 <__udivmodsi4_ep>
    2a70:	a2 1b       	sub	r26, r18
    2a72:	b3 0b       	sbc	r27, r19
    2a74:	e4 0b       	sbc	r30, r20
    2a76:	f5 0b       	sbc	r31, r21

00002a78 <__udivmodsi4_ep>:
    2a78:	66 1f       	adc	r22, r22
    2a7a:	77 1f       	adc	r23, r23
    2a7c:	88 1f       	adc	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	1a 94       	dec	r1
    2a82:	69 f7       	brne	.-38     	; 0x2a5e <__udivmodsi4_loop>
    2a84:	60 95       	com	r22
    2a86:	70 95       	com	r23
    2a88:	80 95       	com	r24
    2a8a:	90 95       	com	r25
    2a8c:	9b 01       	movw	r18, r22
    2a8e:	ac 01       	movw	r20, r24
    2a90:	bd 01       	movw	r22, r26
    2a92:	cf 01       	movw	r24, r30
    2a94:	08 95       	ret

00002a96 <__tablejump2__>:
    2a96:	ee 0f       	add	r30, r30
    2a98:	ff 1f       	adc	r31, r31
    2a9a:	05 90       	lpm	r0, Z+
    2a9c:	f4 91       	lpm	r31, Z
    2a9e:	e0 2d       	mov	r30, r0
    2aa0:	09 94       	ijmp

00002aa2 <__umulhisi3>:
    2aa2:	a2 9f       	mul	r26, r18
    2aa4:	b0 01       	movw	r22, r0
    2aa6:	b3 9f       	mul	r27, r19
    2aa8:	c0 01       	movw	r24, r0
    2aaa:	a3 9f       	mul	r26, r19
    2aac:	70 0d       	add	r23, r0
    2aae:	81 1d       	adc	r24, r1
    2ab0:	11 24       	eor	r1, r1
    2ab2:	91 1d       	adc	r25, r1
    2ab4:	b2 9f       	mul	r27, r18
    2ab6:	70 0d       	add	r23, r0
    2ab8:	81 1d       	adc	r24, r1
    2aba:	11 24       	eor	r1, r1
    2abc:	91 1d       	adc	r25, r1
    2abe:	08 95       	ret

00002ac0 <__prologue_saves__>:
    2ac0:	2f 92       	push	r2
    2ac2:	3f 92       	push	r3
    2ac4:	4f 92       	push	r4
    2ac6:	5f 92       	push	r5
    2ac8:	6f 92       	push	r6
    2aca:	7f 92       	push	r7
    2acc:	8f 92       	push	r8
    2ace:	9f 92       	push	r9
    2ad0:	af 92       	push	r10
    2ad2:	bf 92       	push	r11
    2ad4:	cf 92       	push	r12
    2ad6:	df 92       	push	r13
    2ad8:	ef 92       	push	r14
    2ada:	ff 92       	push	r15
    2adc:	0f 93       	push	r16
    2ade:	1f 93       	push	r17
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	ca 1b       	sub	r28, r26
    2aea:	db 0b       	sbc	r29, r27
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	09 94       	ijmp

00002af8 <__epilogue_restores__>:
    2af8:	2a 88       	ldd	r2, Y+18	; 0x12
    2afa:	39 88       	ldd	r3, Y+17	; 0x11
    2afc:	48 88       	ldd	r4, Y+16	; 0x10
    2afe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b00:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b02:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b04:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b06:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b08:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b0a:	b9 84       	ldd	r11, Y+9	; 0x09
    2b0c:	c8 84       	ldd	r12, Y+8	; 0x08
    2b0e:	df 80       	ldd	r13, Y+7	; 0x07
    2b10:	ee 80       	ldd	r14, Y+6	; 0x06
    2b12:	fd 80       	ldd	r15, Y+5	; 0x05
    2b14:	0c 81       	ldd	r16, Y+4	; 0x04
    2b16:	1b 81       	ldd	r17, Y+3	; 0x03
    2b18:	aa 81       	ldd	r26, Y+2	; 0x02
    2b1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b1c:	ce 0f       	add	r28, r30
    2b1e:	d1 1d       	adc	r29, r1
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	ed 01       	movw	r28, r26
    2b2c:	08 95       	ret

00002b2e <__ftoa_engine>:
    2b2e:	28 30       	cpi	r18, 0x08	; 8
    2b30:	08 f0       	brcs	.+2      	; 0x2b34 <__ftoa_engine+0x6>
    2b32:	27 e0       	ldi	r18, 0x07	; 7
    2b34:	33 27       	eor	r19, r19
    2b36:	da 01       	movw	r26, r20
    2b38:	99 0f       	add	r25, r25
    2b3a:	31 1d       	adc	r19, r1
    2b3c:	87 fd       	sbrc	r24, 7
    2b3e:	91 60       	ori	r25, 0x01	; 1
    2b40:	00 96       	adiw	r24, 0x00	; 0
    2b42:	61 05       	cpc	r22, r1
    2b44:	71 05       	cpc	r23, r1
    2b46:	39 f4       	brne	.+14     	; 0x2b56 <__ftoa_engine+0x28>
    2b48:	32 60       	ori	r19, 0x02	; 2
    2b4a:	2e 5f       	subi	r18, 0xFE	; 254
    2b4c:	3d 93       	st	X+, r19
    2b4e:	30 e3       	ldi	r19, 0x30	; 48
    2b50:	2a 95       	dec	r18
    2b52:	e1 f7       	brne	.-8      	; 0x2b4c <__ftoa_engine+0x1e>
    2b54:	08 95       	ret
    2b56:	9f 3f       	cpi	r25, 0xFF	; 255
    2b58:	30 f0       	brcs	.+12     	; 0x2b66 <__ftoa_engine+0x38>
    2b5a:	80 38       	cpi	r24, 0x80	; 128
    2b5c:	71 05       	cpc	r23, r1
    2b5e:	61 05       	cpc	r22, r1
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <__ftoa_engine+0x36>
    2b62:	3c 5f       	subi	r19, 0xFC	; 252
    2b64:	3c 5f       	subi	r19, 0xFC	; 252
    2b66:	3d 93       	st	X+, r19
    2b68:	91 30       	cpi	r25, 0x01	; 1
    2b6a:	08 f0       	brcs	.+2      	; 0x2b6e <__ftoa_engine+0x40>
    2b6c:	80 68       	ori	r24, 0x80	; 128
    2b6e:	91 1d       	adc	r25, r1
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	1f 93       	push	r17
    2b76:	0f 93       	push	r16
    2b78:	ff 92       	push	r15
    2b7a:	ef 92       	push	r14
    2b7c:	19 2f       	mov	r17, r25
    2b7e:	98 7f       	andi	r25, 0xF8	; 248
    2b80:	96 95       	lsr	r25
    2b82:	e9 2f       	mov	r30, r25
    2b84:	96 95       	lsr	r25
    2b86:	96 95       	lsr	r25
    2b88:	e9 0f       	add	r30, r25
    2b8a:	ff 27       	eor	r31, r31
    2b8c:	e2 58       	subi	r30, 0x82	; 130
    2b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b90:	99 27       	eor	r25, r25
    2b92:	33 27       	eor	r19, r19
    2b94:	ee 24       	eor	r14, r14
    2b96:	ff 24       	eor	r15, r15
    2b98:	a7 01       	movw	r20, r14
    2b9a:	e7 01       	movw	r28, r14
    2b9c:	05 90       	lpm	r0, Z+
    2b9e:	08 94       	sec
    2ba0:	07 94       	ror	r0
    2ba2:	28 f4       	brcc	.+10     	; 0x2bae <__ftoa_engine+0x80>
    2ba4:	36 0f       	add	r19, r22
    2ba6:	e7 1e       	adc	r14, r23
    2ba8:	f8 1e       	adc	r15, r24
    2baa:	49 1f       	adc	r20, r25
    2bac:	51 1d       	adc	r21, r1
    2bae:	66 0f       	add	r22, r22
    2bb0:	77 1f       	adc	r23, r23
    2bb2:	88 1f       	adc	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	06 94       	lsr	r0
    2bb8:	a1 f7       	brne	.-24     	; 0x2ba2 <__ftoa_engine+0x74>
    2bba:	05 90       	lpm	r0, Z+
    2bbc:	07 94       	ror	r0
    2bbe:	28 f4       	brcc	.+10     	; 0x2bca <__ftoa_engine+0x9c>
    2bc0:	e7 0e       	add	r14, r23
    2bc2:	f8 1e       	adc	r15, r24
    2bc4:	49 1f       	adc	r20, r25
    2bc6:	56 1f       	adc	r21, r22
    2bc8:	c1 1d       	adc	r28, r1
    2bca:	77 0f       	add	r23, r23
    2bcc:	88 1f       	adc	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	66 1f       	adc	r22, r22
    2bd2:	06 94       	lsr	r0
    2bd4:	a1 f7       	brne	.-24     	; 0x2bbe <__ftoa_engine+0x90>
    2bd6:	05 90       	lpm	r0, Z+
    2bd8:	07 94       	ror	r0
    2bda:	28 f4       	brcc	.+10     	; 0x2be6 <__ftoa_engine+0xb8>
    2bdc:	f8 0e       	add	r15, r24
    2bde:	49 1f       	adc	r20, r25
    2be0:	56 1f       	adc	r21, r22
    2be2:	c7 1f       	adc	r28, r23
    2be4:	d1 1d       	adc	r29, r1
    2be6:	88 0f       	add	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	66 1f       	adc	r22, r22
    2bec:	77 1f       	adc	r23, r23
    2bee:	06 94       	lsr	r0
    2bf0:	a1 f7       	brne	.-24     	; 0x2bda <__ftoa_engine+0xac>
    2bf2:	05 90       	lpm	r0, Z+
    2bf4:	07 94       	ror	r0
    2bf6:	20 f4       	brcc	.+8      	; 0x2c00 <__ftoa_engine+0xd2>
    2bf8:	49 0f       	add	r20, r25
    2bfa:	56 1f       	adc	r21, r22
    2bfc:	c7 1f       	adc	r28, r23
    2bfe:	d8 1f       	adc	r29, r24
    2c00:	99 0f       	add	r25, r25
    2c02:	66 1f       	adc	r22, r22
    2c04:	77 1f       	adc	r23, r23
    2c06:	88 1f       	adc	r24, r24
    2c08:	06 94       	lsr	r0
    2c0a:	a9 f7       	brne	.-22     	; 0x2bf6 <__ftoa_engine+0xc8>
    2c0c:	84 91       	lpm	r24, Z
    2c0e:	10 95       	com	r17
    2c10:	17 70       	andi	r17, 0x07	; 7
    2c12:	41 f0       	breq	.+16     	; 0x2c24 <__ftoa_engine+0xf6>
    2c14:	d6 95       	lsr	r29
    2c16:	c7 95       	ror	r28
    2c18:	57 95       	ror	r21
    2c1a:	47 95       	ror	r20
    2c1c:	f7 94       	ror	r15
    2c1e:	e7 94       	ror	r14
    2c20:	1a 95       	dec	r17
    2c22:	c1 f7       	brne	.-16     	; 0x2c14 <__ftoa_engine+0xe6>
    2c24:	e4 e2       	ldi	r30, 0x24	; 36
    2c26:	f1 e0       	ldi	r31, 0x01	; 1
    2c28:	68 94       	set
    2c2a:	15 90       	lpm	r1, Z+
    2c2c:	15 91       	lpm	r17, Z+
    2c2e:	35 91       	lpm	r19, Z+
    2c30:	65 91       	lpm	r22, Z+
    2c32:	95 91       	lpm	r25, Z+
    2c34:	05 90       	lpm	r0, Z+
    2c36:	7f e2       	ldi	r23, 0x2F	; 47
    2c38:	73 95       	inc	r23
    2c3a:	e1 18       	sub	r14, r1
    2c3c:	f1 0a       	sbc	r15, r17
    2c3e:	43 0b       	sbc	r20, r19
    2c40:	56 0b       	sbc	r21, r22
    2c42:	c9 0b       	sbc	r28, r25
    2c44:	d0 09       	sbc	r29, r0
    2c46:	c0 f7       	brcc	.-16     	; 0x2c38 <__ftoa_engine+0x10a>
    2c48:	e1 0c       	add	r14, r1
    2c4a:	f1 1e       	adc	r15, r17
    2c4c:	43 1f       	adc	r20, r19
    2c4e:	56 1f       	adc	r21, r22
    2c50:	c9 1f       	adc	r28, r25
    2c52:	d0 1d       	adc	r29, r0
    2c54:	7e f4       	brtc	.+30     	; 0x2c74 <__ftoa_engine+0x146>
    2c56:	70 33       	cpi	r23, 0x30	; 48
    2c58:	11 f4       	brne	.+4      	; 0x2c5e <__ftoa_engine+0x130>
    2c5a:	8a 95       	dec	r24
    2c5c:	e6 cf       	rjmp	.-52     	; 0x2c2a <__ftoa_engine+0xfc>
    2c5e:	e8 94       	clt
    2c60:	01 50       	subi	r16, 0x01	; 1
    2c62:	30 f0       	brcs	.+12     	; 0x2c70 <__ftoa_engine+0x142>
    2c64:	08 0f       	add	r16, r24
    2c66:	0a f4       	brpl	.+2      	; 0x2c6a <__ftoa_engine+0x13c>
    2c68:	00 27       	eor	r16, r16
    2c6a:	02 17       	cp	r16, r18
    2c6c:	08 f4       	brcc	.+2      	; 0x2c70 <__ftoa_engine+0x142>
    2c6e:	20 2f       	mov	r18, r16
    2c70:	23 95       	inc	r18
    2c72:	02 2f       	mov	r16, r18
    2c74:	7a 33       	cpi	r23, 0x3A	; 58
    2c76:	28 f0       	brcs	.+10     	; 0x2c82 <__ftoa_engine+0x154>
    2c78:	79 e3       	ldi	r23, 0x39	; 57
    2c7a:	7d 93       	st	X+, r23
    2c7c:	2a 95       	dec	r18
    2c7e:	e9 f7       	brne	.-6      	; 0x2c7a <__ftoa_engine+0x14c>
    2c80:	10 c0       	rjmp	.+32     	; 0x2ca2 <__ftoa_engine+0x174>
    2c82:	7d 93       	st	X+, r23
    2c84:	2a 95       	dec	r18
    2c86:	89 f6       	brne	.-94     	; 0x2c2a <__ftoa_engine+0xfc>
    2c88:	06 94       	lsr	r0
    2c8a:	97 95       	ror	r25
    2c8c:	67 95       	ror	r22
    2c8e:	37 95       	ror	r19
    2c90:	17 95       	ror	r17
    2c92:	17 94       	ror	r1
    2c94:	e1 18       	sub	r14, r1
    2c96:	f1 0a       	sbc	r15, r17
    2c98:	43 0b       	sbc	r20, r19
    2c9a:	56 0b       	sbc	r21, r22
    2c9c:	c9 0b       	sbc	r28, r25
    2c9e:	d0 09       	sbc	r29, r0
    2ca0:	98 f0       	brcs	.+38     	; 0x2cc8 <__ftoa_engine+0x19a>
    2ca2:	23 95       	inc	r18
    2ca4:	7e 91       	ld	r23, -X
    2ca6:	73 95       	inc	r23
    2ca8:	7a 33       	cpi	r23, 0x3A	; 58
    2caa:	08 f0       	brcs	.+2      	; 0x2cae <__ftoa_engine+0x180>
    2cac:	70 e3       	ldi	r23, 0x30	; 48
    2cae:	7c 93       	st	X, r23
    2cb0:	20 13       	cpse	r18, r16
    2cb2:	b8 f7       	brcc	.-18     	; 0x2ca2 <__ftoa_engine+0x174>
    2cb4:	7e 91       	ld	r23, -X
    2cb6:	70 61       	ori	r23, 0x10	; 16
    2cb8:	7d 93       	st	X+, r23
    2cba:	30 f0       	brcs	.+12     	; 0x2cc8 <__ftoa_engine+0x19a>
    2cbc:	83 95       	inc	r24
    2cbe:	71 e3       	ldi	r23, 0x31	; 49
    2cc0:	7d 93       	st	X+, r23
    2cc2:	70 e3       	ldi	r23, 0x30	; 48
    2cc4:	2a 95       	dec	r18
    2cc6:	e1 f7       	brne	.-8      	; 0x2cc0 <__ftoa_engine+0x192>
    2cc8:	11 24       	eor	r1, r1
    2cca:	ef 90       	pop	r14
    2ccc:	ff 90       	pop	r15
    2cce:	0f 91       	pop	r16
    2cd0:	1f 91       	pop	r17
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	99 27       	eor	r25, r25
    2cd8:	87 fd       	sbrc	r24, 7
    2cda:	90 95       	com	r25
    2cdc:	08 95       	ret

00002cde <strnlen_P>:
    2cde:	fc 01       	movw	r30, r24
    2ce0:	05 90       	lpm	r0, Z+
    2ce2:	61 50       	subi	r22, 0x01	; 1
    2ce4:	70 40       	sbci	r23, 0x00	; 0
    2ce6:	01 10       	cpse	r0, r1
    2ce8:	d8 f7       	brcc	.-10     	; 0x2ce0 <strnlen_P+0x2>
    2cea:	80 95       	com	r24
    2cec:	90 95       	com	r25
    2cee:	8e 0f       	add	r24, r30
    2cf0:	9f 1f       	adc	r25, r31
    2cf2:	08 95       	ret

00002cf4 <strnlen>:
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	61 50       	subi	r22, 0x01	; 1
    2cf8:	70 40       	sbci	r23, 0x00	; 0
    2cfa:	01 90       	ld	r0, Z+
    2cfc:	01 10       	cpse	r0, r1
    2cfe:	d8 f7       	brcc	.-10     	; 0x2cf6 <strnlen+0x2>
    2d00:	80 95       	com	r24
    2d02:	90 95       	com	r25
    2d04:	8e 0f       	add	r24, r30
    2d06:	9f 1f       	adc	r25, r31
    2d08:	08 95       	ret

00002d0a <fputc>:
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	fb 01       	movw	r30, r22
    2d14:	23 81       	ldd	r18, Z+3	; 0x03
    2d16:	21 fd       	sbrc	r18, 1
    2d18:	03 c0       	rjmp	.+6      	; 0x2d20 <fputc+0x16>
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	9f ef       	ldi	r25, 0xFF	; 255
    2d1e:	2c c0       	rjmp	.+88     	; 0x2d78 <fputc+0x6e>
    2d20:	22 ff       	sbrs	r18, 2
    2d22:	16 c0       	rjmp	.+44     	; 0x2d50 <fputc+0x46>
    2d24:	46 81       	ldd	r20, Z+6	; 0x06
    2d26:	57 81       	ldd	r21, Z+7	; 0x07
    2d28:	24 81       	ldd	r18, Z+4	; 0x04
    2d2a:	35 81       	ldd	r19, Z+5	; 0x05
    2d2c:	42 17       	cp	r20, r18
    2d2e:	53 07       	cpc	r21, r19
    2d30:	44 f4       	brge	.+16     	; 0x2d42 <fputc+0x38>
    2d32:	a0 81       	ld	r26, Z
    2d34:	b1 81       	ldd	r27, Z+1	; 0x01
    2d36:	9d 01       	movw	r18, r26
    2d38:	2f 5f       	subi	r18, 0xFF	; 255
    2d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3c:	31 83       	std	Z+1, r19	; 0x01
    2d3e:	20 83       	st	Z, r18
    2d40:	8c 93       	st	X, r24
    2d42:	26 81       	ldd	r18, Z+6	; 0x06
    2d44:	37 81       	ldd	r19, Z+7	; 0x07
    2d46:	2f 5f       	subi	r18, 0xFF	; 255
    2d48:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4a:	37 83       	std	Z+7, r19	; 0x07
    2d4c:	26 83       	std	Z+6, r18	; 0x06
    2d4e:	14 c0       	rjmp	.+40     	; 0x2d78 <fputc+0x6e>
    2d50:	8b 01       	movw	r16, r22
    2d52:	ec 01       	movw	r28, r24
    2d54:	fb 01       	movw	r30, r22
    2d56:	00 84       	ldd	r0, Z+8	; 0x08
    2d58:	f1 85       	ldd	r31, Z+9	; 0x09
    2d5a:	e0 2d       	mov	r30, r0
    2d5c:	09 95       	icall
    2d5e:	89 2b       	or	r24, r25
    2d60:	e1 f6       	brne	.-72     	; 0x2d1a <fputc+0x10>
    2d62:	d8 01       	movw	r26, r16
    2d64:	16 96       	adiw	r26, 0x06	; 6
    2d66:	8d 91       	ld	r24, X+
    2d68:	9c 91       	ld	r25, X
    2d6a:	17 97       	sbiw	r26, 0x07	; 7
    2d6c:	01 96       	adiw	r24, 0x01	; 1
    2d6e:	17 96       	adiw	r26, 0x07	; 7
    2d70:	9c 93       	st	X, r25
    2d72:	8e 93       	st	-X, r24
    2d74:	16 97       	sbiw	r26, 0x06	; 6
    2d76:	ce 01       	movw	r24, r28
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	08 95       	ret

00002d82 <snprintf>:
    2d82:	ae e0       	ldi	r26, 0x0E	; 14
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e7 ec       	ldi	r30, 0xC7	; 199
    2d88:	f6 e1       	ldi	r31, 0x16	; 22
    2d8a:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__prologue_saves__+0x1c>
    2d8e:	0d 89       	ldd	r16, Y+21	; 0x15
    2d90:	1e 89       	ldd	r17, Y+22	; 0x16
    2d92:	8f 89       	ldd	r24, Y+23	; 0x17
    2d94:	98 8d       	ldd	r25, Y+24	; 0x18
    2d96:	26 e0       	ldi	r18, 0x06	; 6
    2d98:	2c 83       	std	Y+4, r18	; 0x04
    2d9a:	1a 83       	std	Y+2, r17	; 0x02
    2d9c:	09 83       	std	Y+1, r16	; 0x01
    2d9e:	97 ff       	sbrs	r25, 7
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <snprintf+0x24>
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e8       	ldi	r25, 0x80	; 128
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	8d 83       	std	Y+5, r24	; 0x05
    2dac:	ae 01       	movw	r20, r28
    2dae:	45 5e       	subi	r20, 0xE5	; 229
    2db0:	5f 4f       	sbci	r21, 0xFF	; 255
    2db2:	69 8d       	ldd	r22, Y+25	; 0x19
    2db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db6:	ce 01       	movw	r24, r28
    2db8:	01 96       	adiw	r24, 0x01	; 1
    2dba:	0e 94 ac 11 	call	0x2358	; 0x2358 <vfprintf>
    2dbe:	4d 81       	ldd	r20, Y+5	; 0x05
    2dc0:	5e 81       	ldd	r21, Y+6	; 0x06
    2dc2:	57 fd       	sbrc	r21, 7
    2dc4:	0a c0       	rjmp	.+20     	; 0x2dda <snprintf+0x58>
    2dc6:	2f 81       	ldd	r18, Y+7	; 0x07
    2dc8:	38 85       	ldd	r19, Y+8	; 0x08
    2dca:	42 17       	cp	r20, r18
    2dcc:	53 07       	cpc	r21, r19
    2dce:	0c f4       	brge	.+2      	; 0x2dd2 <snprintf+0x50>
    2dd0:	9a 01       	movw	r18, r20
    2dd2:	f8 01       	movw	r30, r16
    2dd4:	e2 0f       	add	r30, r18
    2dd6:	f3 1f       	adc	r31, r19
    2dd8:	10 82       	st	Z, r1
    2dda:	2e 96       	adiw	r28, 0x0e	; 14
    2ddc:	e4 e0       	ldi	r30, 0x04	; 4
    2dde:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__epilogue_restores__+0x1c>

00002de2 <sscanf>:
    2de2:	ae e0       	ldi	r26, 0x0E	; 14
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e7 ef       	ldi	r30, 0xF7	; 247
    2de8:	f6 e1       	ldi	r31, 0x16	; 22
    2dea:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__prologue_saves__+0x20>
    2dee:	85 e0       	ldi	r24, 0x05	; 5
    2df0:	8c 83       	std	Y+4, r24	; 0x04
    2df2:	8b 89       	ldd	r24, Y+19	; 0x13
    2df4:	9c 89       	ldd	r25, Y+20	; 0x14
    2df6:	9a 83       	std	Y+2, r25	; 0x02
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	ae 01       	movw	r20, r28
    2dfc:	49 5e       	subi	r20, 0xE9	; 233
    2dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    2e00:	6d 89       	ldd	r22, Y+21	; 0x15
    2e02:	7e 89       	ldd	r23, Y+22	; 0x16
    2e04:	ce 01       	movw	r24, r28
    2e06:	01 96       	adiw	r24, 0x01	; 1
    2e08:	0e 94 04 19 	call	0x3208	; 0x3208 <vfscanf>
    2e0c:	2e 96       	adiw	r28, 0x0e	; 14
    2e0e:	e2 e0       	ldi	r30, 0x02	; 2
    2e10:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__epilogue_restores__+0x20>

00002e14 <__ultoa_invert>:
    2e14:	fa 01       	movw	r30, r20
    2e16:	aa 27       	eor	r26, r26
    2e18:	28 30       	cpi	r18, 0x08	; 8
    2e1a:	51 f1       	breq	.+84     	; 0x2e70 <__ultoa_invert+0x5c>
    2e1c:	20 31       	cpi	r18, 0x10	; 16
    2e1e:	81 f1       	breq	.+96     	; 0x2e80 <__ultoa_invert+0x6c>
    2e20:	e8 94       	clt
    2e22:	6f 93       	push	r22
    2e24:	6e 7f       	andi	r22, 0xFE	; 254
    2e26:	6e 5f       	subi	r22, 0xFE	; 254
    2e28:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2e:	af 4f       	sbci	r26, 0xFF	; 255
    2e30:	b1 e0       	ldi	r27, 0x01	; 1
    2e32:	3e d0       	rcall	.+124    	; 0x2eb0 <__ultoa_invert+0x9c>
    2e34:	b4 e0       	ldi	r27, 0x04	; 4
    2e36:	3c d0       	rcall	.+120    	; 0x2eb0 <__ultoa_invert+0x9c>
    2e38:	67 0f       	add	r22, r23
    2e3a:	78 1f       	adc	r23, r24
    2e3c:	89 1f       	adc	r24, r25
    2e3e:	9a 1f       	adc	r25, r26
    2e40:	a1 1d       	adc	r26, r1
    2e42:	68 0f       	add	r22, r24
    2e44:	79 1f       	adc	r23, r25
    2e46:	8a 1f       	adc	r24, r26
    2e48:	91 1d       	adc	r25, r1
    2e4a:	a1 1d       	adc	r26, r1
    2e4c:	6a 0f       	add	r22, r26
    2e4e:	71 1d       	adc	r23, r1
    2e50:	81 1d       	adc	r24, r1
    2e52:	91 1d       	adc	r25, r1
    2e54:	a1 1d       	adc	r26, r1
    2e56:	20 d0       	rcall	.+64     	; 0x2e98 <__ultoa_invert+0x84>
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <__ultoa_invert+0x48>
    2e5a:	68 94       	set
    2e5c:	3f 91       	pop	r19
    2e5e:	2a e0       	ldi	r18, 0x0A	; 10
    2e60:	26 9f       	mul	r18, r22
    2e62:	11 24       	eor	r1, r1
    2e64:	30 19       	sub	r19, r0
    2e66:	30 5d       	subi	r19, 0xD0	; 208
    2e68:	31 93       	st	Z+, r19
    2e6a:	de f6       	brtc	.-74     	; 0x2e22 <__ultoa_invert+0xe>
    2e6c:	cf 01       	movw	r24, r30
    2e6e:	08 95       	ret
    2e70:	46 2f       	mov	r20, r22
    2e72:	47 70       	andi	r20, 0x07	; 7
    2e74:	40 5d       	subi	r20, 0xD0	; 208
    2e76:	41 93       	st	Z+, r20
    2e78:	b3 e0       	ldi	r27, 0x03	; 3
    2e7a:	0f d0       	rcall	.+30     	; 0x2e9a <__ultoa_invert+0x86>
    2e7c:	c9 f7       	brne	.-14     	; 0x2e70 <__ultoa_invert+0x5c>
    2e7e:	f6 cf       	rjmp	.-20     	; 0x2e6c <__ultoa_invert+0x58>
    2e80:	46 2f       	mov	r20, r22
    2e82:	4f 70       	andi	r20, 0x0F	; 15
    2e84:	40 5d       	subi	r20, 0xD0	; 208
    2e86:	4a 33       	cpi	r20, 0x3A	; 58
    2e88:	18 f0       	brcs	.+6      	; 0x2e90 <__ultoa_invert+0x7c>
    2e8a:	49 5d       	subi	r20, 0xD9	; 217
    2e8c:	31 fd       	sbrc	r19, 1
    2e8e:	40 52       	subi	r20, 0x20	; 32
    2e90:	41 93       	st	Z+, r20
    2e92:	02 d0       	rcall	.+4      	; 0x2e98 <__ultoa_invert+0x84>
    2e94:	a9 f7       	brne	.-22     	; 0x2e80 <__ultoa_invert+0x6c>
    2e96:	ea cf       	rjmp	.-44     	; 0x2e6c <__ultoa_invert+0x58>
    2e98:	b4 e0       	ldi	r27, 0x04	; 4
    2e9a:	a6 95       	lsr	r26
    2e9c:	97 95       	ror	r25
    2e9e:	87 95       	ror	r24
    2ea0:	77 95       	ror	r23
    2ea2:	67 95       	ror	r22
    2ea4:	ba 95       	dec	r27
    2ea6:	c9 f7       	brne	.-14     	; 0x2e9a <__ultoa_invert+0x86>
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	61 05       	cpc	r22, r1
    2eac:	71 05       	cpc	r23, r1
    2eae:	08 95       	ret
    2eb0:	9b 01       	movw	r18, r22
    2eb2:	ac 01       	movw	r20, r24
    2eb4:	0a 2e       	mov	r0, r26
    2eb6:	06 94       	lsr	r0
    2eb8:	57 95       	ror	r21
    2eba:	47 95       	ror	r20
    2ebc:	37 95       	ror	r19
    2ebe:	27 95       	ror	r18
    2ec0:	ba 95       	dec	r27
    2ec2:	c9 f7       	brne	.-14     	; 0x2eb6 <__ultoa_invert+0xa2>
    2ec4:	62 0f       	add	r22, r18
    2ec6:	73 1f       	adc	r23, r19
    2ec8:	84 1f       	adc	r24, r20
    2eca:	95 1f       	adc	r25, r21
    2ecc:	a0 1d       	adc	r26, r0
    2ece:	08 95       	ret

00002ed0 <putval>:
    2ed0:	20 fd       	sbrc	r18, 0
    2ed2:	09 c0       	rjmp	.+18     	; 0x2ee6 <putval+0x16>
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	23 fd       	sbrc	r18, 3
    2ed8:	05 c0       	rjmp	.+10     	; 0x2ee4 <putval+0x14>
    2eda:	22 ff       	sbrs	r18, 2
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <putval+0x12>
    2ede:	73 83       	std	Z+3, r23	; 0x03
    2ee0:	62 83       	std	Z+2, r22	; 0x02
    2ee2:	51 83       	std	Z+1, r21	; 0x01
    2ee4:	40 83       	st	Z, r20
    2ee6:	08 95       	ret

00002ee8 <mulacc>:
    2ee8:	44 fd       	sbrc	r20, 4
    2eea:	17 c0       	rjmp	.+46     	; 0x2f1a <mulacc+0x32>
    2eec:	46 fd       	sbrc	r20, 6
    2eee:	17 c0       	rjmp	.+46     	; 0x2f1e <mulacc+0x36>
    2ef0:	ab 01       	movw	r20, r22
    2ef2:	bc 01       	movw	r22, r24
    2ef4:	da 01       	movw	r26, r20
    2ef6:	fb 01       	movw	r30, r22
    2ef8:	aa 0f       	add	r26, r26
    2efa:	bb 1f       	adc	r27, r27
    2efc:	ee 1f       	adc	r30, r30
    2efe:	ff 1f       	adc	r31, r31
    2f00:	10 94       	com	r1
    2f02:	d1 f7       	brne	.-12     	; 0x2ef8 <mulacc+0x10>
    2f04:	4a 0f       	add	r20, r26
    2f06:	5b 1f       	adc	r21, r27
    2f08:	6e 1f       	adc	r22, r30
    2f0a:	7f 1f       	adc	r23, r31
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	ba 01       	movw	r22, r20
    2f10:	66 0f       	add	r22, r22
    2f12:	77 1f       	adc	r23, r23
    2f14:	88 1f       	adc	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	09 c0       	rjmp	.+18     	; 0x2f2c <mulacc+0x44>
    2f1a:	33 e0       	ldi	r19, 0x03	; 3
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <mulacc+0x38>
    2f1e:	34 e0       	ldi	r19, 0x04	; 4
    2f20:	66 0f       	add	r22, r22
    2f22:	77 1f       	adc	r23, r23
    2f24:	88 1f       	adc	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	31 50       	subi	r19, 0x01	; 1
    2f2a:	d1 f7       	brne	.-12     	; 0x2f20 <mulacc+0x38>
    2f2c:	62 0f       	add	r22, r18
    2f2e:	71 1d       	adc	r23, r1
    2f30:	81 1d       	adc	r24, r1
    2f32:	91 1d       	adc	r25, r1
    2f34:	08 95       	ret

00002f36 <skip_spaces>:
    2f36:	0f 93       	push	r16
    2f38:	1f 93       	push	r17
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	8c 01       	movw	r16, r24
    2f40:	c8 01       	movw	r24, r16
    2f42:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    2f46:	ec 01       	movw	r28, r24
    2f48:	97 fd       	sbrc	r25, 7
    2f4a:	08 c0       	rjmp	.+16     	; 0x2f5c <skip_spaces+0x26>
    2f4c:	0e 94 15 1a 	call	0x342a	; 0x342a <isspace>
    2f50:	89 2b       	or	r24, r25
    2f52:	b1 f7       	brne	.-20     	; 0x2f40 <skip_spaces+0xa>
    2f54:	b8 01       	movw	r22, r16
    2f56:	ce 01       	movw	r24, r28
    2f58:	0e 94 67 1a 	call	0x34ce	; 0x34ce <ungetc>
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	1f 91       	pop	r17
    2f64:	0f 91       	pop	r16
    2f66:	08 95       	ret

00002f68 <conv_int>:
    2f68:	8f 92       	push	r8
    2f6a:	9f 92       	push	r9
    2f6c:	af 92       	push	r10
    2f6e:	bf 92       	push	r11
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	8c 01       	movw	r16, r24
    2f7e:	d6 2f       	mov	r29, r22
    2f80:	7a 01       	movw	r14, r20
    2f82:	b2 2e       	mov	r11, r18
    2f84:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    2f88:	9c 01       	movw	r18, r24
    2f8a:	33 27       	eor	r19, r19
    2f8c:	2b 32       	cpi	r18, 0x2B	; 43
    2f8e:	31 05       	cpc	r19, r1
    2f90:	31 f0       	breq	.+12     	; 0x2f9e <conv_int+0x36>
    2f92:	2d 32       	cpi	r18, 0x2D	; 45
    2f94:	31 05       	cpc	r19, r1
    2f96:	61 f4       	brne	.+24     	; 0x2fb0 <conv_int+0x48>
    2f98:	8b 2d       	mov	r24, r11
    2f9a:	80 68       	ori	r24, 0x80	; 128
    2f9c:	b8 2e       	mov	r11, r24
    2f9e:	d1 50       	subi	r29, 0x01	; 1
    2fa0:	11 f4       	brne	.+4      	; 0x2fa6 <conv_int+0x3e>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	68 c0       	rjmp	.+208    	; 0x3076 <conv_int+0x10e>
    2fa6:	c8 01       	movw	r24, r16
    2fa8:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    2fac:	97 fd       	sbrc	r25, 7
    2fae:	f9 cf       	rjmp	.-14     	; 0x2fa2 <conv_int+0x3a>
    2fb0:	cb 2d       	mov	r28, r11
    2fb2:	cd 7f       	andi	r28, 0xFD	; 253
    2fb4:	2b 2d       	mov	r18, r11
    2fb6:	20 73       	andi	r18, 0x30	; 48
    2fb8:	09 f5       	brne	.+66     	; 0x2ffc <conv_int+0x94>
    2fba:	80 33       	cpi	r24, 0x30	; 48
    2fbc:	f9 f4       	brne	.+62     	; 0x2ffc <conv_int+0x94>
    2fbe:	aa 24       	eor	r10, r10
    2fc0:	aa 94       	dec	r10
    2fc2:	ad 0e       	add	r10, r29
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <conv_int+0x60>
    2fc6:	43 c0       	rjmp	.+134    	; 0x304e <conv_int+0xe6>
    2fc8:	c8 01       	movw	r24, r16
    2fca:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    2fce:	97 fd       	sbrc	r25, 7
    2fd0:	3e c0       	rjmp	.+124    	; 0x304e <conv_int+0xe6>
    2fd2:	9c 01       	movw	r18, r24
    2fd4:	2f 7d       	andi	r18, 0xDF	; 223
    2fd6:	33 27       	eor	r19, r19
    2fd8:	28 35       	cpi	r18, 0x58	; 88
    2fda:	31 05       	cpc	r19, r1
    2fdc:	49 f4       	brne	.+18     	; 0x2ff0 <conv_int+0x88>
    2fde:	c2 64       	ori	r28, 0x42	; 66
    2fe0:	d2 50       	subi	r29, 0x02	; 2
    2fe2:	a9 f1       	breq	.+106    	; 0x304e <conv_int+0xe6>
    2fe4:	c8 01       	movw	r24, r16
    2fe6:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    2fea:	97 ff       	sbrs	r25, 7
    2fec:	07 c0       	rjmp	.+14     	; 0x2ffc <conv_int+0x94>
    2fee:	2f c0       	rjmp	.+94     	; 0x304e <conv_int+0xe6>
    2ff0:	b6 fe       	sbrs	r11, 6
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <conv_int+0x90>
    2ff4:	c2 60       	ori	r28, 0x02	; 2
    2ff6:	01 c0       	rjmp	.+2      	; 0x2ffa <conv_int+0x92>
    2ff8:	c2 61       	ori	r28, 0x12	; 18
    2ffa:	da 2d       	mov	r29, r10
    2ffc:	81 2c       	mov	r8, r1
    2ffe:	91 2c       	mov	r9, r1
    3000:	54 01       	movw	r10, r8
    3002:	20 ed       	ldi	r18, 0xD0	; 208
    3004:	28 0f       	add	r18, r24
    3006:	28 30       	cpi	r18, 0x08	; 8
    3008:	80 f0       	brcs	.+32     	; 0x302a <conv_int+0xc2>
    300a:	c4 ff       	sbrs	r28, 4
    300c:	04 c0       	rjmp	.+8      	; 0x3016 <conv_int+0xae>
    300e:	b8 01       	movw	r22, r16
    3010:	0e 94 67 1a 	call	0x34ce	; 0x34ce <ungetc>
    3014:	19 c0       	rjmp	.+50     	; 0x3048 <conv_int+0xe0>
    3016:	2a 30       	cpi	r18, 0x0A	; 10
    3018:	40 f0       	brcs	.+16     	; 0x302a <conv_int+0xc2>
    301a:	c6 ff       	sbrs	r28, 6
    301c:	f8 cf       	rjmp	.-16     	; 0x300e <conv_int+0xa6>
    301e:	2f 7d       	andi	r18, 0xDF	; 223
    3020:	3f ee       	ldi	r19, 0xEF	; 239
    3022:	32 0f       	add	r19, r18
    3024:	36 30       	cpi	r19, 0x06	; 6
    3026:	98 f7       	brcc	.-26     	; 0x300e <conv_int+0xa6>
    3028:	27 50       	subi	r18, 0x07	; 7
    302a:	4c 2f       	mov	r20, r28
    302c:	c5 01       	movw	r24, r10
    302e:	b4 01       	movw	r22, r8
    3030:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <mulacc>
    3034:	4b 01       	movw	r8, r22
    3036:	5c 01       	movw	r10, r24
    3038:	c2 60       	ori	r28, 0x02	; 2
    303a:	d1 50       	subi	r29, 0x01	; 1
    303c:	59 f0       	breq	.+22     	; 0x3054 <conv_int+0xec>
    303e:	c8 01       	movw	r24, r16
    3040:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    3044:	97 ff       	sbrs	r25, 7
    3046:	dd cf       	rjmp	.-70     	; 0x3002 <conv_int+0x9a>
    3048:	c1 fd       	sbrc	r28, 1
    304a:	04 c0       	rjmp	.+8      	; 0x3054 <conv_int+0xec>
    304c:	aa cf       	rjmp	.-172    	; 0x2fa2 <conv_int+0x3a>
    304e:	81 2c       	mov	r8, r1
    3050:	91 2c       	mov	r9, r1
    3052:	54 01       	movw	r10, r8
    3054:	c7 ff       	sbrs	r28, 7
    3056:	08 c0       	rjmp	.+16     	; 0x3068 <conv_int+0x100>
    3058:	b0 94       	com	r11
    305a:	a0 94       	com	r10
    305c:	90 94       	com	r9
    305e:	80 94       	com	r8
    3060:	81 1c       	adc	r8, r1
    3062:	91 1c       	adc	r9, r1
    3064:	a1 1c       	adc	r10, r1
    3066:	b1 1c       	adc	r11, r1
    3068:	2c 2f       	mov	r18, r28
    306a:	b5 01       	movw	r22, r10
    306c:	a4 01       	movw	r20, r8
    306e:	c7 01       	movw	r24, r14
    3070:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <putval>
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	df 91       	pop	r29
    3078:	cf 91       	pop	r28
    307a:	1f 91       	pop	r17
    307c:	0f 91       	pop	r16
    307e:	ff 90       	pop	r15
    3080:	ef 90       	pop	r14
    3082:	bf 90       	pop	r11
    3084:	af 90       	pop	r10
    3086:	9f 90       	pop	r9
    3088:	8f 90       	pop	r8
    308a:	08 95       	ret

0000308c <conv_brk>:
    308c:	a0 e2       	ldi	r26, 0x20	; 32
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	ec e4       	ldi	r30, 0x4C	; 76
    3092:	f8 e1       	ldi	r31, 0x18	; 24
    3094:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__prologue_saves__+0x6>
    3098:	5c 01       	movw	r10, r24
    309a:	96 2e       	mov	r9, r22
    309c:	7a 01       	movw	r14, r20
    309e:	f9 01       	movw	r30, r18
    30a0:	8e 01       	movw	r16, r28
    30a2:	0f 5f       	subi	r16, 0xFF	; 255
    30a4:	1f 4f       	sbci	r17, 0xFF	; 255
    30a6:	68 01       	movw	r12, r16
    30a8:	80 e2       	ldi	r24, 0x20	; 32
    30aa:	d8 01       	movw	r26, r16
    30ac:	1d 92       	st	X+, r1
    30ae:	8a 95       	dec	r24
    30b0:	e9 f7       	brne	.-6      	; 0x30ac <conv_brk+0x20>
    30b2:	d5 01       	movw	r26, r10
    30b4:	13 96       	adiw	r26, 0x03	; 3
    30b6:	8c 90       	ld	r8, X
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	61 2c       	mov	r6, r1
    30be:	71 2c       	mov	r7, r1
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	83 fc       	sbrc	r8, 3
    30c8:	25 91       	lpm	r18, Z+
    30ca:	83 fe       	sbrs	r8, 3
    30cc:	21 91       	ld	r18, Z+
    30ce:	8f 01       	movw	r16, r30
    30d0:	52 2e       	mov	r5, r18
    30d2:	21 11       	cpse	r18, r1
    30d4:	03 c0       	rjmp	.+6      	; 0x30dc <conv_brk+0x50>
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	92 c0       	rjmp	.+292    	; 0x3200 <conv_brk+0x174>
    30dc:	2e 35       	cpi	r18, 0x5E	; 94
    30de:	11 f4       	brne	.+4      	; 0x30e4 <conv_brk+0x58>
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	51 f1       	breq	.+84     	; 0x3138 <conv_brk+0xac>
    30e4:	43 2f       	mov	r20, r19
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	48 17       	cp	r20, r24
    30ea:	59 07       	cpc	r21, r25
    30ec:	3c f4       	brge	.+14     	; 0x30fc <conv_brk+0x70>
    30ee:	2d 35       	cpi	r18, 0x5D	; 93
    30f0:	59 f1       	breq	.+86     	; 0x3148 <conv_brk+0xbc>
    30f2:	2d 32       	cpi	r18, 0x2D	; 45
    30f4:	19 f4       	brne	.+6      	; 0x30fc <conv_brk+0x70>
    30f6:	77 20       	and	r7, r7
    30f8:	09 f1       	breq	.+66     	; 0x313c <conv_brk+0xb0>
    30fa:	03 c0       	rjmp	.+6      	; 0x3102 <conv_brk+0x76>
    30fc:	77 20       	and	r7, r7
    30fe:	09 f4       	brne	.+2      	; 0x3102 <conv_brk+0x76>
    3100:	6a c0       	rjmp	.+212    	; 0x31d6 <conv_brk+0x14a>
    3102:	45 2d       	mov	r20, r5
    3104:	46 95       	lsr	r20
    3106:	46 95       	lsr	r20
    3108:	46 95       	lsr	r20
    310a:	d6 01       	movw	r26, r12
    310c:	a4 0f       	add	r26, r20
    310e:	b1 1d       	adc	r27, r1
    3110:	45 2d       	mov	r20, r5
    3112:	47 70       	andi	r20, 0x07	; 7
    3114:	8b 01       	movw	r16, r22
    3116:	02 c0       	rjmp	.+4      	; 0x311c <conv_brk+0x90>
    3118:	00 0f       	add	r16, r16
    311a:	11 1f       	adc	r17, r17
    311c:	4a 95       	dec	r20
    311e:	e2 f7       	brpl	.-8      	; 0x3118 <conv_brk+0x8c>
    3120:	a8 01       	movw	r20, r16
    3122:	5c 91       	ld	r21, X
    3124:	45 2b       	or	r20, r21
    3126:	4c 93       	st	X, r20
    3128:	65 14       	cp	r6, r5
    312a:	59 f0       	breq	.+22     	; 0x3142 <conv_brk+0xb6>
    312c:	56 14       	cp	r5, r6
    312e:	10 f4       	brcc	.+4      	; 0x3134 <conv_brk+0xa8>
    3130:	53 94       	inc	r5
    3132:	e7 cf       	rjmp	.-50     	; 0x3102 <conv_brk+0x76>
    3134:	5a 94       	dec	r5
    3136:	e5 cf       	rjmp	.-54     	; 0x3102 <conv_brk+0x76>
    3138:	31 e0       	ldi	r19, 0x01	; 1
    313a:	04 c0       	rjmp	.+8      	; 0x3144 <conv_brk+0xb8>
    313c:	77 24       	eor	r7, r7
    313e:	73 94       	inc	r7
    3140:	01 c0       	rjmp	.+2      	; 0x3144 <conv_brk+0xb8>
    3142:	71 2c       	mov	r7, r1
    3144:	01 96       	adiw	r24, 0x01	; 1
    3146:	bf cf       	rjmp	.-130    	; 0x30c6 <conv_brk+0x3a>
    3148:	77 20       	and	r7, r7
    314a:	19 f0       	breq	.+6      	; 0x3152 <conv_brk+0xc6>
    314c:	8e 81       	ldd	r24, Y+6	; 0x06
    314e:	80 62       	ori	r24, 0x20	; 32
    3150:	8e 83       	std	Y+6, r24	; 0x06
    3152:	31 11       	cpse	r19, r1
    3154:	03 c0       	rjmp	.+6      	; 0x315c <conv_brk+0xd0>
    3156:	88 24       	eor	r8, r8
    3158:	83 94       	inc	r8
    315a:	17 c0       	rjmp	.+46     	; 0x318a <conv_brk+0xfe>
    315c:	f6 01       	movw	r30, r12
    315e:	9e 01       	movw	r18, r28
    3160:	2f 5d       	subi	r18, 0xDF	; 223
    3162:	3f 4f       	sbci	r19, 0xFF	; 255
    3164:	80 81       	ld	r24, Z
    3166:	80 95       	com	r24
    3168:	81 93       	st	Z+, r24
    316a:	2e 17       	cp	r18, r30
    316c:	3f 07       	cpc	r19, r31
    316e:	d1 f7       	brne	.-12     	; 0x3164 <conv_brk+0xd8>
    3170:	f2 cf       	rjmp	.-28     	; 0x3156 <conv_brk+0xca>
    3172:	e1 14       	cp	r14, r1
    3174:	f1 04       	cpc	r15, r1
    3176:	29 f0       	breq	.+10     	; 0x3182 <conv_brk+0xf6>
    3178:	d7 01       	movw	r26, r14
    317a:	8c 93       	st	X, r24
    317c:	f7 01       	movw	r30, r14
    317e:	31 96       	adiw	r30, 0x01	; 1
    3180:	7f 01       	movw	r14, r30
    3182:	9a 94       	dec	r9
    3184:	81 2c       	mov	r8, r1
    3186:	99 20       	and	r9, r9
    3188:	f9 f0       	breq	.+62     	; 0x31c8 <conv_brk+0x13c>
    318a:	c5 01       	movw	r24, r10
    318c:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    3190:	97 fd       	sbrc	r25, 7
    3192:	18 c0       	rjmp	.+48     	; 0x31c4 <conv_brk+0x138>
    3194:	fc 01       	movw	r30, r24
    3196:	ff 27       	eor	r31, r31
    3198:	23 e0       	ldi	r18, 0x03	; 3
    319a:	f5 95       	asr	r31
    319c:	e7 95       	ror	r30
    319e:	2a 95       	dec	r18
    31a0:	e1 f7       	brne	.-8      	; 0x319a <conv_brk+0x10e>
    31a2:	ec 0d       	add	r30, r12
    31a4:	fd 1d       	adc	r31, r13
    31a6:	20 81       	ld	r18, Z
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	ac 01       	movw	r20, r24
    31ac:	47 70       	andi	r20, 0x07	; 7
    31ae:	55 27       	eor	r21, r21
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <conv_brk+0x12a>
    31b2:	35 95       	asr	r19
    31b4:	27 95       	ror	r18
    31b6:	4a 95       	dec	r20
    31b8:	e2 f7       	brpl	.-8      	; 0x31b2 <conv_brk+0x126>
    31ba:	20 fd       	sbrc	r18, 0
    31bc:	da cf       	rjmp	.-76     	; 0x3172 <conv_brk+0xe6>
    31be:	b5 01       	movw	r22, r10
    31c0:	0e 94 67 1a 	call	0x34ce	; 0x34ce <ungetc>
    31c4:	81 10       	cpse	r8, r1
    31c6:	87 cf       	rjmp	.-242    	; 0x30d6 <conv_brk+0x4a>
    31c8:	e1 14       	cp	r14, r1
    31ca:	f1 04       	cpc	r15, r1
    31cc:	11 f0       	breq	.+4      	; 0x31d2 <conv_brk+0x146>
    31ce:	d7 01       	movw	r26, r14
    31d0:	1c 92       	st	X, r1
    31d2:	c8 01       	movw	r24, r16
    31d4:	15 c0       	rjmp	.+42     	; 0x3200 <conv_brk+0x174>
    31d6:	42 2f       	mov	r20, r18
    31d8:	46 95       	lsr	r20
    31da:	46 95       	lsr	r20
    31dc:	46 95       	lsr	r20
    31de:	d6 01       	movw	r26, r12
    31e0:	a4 0f       	add	r26, r20
    31e2:	b1 1d       	adc	r27, r1
    31e4:	42 2f       	mov	r20, r18
    31e6:	47 70       	andi	r20, 0x07	; 7
    31e8:	8b 01       	movw	r16, r22
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <conv_brk+0x164>
    31ec:	00 0f       	add	r16, r16
    31ee:	11 1f       	adc	r17, r17
    31f0:	4a 95       	dec	r20
    31f2:	e2 f7       	brpl	.-8      	; 0x31ec <conv_brk+0x160>
    31f4:	a8 01       	movw	r20, r16
    31f6:	5c 91       	ld	r21, X
    31f8:	45 2b       	or	r20, r21
    31fa:	4c 93       	st	X, r20
    31fc:	62 2e       	mov	r6, r18
    31fe:	a2 cf       	rjmp	.-188    	; 0x3144 <conv_brk+0xb8>
    3200:	a0 96       	adiw	r28, 0x20	; 32
    3202:	ef e0       	ldi	r30, 0x0F	; 15
    3204:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__epilogue_restores__+0x6>

00003208 <vfscanf>:
    3208:	a0 e0       	ldi	r26, 0x00	; 0
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	ea e0       	ldi	r30, 0x0A	; 10
    320e:	f9 e1       	ldi	r31, 0x19	; 25
    3210:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__prologue_saves__+0x6>
    3214:	6c 01       	movw	r12, r24
    3216:	eb 01       	movw	r28, r22
    3218:	5a 01       	movw	r10, r20
    321a:	fc 01       	movw	r30, r24
    321c:	17 82       	std	Z+7, r1	; 0x07
    321e:	16 82       	std	Z+6, r1	; 0x06
    3220:	51 2c       	mov	r5, r1
    3222:	f6 01       	movw	r30, r12
    3224:	e3 80       	ldd	r14, Z+3	; 0x03
    3226:	fe 01       	movw	r30, r28
    3228:	e3 fc       	sbrc	r14, 3
    322a:	85 91       	lpm	r24, Z+
    322c:	e3 fe       	sbrs	r14, 3
    322e:	81 91       	ld	r24, Z+
    3230:	18 2f       	mov	r17, r24
    3232:	ef 01       	movw	r28, r30
    3234:	88 23       	and	r24, r24
    3236:	09 f4       	brne	.+2      	; 0x323a <vfscanf+0x32>
    3238:	ee c0       	rjmp	.+476    	; 0x3416 <vfscanf+0x20e>
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	0e 94 15 1a 	call	0x342a	; 0x342a <isspace>
    3240:	89 2b       	or	r24, r25
    3242:	21 f0       	breq	.+8      	; 0x324c <vfscanf+0x44>
    3244:	c6 01       	movw	r24, r12
    3246:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <skip_spaces>
    324a:	eb cf       	rjmp	.-42     	; 0x3222 <vfscanf+0x1a>
    324c:	15 32       	cpi	r17, 0x25	; 37
    324e:	41 f4       	brne	.+16     	; 0x3260 <vfscanf+0x58>
    3250:	fe 01       	movw	r30, r28
    3252:	e3 fc       	sbrc	r14, 3
    3254:	15 91       	lpm	r17, Z+
    3256:	e3 fe       	sbrs	r14, 3
    3258:	11 91       	ld	r17, Z+
    325a:	ef 01       	movw	r28, r30
    325c:	15 32       	cpi	r17, 0x25	; 37
    325e:	81 f4       	brne	.+32     	; 0x3280 <vfscanf+0x78>
    3260:	c6 01       	movw	r24, r12
    3262:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    3266:	97 fd       	sbrc	r25, 7
    3268:	d4 c0       	rjmp	.+424    	; 0x3412 <vfscanf+0x20a>
    326a:	41 2f       	mov	r20, r17
    326c:	50 e0       	ldi	r21, 0x00	; 0
    326e:	9c 01       	movw	r18, r24
    3270:	33 27       	eor	r19, r19
    3272:	24 17       	cp	r18, r20
    3274:	35 07       	cpc	r19, r21
    3276:	a9 f2       	breq	.-86     	; 0x3222 <vfscanf+0x1a>
    3278:	b6 01       	movw	r22, r12
    327a:	0e 94 67 1a 	call	0x34ce	; 0x34ce <ungetc>
    327e:	cb c0       	rjmp	.+406    	; 0x3416 <vfscanf+0x20e>
    3280:	1a 32       	cpi	r17, 0x2A	; 42
    3282:	39 f4       	brne	.+14     	; 0x3292 <vfscanf+0x8a>
    3284:	e3 fc       	sbrc	r14, 3
    3286:	15 91       	lpm	r17, Z+
    3288:	e3 fe       	sbrs	r14, 3
    328a:	11 91       	ld	r17, Z+
    328c:	ef 01       	movw	r28, r30
    328e:	01 e0       	ldi	r16, 0x01	; 1
    3290:	01 c0       	rjmp	.+2      	; 0x3294 <vfscanf+0x8c>
    3292:	00 e0       	ldi	r16, 0x00	; 0
    3294:	f1 2c       	mov	r15, r1
    3296:	20 ed       	ldi	r18, 0xD0	; 208
    3298:	21 0f       	add	r18, r17
    329a:	2a 30       	cpi	r18, 0x0A	; 10
    329c:	80 f4       	brcc	.+32     	; 0x32be <vfscanf+0xb6>
    329e:	02 60       	ori	r16, 0x02	; 2
    32a0:	6f 2d       	mov	r22, r15
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	40 e2       	ldi	r20, 0x20	; 32
    32aa:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <mulacc>
    32ae:	f6 2e       	mov	r15, r22
    32b0:	fe 01       	movw	r30, r28
    32b2:	e3 fc       	sbrc	r14, 3
    32b4:	15 91       	lpm	r17, Z+
    32b6:	e3 fe       	sbrs	r14, 3
    32b8:	11 91       	ld	r17, Z+
    32ba:	ef 01       	movw	r28, r30
    32bc:	ec cf       	rjmp	.-40     	; 0x3296 <vfscanf+0x8e>
    32be:	01 ff       	sbrs	r16, 1
    32c0:	03 c0       	rjmp	.+6      	; 0x32c8 <vfscanf+0xc0>
    32c2:	f1 10       	cpse	r15, r1
    32c4:	03 c0       	rjmp	.+6      	; 0x32cc <vfscanf+0xc4>
    32c6:	a7 c0       	rjmp	.+334    	; 0x3416 <vfscanf+0x20e>
    32c8:	ff 24       	eor	r15, r15
    32ca:	fa 94       	dec	r15
    32cc:	18 36       	cpi	r17, 0x68	; 104
    32ce:	19 f0       	breq	.+6      	; 0x32d6 <vfscanf+0xce>
    32d0:	1c 36       	cpi	r17, 0x6C	; 108
    32d2:	51 f0       	breq	.+20     	; 0x32e8 <vfscanf+0xe0>
    32d4:	10 c0       	rjmp	.+32     	; 0x32f6 <vfscanf+0xee>
    32d6:	fe 01       	movw	r30, r28
    32d8:	e3 fc       	sbrc	r14, 3
    32da:	15 91       	lpm	r17, Z+
    32dc:	e3 fe       	sbrs	r14, 3
    32de:	11 91       	ld	r17, Z+
    32e0:	ef 01       	movw	r28, r30
    32e2:	18 36       	cpi	r17, 0x68	; 104
    32e4:	41 f4       	brne	.+16     	; 0x32f6 <vfscanf+0xee>
    32e6:	08 60       	ori	r16, 0x08	; 8
    32e8:	04 60       	ori	r16, 0x04	; 4
    32ea:	fe 01       	movw	r30, r28
    32ec:	e3 fc       	sbrc	r14, 3
    32ee:	15 91       	lpm	r17, Z+
    32f0:	e3 fe       	sbrs	r14, 3
    32f2:	11 91       	ld	r17, Z+
    32f4:	ef 01       	movw	r28, r30
    32f6:	11 23       	and	r17, r17
    32f8:	09 f4       	brne	.+2      	; 0x32fc <vfscanf+0xf4>
    32fa:	8d c0       	rjmp	.+282    	; 0x3416 <vfscanf+0x20e>
    32fc:	61 2f       	mov	r22, r17
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	8e e1       	ldi	r24, 0x1E	; 30
    3302:	92 e0       	ldi	r25, 0x02	; 2
    3304:	0e 94 1e 1a 	call	0x343c	; 0x343c <strchr_P>
    3308:	89 2b       	or	r24, r25
    330a:	09 f4       	brne	.+2      	; 0x330e <vfscanf+0x106>
    330c:	84 c0       	rjmp	.+264    	; 0x3416 <vfscanf+0x20e>
    330e:	00 fd       	sbrc	r16, 0
    3310:	07 c0       	rjmp	.+14     	; 0x3320 <vfscanf+0x118>
    3312:	f5 01       	movw	r30, r10
    3314:	80 80       	ld	r8, Z
    3316:	91 80       	ldd	r9, Z+1	; 0x01
    3318:	c5 01       	movw	r24, r10
    331a:	02 96       	adiw	r24, 0x02	; 2
    331c:	5c 01       	movw	r10, r24
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <vfscanf+0x11c>
    3320:	81 2c       	mov	r8, r1
    3322:	91 2c       	mov	r9, r1
    3324:	1e 36       	cpi	r17, 0x6E	; 110
    3326:	51 f4       	brne	.+20     	; 0x333c <vfscanf+0x134>
    3328:	f6 01       	movw	r30, r12
    332a:	46 81       	ldd	r20, Z+6	; 0x06
    332c:	57 81       	ldd	r21, Z+7	; 0x07
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	70 e0       	ldi	r23, 0x00	; 0
    3332:	20 2f       	mov	r18, r16
    3334:	c4 01       	movw	r24, r8
    3336:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <putval>
    333a:	73 cf       	rjmp	.-282    	; 0x3222 <vfscanf+0x1a>
    333c:	13 36       	cpi	r17, 0x63	; 99
    333e:	a9 f4       	brne	.+42     	; 0x336a <vfscanf+0x162>
    3340:	01 fd       	sbrc	r16, 1
    3342:	02 c0       	rjmp	.+4      	; 0x3348 <vfscanf+0x140>
    3344:	ff 24       	eor	r15, r15
    3346:	f3 94       	inc	r15
    3348:	c6 01       	movw	r24, r12
    334a:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    334e:	97 fd       	sbrc	r25, 7
    3350:	60 c0       	rjmp	.+192    	; 0x3412 <vfscanf+0x20a>
    3352:	81 14       	cp	r8, r1
    3354:	91 04       	cpc	r9, r1
    3356:	29 f0       	breq	.+10     	; 0x3362 <vfscanf+0x15a>
    3358:	f4 01       	movw	r30, r8
    335a:	80 83       	st	Z, r24
    335c:	c4 01       	movw	r24, r8
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	4c 01       	movw	r8, r24
    3362:	fa 94       	dec	r15
    3364:	f1 10       	cpse	r15, r1
    3366:	f0 cf       	rjmp	.-32     	; 0x3348 <vfscanf+0x140>
    3368:	50 c0       	rjmp	.+160    	; 0x340a <vfscanf+0x202>
    336a:	1b 35       	cpi	r17, 0x5B	; 91
    336c:	59 f4       	brne	.+22     	; 0x3384 <vfscanf+0x17c>
    336e:	9e 01       	movw	r18, r28
    3370:	a4 01       	movw	r20, r8
    3372:	6f 2d       	mov	r22, r15
    3374:	c6 01       	movw	r24, r12
    3376:	0e 94 46 18 	call	0x308c	; 0x308c <conv_brk>
    337a:	ec 01       	movw	r28, r24
    337c:	89 2b       	or	r24, r25
    337e:	09 f0       	breq	.+2      	; 0x3382 <vfscanf+0x17a>
    3380:	44 c0       	rjmp	.+136    	; 0x340a <vfscanf+0x202>
    3382:	3e c0       	rjmp	.+124    	; 0x3400 <vfscanf+0x1f8>
    3384:	c6 01       	movw	r24, r12
    3386:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <skip_spaces>
    338a:	97 fd       	sbrc	r25, 7
    338c:	42 c0       	rjmp	.+132    	; 0x3412 <vfscanf+0x20a>
    338e:	1f 36       	cpi	r17, 0x6F	; 111
    3390:	61 f1       	breq	.+88     	; 0x33ea <vfscanf+0x1e2>
    3392:	28 f4       	brcc	.+10     	; 0x339e <vfscanf+0x196>
    3394:	14 36       	cpi	r17, 0x64	; 100
    3396:	39 f1       	breq	.+78     	; 0x33e6 <vfscanf+0x1de>
    3398:	19 36       	cpi	r17, 0x69	; 105
    339a:	51 f1       	breq	.+84     	; 0x33f0 <vfscanf+0x1e8>
    339c:	28 c0       	rjmp	.+80     	; 0x33ee <vfscanf+0x1e6>
    339e:	13 37       	cpi	r17, 0x73	; 115
    33a0:	71 f0       	breq	.+28     	; 0x33be <vfscanf+0x1b6>
    33a2:	15 37       	cpi	r17, 0x75	; 117
    33a4:	01 f1       	breq	.+64     	; 0x33e6 <vfscanf+0x1de>
    33a6:	23 c0       	rjmp	.+70     	; 0x33ee <vfscanf+0x1e6>
    33a8:	81 14       	cp	r8, r1
    33aa:	91 04       	cpc	r9, r1
    33ac:	29 f0       	breq	.+10     	; 0x33b8 <vfscanf+0x1b0>
    33ae:	f4 01       	movw	r30, r8
    33b0:	60 82       	st	Z, r6
    33b2:	c4 01       	movw	r24, r8
    33b4:	01 96       	adiw	r24, 0x01	; 1
    33b6:	4c 01       	movw	r8, r24
    33b8:	fa 94       	dec	r15
    33ba:	ff 20       	and	r15, r15
    33bc:	71 f0       	breq	.+28     	; 0x33da <vfscanf+0x1d2>
    33be:	c6 01       	movw	r24, r12
    33c0:	0e 94 29 1a 	call	0x3452	; 0x3452 <fgetc>
    33c4:	3c 01       	movw	r6, r24
    33c6:	97 fd       	sbrc	r25, 7
    33c8:	08 c0       	rjmp	.+16     	; 0x33da <vfscanf+0x1d2>
    33ca:	0e 94 15 1a 	call	0x342a	; 0x342a <isspace>
    33ce:	89 2b       	or	r24, r25
    33d0:	59 f3       	breq	.-42     	; 0x33a8 <vfscanf+0x1a0>
    33d2:	b6 01       	movw	r22, r12
    33d4:	c3 01       	movw	r24, r6
    33d6:	0e 94 67 1a 	call	0x34ce	; 0x34ce <ungetc>
    33da:	81 14       	cp	r8, r1
    33dc:	91 04       	cpc	r9, r1
    33de:	a9 f0       	breq	.+42     	; 0x340a <vfscanf+0x202>
    33e0:	f4 01       	movw	r30, r8
    33e2:	10 82       	st	Z, r1
    33e4:	12 c0       	rjmp	.+36     	; 0x340a <vfscanf+0x202>
    33e6:	00 62       	ori	r16, 0x20	; 32
    33e8:	03 c0       	rjmp	.+6      	; 0x33f0 <vfscanf+0x1e8>
    33ea:	00 61       	ori	r16, 0x10	; 16
    33ec:	01 c0       	rjmp	.+2      	; 0x33f0 <vfscanf+0x1e8>
    33ee:	00 64       	ori	r16, 0x40	; 64
    33f0:	20 2f       	mov	r18, r16
    33f2:	a4 01       	movw	r20, r8
    33f4:	6f 2d       	mov	r22, r15
    33f6:	c6 01       	movw	r24, r12
    33f8:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <conv_int>
    33fc:	81 11       	cpse	r24, r1
    33fe:	05 c0       	rjmp	.+10     	; 0x340a <vfscanf+0x202>
    3400:	f6 01       	movw	r30, r12
    3402:	83 81       	ldd	r24, Z+3	; 0x03
    3404:	80 73       	andi	r24, 0x30	; 48
    3406:	29 f4       	brne	.+10     	; 0x3412 <vfscanf+0x20a>
    3408:	06 c0       	rjmp	.+12     	; 0x3416 <vfscanf+0x20e>
    340a:	00 fd       	sbrc	r16, 0
    340c:	0a cf       	rjmp	.-492    	; 0x3222 <vfscanf+0x1a>
    340e:	53 94       	inc	r5
    3410:	08 cf       	rjmp	.-496    	; 0x3222 <vfscanf+0x1a>
    3412:	55 20       	and	r5, r5
    3414:	19 f0       	breq	.+6      	; 0x341c <vfscanf+0x214>
    3416:	85 2d       	mov	r24, r5
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <vfscanf+0x218>
    341c:	8f ef       	ldi	r24, 0xFF	; 255
    341e:	9f ef       	ldi	r25, 0xFF	; 255
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	ef e0       	ldi	r30, 0x0F	; 15
    3426:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__epilogue_restores__+0x6>

0000342a <isspace>:
    342a:	91 11       	cpse	r25, r1
    342c:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__ctype_isfalse>
    3430:	80 32       	cpi	r24, 0x20	; 32
    3432:	19 f0       	breq	.+6      	; 0x343a <isspace+0x10>
    3434:	89 50       	subi	r24, 0x09	; 9
    3436:	85 50       	subi	r24, 0x05	; 5
    3438:	c8 f7       	brcc	.-14     	; 0x342c <isspace+0x2>
    343a:	08 95       	ret

0000343c <strchr_P>:
    343c:	fc 01       	movw	r30, r24
    343e:	05 90       	lpm	r0, Z+
    3440:	06 16       	cp	r0, r22
    3442:	21 f0       	breq	.+8      	; 0x344c <strchr_P+0x10>
    3444:	00 20       	and	r0, r0
    3446:	d9 f7       	brne	.-10     	; 0x343e <strchr_P+0x2>
    3448:	c0 01       	movw	r24, r0
    344a:	08 95       	ret
    344c:	31 97       	sbiw	r30, 0x01	; 1
    344e:	cf 01       	movw	r24, r30
    3450:	08 95       	ret

00003452 <fgetc>:
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	ec 01       	movw	r28, r24
    3458:	2b 81       	ldd	r18, Y+3	; 0x03
    345a:	20 ff       	sbrs	r18, 0
    345c:	33 c0       	rjmp	.+102    	; 0x34c4 <fgetc+0x72>
    345e:	26 ff       	sbrs	r18, 6
    3460:	0a c0       	rjmp	.+20     	; 0x3476 <fgetc+0x24>
    3462:	2f 7b       	andi	r18, 0xBF	; 191
    3464:	2b 83       	std	Y+3, r18	; 0x03
    3466:	8e 81       	ldd	r24, Y+6	; 0x06
    3468:	9f 81       	ldd	r25, Y+7	; 0x07
    346a:	01 96       	adiw	r24, 0x01	; 1
    346c:	9f 83       	std	Y+7, r25	; 0x07
    346e:	8e 83       	std	Y+6, r24	; 0x06
    3470:	8a 81       	ldd	r24, Y+2	; 0x02
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	29 c0       	rjmp	.+82     	; 0x34c8 <fgetc+0x76>
    3476:	22 ff       	sbrs	r18, 2
    3478:	0f c0       	rjmp	.+30     	; 0x3498 <fgetc+0x46>
    347a:	e8 81       	ld	r30, Y
    347c:	f9 81       	ldd	r31, Y+1	; 0x01
    347e:	80 81       	ld	r24, Z
    3480:	08 2e       	mov	r0, r24
    3482:	00 0c       	add	r0, r0
    3484:	99 0b       	sbc	r25, r25
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	19 f4       	brne	.+6      	; 0x3490 <fgetc+0x3e>
    348a:	20 62       	ori	r18, 0x20	; 32
    348c:	2b 83       	std	Y+3, r18	; 0x03
    348e:	1a c0       	rjmp	.+52     	; 0x34c4 <fgetc+0x72>
    3490:	31 96       	adiw	r30, 0x01	; 1
    3492:	f9 83       	std	Y+1, r31	; 0x01
    3494:	e8 83       	st	Y, r30
    3496:	0e c0       	rjmp	.+28     	; 0x34b4 <fgetc+0x62>
    3498:	ea 85       	ldd	r30, Y+10	; 0x0a
    349a:	fb 85       	ldd	r31, Y+11	; 0x0b
    349c:	09 95       	icall
    349e:	97 ff       	sbrs	r25, 7
    34a0:	09 c0       	rjmp	.+18     	; 0x34b4 <fgetc+0x62>
    34a2:	2b 81       	ldd	r18, Y+3	; 0x03
    34a4:	01 96       	adiw	r24, 0x01	; 1
    34a6:	11 f0       	breq	.+4      	; 0x34ac <fgetc+0x5a>
    34a8:	80 e2       	ldi	r24, 0x20	; 32
    34aa:	01 c0       	rjmp	.+2      	; 0x34ae <fgetc+0x5c>
    34ac:	80 e1       	ldi	r24, 0x10	; 16
    34ae:	82 2b       	or	r24, r18
    34b0:	8b 83       	std	Y+3, r24	; 0x03
    34b2:	08 c0       	rjmp	.+16     	; 0x34c4 <fgetc+0x72>
    34b4:	2e 81       	ldd	r18, Y+6	; 0x06
    34b6:	3f 81       	ldd	r19, Y+7	; 0x07
    34b8:	2f 5f       	subi	r18, 0xFF	; 255
    34ba:	3f 4f       	sbci	r19, 0xFF	; 255
    34bc:	3f 83       	std	Y+7, r19	; 0x07
    34be:	2e 83       	std	Y+6, r18	; 0x06
    34c0:	99 27       	eor	r25, r25
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <fgetc+0x76>
    34c4:	8f ef       	ldi	r24, 0xFF	; 255
    34c6:	9f ef       	ldi	r25, 0xFF	; 255
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	08 95       	ret

000034ce <ungetc>:
    34ce:	fb 01       	movw	r30, r22
    34d0:	23 81       	ldd	r18, Z+3	; 0x03
    34d2:	20 ff       	sbrs	r18, 0
    34d4:	12 c0       	rjmp	.+36     	; 0x34fa <ungetc+0x2c>
    34d6:	26 fd       	sbrc	r18, 6
    34d8:	10 c0       	rjmp	.+32     	; 0x34fa <ungetc+0x2c>
    34da:	8f 3f       	cpi	r24, 0xFF	; 255
    34dc:	3f ef       	ldi	r19, 0xFF	; 255
    34de:	93 07       	cpc	r25, r19
    34e0:	61 f0       	breq	.+24     	; 0x34fa <ungetc+0x2c>
    34e2:	82 83       	std	Z+2, r24	; 0x02
    34e4:	2f 7d       	andi	r18, 0xDF	; 223
    34e6:	20 64       	ori	r18, 0x40	; 64
    34e8:	23 83       	std	Z+3, r18	; 0x03
    34ea:	26 81       	ldd	r18, Z+6	; 0x06
    34ec:	37 81       	ldd	r19, Z+7	; 0x07
    34ee:	21 50       	subi	r18, 0x01	; 1
    34f0:	31 09       	sbc	r19, r1
    34f2:	37 83       	std	Z+7, r19	; 0x07
    34f4:	26 83       	std	Z+6, r18	; 0x06
    34f6:	99 27       	eor	r25, r25
    34f8:	08 95       	ret
    34fa:	8f ef       	ldi	r24, 0xFF	; 255
    34fc:	9f ef       	ldi	r25, 0xFF	; 255
    34fe:	08 95       	ret

00003500 <__ctype_isfalse>:
    3500:	99 27       	eor	r25, r25
    3502:	88 27       	eor	r24, r24

00003504 <__ctype_istrue>:
    3504:	08 95       	ret

00003506 <_exit>:
    3506:	f8 94       	cli

00003508 <__stop_program>:
    3508:	ff cf       	rjmp	.-2      	; 0x3508 <__stop_program>
